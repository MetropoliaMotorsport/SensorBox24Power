
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080073dc  080073dc  000083dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080073fc  080073fc  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073fc  080073fc  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007404  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  2000000c  08007410  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007410  00009698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e49  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5f  00000000  00000000  0001ee85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000219e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7b  00000000  00000000  00022e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020728  00000000  00000000  00023d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001515f  00000000  00000000  000444ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da482  00000000  00000000  0005960a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00133ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00139134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080073c4 	.word	0x080073c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080073c4 	.word	0x080073c4

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim, uint16_t value){
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
	  TIM_OC_InitTypeDef sConfigOC;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000224:	2360      	movs	r3, #96	@ 0x60
 8000226:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = value;
 8000228:	887b      	ldrh	r3, [r7, #2]
 800022a:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f006 f8ad 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f005 fe59 	bl	8005efc <HAL_TIM_PWM_Start>
}
 800024a:	bf00      	nop
 800024c:	3728      	adds	r7, #40	@ 0x28
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <set_pwm_freq>:

void set_pwm_freq(TIM_HandleTypeDef *htim, uint16_t value){
 8000252:	b480      	push	{r7}
 8000254:	b083      	sub	sp, #12
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	460b      	mov	r3, r1
 800025c:	807b      	strh	r3, [r7, #2]

}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 800026e:	f000 f803 	bl	8000278 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <Config_1>:

void Config_1(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	CAN_ID = 17;
 800027c:	4b61      	ldr	r3, [pc, #388]	@ (8000404 <Config_1+0x18c>)
 800027e:	2211      	movs	r2, #17
 8000280:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 8000282:	4b61      	ldr	r3, [pc, #388]	@ (8000408 <Config_1+0x190>)
 8000284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000288:	801a      	strh	r2, [r3, #0]

	//OUTPUT 1 in mA
	WC[0] = 1900;
 800028a:	4b60      	ldr	r3, [pc, #384]	@ (800040c <Config_1+0x194>)
 800028c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000290:	801a      	strh	r2, [r3, #0]
	OC[0] = 2050;
 8000292:	4b5f      	ldr	r3, [pc, #380]	@ (8000410 <Config_1+0x198>)
 8000294:	f640 0202 	movw	r2, #2050	@ 0x802
 8000298:	801a      	strh	r2, [r3, #0]
	UC[0] = 00;
 800029a:	4b5e      	ldr	r3, [pc, #376]	@ (8000414 <Config_1+0x19c>)
 800029c:	2200      	movs	r2, #0
 800029e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC[1] = 1900;
 80002a0:	4b5a      	ldr	r3, [pc, #360]	@ (800040c <Config_1+0x194>)
 80002a2:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002a6:	805a      	strh	r2, [r3, #2]
	OC[1] = 2050;
 80002a8:	4b59      	ldr	r3, [pc, #356]	@ (8000410 <Config_1+0x198>)
 80002aa:	f640 0202 	movw	r2, #2050	@ 0x802
 80002ae:	805a      	strh	r2, [r3, #2]
	UC[1] = 00;
 80002b0:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <Config_1+0x19c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	WC[2] = 1900;
 80002b6:	4b55      	ldr	r3, [pc, #340]	@ (800040c <Config_1+0x194>)
 80002b8:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002bc:	809a      	strh	r2, [r3, #4]
	OC[2] = 2050;
 80002be:	4b54      	ldr	r3, [pc, #336]	@ (8000410 <Config_1+0x198>)
 80002c0:	f640 0202 	movw	r2, #2050	@ 0x802
 80002c4:	809a      	strh	r2, [r3, #4]
	UC[2] = 00;
 80002c6:	4b53      	ldr	r3, [pc, #332]	@ (8000414 <Config_1+0x19c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	WC[3] = 1900;
 80002cc:	4b4f      	ldr	r3, [pc, #316]	@ (800040c <Config_1+0x194>)
 80002ce:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002d2:	80da      	strh	r2, [r3, #6]
	OC[3] = 2050;
 80002d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000410 <Config_1+0x198>)
 80002d6:	f640 0202 	movw	r2, #2050	@ 0x802
 80002da:	80da      	strh	r2, [r3, #6]
	UC[3] = 00;
 80002dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000414 <Config_1+0x19c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	WC[4] = 1900;
 80002e2:	4b4a      	ldr	r3, [pc, #296]	@ (800040c <Config_1+0x194>)
 80002e4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002e8:	811a      	strh	r2, [r3, #8]
	OC[4] = 2050;
 80002ea:	4b49      	ldr	r3, [pc, #292]	@ (8000410 <Config_1+0x198>)
 80002ec:	f640 0202 	movw	r2, #2050	@ 0x802
 80002f0:	811a      	strh	r2, [r3, #8]
	UC[4] = 00;
 80002f2:	4b48      	ldr	r3, [pc, #288]	@ (8000414 <Config_1+0x19c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	WC[5] = 1900;
 80002f8:	4b44      	ldr	r3, [pc, #272]	@ (800040c <Config_1+0x194>)
 80002fa:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002fe:	815a      	strh	r2, [r3, #10]
	OC[5] = 2050;
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <Config_1+0x198>)
 8000302:	f640 0202 	movw	r2, #2050	@ 0x802
 8000306:	815a      	strh	r2, [r3, #10]
	UC[5] = 00;
 8000308:	4b42      	ldr	r3, [pc, #264]	@ (8000414 <Config_1+0x19c>)
 800030a:	2200      	movs	r2, #0
 800030c:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	WC[6] = 1900;
 800030e:	4b3f      	ldr	r3, [pc, #252]	@ (800040c <Config_1+0x194>)
 8000310:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000314:	819a      	strh	r2, [r3, #12]
	OC[6] = 2050;
 8000316:	4b3e      	ldr	r3, [pc, #248]	@ (8000410 <Config_1+0x198>)
 8000318:	f640 0202 	movw	r2, #2050	@ 0x802
 800031c:	819a      	strh	r2, [r3, #12]
	UC[6] = 00;
 800031e:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <Config_1+0x19c>)
 8000320:	2200      	movs	r2, #0
 8000322:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	WC[7] = 1900;
 8000324:	4b39      	ldr	r3, [pc, #228]	@ (800040c <Config_1+0x194>)
 8000326:	f240 726c 	movw	r2, #1900	@ 0x76c
 800032a:	81da      	strh	r2, [r3, #14]
	OC[7] = 2050;
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <Config_1+0x198>)
 800032e:	f640 0202 	movw	r2, #2050	@ 0x802
 8000332:	81da      	strh	r2, [r3, #14]
	UC[7] = 00;
 8000334:	4b37      	ldr	r3, [pc, #220]	@ (8000414 <Config_1+0x19c>)
 8000336:	2200      	movs	r2, #0
 8000338:	81da      	strh	r2, [r3, #14]

	//For analog node
	WC[8] = 2000;
 800033a:	4b34      	ldr	r3, [pc, #208]	@ (800040c <Config_1+0x194>)
 800033c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000340:	821a      	strh	r2, [r3, #16]
	OC[8] = 2000;
 8000342:	4b33      	ldr	r3, [pc, #204]	@ (8000410 <Config_1+0x198>)
 8000344:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000348:	821a      	strh	r2, [r3, #16]
	UC[8] = 0;
 800034a:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <Config_1+0x19c>)
 800034c:	2200      	movs	r2, #0
 800034e:	821a      	strh	r2, [r3, #16]

	Default_Switch_State = 0b11011111; //each bit represent one output [8,7,6,5,4,3,2,1]
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <Config_1+0x1a0>)
 8000352:	22df      	movs	r2, #223	@ 0xdf
 8000354:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 8000356:	4b31      	ldr	r3, [pc, #196]	@ (800041c <Config_1+0x1a4>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 800035c:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <Config_1+0x1a8>)
 800035e:	2200      	movs	r2, #0
 8000360:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 8000362:	4b2f      	ldr	r3, [pc, #188]	@ (8000420 <Config_1+0x1a8>)
 8000364:	2200      	movs	r2, #0
 8000366:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 8000368:	4b2c      	ldr	r3, [pc, #176]	@ (800041c <Config_1+0x1a4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00c      	beq.n	800038e <Config_1+0x116>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 8000374:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <Config_1+0x1a8>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	2364      	movs	r3, #100	@ 0x64
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <Config_1+0x1ac>)
 8000382:	fb92 f3f3 	sdiv	r3, r2, r3
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b27      	ldr	r3, [pc, #156]	@ (8000428 <Config_1+0x1b0>)
 800038a:	801a      	strh	r2, [r3, #0]
 800038c:	e002      	b.n	8000394 <Config_1+0x11c>
	}else{
		PWM_speed[0] = 0;
 800038e:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <Config_1+0x1b0>)
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 8000394:	4b21      	ldr	r3, [pc, #132]	@ (800041c <Config_1+0x1a4>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	085b      	lsrs	r3, r3, #1
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00c      	beq.n	80003ba <Config_1+0x142>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 80003a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <Config_1+0x1a8>)
 80003a2:	885b      	ldrh	r3, [r3, #2]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2364      	movs	r3, #100	@ 0x64
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000424 <Config_1+0x1ac>)
 80003ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <Config_1+0x1b0>)
 80003b6:	805a      	strh	r2, [r3, #2]
 80003b8:	e002      	b.n	80003c0 <Config_1+0x148>
	}else{
		PWM_speed[1] = 0;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <Config_1+0x1b0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <Config_1+0x1b4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 80003c6:	4b19      	ldr	r3, [pc, #100]	@ (800042c <Config_1+0x1b4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	805a      	strh	r2, [r3, #2]

	set_pwm_duty_cycle(&htim1,PWM_width[0]);
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <Config_1+0x1b4>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4817      	ldr	r0, [pc, #92]	@ (8000430 <Config_1+0x1b8>)
 80003d4:	f7ff ff20 	bl	8000218 <set_pwm_duty_cycle>
	set_pwm_duty_cycle(&htim2,PWM_width[1]);
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <Config_1+0x1b4>)
 80003da:	885b      	ldrh	r3, [r3, #2]
 80003dc:	4619      	mov	r1, r3
 80003de:	4815      	ldr	r0, [pc, #84]	@ (8000434 <Config_1+0x1bc>)
 80003e0:	f7ff ff1a 	bl	8000218 <set_pwm_duty_cycle>

	set_pwm_freq(&htim1,PWM_speed[0]);
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <Config_1+0x1b0>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	4811      	ldr	r0, [pc, #68]	@ (8000430 <Config_1+0x1b8>)
 80003ec:	f7ff ff31 	bl	8000252 <set_pwm_freq>
	set_pwm_freq(&htim2,PWM_speed[1]);
 80003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000428 <Config_1+0x1b0>)
 80003f2:	885b      	ldrh	r3, [r3, #2]
 80003f4:	4619      	mov	r1, r3
 80003f6:	480f      	ldr	r0, [pc, #60]	@ (8000434 <Config_1+0x1bc>)
 80003f8:	f7ff ff2b 	bl	8000252 <set_pwm_freq>

	output();
 80003fc:	f000 f8cc 	bl	8000598 <output>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000640 	.word	0x20000640
 8000408:	20000642 	.word	0x20000642
 800040c:	200005fc 	.word	0x200005fc
 8000410:	2000060c 	.word	0x2000060c
 8000414:	2000061c 	.word	0x2000061c
 8000418:	20000632 	.word	0x20000632
 800041c:	20000633 	.word	0x20000633
 8000420:	20000634 	.word	0x20000634
 8000424:	08f0d180 	.word	0x08f0d180
 8000428:	2000063c 	.word	0x2000063c
 800042c:	20000638 	.word	0x20000638
 8000430:	20000174 	.word	0x20000174
 8000434:	200001c0 	.word	0x200001c0

08000438 <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d01d      	beq.n	8000488 <HAL_FDCAN_RxFifo0Callback+0x50>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <HAL_FDCAN_RxFifo0Callback+0x58>)
 800044e:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000450:	2140      	movs	r1, #64	@ 0x40
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f003 fe9a 	bl	800418c <HAL_FDCAN_GetRxMessage>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800045e:	f001 faaf 	bl	80019c0 <Error_Handler>
 8000462:	e007      	b.n	8000474 <HAL_FDCAN_RxFifo0Callback+0x3c>
		}else{
			if(RxHeader.Identifier == CAN_ID){
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a0b      	ldr	r2, [pc, #44]	@ (8000498 <HAL_FDCAN_RxFifo0Callback+0x60>)
 800046a:	7812      	ldrb	r2, [r2, #0]
 800046c:	4293      	cmp	r3, r2
 800046e:	d101      	bne.n	8000474 <HAL_FDCAN_RxFifo0Callback+0x3c>
				decode();
 8000470:	f000 f936 	bl	80006e0 <decode>
			}
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f003 ffa1 	bl	80043c0 <HAL_FDCAN_ActivateNotification>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <HAL_FDCAN_RxFifo0Callback+0x50>
		{
			/* Notification Error */
			Error_Handler();
 8000484:	f001 fa9c 	bl	80019c0 <Error_Handler>
		}
	}
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028
 8000494:	20000668 	.word	0x20000668
 8000498:	20000640 	.word	0x20000640

0800049c <CanSend>:

void CanSend(uint8_t *TxData){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004a4:	e006      	b.n	80004b4 <CanSend+0x18>
		Error_Handler();
 80004a6:	f001 fa8b 	bl	80019c0 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2101      	movs	r1, #1
 80004ae:	480a      	ldr	r0, [pc, #40]	@ (80004d8 <CanSend+0x3c>)
 80004b0:	f004 fc4e 	bl	8004d50 <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004b4:	4809      	ldr	r0, [pc, #36]	@ (80004dc <CanSend+0x40>)
 80004b6:	f003 ff71 	bl	800439c <HAL_FDCAN_GetTxFifoFreeLevel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d007      	beq.n	80004d0 <CanSend+0x34>
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	4907      	ldr	r1, [pc, #28]	@ (80004e0 <CanSend+0x44>)
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <CanSend+0x40>)
 80004c6:	f003 fe1d 	bl	8004104 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1ea      	bne.n	80004a6 <CanSend+0xa>
	}
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400
 80004dc:	20000110 	.word	0x20000110
 80004e0:	20000644 	.word	0x20000644

080004e4 <CAN_switch_state>:

void CAN_switch_state(uint8_t values){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData1[5];
	uint8_t TxData2[5];

	if(can_select == 0){
 80004ee:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <CAN_switch_state+0xac>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d121      	bne.n	800053a <CAN_switch_state+0x56>
		TxData1[0] = 11;
 80004f6:	230b      	movs	r3, #11
 80004f8:	743b      	strb	r3, [r7, #16]
		for(int i = 1; i < 5;i++){
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
 80004fe:	e014      	b.n	800052a <CAN_switch_state+0x46>
			TxData1[i] = check_bit(Default_Switch_State,i-1);
 8000500:	4b24      	ldr	r3, [pc, #144]	@ (8000594 <CAN_switch_state+0xb0>)
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	3b01      	subs	r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4619      	mov	r1, r3
 800050e:	4610      	mov	r0, r2
 8000510:	f000 fd1e 	bl	8000f50 <check_bit>
 8000514:	4603      	mov	r3, r0
 8000516:	4619      	mov	r1, r3
 8000518:	f107 0210 	add.w	r2, r7, #16
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	4413      	add	r3, r2
 8000520:	460a      	mov	r2, r1
 8000522:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3301      	adds	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	2b04      	cmp	r3, #4
 800052e:	dde7      	ble.n	8000500 <CAN_switch_state+0x1c>
		}
		CanSend(TxData1);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffb1 	bl	800049c <CanSend>
	}
	if(can_select == 1){
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <CAN_switch_state+0xac>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d121      	bne.n	8000586 <CAN_switch_state+0xa2>
		TxData2[0] = 12;
 8000542:	230c      	movs	r3, #12
 8000544:	723b      	strb	r3, [r7, #8]
		for(int i = 1; i < 5;i++){
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
 800054a:	e014      	b.n	8000576 <CAN_switch_state+0x92>
			TxData2[i] = check_bit(Default_Switch_State,i+3);
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <CAN_switch_state+0xb0>)
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3303      	adds	r3, #3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	4610      	mov	r0, r2
 800055c:	f000 fcf8 	bl	8000f50 <check_bit>
 8000560:	4603      	mov	r3, r0
 8000562:	4619      	mov	r1, r3
 8000564:	f107 0208 	add.w	r2, r7, #8
 8000568:	69bb      	ldr	r3, [r7, #24]
 800056a:	4413      	add	r3, r2
 800056c:	460a      	mov	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	3301      	adds	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	2b04      	cmp	r3, #4
 800057a:	dde7      	ble.n	800054c <CAN_switch_state+0x68>
		}
		CanSend(TxData2);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff8b 	bl	800049c <CanSend>
	}
}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000062e 	.word	0x2000062e
 8000594:	20000632 	.word	0x20000632

08000598 <output>:



void output(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	e065      	b.n	8000678 <output+0xe0>
		bit = check_bit(Default_Switch_State, i);
 80005ac:	4b36      	ldr	r3, [pc, #216]	@ (8000688 <output+0xf0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	79fa      	ldrb	r2, [r7, #7]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fccb 	bl	8000f50 <check_bit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	71bb      	strb	r3, [r7, #6]
		switch(i){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d853      	bhi.n	800066c <output+0xd4>
 80005c4:	a201      	add	r2, pc, #4	@ (adr r2, 80005cc <output+0x34>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005ed 	.word	0x080005ed
 80005d0:	080005fb 	.word	0x080005fb
 80005d4:	0800060d 	.word	0x0800060d
 80005d8:	0800061f 	.word	0x0800061f
 80005dc:	08000631 	.word	0x08000631
 80005e0:	08000641 	.word	0x08000641
 80005e4:	08000651 	.word	0x08000651
 80005e8:	0800065f 	.word	0x0800065f
		case 0:
			HAL_GPIO_WritePin(GPIOB,IN0_Pin,bit);
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2108      	movs	r1, #8
 80005f2:	4826      	ldr	r0, [pc, #152]	@ (800068c <output+0xf4>)
 80005f4:	f004 fbac 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 80005f8:	e03b      	b.n	8000672 <output+0xda>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	461a      	mov	r2, r3
 80005fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f004 fba3 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800060a:	e032      	b.n	8000672 <output+0xda>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	461a      	mov	r2, r3
 8000610:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f004 fb9a 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800061c:	e029      	b.n	8000672 <output+0xda>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	461a      	mov	r2, r3
 8000622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f004 fb91 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800062e:	e020      	b.n	8000672 <output+0xda>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	461a      	mov	r2, r3
 8000634:	2110      	movs	r1, #16
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f004 fb89 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800063e:	e018      	b.n	8000672 <output+0xda>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	461a      	mov	r2, r3
 8000644:	2102      	movs	r1, #2
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f004 fb81 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800064e:	e010      	b.n	8000672 <output+0xda>
		case 6:
			HAL_GPIO_WritePin(GPIOB,IN2_2_Pin,bit);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	461a      	mov	r2, r3
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <output+0xf4>)
 8000658:	f004 fb7a 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800065c:	e009      	b.n	8000672 <output+0xda>
		case 7:
			HAL_GPIO_WritePin(GPIOB,IN3_2_Pin,bit);
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	461a      	mov	r2, r3
 8000662:	2110      	movs	r1, #16
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <output+0xf4>)
 8000666:	f004 fb73 	bl	8004d50 <HAL_GPIO_WritePin>
			break;
 800066a:	e002      	b.n	8000672 <output+0xda>
		default:
			Error_Handler();
 800066c:	f001 f9a8 	bl	80019c0 <Error_Handler>
			break;
 8000670:	bf00      	nop
	for(i = 0; i < 8;i++){
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b07      	cmp	r3, #7
 800067c:	d996      	bls.n	80005ac <output+0x14>
		}
	}
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000632 	.word	0x20000632
 800068c:	48000400 	.word	0x48000400

08000690 <Over_current>:

void Over_current(uint8_t output_pin){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <Over_current+0x24>)
 800069c:	220f      	movs	r2, #15
 800069e:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <Over_current+0x24>)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <Over_current+0x24>)
 80006a8:	f7ff fef8 	bl	800049c <CanSend>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000030 	.word	0x20000030

080006b8 <Warning_current>:

void Warning_current(uint8_t output_pin){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <Warning_current+0x24>)
 80006c4:	220e      	movs	r2, #14
 80006c6:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <Warning_current+0x24>)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <Warning_current+0x24>)
 80006d0:	f7ff fee4 	bl	800049c <CanSend>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000030 	.word	0x20000030

080006e0 <decode>:
	TxData[0] = 13;
	TxData[1] = output_pin;
	CanSend(TxData);
}

void decode(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 80006e4:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <decode+0xcc>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d050      	beq.n	800078e <decode+0xae>
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	dc57      	bgt.n	80007a0 <decode+0xc0>
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d002      	beq.n	80006fa <decode+0x1a>
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d03a      	beq.n	800076e <decode+0x8e>
 80006f8:	e052      	b.n	80007a0 <decode+0xc0>
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 80006fa:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <decode+0xcc>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d002      	beq.n	8000708 <decode+0x28>
 8000702:	2b02      	cmp	r3, #2
 8000704:	d018      	beq.n	8000738 <decode+0x58>
 8000706:	e02f      	b.n	8000768 <decode+0x88>
		case 1:										//PUMPS
			switch(RxData[2]){
 8000708:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <decode+0xcc>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d002      	beq.n	8000716 <decode+0x36>
 8000710:	2b02      	cmp	r3, #2
 8000712:	d007      	beq.n	8000724 <decode+0x44>
 8000714:	e00d      	b.n	8000732 <decode+0x52>
			case 1:
				set_pwm_duty_cycle(&htim1,RxData[3]);
 8000716:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <decode+0xcc>)
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	4619      	mov	r1, r3
 800071c:	4824      	ldr	r0, [pc, #144]	@ (80007b0 <decode+0xd0>)
 800071e:	f7ff fd7b 	bl	8000218 <set_pwm_duty_cycle>
				break;
 8000722:	e009      	b.n	8000738 <decode+0x58>
			case 2:
				set_pwm_freq(&htim1, RxData[3]);
 8000724:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <decode+0xcc>)
 8000726:	78db      	ldrb	r3, [r3, #3]
 8000728:	4619      	mov	r1, r3
 800072a:	4821      	ldr	r0, [pc, #132]	@ (80007b0 <decode+0xd0>)
 800072c:	f7ff fd91 	bl	8000252 <set_pwm_freq>
				break;
 8000730:	e002      	b.n	8000738 <decode+0x58>
			default:
				//decode_error();
				Error_Handler();
 8000732:	f001 f945 	bl	80019c0 <Error_Handler>
				break;
 8000736:	bf00      	nop
			}
		case 2:										//FANS
			switch(RxData[2]){
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <decode+0xcc>)
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d002      	beq.n	8000746 <decode+0x66>
 8000740:	2b02      	cmp	r3, #2
 8000742:	d007      	beq.n	8000754 <decode+0x74>
 8000744:	e00d      	b.n	8000762 <decode+0x82>
			case 1:
				set_pwm_duty_cycle(&htim2,RxData[3]);
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <decode+0xcc>)
 8000748:	78db      	ldrb	r3, [r3, #3]
 800074a:	4619      	mov	r1, r3
 800074c:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <decode+0xd4>)
 800074e:	f7ff fd63 	bl	8000218 <set_pwm_duty_cycle>
				break;
 8000752:	e009      	b.n	8000768 <decode+0x88>
			case 2:
				set_pwm_freq(&htim2, RxData[3]);
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <decode+0xcc>)
 8000756:	78db      	ldrb	r3, [r3, #3]
 8000758:	4619      	mov	r1, r3
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <decode+0xd4>)
 800075c:	f7ff fd79 	bl	8000252 <set_pwm_freq>
				break;
 8000760:	e002      	b.n	8000768 <decode+0x88>
			default:
				//decode_error();
				Error_Handler();
 8000762:	f001 f92d 	bl	80019c0 <Error_Handler>
				break;
 8000766:	bf00      	nop
			}
		default:
			//decode_error(); //TODO: IMPLEMENT
			Error_Handler();
 8000768:	f001 f92a 	bl	80019c0 <Error_Handler>
			break;
 800076c:	bf00      	nop
		}
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <decode+0xd8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <decode+0xcc>)
 8000774:	7851      	ldrb	r1, [r2, #1]
 8000776:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <decode+0xcc>)
 8000778:	7892      	ldrb	r2, [r2, #2]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fc04 	bl	8000f88 <set_bit>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <decode+0xd8>)
 8000786:	701a      	strb	r2, [r3, #0]
		output();
 8000788:	f7ff ff06 	bl	8000598 <output>
		break;
 800078c:	e00b      	b.n	80007a6 <decode+0xc6>
	case 3:
		HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,RxData[1]);
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <decode+0xcc>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	4808      	ldr	r0, [pc, #32]	@ (80007bc <decode+0xdc>)
 800079a:	f004 fad9 	bl	8004d50 <HAL_GPIO_WritePin>
		break;
 800079e:	e002      	b.n	80007a6 <decode+0xc6>
	default:
		Error_Handler();
 80007a0:	f001 f90e 	bl	80019c0 <Error_Handler>
		break;
 80007a4:	bf00      	nop
	}
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000028 	.word	0x20000028
 80007b0:	20000174 	.word	0x20000174
 80007b4:	200001c0 	.word	0x200001c0
 80007b8:	20000632 	.word	0x20000632
 80007bc:	48000400 	.word	0x48000400

080007c0 <CS_process>:



void CS_process(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	PROC[0] = IN1_1_CS[0];
 80007c6:	4b86      	ldr	r3, [pc, #536]	@ (80009e0 <CS_process+0x220>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	4b86      	ldr	r3, [pc, #536]	@ (80009e4 <CS_process+0x224>)
 80007cc:	801a      	strh	r2, [r3, #0]
	PROC[1] = IN2_1_CS[0];
 80007ce:	4b86      	ldr	r3, [pc, #536]	@ (80009e8 <CS_process+0x228>)
 80007d0:	881a      	ldrh	r2, [r3, #0]
 80007d2:	4b84      	ldr	r3, [pc, #528]	@ (80009e4 <CS_process+0x224>)
 80007d4:	805a      	strh	r2, [r3, #2]
	PROC[2] = IN3_1_CS[0];
 80007d6:	4b85      	ldr	r3, [pc, #532]	@ (80009ec <CS_process+0x22c>)
 80007d8:	881a      	ldrh	r2, [r3, #0]
 80007da:	4b82      	ldr	r3, [pc, #520]	@ (80009e4 <CS_process+0x224>)
 80007dc:	809a      	strh	r2, [r3, #4]
	PROC[3] = IN4_1_CS[0];
 80007de:	4b84      	ldr	r3, [pc, #528]	@ (80009f0 <CS_process+0x230>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	4b80      	ldr	r3, [pc, #512]	@ (80009e4 <CS_process+0x224>)
 80007e4:	80da      	strh	r2, [r3, #6]
	PROC[4] = IN1_2_CS[0];
 80007e6:	4b83      	ldr	r3, [pc, #524]	@ (80009f4 <CS_process+0x234>)
 80007e8:	881a      	ldrh	r2, [r3, #0]
 80007ea:	4b7e      	ldr	r3, [pc, #504]	@ (80009e4 <CS_process+0x224>)
 80007ec:	811a      	strh	r2, [r3, #8]
	PROC[5] = IN2_2_CS[0];
 80007ee:	4b82      	ldr	r3, [pc, #520]	@ (80009f8 <CS_process+0x238>)
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	4b7c      	ldr	r3, [pc, #496]	@ (80009e4 <CS_process+0x224>)
 80007f4:	815a      	strh	r2, [r3, #10]
	PROC[6] = IN3_2_CS[0];
 80007f6:	4b81      	ldr	r3, [pc, #516]	@ (80009fc <CS_process+0x23c>)
 80007f8:	881a      	ldrh	r2, [r3, #0]
 80007fa:	4b7a      	ldr	r3, [pc, #488]	@ (80009e4 <CS_process+0x224>)
 80007fc:	819a      	strh	r2, [r3, #12]
	PROC[7] = IN4_2_CS[0];
 80007fe:	4b80      	ldr	r3, [pc, #512]	@ (8000a00 <CS_process+0x240>)
 8000800:	881a      	ldrh	r2, [r3, #0]
 8000802:	4b78      	ldr	r3, [pc, #480]	@ (80009e4 <CS_process+0x224>)
 8000804:	81da      	strh	r2, [r3, #14]
	PROC[8] = Analog_CS[0];
 8000806:	4b7f      	ldr	r3, [pc, #508]	@ (8000a04 <CS_process+0x244>)
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b76      	ldr	r3, [pc, #472]	@ (80009e4 <CS_process+0x224>)
 800080c:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 800080e:	2301      	movs	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	e089      	b.n	8000928 <CS_process+0x168>
		PROC[0] = (PROC[0] + IN1_1_CS[i])/2;
 8000814:	4b73      	ldr	r3, [pc, #460]	@ (80009e4 <CS_process+0x224>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4a71      	ldr	r2, [pc, #452]	@ (80009e0 <CS_process+0x220>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000822:	440b      	add	r3, r1
 8000824:	0fda      	lsrs	r2, r3, #31
 8000826:	4413      	add	r3, r2
 8000828:	105b      	asrs	r3, r3, #1
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b6d      	ldr	r3, [pc, #436]	@ (80009e4 <CS_process+0x224>)
 800082e:	801a      	strh	r2, [r3, #0]
		PROC[1] = (PROC[1] + IN2_1_CS[i])/2;
 8000830:	4b6c      	ldr	r3, [pc, #432]	@ (80009e4 <CS_process+0x224>)
 8000832:	885b      	ldrh	r3, [r3, #2]
 8000834:	4619      	mov	r1, r3
 8000836:	4a6c      	ldr	r2, [pc, #432]	@ (80009e8 <CS_process+0x228>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083e:	440b      	add	r3, r1
 8000840:	0fda      	lsrs	r2, r3, #31
 8000842:	4413      	add	r3, r2
 8000844:	105b      	asrs	r3, r3, #1
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b66      	ldr	r3, [pc, #408]	@ (80009e4 <CS_process+0x224>)
 800084a:	805a      	strh	r2, [r3, #2]
		PROC[2] = (PROC[2] + IN3_1_CS[i])/2;
 800084c:	4b65      	ldr	r3, [pc, #404]	@ (80009e4 <CS_process+0x224>)
 800084e:	889b      	ldrh	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	4a66      	ldr	r2, [pc, #408]	@ (80009ec <CS_process+0x22c>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085a:	440b      	add	r3, r1
 800085c:	0fda      	lsrs	r2, r3, #31
 800085e:	4413      	add	r3, r2
 8000860:	105b      	asrs	r3, r3, #1
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b5f      	ldr	r3, [pc, #380]	@ (80009e4 <CS_process+0x224>)
 8000866:	809a      	strh	r2, [r3, #4]
		PROC[3] = (PROC[3] + IN4_1_CS[i])/2;
 8000868:	4b5e      	ldr	r3, [pc, #376]	@ (80009e4 <CS_process+0x224>)
 800086a:	88db      	ldrh	r3, [r3, #6]
 800086c:	4619      	mov	r1, r3
 800086e:	4a60      	ldr	r2, [pc, #384]	@ (80009f0 <CS_process+0x230>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	440b      	add	r3, r1
 8000878:	0fda      	lsrs	r2, r3, #31
 800087a:	4413      	add	r3, r2
 800087c:	105b      	asrs	r3, r3, #1
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b58      	ldr	r3, [pc, #352]	@ (80009e4 <CS_process+0x224>)
 8000882:	80da      	strh	r2, [r3, #6]
		PROC[4] = (PROC[4] + IN1_2_CS[i])/2;
 8000884:	4b57      	ldr	r3, [pc, #348]	@ (80009e4 <CS_process+0x224>)
 8000886:	891b      	ldrh	r3, [r3, #8]
 8000888:	4619      	mov	r1, r3
 800088a:	4a5a      	ldr	r2, [pc, #360]	@ (80009f4 <CS_process+0x234>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000892:	440b      	add	r3, r1
 8000894:	0fda      	lsrs	r2, r3, #31
 8000896:	4413      	add	r3, r2
 8000898:	105b      	asrs	r3, r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b51      	ldr	r3, [pc, #324]	@ (80009e4 <CS_process+0x224>)
 800089e:	811a      	strh	r2, [r3, #8]
		PROC[5] = (PROC[5] + IN2_2_CS[i])/2;
 80008a0:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <CS_process+0x224>)
 80008a2:	895b      	ldrh	r3, [r3, #10]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4a54      	ldr	r2, [pc, #336]	@ (80009f8 <CS_process+0x238>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	440b      	add	r3, r1
 80008b0:	0fda      	lsrs	r2, r3, #31
 80008b2:	4413      	add	r3, r2
 80008b4:	105b      	asrs	r3, r3, #1
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b4a      	ldr	r3, [pc, #296]	@ (80009e4 <CS_process+0x224>)
 80008ba:	815a      	strh	r2, [r3, #10]
		PROC[6] = (PROC[6] + IN3_2_CS[i])/2;
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <CS_process+0x224>)
 80008be:	899b      	ldrh	r3, [r3, #12]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4a4e      	ldr	r2, [pc, #312]	@ (80009fc <CS_process+0x23c>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ca:	440b      	add	r3, r1
 80008cc:	0fda      	lsrs	r2, r3, #31
 80008ce:	4413      	add	r3, r2
 80008d0:	105b      	asrs	r3, r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <CS_process+0x224>)
 80008d6:	819a      	strh	r2, [r3, #12]
		PROC[7] = (PROC[7] + IN4_2_CS[i])/2;
 80008d8:	4b42      	ldr	r3, [pc, #264]	@ (80009e4 <CS_process+0x224>)
 80008da:	89db      	ldrh	r3, [r3, #14]
 80008dc:	4619      	mov	r1, r3
 80008de:	4a48      	ldr	r2, [pc, #288]	@ (8000a00 <CS_process+0x240>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e6:	440b      	add	r3, r1
 80008e8:	0fda      	lsrs	r2, r3, #31
 80008ea:	4413      	add	r3, r2
 80008ec:	105b      	asrs	r3, r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b3c      	ldr	r3, [pc, #240]	@ (80009e4 <CS_process+0x224>)
 80008f2:	81da      	strh	r2, [r3, #14]
		if(i % 2 == 0){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d111      	bne.n	8000922 <CS_process+0x162>
			PROC[8] = (PROC[8] + Analog_CS[i/2])/2;
 80008fe:	4b39      	ldr	r3, [pc, #228]	@ (80009e4 <CS_process+0x224>)
 8000900:	8a1b      	ldrh	r3, [r3, #16]
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0fda      	lsrs	r2, r3, #31
 8000908:	4413      	add	r3, r2
 800090a:	105b      	asrs	r3, r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <CS_process+0x244>)
 8000910:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000914:	440b      	add	r3, r1
 8000916:	0fda      	lsrs	r2, r3, #31
 8000918:	4413      	add	r3, r2
 800091a:	105b      	asrs	r3, r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <CS_process+0x224>)
 8000920:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b1f      	cmp	r3, #31
 800092c:	f77f af72 	ble.w	8000814 <CS_process+0x54>
		}
	}
	PROC[0] = CS_Raw_to_mA(PROC[0]);
 8000930:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <CS_process+0x224>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fb4d 	bl	8000fd4 <CS_Raw_to_mA>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <CS_process+0x224>)
 8000940:	801a      	strh	r2, [r3, #0]
	PROC[1] = CS_Raw_to_mA(PROC[1]);
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <CS_process+0x224>)
 8000944:	885b      	ldrh	r3, [r3, #2]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fb44 	bl	8000fd4 <CS_Raw_to_mA>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <CS_process+0x224>)
 8000952:	805a      	strh	r2, [r3, #2]
	PROC[2] = CS_Raw_to_mA(PROC[2]);
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <CS_process+0x224>)
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fb3b 	bl	8000fd4 <CS_Raw_to_mA>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <CS_process+0x224>)
 8000964:	809a      	strh	r2, [r3, #4]
	PROC[3] = CS_Raw_to_mA(PROC[3]);
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <CS_process+0x224>)
 8000968:	88db      	ldrh	r3, [r3, #6]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fb32 	bl	8000fd4 <CS_Raw_to_mA>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <CS_process+0x224>)
 8000976:	80da      	strh	r2, [r3, #6]
	PROC[4] = CS_Raw_to_mA(PROC[4]);
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <CS_process+0x224>)
 800097a:	891b      	ldrh	r3, [r3, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fb29 	bl	8000fd4 <CS_Raw_to_mA>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <CS_process+0x224>)
 8000988:	811a      	strh	r2, [r3, #8]
	PROC[5] = CS_Raw_to_mA(PROC[5]);
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <CS_process+0x224>)
 800098c:	895b      	ldrh	r3, [r3, #10]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fb20 	bl	8000fd4 <CS_Raw_to_mA>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <CS_process+0x224>)
 800099a:	815a      	strh	r2, [r3, #10]
	PROC[6] = CS_Raw_to_mA(PROC[6]);
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <CS_process+0x224>)
 800099e:	899b      	ldrh	r3, [r3, #12]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fb17 	bl	8000fd4 <CS_Raw_to_mA>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <CS_process+0x224>)
 80009ac:	819a      	strh	r2, [r3, #12]
	PROC[7] = CS_Raw_to_mA(PROC[7]);
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <CS_process+0x224>)
 80009b0:	89db      	ldrh	r3, [r3, #14]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fb0e 	bl	8000fd4 <CS_Raw_to_mA>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <CS_process+0x224>)
 80009be:	81da      	strh	r2, [r3, #14]
	PROC[8] = CS_Raw_to_mA(PROC[8]);
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <CS_process+0x224>)
 80009c2:	8a1b      	ldrh	r3, [r3, #16]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fb05 	bl	8000fd4 <CS_Raw_to_mA>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <CS_process+0x224>)
 80009d0:	821a      	strh	r2, [r3, #16]
	check_warnings();
 80009d2:	f000 f819 	bl	8000a08 <check_warnings>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000388 	.word	0x20000388
 80009e4:	200005e8 	.word	0x200005e8
 80009e8:	200003c8 	.word	0x200003c8
 80009ec:	20000408 	.word	0x20000408
 80009f0:	20000448 	.word	0x20000448
 80009f4:	20000488 	.word	0x20000488
 80009f8:	200004c8 	.word	0x200004c8
 80009fc:	20000508 	.word	0x20000508
 8000a00:	20000548 	.word	0x20000548
 8000a04:	200005c8 	.word	0x200005c8

08000a08 <check_warnings>:

void check_warnings(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e02a      	b.n	8000a6a <check_warnings+0x62>
		if(PROC[x] >= WC[x]){
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a26      	ldr	r2, [pc, #152]	@ (8000ab0 <check_warnings+0xa8>)
 8000a18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4925      	ldr	r1, [pc, #148]	@ (8000ab4 <check_warnings+0xac>)
 8000a20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d31d      	bcc.n	8000a64 <check_warnings+0x5c>
			if(PROC[x] >= OC[x]){
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <check_warnings+0xa8>)
 8000a2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4921      	ldr	r1, [pc, #132]	@ (8000ab8 <check_warnings+0xb0>)
 8000a34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d30f      	bcc.n	8000a5c <check_warnings+0x54>
				Default_Switch_State = set_bit(Default_Switch_State, x, 0);
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <check_warnings+0xb4>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	79f9      	ldrb	r1, [r7, #7]
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fa9f 	bl	8000f88 <set_bit>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <check_warnings+0xb4>)
 8000a50:	701a      	strb	r2, [r3, #0]
				Over_current(x);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fe1b 	bl	8000690 <Over_current>
 8000a5a:	e003      	b.n	8000a64 <check_warnings+0x5c>
			}else{
				Warning_current(x);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe2a 	bl	80006b8 <Warning_current>
	for(uint8_t x = 0; x < 7; x++){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3301      	adds	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d9d1      	bls.n	8000a14 <check_warnings+0xc>
		}
	/*	if(PROC[x] < UC[x]){
			Under_current(x);
		}*/
	}
	if(PROC[8] >= WC[8]){
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <check_warnings+0xa8>)
 8000a72:	8a1a      	ldrh	r2, [r3, #16]
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <check_warnings+0xac>)
 8000a76:	8a1b      	ldrh	r3, [r3, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d312      	bcc.n	8000aa2 <check_warnings+0x9a>
		if(PROC[8] >= OC[8]){
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <check_warnings+0xa8>)
 8000a7e:	8a1a      	ldrh	r2, [r3, #16]
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <check_warnings+0xb0>)
 8000a82:	8a1b      	ldrh	r3, [r3, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d309      	bcc.n	8000a9c <check_warnings+0x94>
			Over_current(8);
 8000a88:	2008      	movs	r0, #8
 8000a8a:	f7ff fe01 	bl	8000690 <Over_current>
			HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a94:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <check_warnings+0xb8>)
 8000a96:	f004 f95b 	bl	8004d50 <HAL_GPIO_WritePin>
 8000a9a:	e002      	b.n	8000aa2 <check_warnings+0x9a>
		}else{
			Warning_current(8);
 8000a9c:	2008      	movs	r0, #8
 8000a9e:	f7ff fe0b 	bl	80006b8 <Warning_current>
		}
	}
	/*if(PROC[8] < UC[8]){
		Under_current(8);
	}*/
	output();
 8000aa2:	f7ff fd79 	bl	8000598 <output>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200005e8 	.word	0x200005e8
 8000ab4:	200005fc 	.word	0x200005fc
 8000ab8:	2000060c 	.word	0x2000060c
 8000abc:	20000632 	.word	0x20000632
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <CS_read>:

void CS_read(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
	for(int x = 0; x < 5; x++){
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	e226      	b.n	8000f1e <CS_read+0x45a>
		switch(x){
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	f200 8220 	bhi.w	8000f18 <CS_read+0x454>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <CS_read+0x1c>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	08000bb9 	.word	0x08000bb9
 8000ae8:	08000c7d 	.word	0x08000c7d
 8000aec:	08000d41 	.word	0x08000d41
 8000af0:	08000e2f 	.word	0x08000e2f
		case 0:
			//chip_select_read();
			CS_SEL[0] = 0;
 8000af4:	4b9e      	ldr	r3, [pc, #632]	@ (8000d70 <CS_read+0x2ac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000afa:	4b9d      	ldr	r3, [pc, #628]	@ (8000d70 <CS_read+0x2ac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000b00:	4b9b      	ldr	r3, [pc, #620]	@ (8000d70 <CS_read+0x2ac>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	2140      	movs	r1, #64	@ 0x40
 8000b08:	489a      	ldr	r0, [pc, #616]	@ (8000d74 <CS_read+0x2b0>)
 8000b0a:	f004 f921 	bl	8004d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000b0e:	4b98      	ldr	r3, [pc, #608]	@ (8000d70 <CS_read+0x2ac>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2120      	movs	r1, #32
 8000b16:	4897      	ldr	r0, [pc, #604]	@ (8000d74 <CS_read+0x2b0>)
 8000b18:	f004 f91a 	bl	8004d50 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	e046      	b.n	8000bb0 <CS_read+0xec>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000b22:	4895      	ldr	r0, [pc, #596]	@ (8000d78 <CS_read+0x2b4>)
 8000b24:	f001 fec0 	bl	80028a8 <HAL_ADC_Start>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <CS_read+0x6e>
 8000b2e:	f000 ff47 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000b32:	4892      	ldr	r0, [pc, #584]	@ (8000d7c <CS_read+0x2b8>)
 8000b34:	f001 feb8 	bl	80028a8 <HAL_ADC_Start>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <CS_read+0x7e>
 8000b3e:	f000 ff3f 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000b42:	2164      	movs	r1, #100	@ 0x64
 8000b44:	488c      	ldr	r0, [pc, #560]	@ (8000d78 <CS_read+0x2b4>)
 8000b46:	f001 ff9f 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <CS_read+0x90>
 8000b50:	f000 ff36 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000b54:	2164      	movs	r1, #100	@ 0x64
 8000b56:	4889      	ldr	r0, [pc, #548]	@ (8000d7c <CS_read+0x2b8>)
 8000b58:	f001 ff96 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <CS_read+0xa2>
 8000b62:	f000 ff2d 	bl	80019c0 <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000b66:	4884      	ldr	r0, [pc, #528]	@ (8000d78 <CS_read+0x2b4>)
 8000b68:	f002 f9d1 	bl	8002f0e <HAL_ADC_GetValue>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	4a83      	ldr	r2, [pc, #524]	@ (8000d80 <CS_read+0x2bc>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000b78:	4880      	ldr	r0, [pc, #512]	@ (8000d7c <CS_read+0x2b8>)
 8000b7a:	f002 f9c8 	bl	8002f0e <HAL_ADC_GetValue>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b299      	uxth	r1, r3
 8000b82:	4a80      	ldr	r2, [pc, #512]	@ (8000d84 <CS_read+0x2c0>)
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000b8a:	487b      	ldr	r0, [pc, #492]	@ (8000d78 <CS_read+0x2b4>)
 8000b8c:	f001 ff48 	bl	8002a20 <HAL_ADC_Stop>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <CS_read+0xd6>
 8000b96:	f000 ff13 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000b9a:	4878      	ldr	r0, [pc, #480]	@ (8000d7c <CS_read+0x2b8>)
 8000b9c:	f001 ff40 	bl	8002a20 <HAL_ADC_Stop>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <CS_read+0xe6>
 8000ba6:	f000 ff0b 	bl	80019c0 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	ddb5      	ble.n	8000b22 <CS_read+0x5e>
			}
			break;
 8000bb6:	e1af      	b.n	8000f18 <CS_read+0x454>
		case 1:
			//chip_select_read();
			CS_SEL[0] = 0;
 8000bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8000d70 <CS_read+0x2ac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8000d70 <CS_read+0x2ac>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d70 <CS_read+0x2ac>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2140      	movs	r1, #64	@ 0x40
 8000bcc:	4869      	ldr	r0, [pc, #420]	@ (8000d74 <CS_read+0x2b0>)
 8000bce:	f004 f8bf 	bl	8004d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000bd2:	4b67      	ldr	r3, [pc, #412]	@ (8000d70 <CS_read+0x2ac>)
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4866      	ldr	r0, [pc, #408]	@ (8000d74 <CS_read+0x2b0>)
 8000bdc:	f004 f8b8 	bl	8004d50 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e046      	b.n	8000c74 <CS_read+0x1b0>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000be6:	4864      	ldr	r0, [pc, #400]	@ (8000d78 <CS_read+0x2b4>)
 8000be8:	f001 fe5e 	bl	80028a8 <HAL_ADC_Start>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <CS_read+0x132>
 8000bf2:	f000 fee5 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000bf6:	4861      	ldr	r0, [pc, #388]	@ (8000d7c <CS_read+0x2b8>)
 8000bf8:	f001 fe56 	bl	80028a8 <HAL_ADC_Start>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <CS_read+0x142>
 8000c02:	f000 fedd 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000c06:	2164      	movs	r1, #100	@ 0x64
 8000c08:	485b      	ldr	r0, [pc, #364]	@ (8000d78 <CS_read+0x2b4>)
 8000c0a:	f001 ff3d 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <CS_read+0x154>
 8000c14:	f000 fed4 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000c18:	2164      	movs	r1, #100	@ 0x64
 8000c1a:	4858      	ldr	r0, [pc, #352]	@ (8000d7c <CS_read+0x2b8>)
 8000c1c:	f001 ff34 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <CS_read+0x166>
 8000c26:	f000 fecb 	bl	80019c0 <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000c2a:	4853      	ldr	r0, [pc, #332]	@ (8000d78 <CS_read+0x2b4>)
 8000c2c:	f002 f96f 	bl	8002f0e <HAL_ADC_GetValue>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b299      	uxth	r1, r3
 8000c34:	4a54      	ldr	r2, [pc, #336]	@ (8000d88 <CS_read+0x2c4>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000c3c:	484f      	ldr	r0, [pc, #316]	@ (8000d7c <CS_read+0x2b8>)
 8000c3e:	f002 f966 	bl	8002f0e <HAL_ADC_GetValue>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b299      	uxth	r1, r3
 8000c46:	4a51      	ldr	r2, [pc, #324]	@ (8000d8c <CS_read+0x2c8>)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000c4e:	484a      	ldr	r0, [pc, #296]	@ (8000d78 <CS_read+0x2b4>)
 8000c50:	f001 fee6 	bl	8002a20 <HAL_ADC_Stop>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <CS_read+0x19a>
 8000c5a:	f000 feb1 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000c5e:	4847      	ldr	r0, [pc, #284]	@ (8000d7c <CS_read+0x2b8>)
 8000c60:	f001 fede 	bl	8002a20 <HAL_ADC_Stop>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <CS_read+0x1aa>
 8000c6a:	f000 fea9 	bl	80019c0 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b1f      	cmp	r3, #31
 8000c78:	ddb5      	ble.n	8000be6 <CS_read+0x122>
			}
			break;
 8000c7a:	e14d      	b.n	8000f18 <CS_read+0x454>
		case 2:
			//chip_select_read();
			CS_SEL[0] = 1;
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <CS_read+0x2ac>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <CS_read+0x2ac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000c88:	4b39      	ldr	r3, [pc, #228]	@ (8000d70 <CS_read+0x2ac>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2140      	movs	r1, #64	@ 0x40
 8000c90:	4838      	ldr	r0, [pc, #224]	@ (8000d74 <CS_read+0x2b0>)
 8000c92:	f004 f85d 	bl	8004d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000c96:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <CS_read+0x2ac>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4835      	ldr	r0, [pc, #212]	@ (8000d74 <CS_read+0x2b0>)
 8000ca0:	f004 f856 	bl	8004d50 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	e046      	b.n	8000d38 <CS_read+0x274>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000caa:	4833      	ldr	r0, [pc, #204]	@ (8000d78 <CS_read+0x2b4>)
 8000cac:	f001 ffc4 	bl	8002c38 <HAL_ADC_Start_IT>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <CS_read+0x1f6>
 8000cb6:	f000 fe83 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000cba:	4830      	ldr	r0, [pc, #192]	@ (8000d7c <CS_read+0x2b8>)
 8000cbc:	f001 ffbc 	bl	8002c38 <HAL_ADC_Start_IT>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <CS_read+0x206>
 8000cc6:	f000 fe7b 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000cca:	2164      	movs	r1, #100	@ 0x64
 8000ccc:	482a      	ldr	r0, [pc, #168]	@ (8000d78 <CS_read+0x2b4>)
 8000cce:	f001 fedb 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <CS_read+0x218>
 8000cd8:	f000 fe72 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000cdc:	2164      	movs	r1, #100	@ 0x64
 8000cde:	4827      	ldr	r0, [pc, #156]	@ (8000d7c <CS_read+0x2b8>)
 8000ce0:	f001 fed2 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <CS_read+0x22a>
 8000cea:	f000 fe69 	bl	80019c0 <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000cee:	4822      	ldr	r0, [pc, #136]	@ (8000d78 <CS_read+0x2b4>)
 8000cf0:	f002 f90d 	bl	8002f0e <HAL_ADC_GetValue>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <CS_read+0x2cc>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000d00:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <CS_read+0x2b8>)
 8000d02:	f002 f904 	bl	8002f0e <HAL_ADC_GetValue>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <CS_read+0x2d0>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d12:	4819      	ldr	r0, [pc, #100]	@ (8000d78 <CS_read+0x2b4>)
 8000d14:	f002 f8c0 	bl	8002e98 <HAL_ADC_Stop_IT>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <CS_read+0x25e>
 8000d1e:	f000 fe4f 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d22:	4816      	ldr	r0, [pc, #88]	@ (8000d7c <CS_read+0x2b8>)
 8000d24:	f002 f8b8 	bl	8002e98 <HAL_ADC_Stop_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <CS_read+0x26e>
 8000d2e:	f000 fe47 	bl	80019c0 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3301      	adds	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	2b1f      	cmp	r3, #31
 8000d3c:	ddb5      	ble.n	8000caa <CS_read+0x1e6>
			}
			break;
 8000d3e:	e0eb      	b.n	8000f18 <CS_read+0x454>
		case 3:
			//chip_select_read();
			CS_SEL[0] = 1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <CS_read+0x2ac>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <CS_read+0x2ac>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <CS_read+0x2ac>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	2140      	movs	r1, #64	@ 0x40
 8000d54:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <CS_read+0x2b0>)
 8000d56:	f003 fffb 	bl	8004d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <CS_read+0x2ac>)
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2120      	movs	r1, #32
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <CS_read+0x2b0>)
 8000d64:	f003 fff4 	bl	8004d50 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e05b      	b.n	8000e26 <CS_read+0x362>
 8000d6e:	bf00      	nop
 8000d70:	20000630 	.word	0x20000630
 8000d74:	48000400 	.word	0x48000400
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	200000a4 	.word	0x200000a4
 8000d80:	20000388 	.word	0x20000388
 8000d84:	20000488 	.word	0x20000488
 8000d88:	200003c8 	.word	0x200003c8
 8000d8c:	200004c8 	.word	0x200004c8
 8000d90:	20000408 	.word	0x20000408
 8000d94:	20000508 	.word	0x20000508
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d98:	4866      	ldr	r0, [pc, #408]	@ (8000f34 <CS_read+0x470>)
 8000d9a:	f001 ff4d 	bl	8002c38 <HAL_ADC_Start_IT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <CS_read+0x2e4>
 8000da4:	f000 fe0c 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000da8:	4863      	ldr	r0, [pc, #396]	@ (8000f38 <CS_read+0x474>)
 8000daa:	f001 ff45 	bl	8002c38 <HAL_ADC_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <CS_read+0x2f4>
 8000db4:	f000 fe04 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000db8:	2164      	movs	r1, #100	@ 0x64
 8000dba:	485e      	ldr	r0, [pc, #376]	@ (8000f34 <CS_read+0x470>)
 8000dbc:	f001 fe64 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <CS_read+0x306>
 8000dc6:	f000 fdfb 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000dca:	2164      	movs	r1, #100	@ 0x64
 8000dcc:	485a      	ldr	r0, [pc, #360]	@ (8000f38 <CS_read+0x474>)
 8000dce:	f001 fe5b 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <CS_read+0x318>
 8000dd8:	f000 fdf2 	bl	80019c0 <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000ddc:	4855      	ldr	r0, [pc, #340]	@ (8000f34 <CS_read+0x470>)
 8000dde:	f002 f896 	bl	8002f0e <HAL_ADC_GetValue>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b299      	uxth	r1, r3
 8000de6:	4a55      	ldr	r2, [pc, #340]	@ (8000f3c <CS_read+0x478>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000dee:	4852      	ldr	r0, [pc, #328]	@ (8000f38 <CS_read+0x474>)
 8000df0:	f002 f88d 	bl	8002f0e <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b299      	uxth	r1, r3
 8000df8:	4a51      	ldr	r2, [pc, #324]	@ (8000f40 <CS_read+0x47c>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000e00:	484c      	ldr	r0, [pc, #304]	@ (8000f34 <CS_read+0x470>)
 8000e02:	f002 f849 	bl	8002e98 <HAL_ADC_Stop_IT>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <CS_read+0x34c>
 8000e0c:	f000 fdd8 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e10:	4849      	ldr	r0, [pc, #292]	@ (8000f38 <CS_read+0x474>)
 8000e12:	f002 f841 	bl	8002e98 <HAL_ADC_Stop_IT>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <CS_read+0x35c>
 8000e1c:	f000 fdd0 	bl	80019c0 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	ddb5      	ble.n	8000d98 <CS_read+0x2d4>
			}
			break;
 8000e2c:	e074      	b.n	8000f18 <CS_read+0x454>
		case 4:
			//analog_read();
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	e024      	b.n	8000e7e <CS_read+0x3ba>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e34:	483f      	ldr	r0, [pc, #252]	@ (8000f34 <CS_read+0x470>)
 8000e36:	f001 fd37 	bl	80028a8 <HAL_ADC_Start>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <CS_read+0x380>
 8000e40:	f000 fdbe 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e44:	2164      	movs	r1, #100	@ 0x64
 8000e46:	483b      	ldr	r0, [pc, #236]	@ (8000f34 <CS_read+0x470>)
 8000e48:	f001 fe1e 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <CS_read+0x392>
 8000e52:	f000 fdb5 	bl	80019c0 <Error_Handler>
				Analog_CS_1[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e56:	4837      	ldr	r0, [pc, #220]	@ (8000f34 <CS_read+0x470>)
 8000e58:	f002 f859 	bl	8002f0e <HAL_ADC_GetValue>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b299      	uxth	r1, r3
 8000e60:	4a38      	ldr	r2, [pc, #224]	@ (8000f44 <CS_read+0x480>)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e68:	4832      	ldr	r0, [pc, #200]	@ (8000f34 <CS_read+0x470>)
 8000e6a:	f001 fdd9 	bl	8002a20 <HAL_ADC_Stop>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <CS_read+0x3b4>
 8000e74:	f000 fda4 	bl	80019c0 <Error_Handler>
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	ddd7      	ble.n	8000e34 <CS_read+0x370>
			}
			//analog_read();
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	e042      	b.n	8000f10 <CS_read+0x44c>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e8a:	482a      	ldr	r0, [pc, #168]	@ (8000f34 <CS_read+0x470>)
 8000e8c:	f001 fd0c 	bl	80028a8 <HAL_ADC_Start>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <CS_read+0x3d6>
 8000e96:	f000 fd93 	bl	80019c0 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e9a:	2164      	movs	r1, #100	@ 0x64
 8000e9c:	4825      	ldr	r0, [pc, #148]	@ (8000f34 <CS_read+0x470>)
 8000e9e:	f001 fdf3 	bl	8002a88 <HAL_ADC_PollForConversion>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <CS_read+0x3e8>
 8000ea8:	f000 fd8a 	bl	80019c0 <Error_Handler>
				Analog_CS_2[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000eac:	4821      	ldr	r0, [pc, #132]	@ (8000f34 <CS_read+0x470>)
 8000eae:	f002 f82e 	bl	8002f0e <HAL_ADC_GetValue>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	4a24      	ldr	r2, [pc, #144]	@ (8000f48 <CS_read+0x484>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000ebe:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <CS_read+0x470>)
 8000ec0:	f001 fdae 	bl	8002a20 <HAL_ADC_Stop>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <CS_read+0x40a>
 8000eca:	f000 fd79 	bl	80019c0 <Error_Handler>
				if(Analog_CS_1[i]>Analog_CS_2[i]){
 8000ece:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <CS_read+0x480>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ed6:	491c      	ldr	r1, [pc, #112]	@ (8000f48 <CS_read+0x484>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d90e      	bls.n	8000f00 <CS_read+0x43c>
					Analog_CS[i] = Analog_CS_1[i] - Analog_CS_2[i];
 8000ee2:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <CS_read+0x480>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000eea:	4917      	ldr	r1, [pc, #92]	@ (8000f48 <CS_read+0x484>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <CS_read+0x488>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000efe:	e004      	b.n	8000f0a <CS_read+0x446>
				}else{
					Analog_CS[i] = 0;
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <CS_read+0x488>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2100      	movs	r1, #0
 8000f06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	ddb9      	ble.n	8000e8a <CS_read+0x3c6>
				}
			}
			break;
 8000f16:	bf00      	nop
	for(int x = 0; x < 5; x++){
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	f77f add5 	ble.w	8000ad0 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000f26:	f7ff fc4b 	bl	80007c0 <CS_process>
}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000038 	.word	0x20000038
 8000f38:	200000a4 	.word	0x200000a4
 8000f3c:	20000448 	.word	0x20000448
 8000f40:	20000548 	.word	0x20000548
 8000f44:	20000588 	.word	0x20000588
 8000f48:	200005a8 	.word	0x200005a8
 8000f4c:	200005c8 	.word	0x200005c8

08000f50 <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2201      	movs	r2, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <check_bit+0x2a>
		return 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <check_bit+0x2c>
	}else{
		return 0;
 8000f7a:	2300      	movs	r3, #0
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000fa4:	797b      	ldrb	r3, [r7, #5]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d104      	bne.n	8000fb4 <set_bit+0x2c>
		byte |= mask;
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e008      	b.n	8000fc6 <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <CS_Raw_to_mA>:

uint16_t CS_Raw_to_mA(uint16_t raw){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000fde:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000fe2:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	817b      	strh	r3, [r7, #10]

	//current = raw*max_mA / 4095;
	current = raw*3300 / 4095;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <CS_Raw_to_mA+0x3c>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	441a      	add	r2, r3
 8000ffa:	12d2      	asrs	r2, r2, #11
 8000ffc:	17db      	asrs	r3, r3, #31
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	817b      	strh	r3, [r7, #10]

	return current;
 8001002:	897b      	ldrh	r3, [r7, #10]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	80080081 	.word	0x80080081

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 ffd7 	bl	8001fca <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 800101c:	f7ff f925 	bl	800026a <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f85c 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 fc68 	bl	80018f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001028:	f000 f8a4 	bl	8001174 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800102c:	f000 f982 	bl	8001334 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001030:	f000 f9e8 	bl	8001404 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001034:	f000 fa96 	bl	8001564 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001038:	f000 fb0a 	bl	8001650 <MX_TIM3_Init>
  MX_TIM4_Init();
 800103c:	f000 fb56 	bl	80016ec <MX_TIM4_Init>
  MX_TIM6_Init();
 8001040:	f000 fbc8 	bl	80017d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001044:	f000 fbfc 	bl	8001840 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001048:	f000 fc30 	bl	80018ac <MX_TIM16_Init>
  MX_ADC2_Init();
 800104c:	f000 f90c 	bl	8001268 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8001050:	481b      	ldr	r0, [pc, #108]	@ (80010c0 <main+0xac>)
 8001052:	f004 fef1 	bl	8005e38 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8001056:	481b      	ldr	r0, [pc, #108]	@ (80010c4 <main+0xb0>)
 8001058:	f004 feee 	bl	8005e38 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800105c:	481a      	ldr	r0, [pc, #104]	@ (80010c8 <main+0xb4>)
 800105e:	f004 fe81 	bl	8005d64 <HAL_TIM_Base_Start_IT>


  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 8001062:	481a      	ldr	r0, [pc, #104]	@ (80010cc <main+0xb8>)
 8001064:	f003 f826 	bl	80040b4 <HAL_FDCAN_Start>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <main+0x60>
 800106e:	f000 fca7 	bl	80019c0 <Error_Handler>
 8001072:	e004      	b.n	800107e <main+0x6a>
 8001074:	2201      	movs	r2, #1
 8001076:	2101      	movs	r1, #1
 8001078:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <main+0xbc>)
 800107a:	f003 fe69 	bl	8004d50 <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	4812      	ldr	r0, [pc, #72]	@ (80010cc <main+0xb8>)
 8001084:	f003 f99c 	bl	80043c0 <HAL_FDCAN_ActivateNotification>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <main+0x7e>
 800108e:	f000 fc97 	bl	80019c0 <Error_Handler>
  HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,1);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001098:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <main+0xbc>)
 800109a:	f003 fe59 	bl	8004d50 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(millis % 100 == 0){
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <main+0xc0>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <main+0xc4>)
 80010a4:	fba2 1203 	umull	r1, r2, r2, r3
 80010a8:	0952      	lsrs	r2, r2, #5
 80010aa:	2164      	movs	r1, #100	@ 0x64
 80010ac:	fb01 f202 	mul.w	r2, r1, r2
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f2      	bne.n	800109e <main+0x8a>
		  CS_read();
 80010b8:	f7ff fd04 	bl	8000ac4 <CS_read>
	  if(millis % 100 == 0){
 80010bc:	e7ef      	b.n	800109e <main+0x8a>
 80010be:	bf00      	nop
 80010c0:	20000174 	.word	0x20000174
 80010c4:	200001c0 	.word	0x200001c0
 80010c8:	2000020c 	.word	0x2000020c
 80010cc:	20000110 	.word	0x20000110
 80010d0:	48000400 	.word	0x48000400
 80010d4:	2000062c 	.word	0x2000062c
 80010d8:	51eb851f 	.word	0x51eb851f

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	@ 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2238      	movs	r2, #56	@ 0x38
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 f93e 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001102:	f003 fe3d 	bl	8004d80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2340      	movs	r3, #64	@ 0x40
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800111c:	2301      	movs	r3, #1
 800111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001128:	2308      	movs	r3, #8
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fed7 	bl	8004ee8 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001140:	f000 fc3e 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2303      	movs	r3, #3
 800114a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2102      	movs	r1, #2
 800115c:	4618      	mov	r0, r3
 800115e:	f004 f9d5 	bl	800550c <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001168:	f000 fc2a 	bl	80019c0 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	3750      	adds	r7, #80	@ 0x50
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	@ 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f006 f8ed 	bl	800736c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <MX_ADC1_Init+0xec>)
 8001194:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800119a:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <MX_ADC1_Init+0xec>)
 800119c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ba:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011bc:	2204      	movs	r2, #4
 80011be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011dc:	2201      	movs	r2, #1
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_ADC1_Init+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001202:	4817      	ldr	r0, [pc, #92]	@ (8001260 <MX_ADC1_Init+0xec>)
 8001204:	f001 f9cc 	bl	80025a0 <HAL_ADC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800120e:	f000 fbd7 	bl	80019c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	@ (8001260 <MX_ADC1_Init+0xec>)
 800121e:	f002 fc3b 	bl	8003a98 <HAL_ADCEx_MultiModeConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001228:	f000 fbca 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122c:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <MX_ADC1_Init+0xf0>)
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001230:	2306      	movs	r3, #6
 8001232:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001234:	2302      	movs	r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001238:	237f      	movs	r3, #127	@ 0x7f
 800123a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123c:	2304      	movs	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_ADC1_Init+0xec>)
 800124a:	f001 fe6d 	bl	8002f28 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001254:	f000 fbb4 	bl	80019c0 <Error_Handler>
  }*/
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	@ 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000038 	.word	0x20000038
 8001264:	04300002 	.word	0x04300002

08001268 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f006 f879 	bl	800736c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800127a:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <MX_ADC2_Init+0xc0>)
 800127c:	4a2b      	ldr	r2, [pc, #172]	@ (800132c <MX_ADC2_Init+0xc4>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_ADC2_Init+0xc0>)
 8001282:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001286:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <MX_ADC2_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_ADC2_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <MX_ADC2_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <MX_ADC2_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012a2:	2204      	movs	r2, #4
 80012a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_ADC2_Init+0xc0>)
 80012e4:	f001 f95c 	bl	80025a0 <HAL_ADC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80012ee:	f000 fb67 	bl	80019c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_ADC2_Init+0xc8>)
 80012f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012fa:	2302      	movs	r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fe:	237f      	movs	r3, #127	@ 0x7f
 8001300:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001302:	2304      	movs	r3, #4
 8001304:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	@ (8001328 <MX_ADC2_Init+0xc0>)
 8001310:	f001 fe0a 	bl	8002f28 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800131a:	f000 fb51 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000a4 	.word	0x200000a4
 800132c:	50000100 	.word	0x50000100
 8001330:	0c900008 	.word	0x0c900008

08001334 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001338:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800133a:	4a2f      	ldr	r2, [pc, #188]	@ (80013f8 <MX_FDCAN1_Init+0xc4>)
 800133c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001350:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001356:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001358:	2200      	movs	r2, #0
 800135a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800135c:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800135e:	2200      	movs	r2, #0
 8001360:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001364:	2201      	movs	r2, #1
 8001366:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800136a:	2201      	movs	r2, #1
 800136c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001370:	220d      	movs	r2, #13
 8001372:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001376:	2202      	movs	r2, #2
 8001378:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800137c:	2201      	movs	r2, #1
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001380:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001382:	2201      	movs	r2, #1
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001388:	2201      	movs	r2, #1
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800138e:	2201      	movs	r2, #1
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 8001394:	221c      	movs	r2, #28
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013a4:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <MX_FDCAN1_Init+0xc0>)
 80013a6:	f002 fd2b 	bl	8003e00 <HAL_FDCAN_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80013b0:	f000 fb06 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_FDCAN1_Init+0xc8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013bc:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013cc:	2205      	movs	r2, #5
 80013ce:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <MX_FDCAN1_Init+0xcc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000110 	.word	0x20000110
 80013f8:	40006400 	.word	0x40006400
 80013fc:	20000640 	.word	0x20000640
 8001400:	20000644 	.word	0x20000644

08001404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b09c      	sub	sp, #112	@ 0x70
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001424:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2234      	movs	r2, #52	@ 0x34
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f005 ff94 	bl	800736c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001444:	4b45      	ldr	r3, [pc, #276]	@ (800155c <MX_TIM1_Init+0x158>)
 8001446:	4a46      	ldr	r2, [pc, #280]	@ (8001560 <MX_TIM1_Init+0x15c>)
 8001448:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800144a:	4b44      	ldr	r3, [pc, #272]	@ (800155c <MX_TIM1_Init+0x158>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b42      	ldr	r3, [pc, #264]	@ (800155c <MX_TIM1_Init+0x158>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001456:	4b41      	ldr	r3, [pc, #260]	@ (800155c <MX_TIM1_Init+0x158>)
 8001458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b3f      	ldr	r3, [pc, #252]	@ (800155c <MX_TIM1_Init+0x158>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001464:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <MX_TIM1_Init+0x158>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <MX_TIM1_Init+0x158>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001470:	483a      	ldr	r0, [pc, #232]	@ (800155c <MX_TIM1_Init+0x158>)
 8001472:	f004 fc1f 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800147c:	f000 faa0 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001484:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800148a:	4619      	mov	r1, r3
 800148c:	4833      	ldr	r0, [pc, #204]	@ (800155c <MX_TIM1_Init+0x158>)
 800148e:	f005 f899 	bl	80065c4 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001498:	f000 fa92 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800149c:	482f      	ldr	r0, [pc, #188]	@ (800155c <MX_TIM1_Init+0x158>)
 800149e:	f004 fccb 	bl	8005e38 <HAL_TIM_PWM_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014a8:	f000 fa8a 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014bc:	4619      	mov	r1, r3
 80014be:	4827      	ldr	r0, [pc, #156]	@ (800155c <MX_TIM1_Init+0x158>)
 80014c0:	f005 fe00 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014ca:	f000 fa79 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ce:	2360      	movs	r3, #96	@ 0x60
 80014d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d6:	2300      	movs	r3, #0
 80014d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	481a      	ldr	r0, [pc, #104]	@ (800155c <MX_TIM1_Init+0x158>)
 80014f4:	f004 ff52 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014fe:	f000 fa5f 	bl	80019c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001528:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM1_Init+0x158>)
 8001540:	f005 fe42 	bl	80071c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800154a:	f000 fa39 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM1_Init+0x158>)
 8001550:	f000 fc1a 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3770      	adds	r7, #112	@ 0x70
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000174 	.word	0x20000174
 8001560:	40012c00 	.word	0x40012c00

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <MX_TIM2_Init+0xe8>)
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 800159e:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015a0:	2295      	movs	r2, #149	@ 0x95
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015ac:	f06f 0201 	mvn.w	r2, #1
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4823      	ldr	r0, [pc, #140]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015c0:	f004 fb78 	bl	8005cb4 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015ca:	f000 f9f9 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d8:	4619      	mov	r1, r3
 80015da:	481c      	ldr	r0, [pc, #112]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015dc:	f004 fff2 	bl	80065c4 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015e6:	f000 f9eb 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ea:	4818      	ldr	r0, [pc, #96]	@ (800164c <MX_TIM2_Init+0xe8>)
 80015ec:	f004 fc24 	bl	8005e38 <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015f6:	f000 f9e3 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4810      	ldr	r0, [pc, #64]	@ (800164c <MX_TIM2_Init+0xe8>)
 800160a:	f005 fd5b 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001614:	f000 f9d4 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	@ 0x60
 800161a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	@ (800164c <MX_TIM2_Init+0xe8>)
 8001630:	f004 feb4 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800163a:	f000 f9c1 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800163e:	4803      	ldr	r0, [pc, #12]	@ (800164c <MX_TIM2_Init+0xe8>)
 8001640:	f000 fba2 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001644:	bf00      	nop
 8001646:	3738      	adds	r7, #56	@ 0x38
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200001c0 	.word	0x200001c0

08001650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166e:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <MX_TIM3_Init+0x94>)
 8001670:	4a1d      	ldr	r2, [pc, #116]	@ (80016e8 <MX_TIM3_Init+0x98>)
 8001672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <MX_TIM3_Init+0x94>)
 8001676:	223f      	movs	r2, #63	@ 0x3f
 8001678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_TIM3_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001680:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <MX_TIM3_Init+0x94>)
 8001682:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <MX_TIM3_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <MX_TIM3_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001694:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <MX_TIM3_Init+0x94>)
 8001696:	f004 fb0d 	bl	8005cb4 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016a0:	f000 f98e 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <MX_TIM3_Init+0x94>)
 80016b2:	f004 ff87 	bl	80065c4 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016bc:	f000 f980 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_TIM3_Init+0x94>)
 80016ce:	f005 fcf9 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f972 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000020c 	.word	0x2000020c
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	@ 0x38
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001720:	4a2b      	ldr	r2, [pc, #172]	@ (80017d0 <MX_TIM4_Init+0xe4>)
 8001722:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001724:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <MX_TIM4_Init+0xe0>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001736:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <MX_TIM4_Init+0xe0>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001744:	4821      	ldr	r0, [pc, #132]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001746:	f004 fab5 	bl	8005cb4 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001750:	f000 f936 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800175a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175e:	4619      	mov	r1, r3
 8001760:	481a      	ldr	r0, [pc, #104]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001762:	f004 ff2f 	bl	80065c4 <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800176c:	f000 f928 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001770:	4816      	ldr	r0, [pc, #88]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001772:	f004 fb61 	bl	8005e38 <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800177c:	f000 f920 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	480f      	ldr	r0, [pc, #60]	@ (80017cc <MX_TIM4_Init+0xe0>)
 8001790:	f005 fc98 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800179a:	f000 f911 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	@ 0x60
 80017a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_TIM4_Init+0xe0>)
 80017b6:	f004 fdf1 	bl	800639c <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017c0:	f000 f8fe 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3738      	adds	r7, #56	@ 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000258 	.word	0x20000258
 80017d0:	40000800 	.word	0x40000800

080017d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_TIM6_Init+0x64>)
 80017e6:	4a15      	ldr	r2, [pc, #84]	@ (800183c <MX_TIM6_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_TIM6_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_TIM6_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_TIM6_Init+0x64>)
 80017f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_TIM6_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_TIM6_Init+0x64>)
 8001806:	f004 fa55 	bl	8005cb4 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001810:	f000 f8d6 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_TIM6_Init+0x64>)
 8001822:	f005 fc4f 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800182c:	f000 f8c8 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200002a4 	.word	0x200002a4
 800183c:	40001000 	.word	0x40001000

08001840 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_TIM7_Init+0x64>)
 8001852:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <MX_TIM7_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_TIM7_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_TIM7_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <MX_TIM7_Init+0x64>)
 8001864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001868:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_TIM7_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <MX_TIM7_Init+0x64>)
 8001872:	f004 fa1f 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800187c:	f000 f8a0 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_TIM7_Init+0x64>)
 800188e:	f005 fc19 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001898:	f000 f892 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200002f0 	.word	0x200002f0
 80018a8:	40001400 	.word	0x40001400

080018ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <MX_TIM16_Init+0x48>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_TIM16_Init+0x44>)
 80018de:	f004 f9e9 	bl	8005cb4 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018e8:	f000 f86a 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000033c 	.word	0x2000033c
 80018f4:	40014400 	.word	0x40014400

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_GPIO_Init+0xc0>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_2_Pin|IN0_2_Pin|IN3_Pin|IN2_Pin
 8001956:	2200      	movs	r2, #0
 8001958:	f248 6112 	movw	r1, #34322	@ 0x8612
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f003 f9f6 	bl	8004d50 <HAL_GPIO_WritePin>
                          |IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001964:	2200      	movs	r2, #0
 8001966:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800196a:	4814      	ldr	r0, [pc, #80]	@ (80019bc <MX_GPIO_Init+0xc4>)
 800196c:	f003 f9f0 	bl	8004d50 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_2_Pin IN0_2_Pin IN3_Pin IN2_Pin
                           IN1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN0_2_Pin|IN3_Pin|IN2_Pin
 8001970:	f248 6312 	movw	r3, #34322	@ 0x8612
 8001974:	60fb      	str	r3, [r7, #12]
                          |IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198c:	f003 f85e 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin AnalogPower_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001990:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8001994:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4619      	mov	r1, r3
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_GPIO_Init+0xc4>)
 80019aa:	f003 f84f 	bl	8004a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <Error_Handler+0x8>

080019cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_MspInit+0x44>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_MspInit+0x44>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <HAL_MspInit+0x44>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a02:	f003 fa61 	bl	8004ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b09c      	sub	sp, #112	@ 0x70
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	2244      	movs	r2, #68	@ 0x44
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f005 fc99 	bl	800736c <memset>
  if(hadc->Instance==ADC1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a42:	d13e      	bne.n	8001ac2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 ff3d 	bl	80058d4 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a60:	f7ff ffae 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	4a39      	ldr	r2, [pc, #228]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001a6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10b      	bne.n	8001a8e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a36      	ldr	r2, [pc, #216]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a30      	ldr	r2, [pc, #192]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001aa6:	230d      	movs	r3, #13
 8001aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abc:	f002 ffc6 	bl	8004a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ac0:	e042      	b.n	8001b48 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <HAL_ADC_MspInit+0x144>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d13d      	bne.n	8001b48 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ad2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ad6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fef9 	bl	80058d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001ae8:	f7ff ff6a 	bl	80019c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001af4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_ADC_MspInit+0x13c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10b      	bne.n	8001b16 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_ADC_MspInit+0x140>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2e:	2340      	movs	r3, #64	@ 0x40
 8001b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b32:	2303      	movs	r3, #3
 8001b34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b44:	f002 ff82 	bl	8004a4c <HAL_GPIO_Init>
}
 8001b48:	bf00      	nop
 8001b4a:	3770      	adds	r7, #112	@ 0x70
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000690 	.word	0x20000690
 8001b54:	40021000 	.word	0x40021000
 8001b58:	50000100 	.word	0x50000100

08001b5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	@ 0x68
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2244      	movs	r2, #68	@ 0x44
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 fbf5 	bl	800736c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a24      	ldr	r2, [pc, #144]	@ (8001c18 <HAL_FDCAN_MspInit+0xbc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d141      	bne.n	8001c10 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b96:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fe99 	bl	80058d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ba8:	f7ff ff0a 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_FDCAN_MspInit+0xc0>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bdc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bee:	2309      	movs	r3, #9
 8001bf0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfc:	f002 ff26 	bl	8004a4c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2015      	movs	r0, #21
 8001c06:	f002 f8c6 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c0a:	2015      	movs	r0, #21
 8001c0c:	f002 f8dd 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3768      	adds	r7, #104	@ 0x68
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40006400 	.word	0x40006400
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d6c <HAL_TIM_Base_MspInit+0x14c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10c      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	4b4f      	ldr	r3, [pc, #316]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	4a4e      	ldr	r2, [pc, #312]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c4a:	e08a      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d114      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c56:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	4a45      	ldr	r2, [pc, #276]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c62:	4b43      	ldr	r3, [pc, #268]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	201c      	movs	r0, #28
 8001c74:	f002 f88f 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c78:	201c      	movs	r0, #28
 8001c7a:	f002 f8a6 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001c7e:	e070      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3b      	ldr	r2, [pc, #236]	@ (8001d74 <HAL_TIM_Base_MspInit+0x154>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d114      	bne.n	8001cb4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c8a:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	4a38      	ldr	r2, [pc, #224]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c96:	4b36      	ldr	r3, [pc, #216]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	201d      	movs	r0, #29
 8001ca8:	f002 f875 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cac:	201d      	movs	r0, #29
 8001cae:	f002 f88c 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001cb2:	e056      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d78 <HAL_TIM_Base_MspInit+0x158>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d114      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cca:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201e      	movs	r0, #30
 8001cdc:	f002 f85b 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ce0:	201e      	movs	r0, #30
 8001ce2:	f002 f872 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001ce6:	e03c      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <HAL_TIM_Base_MspInit+0x15c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10c      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
}
 8001d0a:	e02a      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_TIM_Base_MspInit+0x160>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d114      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	4a15      	ldr	r2, [pc, #84]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2037      	movs	r0, #55	@ 0x37
 8001d34:	f002 f82f 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d38:	2037      	movs	r0, #55	@ 0x37
 8001d3a:	f002 f846 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001d3e:	e010      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0f      	ldr	r2, [pc, #60]	@ (8001d84 <HAL_TIM_Base_MspInit+0x164>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10b      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_TIM_Base_MspInit+0x150>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	@ 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40001000 	.word	0x40001000
 8001d80:	40001400 	.word	0x40001400
 8001d84:	40014400 	.word	0x40014400

08001d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a23      	ldr	r2, [pc, #140]	@ (8001e34 <HAL_TIM_MspPostInit+0xac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11e      	bne.n	8001de8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db6:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f002 fe33 	bl	8004a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001de6:	e021      	b.n	8001e2c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df0:	d11c      	bne.n	8001e2c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_TIM_MspPostInit+0xb0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e28:	f002 fe10 	bl	8004a4c <HAL_GPIO_Init>
}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	@ 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e92:	f000 f8ed 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <FDCAN1_IT0_IRQHandler+0x10>)
 8001ea2:	f002 fb73 	bl	800458c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000110 	.word	0x20000110

08001eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <TIM2_IRQHandler+0x10>)
 8001eb6:	f004 f921 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200001c0 	.word	0x200001c0

08001ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <TIM3_IRQHandler+0x58>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <TIM3_IRQHandler+0x58>)
 8001ed2:	801a      	strh	r2, [r3, #0]
	if(millis % (CAN_interval/2) == 0){
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <TIM3_IRQHandler+0x58>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <TIM3_IRQHandler+0x5c>)
 8001eda:	8812      	ldrh	r2, [r2, #0]
 8001edc:	0852      	lsrs	r2, r2, #1
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ee4:	fb01 f202 	mul.w	r2, r1, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10f      	bne.n	8001f10 <TIM3_IRQHandler+0x4c>
		  CAN_switch_state(can_select);
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <TIM3_IRQHandler+0x60>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe faf5 	bl	80004e4 <CAN_switch_state>
		  if(can_select == 0){
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <TIM3_IRQHandler+0x60>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <TIM3_IRQHandler+0x46>
			  can_select = 1;
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <TIM3_IRQHandler+0x60>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e002      	b.n	8001f10 <TIM3_IRQHandler+0x4c>
		  }else{
			  can_select = 0;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <TIM3_IRQHandler+0x60>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
		  }
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <TIM3_IRQHandler+0x64>)
 8001f12:	f004 f8f3 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000062c 	.word	0x2000062c
 8001f20:	20000642 	.word	0x20000642
 8001f24:	2000062e 	.word	0x2000062e
 8001f28:	2000020c 	.word	0x2000020c

08001f2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM4_IRQHandler+0x10>)
 8001f32:	f004 f8e3 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000258 	.word	0x20000258

08001f40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <TIM7_IRQHandler+0x10>)
 8001f46:	f004 f8d9 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200002f0 	.word	0x200002f0

08001f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f78:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7e:	490e      	ldr	r1, [pc, #56]	@ (8001fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f80:	4a0e      	ldr	r2, [pc, #56]	@ (8001fbc <LoopForever+0xe>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f94:	4c0b      	ldr	r4, [pc, #44]	@ (8001fc4 <LoopForever+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa2:	f7ff ffd7 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f005 f9e9 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001faa:	f7ff f833 	bl	8001014 <main>

08001fae <LoopForever>:

LoopForever:
    b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   r0, =_estack
 8001fb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fbc:	08007404 	.word	0x08007404
  ldr r2, =_sbss
 8001fc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fc4:	20000698 	.word	0x20000698

08001fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC1_2_IRQHandler>

08001fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f001 fed3 	bl	8003d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 f80e 	bl	8001ffc <HAL_InitTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	e001      	b.n	8001ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fec:	f7ff fcee 	bl	80019cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_InitTick+0x68>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d022      	beq.n	8002056 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_InitTick+0x6c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_InitTick+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800201c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f001 fede 	bl	8003de6 <HAL_SYSTICK_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10f      	bne.n	8002050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d809      	bhi.n	800204a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002036:	2200      	movs	r2, #0
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
 800203e:	f001 feaa 	bl	8003d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <HAL_InitTick+0x70>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e007      	b.n	800205a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e004      	b.n	800205a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000008 	.word	0x20000008
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_IncTick+0x1c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_IncTick+0x20>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4413      	add	r3, r2
 800207e:	4a03      	ldr	r2, [pc, #12]	@ (800208c <HAL_IncTick+0x1c>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20000694 	.word	0x20000694
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000694 	.word	0x20000694

080020ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3360      	adds	r3, #96	@ 0x60
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <LL_ADC_SetOffset+0x44>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	4313      	orrs	r3, r2
 8002144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	03fff000 	.word	0x03fff000

0800215c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3360      	adds	r3, #96	@ 0x60
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3360      	adds	r3, #96	@ 0x60
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021be:	b480      	push	{r7}
 80021c0:	b087      	sub	sp, #28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3360      	adds	r3, #96	@ 0x60
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021e8:	bf00      	nop
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3360      	adds	r3, #96	@ 0x60
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	615a      	str	r2, [r3, #20]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002276:	b480      	push	{r7}
 8002278:	b087      	sub	sp, #28
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3330      	adds	r3, #48	@ 0x30
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	211f      	movs	r1, #31
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 011f 	and.w	r1, r3, #31
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3314      	adds	r3, #20
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	0e5b      	lsrs	r3, r3, #25
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0d1b      	lsrs	r3, r3, #20
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2107      	movs	r1, #7
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	0d1b      	lsrs	r3, r3, #20
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0318 	and.w	r3, r3, #24
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002348:	40d9      	lsrs	r1, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	400b      	ands	r3, r1
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0007ffff 	.word	0x0007ffff

0800236c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 031f 	and.w	r3, r3, #31
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6093      	str	r3, [r2, #8]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002404:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242c:	d101      	bne.n	8002432 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800247c:	f043 0202 	orr.w	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_IsEnabled+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_IsEnabled+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d101      	bne.n	80024ce <LL_ADC_IsDisableOngoing+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_IsDisableOngoing+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f0:	f043 0204 	orr.w	r2, r3, #4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d101      	bne.n	8002544 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002562:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d101      	bne.n	8002592 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e167      	b.n	800288a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fa23 	bl	8001a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fef1 	bl	80023c8 <LL_ADC_IsDeepPowerDownEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fed7 	bl	80023a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff0c 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fef0 	bl	80023f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002610:	4ba0      	ldr	r3, [pc, #640]	@ (8002894 <HAL_ADC_Init+0x2f4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	4aa0      	ldr	r2, [pc, #640]	@ (8002898 <HAL_ADC_Init+0x2f8>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002624:	e002      	b.n	800262c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b01      	subs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff feee 	bl	8002418 <LL_ADC_IsInternalRegulatorEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff62 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 8002668:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8100 	bne.w	8002878 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80fc 	bne.w	8002878 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fefb 	bl	8002490 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026a4:	f7ff fef4 	bl	8002490 <LL_ADC_IsEnabled>
 80026a8:	4604      	mov	r4, r0
 80026aa:	487c      	ldr	r0, [pc, #496]	@ (800289c <HAL_ADC_Init+0x2fc>)
 80026ac:	f7ff fef0 	bl	8002490 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4323      	orrs	r3, r4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	4878      	ldr	r0, [pc, #480]	@ (80028a0 <HAL_ADC_Init+0x300>)
 80026c0:	f7ff fcf4 	bl	80020ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7f5b      	ldrb	r3, [r3, #29]
 80026c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b60      	ldr	r3, [pc, #384]	@ (80028a4 <HAL_ADC_Init+0x304>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff15 	bl	800257a <LL_ADC_INJ_IsConversionOngoing>
 8002750:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d16d      	bne.n	8002834 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d16a      	bne.n	8002834 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800276a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	430b      	orrs	r3, r1
 8002786:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800279e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6911      	ldr	r1, [r2, #16]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027be:	e013      	b.n	80027e8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002814:	430a      	orrs	r2, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e007      	b.n	8002834 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10c      	bne.n	8002856 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f023 010f 	bic.w	r1, r3, #15
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
 8002854:	e007      	b.n	8002866 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020f 	bic.w	r2, r2, #15
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002876:	e007      	b.n	8002888 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002888:	7ffb      	ldrb	r3, [r7, #31]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000300 	.word	0x50000300
 80028a4:	fff04007 	.word	0xfff04007

080028a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b0:	4859      	ldr	r0, [pc, #356]	@ (8002a18 <HAL_ADC_Start+0x170>)
 80028b2:	f7ff fd5b 	bl	800236c <LL_ADC_GetMultimode>
 80028b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe35 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 809f 	bne.w	8002a08 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_Start+0x30>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e09a      	b.n	8002a0e <HAL_ADC_Start+0x166>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 ffcd 	bl	8003880 <ADC_Enable>
 80028e6:	4603      	mov	r3, r0
 80028e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 8086 	bne.w	80029fe <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a44      	ldr	r2, [pc, #272]	@ (8002a1c <HAL_ADC_Start+0x174>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d002      	beq.n	8002916 <HAL_ADC_Start+0x6e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	e001      	b.n	800291a <HAL_ADC_Start+0x72>
 8002916:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4293      	cmp	r3, r2
 8002920:	d002      	beq.n	8002928 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002940:	d106      	bne.n	8002950 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	f023 0206 	bic.w	r2, r3, #6
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	661a      	str	r2, [r3, #96]	@ 0x60
 800294e:	e002      	b.n	8002956 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	221c      	movs	r2, #28
 800295c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a1c <HAL_ADC_Start+0x174>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d002      	beq.n	8002976 <HAL_ADC_Start+0xce>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	e001      	b.n	800297a <HAL_ADC_Start+0xd2>
 8002976:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4293      	cmp	r3, r2
 8002980:	d008      	beq.n	8002994 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d002      	beq.n	8002994 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d114      	bne.n	80029be <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fd90 	bl	80024dc <LL_ADC_REG_StartConversion>
 80029bc:	e026      	b.n	8002a0c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <HAL_ADC_Start+0x174>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d002      	beq.n	80029da <HAL_ADC_Start+0x132>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e001      	b.n	80029de <HAL_ADC_Start+0x136>
 80029da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029de:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00f      	beq.n	8002a0c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029fc:	e006      	b.n	8002a0c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a06:	e001      	b.n	8002a0c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	50000300 	.word	0x50000300
 8002a1c:	50000100 	.word	0x50000100

08002a20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Stop+0x16>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e023      	b.n	8002a7e <HAL_ADC_Stop+0x5e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a3e:	2103      	movs	r1, #3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fe61 	bl	8003708 <ADC_ConversionStop>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 ff9b 	bl	800398c <ADC_Disable>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a92:	4867      	ldr	r0, [pc, #412]	@ (8002c30 <HAL_ADC_PollForConversion+0x1a8>)
 8002a94:	f7ff fc6a 	bl	800236c <LL_ADC_GetMultimode>
 8002a98:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e02a      	b.n	8002afe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d002      	beq.n	8002aba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d111      	bne.n	8002ade <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0a6      	b.n	8002c26 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ad8:	2304      	movs	r3, #4
 8002ada:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002adc:	e00f      	b.n	8002afe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ade:	4854      	ldr	r0, [pc, #336]	@ (8002c30 <HAL_ADC_PollForConversion+0x1a8>)
 8002ae0:	f7ff fc52 	bl	8002388 <LL_ADC_GetMultiDMATransfer>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e095      	b.n	8002c26 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002afa:	2304      	movs	r3, #4
 8002afc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002afe:	f7ff fac9 	bl	8002094 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b04:	e021      	b.n	8002b4a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d01d      	beq.n	8002b4a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b0e:	f7ff fac1 	bl	8002094 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <HAL_ADC_PollForConversion+0x9c>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e06d      	b.n	8002c26 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0d6      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fb71 	bl	8002250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01c      	beq.n	8002bae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7f5b      	ldrb	r3, [r3, #29]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d111      	bne.n	8002bae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a20      	ldr	r2, [pc, #128]	@ (8002c34 <HAL_ADC_PollForConversion+0x1ac>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d002      	beq.n	8002bbe <HAL_ADC_PollForConversion+0x136>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x13a>
 8002bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d008      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d002      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d104      	bne.n	8002be6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	e00d      	b.n	8002c02 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_ADC_PollForConversion+0x1ac>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d002      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0x16e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e001      	b.n	8002bfa <HAL_ADC_PollForConversion+0x172>
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d104      	bne.n	8002c12 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e008      	b.n	8002c24 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	220c      	movs	r2, #12
 8002c22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50000300 	.word	0x50000300
 8002c34:	50000100 	.word	0x50000100

08002c38 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c40:	4893      	ldr	r0, [pc, #588]	@ (8002e90 <HAL_ADC_Start_IT+0x258>)
 8002c42:	f7ff fb93 	bl	800236c <LL_ADC_GetMultimode>
 8002c46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fc6d 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 8113 	bne.w	8002e80 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Start_IT+0x30>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e10e      	b.n	8002e86 <HAL_ADC_Start_IT+0x24e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fe05 	bl	8003880 <ADC_Enable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 80fa 	bne.w	8002e76 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e94 <HAL_ADC_Start_IT+0x25c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Start_IT+0x6e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e001      	b.n	8002caa <HAL_ADC_Start_IT+0x72>
 8002ca6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d002      	beq.n	8002cb8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	f023 0206 	bic.w	r2, r3, #6
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	661a      	str	r2, [r3, #96]	@ 0x60
 8002cdc:	e002      	b.n	8002ce4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	221c      	movs	r2, #28
 8002cea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 021c 	bic.w	r2, r2, #28
 8002d02:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d108      	bne.n	8002d1e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	605a      	str	r2, [r3, #4]
          break;
 8002d1c:	e008      	b.n	8002d30 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0204 	orr.w	r2, r2, #4
 8002d2c:	605a      	str	r2, [r3, #4]
          break;
 8002d2e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d107      	bne.n	8002d48 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0210 	orr.w	r2, r2, #16
 8002d46:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	@ (8002e94 <HAL_ADC_Start_IT+0x25c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d002      	beq.n	8002d58 <HAL_ADC_Start_IT+0x120>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	e001      	b.n	8002d5c <HAL_ADC_Start_IT+0x124>
 8002d58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d008      	beq.n	8002d76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d002      	beq.n	8002d76 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d13a      	bne.n	8002dec <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02d      	beq.n	8002de0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d110      	bne.n	8002dbe <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0220 	bic.w	r2, r2, #32
 8002daa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dba:	605a      	str	r2, [r3, #4]
              break;
 8002dbc:	e010      	b.n	8002de0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dcc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	605a      	str	r2, [r3, #4]
              break;
 8002dde:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb79 	bl	80024dc <LL_ADC_REG_StartConversion>
 8002dea:	e04b      	b.n	8002e84 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a25      	ldr	r2, [pc, #148]	@ (8002e94 <HAL_ADC_Start_IT+0x25c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d002      	beq.n	8002e08 <HAL_ADC_Start_IT+0x1d0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e001      	b.n	8002e0c <HAL_ADC_Start_IT+0x1d4>
 8002e08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e0c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d034      	beq.n	8002e84 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d110      	bne.n	8002e54 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0220 	bic.w	r2, r2, #32
 8002e40:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e50:	605a      	str	r2, [r3, #4]
              break;
 8002e52:	e017      	b.n	8002e84 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e62:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	605a      	str	r2, [r3, #4]
              break;
 8002e74:	e006      	b.n	8002e84 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e7e:	e001      	b.n	8002e84 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
 8002e82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	50000300 	.word	0x50000300
 8002e94:	50000100 	.word	0x50000100

08002e98 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Stop_IT+0x16>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e02b      	b.n	8002f06 <HAL_ADC_Stop_IT+0x6e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fc25 	bl	8003708 <ADC_ConversionStop>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d119      	bne.n	8002efc <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 021c 	bic.w	r2, r2, #28
 8002ed6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fd57 	bl	800398c <ADC_Disable>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b0b6      	sub	sp, #216	@ 0xd8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x22>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e3c8      	b.n	80036dc <HAL_ADC_ConfigChannel+0x7b4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fae8 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 83ad 	bne.w	80036be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7ff f980 	bl	8002276 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fad6 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 8002f80:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff faf6 	bl	800257a <LL_ADC_INJ_IsConversionOngoing>
 8002f8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 81d9 	bne.w	800334e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 81d4 	bne.w	800334e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fae:	d10f      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7ff f987 	bl	80022ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f92e 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>
 8002fce:	e00e      	b.n	8002fee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff f976 	bl	80022ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f91e 	bl	800222a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d022      	beq.n	8003056 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6919      	ldr	r1, [r3, #16]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003020:	f7ff f878 	bl	8002114 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6919      	ldr	r1, [r3, #16]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	461a      	mov	r2, r3
 8003032:	f7ff f8c4 	bl	80021be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_ADC_ConfigChannel+0x124>
 8003046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800304a:	e000      	b.n	800304e <HAL_ADC_ConfigChannel+0x126>
 800304c:	2300      	movs	r3, #0
 800304e:	461a      	mov	r2, r3
 8003050:	f7ff f8d0 	bl	80021f4 <LL_ADC_SetOffsetSaturation>
 8003054:	e17b      	b.n	800334e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f87d 	bl	800215c <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x15a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f872 	bl	800215c <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	e01e      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x198>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f867 	bl	800215c <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1b0>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	e018      	b.n	800310a <HAL_ADC_ConfigChannel+0x1e2>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e004      	b.n	800310a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f836 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f81a 	bl	800215c <LL_ADC_GetOffsetChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x220>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f80f 	bl	800215c <LL_ADC_GetOffsetChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	e01e      	b.n	8003186 <HAL_ADC_ConfigChannel+0x25e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f804 	bl	800215c <LL_ADC_GetOffsetChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800316a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800316e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800317a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_ConfigChannel+0x276>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0e9b      	lsrs	r3, r3, #26
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	e018      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x2a8>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031c2:	2320      	movs	r3, #32
 80031c4:	e004      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d106      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe ffd3 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ffb7 	bl	800215c <LL_ADC_GetOffsetChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_ADC_ConfigChannel+0x2e6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe ffac 	bl	800215c <LL_ADC_GetOffsetChannel>
 8003204:	4603      	mov	r3, r0
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	e01e      	b.n	800324c <HAL_ADC_ConfigChannel+0x324>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe ffa1 	bl	800215c <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800322c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e004      	b.n	800324a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x33c>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	e016      	b.n	8003292 <HAL_ADC_ConfigChannel+0x36a>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003276:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800327c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e004      	b.n	8003292 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003292:	429a      	cmp	r2, r3
 8003294:	d106      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	2102      	movs	r1, #2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff72 	bl	8002188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2103      	movs	r1, #3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe ff56 	bl	800215c <LL_ADC_GetOffsetChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x3a8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2103      	movs	r1, #3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe ff4b 	bl	800215c <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 021f 	and.w	r2, r3, #31
 80032ce:	e017      	b.n	8003300 <HAL_ADC_ConfigChannel+0x3d8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ff40 	bl	800215c <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e003      	b.n	80032fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x3f0>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	e011      	b.n	800333c <HAL_ADC_ConfigChannel+0x414>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003328:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800332a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e003      	b.n	800333c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800333c:	429a      	cmp	r2, r3
 800333e:	d106      	bne.n	800334e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	2103      	movs	r1, #3
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe ff1d 	bl	8002188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f89c 	bl	8002490 <LL_ADC_IsEnabled>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8140 	bne.w	80035e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	461a      	mov	r2, r3
 800336e:	f7fe ffd9 	bl	8002324 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4a8f      	ldr	r2, [pc, #572]	@ (80035b4 <HAL_ADC_ConfigChannel+0x68c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	f040 8131 	bne.w	80035e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x47e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	0e9b      	lsrs	r3, r3, #26
 8003394:	3301      	adds	r3, #1
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2b09      	cmp	r3, #9
 800339c:	bf94      	ite	ls
 800339e:	2301      	movls	r3, #1
 80033a0:	2300      	movhi	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e019      	b.n	80033da <HAL_ADC_ConfigChannel+0x4b2>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033b6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033be:	2320      	movs	r3, #32
 80033c0:	e003      	b.n	80033ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d079      	beq.n	80034d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x4d2>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	069b      	lsls	r3, r3, #26
 80033f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f8:	e015      	b.n	8003426 <HAL_ADC_ConfigChannel+0x4fe>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e003      	b.n	800341e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	069b      	lsls	r3, r3, #26
 8003422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x51e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	e017      	b.n	8003476 <HAL_ADC_ConfigChannel+0x54e>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003456:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e003      	b.n	800346a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	ea42 0103 	orr.w	r1, r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_ADC_ConfigChannel+0x574>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	3301      	adds	r3, #1
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	051b      	lsls	r3, r3, #20
 800349a:	e018      	b.n	80034ce <HAL_ADC_ConfigChannel+0x5a6>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	f003 021f 	and.w	r2, r3, #31
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ce:	430b      	orrs	r3, r1
 80034d0:	e081      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x5c6>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	3301      	adds	r3, #1
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ec:	e015      	b.n	800351a <HAL_ADC_ConfigChannel+0x5f2>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e003      	b.n	8003512 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	069b      	lsls	r3, r3, #26
 8003516:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_ADC_ConfigChannel+0x612>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	0e9b      	lsrs	r3, r3, #26
 800352c:	3301      	adds	r3, #1
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	e017      	b.n	800356a <HAL_ADC_ConfigChannel+0x642>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	61fb      	str	r3, [r7, #28]
  return result;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003552:	2320      	movs	r3, #32
 8003554:	e003      	b.n	800355e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	ea42 0103 	orr.w	r1, r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x66e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	3301      	adds	r3, #1
 8003582:	f003 021f 	and.w	r2, r3, #31
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	3b1e      	subs	r3, #30
 800358e:	051b      	lsls	r3, r3, #20
 8003590:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003594:	e01e      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x6ac>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	613b      	str	r3, [r7, #16]
  return result;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e006      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x698>
 80035b2:	bf00      	nop
 80035b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	3b1e      	subs	r3, #30
 80035ce:	051b      	lsls	r3, r3, #20
 80035d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fe fe77 	bl	80022ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d071      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ec:	483e      	ldr	r0, [pc, #248]	@ (80036e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80035ee:	f7fe fd83 	bl	80020f8 <LL_ADC_GetCommonPathInternalCh>
 80035f2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a3c      	ldr	r2, [pc, #240]	@ (80036ec <HAL_ADC_ConfigChannel+0x7c4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_ADC_ConfigChannel+0x6e2>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3a      	ldr	r2, [pc, #232]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d127      	bne.n	800365a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d121      	bne.n	800365a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361e:	d157      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003624:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003628:	4619      	mov	r1, r3
 800362a:	482f      	ldr	r0, [pc, #188]	@ (80036e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800362c:	f7fe fd51 	bl	80020d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	4a30      	ldr	r2, [pc, #192]	@ (80036f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800364a:	e002      	b.n	8003652 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b01      	subs	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003658:	e03a      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <HAL_ADC_ConfigChannel+0x7d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d113      	bne.n	800368c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a22      	ldr	r2, [pc, #136]	@ (8003700 <HAL_ADC_ConfigChannel+0x7d8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02a      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	4619      	mov	r1, r3
 8003684:	4818      	ldr	r0, [pc, #96]	@ (80036e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003686:	f7fe fd24 	bl	80020d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368a:	e021      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <HAL_ADC_ConfigChannel+0x7dc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d11c      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a16      	ldr	r2, [pc, #88]	@ (8003700 <HAL_ADC_ConfigChannel+0x7d8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d011      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036b4:	4619      	mov	r1, r3
 80036b6:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80036b8:	f7fe fd0b 	bl	80020d2 <LL_ADC_SetCommonPathInternalCh>
 80036bc:	e008      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036dc:	4618      	mov	r0, r3
 80036de:	37d8      	adds	r7, #216	@ 0xd8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	80080000 	.word	0x80080000
 80036e8:	50000300 	.word	0x50000300
 80036ec:	c3210000 	.word	0xc3210000
 80036f0:	90c00010 	.word	0x90c00010
 80036f4:	20000000 	.word	0x20000000
 80036f8:	053e2d63 	.word	0x053e2d63
 80036fc:	c7520000 	.word	0xc7520000
 8003700:	50000100 	.word	0x50000100
 8003704:	cb840000 	.word	0xcb840000

08003708 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe ff04 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 8003724:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe ff25 	bl	800257a <LL_ADC_INJ_IsConversionOngoing>
 8003730:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8098 	beq.w	8003870 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02a      	beq.n	80037a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7f5b      	ldrb	r3, [r3, #29]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d126      	bne.n	80037a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7f1b      	ldrb	r3, [r3, #28]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d122      	bne.n	80037a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003762:	e014      	b.n	800378e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4a45      	ldr	r2, [pc, #276]	@ (800387c <ADC_ConversionStop+0x174>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d90d      	bls.n	8003788 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	f043 0210 	orr.w	r2, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e074      	b.n	8003872 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d1e3      	bne.n	8003764 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2240      	movs	r2, #64	@ 0x40
 80037a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d014      	beq.n	80037d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe febc 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fe79 	bl	80024b6 <LL_ADC_IsDisableOngoing>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fe98 	bl	8002504 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d014      	beq.n	8003804 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fecb 	bl	800257a <LL_ADC_INJ_IsConversionOngoing>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fe61 	bl	80024b6 <LL_ADC_IsDisableOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fea7 	bl	8002552 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d005      	beq.n	8003816 <ADC_ConversionStop+0x10e>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d105      	bne.n	800381c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003810:	230c      	movs	r3, #12
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e005      	b.n	8003822 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003816:	2308      	movs	r3, #8
 8003818:	617b      	str	r3, [r7, #20]
        break;
 800381a:	e002      	b.n	8003822 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800381c:	2304      	movs	r3, #4
 800381e:	617b      	str	r3, [r7, #20]
        break;
 8003820:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003822:	f7fe fc37 	bl	8002094 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003828:	e01b      	b.n	8003862 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800382a:	f7fe fc33 	bl	8002094 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b05      	cmp	r3, #5
 8003836:	d914      	bls.n	8003862 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1dc      	bne.n	800382a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	a33fffff 	.word	0xa33fffff

08003880 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fdfd 	bl	8002490 <LL_ADC_IsEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d169      	bne.n	8003970 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b36      	ldr	r3, [pc, #216]	@ (800397c <ADC_Enable+0xfc>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e055      	b.n	8003972 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fdb8 	bl	8002440 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038d0:	482b      	ldr	r0, [pc, #172]	@ (8003980 <ADC_Enable+0x100>)
 80038d2:	f7fe fc11 	bl	80020f8 <LL_ADC_GetCommonPathInternalCh>
 80038d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e0:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <ADC_Enable+0x104>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <ADC_Enable+0x108>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	4613      	mov	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038fa:	e002      	b.n	8003902 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003908:	f7fe fbc4 	bl	8002094 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390e:	e028      	b.n	8003962 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fdbb 	bl	8002490 <LL_ADC_IsEnabled>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fd8b 	bl	8002440 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392a:	f7fe fbb3 	bl	8002094 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d914      	bls.n	8003962 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00d      	beq.n	8003962 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1cf      	bne.n	8003910 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	8000003f 	.word	0x8000003f
 8003980:	50000300 	.word	0x50000300
 8003984:	20000000 	.word	0x20000000
 8003988:	053e2d63 	.word	0x053e2d63

0800398c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fd8c 	bl	80024b6 <LL_ADC_IsDisableOngoing>
 800399e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fd73 	bl	8002490 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d047      	beq.n	8003a40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d144      	bne.n	8003a40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030d 	and.w	r3, r3, #13
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10c      	bne.n	80039de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fd4d 	bl	8002468 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2203      	movs	r2, #3
 80039d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d6:	f7fe fb5d 	bl	8002094 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039dc:	e029      	b.n	8003a32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e023      	b.n	8003a42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fa:	f7fe fb4b 	bl	8002094 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d914      	bls.n	8003a32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1dc      	bne.n	80039fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <LL_ADC_IsEnabled>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <LL_ADC_IsEnabled+0x18>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <LL_ADC_IsEnabled+0x1a>
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d101      	bne.n	8003a88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b0a1      	sub	sp, #132	@ 0x84
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e08b      	b.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ace:	d102      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ad0:	4b41      	ldr	r3, [pc, #260]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	e001      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e06a      	b.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ffb8 	bl	8003a70 <LL_ADC_REG_IsConversionOngoing>
 8003b00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ffb2 	bl	8003a70 <LL_ADC_REG_IsConversionOngoing>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d14c      	bne.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d149      	bne.n	8003bac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b18:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b1a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d028      	beq.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b36:	035b      	lsls	r3, r3, #13
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b44:	f7ff ff81 	bl	8003a4a <LL_ADC_IsEnabled>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4823      	ldr	r0, [pc, #140]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b4c:	f7ff ff7d 	bl	8003a4a <LL_ADC_IsEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4323      	orrs	r3, r4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d133      	bne.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b60:	f023 030f 	bic.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	6892      	ldr	r2, [r2, #8]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b72:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b74:	e024      	b.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b82:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b86:	f7ff ff60 	bl	8003a4a <LL_ADC_IsEnabled>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4812      	ldr	r0, [pc, #72]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b8e:	f7ff ff5c 	bl	8003a4a <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4323      	orrs	r3, r4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d112      	bne.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ba2:	f023 030f 	bic.w	r3, r3, #15
 8003ba6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ba8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003baa:	e009      	b.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003bbe:	e000      	b.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3784      	adds	r7, #132	@ 0x84
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	50000100 	.word	0x50000100
 8003bdc:	50000300 	.word	0x50000300

08003be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4907      	ldr	r1, [pc, #28]	@ (8003c7c <__NVIC_EnableIRQ+0x38>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000e100 	.word	0xe000e100

08003c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db0a      	blt.n	8003caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	490c      	ldr	r1, [pc, #48]	@ (8003ccc <__NVIC_SetPriority+0x4c>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca8:	e00a      	b.n	8003cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4908      	ldr	r1, [pc, #32]	@ (8003cd0 <__NVIC_SetPriority+0x50>)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	761a      	strb	r2, [r3, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	@ 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	bf28      	it	cs
 8003cf2:	2304      	movcs	r3, #4
 8003cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d902      	bls.n	8003d04 <NVIC_EncodePriority+0x30>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3b03      	subs	r3, #3
 8003d02:	e000      	b.n	8003d06 <NVIC_EncodePriority+0x32>
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	401a      	ands	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43d9      	mvns	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	4313      	orrs	r3, r2
         );
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	@ 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d4c:	d301      	bcc.n	8003d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00f      	b.n	8003d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d52:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <SysTick_Config+0x40>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d60:	f7ff ff8e 	bl	8003c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <SysTick_Config+0x40>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6a:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <SysTick_Config+0x40>)
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff29 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff40 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff90 	bl	8003cd4 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5f 	bl	8003c80 <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff33 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa4 	bl	8003d3c <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e147      	b.n	80040a2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd fe98 	bl	8001b5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0210 	bic.w	r2, r2, #16
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e3c:	f7fe f92a 	bl	8002094 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e42:	e012      	b.n	8003e6a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e44:	f7fe f926 	bl	8002094 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d90b      	bls.n	8003e6a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e11b      	b.n	80040a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d0e5      	beq.n	8003e44 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e88:	f7fe f904 	bl	8002094 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e8e:	e012      	b.n	8003eb6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e90:	f7fe f900 	bl	8002094 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b0a      	cmp	r3, #10
 8003e9c:	d90b      	bls.n	8003eb6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2203      	movs	r2, #3
 8003eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0f5      	b.n	80040a2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0e5      	beq.n	8003e90 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0202 	orr.w	r2, r2, #2
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a74      	ldr	r2, [pc, #464]	@ (80040ac <HAL_FDCAN_Init+0x2ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d103      	bne.n	8003ee6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ede:	4a74      	ldr	r2, [pc, #464]	@ (80040b0 <HAL_FDCAN_Init+0x2b0>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7c1b      	ldrb	r3, [r3, #16]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d108      	bne.n	8003f00 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699a      	ldr	r2, [r3, #24]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003efc:	619a      	str	r2, [r3, #24]
 8003efe:	e007      	b.n	8003f10 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7c5b      	ldrb	r3, [r3, #17]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	e007      	b.n	8003f3a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f38:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7c9b      	ldrb	r3, [r3, #18]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d108      	bne.n	8003f54 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f50:	619a      	str	r2, [r3, #24]
 8003f52:	e007      	b.n	8003f64 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f62:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003f88:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0210 	bic.w	r2, r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d108      	bne.n	8003fb4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0204 	orr.w	r2, r2, #4
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	e02c      	b.n	800400e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d028      	beq.n	800400e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d01c      	beq.n	8003ffe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0210 	orr.w	r2, r2, #16
 8003fe2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d110      	bne.n	800400e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	619a      	str	r2, [r3, #24]
 8003ffc:	e007      	b.n	800400e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0220 	orr.w	r2, r2, #32
 800400c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	3b01      	subs	r3, #1
 8004014:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	3b01      	subs	r3, #1
 800401c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800401e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004026:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004036:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004038:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004042:	d115      	bne.n	8004070 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	3b01      	subs	r3, #1
 8004050:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004052:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	3b01      	subs	r3, #1
 800405a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800405c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	3b01      	subs	r3, #1
 8004066:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800406c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800406e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fc0e 	bl	80048a8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40006400 	.word	0x40006400
 80040b0:	40006500 	.word	0x40006500

080040b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d110      	bne.n	80040ea <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e006      	b.n	80040f8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d12c      	bne.n	8004176 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004130:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e023      	b.n	8004184 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fbfe 	bl	8004954 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2101      	movs	r1, #1
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004168:	2201      	movs	r2, #1
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	409a      	lsls	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e006      	b.n	8004184 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417a:	f043 0208 	orr.w	r2, r3, #8
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800418c:	b480      	push	{r7}
 800418e:	b08b      	sub	sp, #44	@ 0x2c
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041a4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80041a6:	7efb      	ldrb	r3, [r7, #27]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f040 80e8 	bne.w	800437e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d137      	bne.n	8004224 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0db      	b.n	800438c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041dc:	0e1b      	lsrs	r3, r3, #24
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10a      	bne.n	80041fc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ee:	0a5b      	lsrs	r3, r3, #9
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80041f8:	2301      	movs	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
 8004222:	e036      	b.n	8004292 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004238:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0a3      	b.n	800438c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10a      	bne.n	800426c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004268:	2301      	movs	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	440b      	add	r3, r1
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	0c9b      	lsrs	r3, r3, #18
 80042ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e005      	b.n	80042c2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	3304      	adds	r3, #4
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	f003 020f 	and.w	r2, r3, #15
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0fda      	lsrs	r2, r3, #31
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	3304      	adds	r3, #4
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	e00a      	b.n	800434e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	441a      	add	r2, r3
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	440b      	add	r3, r1
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	3301      	adds	r3, #1
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a11      	ldr	r2, [pc, #68]	@ (8004398 <HAL_FDCAN_GetRxMessage+0x20c>)
 8004354:	5cd3      	ldrb	r3, [r2, r3]
 8004356:	461a      	mov	r2, r3
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	4293      	cmp	r3, r2
 800435c:	d3ec      	bcc.n	8004338 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d105      	bne.n	8004370 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800436e:	e004      	b.n	800437a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e006      	b.n	800438c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004382:	f043 0208 	orr.w	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	372c      	adds	r7, #44	@ 0x2c
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	080073ec 	.word	0x080073ec

0800439c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043d2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d003      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0x22>
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	f040 80c8 	bne.w	8004572 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03b      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d031      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d027      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01d      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13b      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d131      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d127      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11d      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d113      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0202 	orr.w	r2, r2, #2
 8004520:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	430a      	orrs	r2, r1
 800453c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	430a      	orrs	r2, r1
 800455a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	430a      	orrs	r2, r1
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e006      	b.n	8004580 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004576:	f043 0202 	orr.w	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
  }
}
 8004580:	4618      	mov	r0, r3
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	@ 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	4013      	ands	r3, r2
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c0:	4013      	ands	r3, r2
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	4013      	ands	r3, r2
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80045e6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	4013      	ands	r3, r2
 80045f2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80045fe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	4013      	ands	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2240      	movs	r2, #64	@ 0x40
 8004636:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f916 	bl	800486a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d019      	beq.n	800467c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d014      	beq.n	800467c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800465a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8d8 	bl	800482c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004688:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8a2 	bl	80047d6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800469e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80046a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fb fec8 	bl	8000438 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f897 	bl	80047ec <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f890 	bl	8004802 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d018      	beq.n	800471e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d013      	beq.n	800471e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046fe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2280      	movs	r2, #128	@ 0x80
 8004714:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f87c 	bl	8004816 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00c      	beq.n	8004742 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800473a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f880 	bl	8004842 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800475e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f878 	bl	8004856 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004782:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004788:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800479e:	69f9      	ldr	r1, [r7, #28]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f876 	bl	8004892 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f858 	bl	800487e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80047ce:	bf00      	nop
 80047d0:	3730      	adds	r7, #48	@ 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80048b0:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80048b2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	041a      	lsls	r2, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	061a      	lsls	r2, r3, #24
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e005      	b.n	8004936 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3304      	adds	r3, #4
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3f3      	bcc.n	800492a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	4000a400 	.word	0x4000a400

08004954 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	@ 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004972:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800497a:	4313      	orrs	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e00a      	b.n	8004996 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004988:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800498e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004990:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004994:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80049a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80049ac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	440b      	add	r3, r1
 80049c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3304      	adds	r3, #4
 80049d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	3304      	adds	r3, #4
 80049e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e020      	b.n	8004a2a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3303      	adds	r3, #3
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3302      	adds	r3, #2
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	440b      	add	r3, r1
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a00:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	440b      	add	r3, r1
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a0e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	440a      	add	r2, r1
 8004a16:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a18:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	3304      	adds	r3, #4
 8004a22:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3304      	adds	r3, #4
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a06      	ldr	r2, [pc, #24]	@ (8004a48 <FDCAN_CopyMessageToRAM+0xf4>)
 8004a30:	5cd3      	ldrb	r3, [r2, r3]
 8004a32:	461a      	mov	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d3d6      	bcc.n	80049e8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3724      	adds	r7, #36	@ 0x24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	080073ec 	.word	0x080073ec

08004a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a5a:	e15a      	b.n	8004d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	2101      	movs	r1, #1
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 814c 	beq.w	8004d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d005      	beq.n	8004a8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d130      	bne.n	8004aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	f003 0201 	and.w	r2, r3, #1
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d017      	beq.n	8004b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d123      	bne.n	8004b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	08da      	lsrs	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	08da      	lsrs	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3208      	adds	r2, #8
 8004b78:	6939      	ldr	r1, [r7, #16]
 8004b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80a6 	beq.w	8004d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d30 <HAL_GPIO_Init+0x2e4>)
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8004d30 <HAL_GPIO_Init+0x2e4>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bcc:	4b58      	ldr	r3, [pc, #352]	@ (8004d30 <HAL_GPIO_Init+0x2e4>)
 8004bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bd8:	4a56      	ldr	r2, [pc, #344]	@ (8004d34 <HAL_GPIO_Init+0x2e8>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	3302      	adds	r3, #2
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	220f      	movs	r2, #15
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c02:	d01f      	beq.n	8004c44 <HAL_GPIO_Init+0x1f8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a4c      	ldr	r2, [pc, #304]	@ (8004d38 <HAL_GPIO_Init+0x2ec>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d019      	beq.n	8004c40 <HAL_GPIO_Init+0x1f4>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8004d3c <HAL_GPIO_Init+0x2f0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <HAL_GPIO_Init+0x1f0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4a      	ldr	r2, [pc, #296]	@ (8004d40 <HAL_GPIO_Init+0x2f4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00d      	beq.n	8004c38 <HAL_GPIO_Init+0x1ec>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a49      	ldr	r2, [pc, #292]	@ (8004d44 <HAL_GPIO_Init+0x2f8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d007      	beq.n	8004c34 <HAL_GPIO_Init+0x1e8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a48      	ldr	r2, [pc, #288]	@ (8004d48 <HAL_GPIO_Init+0x2fc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_GPIO_Init+0x1e4>
 8004c2c:	2305      	movs	r3, #5
 8004c2e:	e00a      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c30:	2306      	movs	r3, #6
 8004c32:	e008      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c34:	2304      	movs	r3, #4
 8004c36:	e006      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e004      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e002      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <HAL_GPIO_Init+0x1fa>
 8004c44:	2300      	movs	r3, #0
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	f002 0203 	and.w	r2, r2, #3
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	4093      	lsls	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c56:	4937      	ldr	r1, [pc, #220]	@ (8004d34 <HAL_GPIO_Init+0x2e8>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c64:	4b39      	ldr	r3, [pc, #228]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c88:	4a30      	ldr	r2, [pc, #192]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cb2:	4a26      	ldr	r2, [pc, #152]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cb8:	4b24      	ldr	r3, [pc, #144]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d06:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <HAL_GPIO_Init+0x300>)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f ae9d 	bne.w	8004a5c <HAL_GPIO_Init+0x10>
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40010000 	.word	0x40010000
 8004d38:	48000400 	.word	0x48000400
 8004d3c:	48000800 	.word	0x48000800
 8004d40:	48000c00 	.word	0x48000c00
 8004d44:	48001000 	.word	0x48001000
 8004d48:	48001400 	.word	0x48001400
 8004d4c:	40010400 	.word	0x40010400

08004d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	807b      	strh	r3, [r7, #2]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d60:	787b      	ldrb	r3, [r7, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d6c:	e002      	b.n	8004d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d141      	bne.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9a:	d131      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d9c:	4b47      	ldr	r3, [pc, #284]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da2:	4a46      	ldr	r2, [pc, #280]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dac:	4b43      	ldr	r3, [pc, #268]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004db4:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dbc:	4b40      	ldr	r3, [pc, #256]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2232      	movs	r2, #50	@ 0x32
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	0c9b      	lsrs	r3, r3, #18
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd2:	e002      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dda:	4b38      	ldr	r3, [pc, #224]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de6:	d102      	bne.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f2      	bne.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dee:	4b33      	ldr	r3, [pc, #204]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfa:	d158      	bne.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e057      	b.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e00:	4b2e      	ldr	r3, [pc, #184]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e06:	4a2d      	ldr	r2, [pc, #180]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e10:	e04d      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e18:	d141      	bne.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e26:	d131      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2e:	4a23      	ldr	r2, [pc, #140]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e40:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e48:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2232      	movs	r2, #50	@ 0x32
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	0c9b      	lsrs	r3, r3, #18
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5e:	e002      	b.n	8004e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e66:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e72:	d102      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f2      	bne.n	8004e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e86:	d112      	bne.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e011      	b.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e9c:	e007      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e9e:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ea6:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	431bde83 	.word	0x431bde83

08004ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ed6:	6093      	str	r3, [r2, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40007000 	.word	0x40007000

08004ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e2fe      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d075      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f06:	4b97      	ldr	r3, [pc, #604]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f10:	4b94      	ldr	r3, [pc, #592]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d102      	bne.n	8004f26 <HAL_RCC_OscConfig+0x3e>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_OscConfig+0x44>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d10b      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d05b      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x108>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d157      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e2d9      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d106      	bne.n	8004f5c <HAL_RCC_OscConfig+0x74>
 8004f4e:	4b85      	ldr	r3, [pc, #532]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a84      	ldr	r2, [pc, #528]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e01d      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x98>
 8004f66:	4b7f      	ldr	r3, [pc, #508]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b7c      	ldr	r3, [pc, #496]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7b      	ldr	r2, [pc, #492]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e00b      	b.n	8004f98 <HAL_RCC_OscConfig+0xb0>
 8004f80:	4b78      	ldr	r3, [pc, #480]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a77      	ldr	r2, [pc, #476]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b75      	ldr	r3, [pc, #468]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a74      	ldr	r2, [pc, #464]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd f878 	bl	8002094 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fd f874 	bl	8002094 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	@ 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e29e      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0xc0>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd f864 	bl	8002094 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fd f860 	bl	8002094 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e28a      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe2:	4b60      	ldr	r3, [pc, #384]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0xe8>
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d075      	beq.n	80050ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005008:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d102      	bne.n	800501e <HAL_RCC_OscConfig+0x136>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d002      	beq.n	8005024 <HAL_RCC_OscConfig+0x13c>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d11f      	bne.n	8005064 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005024:	4b4f      	ldr	r3, [pc, #316]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_OscConfig+0x154>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e25d      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503c:	4b49      	ldr	r3, [pc, #292]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	4946      	ldr	r1, [pc, #280]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005050:	4b45      	ldr	r3, [pc, #276]	@ (8005168 <HAL_RCC_OscConfig+0x280>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fc ffd1 	bl	8001ffc <HAL_InitTick>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d043      	beq.n	80050e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e249      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d023      	beq.n	80050b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800506c:	4b3d      	ldr	r3, [pc, #244]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3c      	ldr	r2, [pc, #240]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fd f80c 	bl	8002094 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005080:	f7fd f808 	bl	8002094 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e232      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005092:	4b34      	ldr	r3, [pc, #208]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	4b31      	ldr	r3, [pc, #196]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	492d      	ldr	r1, [pc, #180]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
 80050b2:	e01a      	b.n	80050ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fc ffe8 	bl	8002094 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fc ffe4 	bl	8002094 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e20e      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050da:	4b22      	ldr	r3, [pc, #136]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x1e0>
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d041      	beq.n	800517a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01c      	beq.n	8005138 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fe:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005104:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fc ffc1 	bl	8002094 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005116:	f7fc ffbd 	bl	8002094 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e1e7      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005128:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800512a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ef      	beq.n	8005116 <HAL_RCC_OscConfig+0x22e>
 8005136:	e020      	b.n	800517a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513e:	4a09      	ldr	r2, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x27c>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fc ffa4 	bl	8002094 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800514e:	e00d      	b.n	800516c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005150:	f7fc ffa0 	bl	8002094 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d906      	bls.n	800516c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e1ca      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800516c:	4b8c      	ldr	r3, [pc, #560]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ea      	bne.n	8005150 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80a6 	beq.w	80052d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005188:	2300      	movs	r3, #0
 800518a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800518c:	4b84      	ldr	r3, [pc, #528]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_OscConfig+0x2b4>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x2b6>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b7f      	ldr	r3, [pc, #508]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	4a7e      	ldr	r2, [pc, #504]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ae:	4b7c      	ldr	r3, [pc, #496]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051be:	4b79      	ldr	r3, [pc, #484]	@ (80053a4 <HAL_RCC_OscConfig+0x4bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ca:	4b76      	ldr	r3, [pc, #472]	@ (80053a4 <HAL_RCC_OscConfig+0x4bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a75      	ldr	r2, [pc, #468]	@ (80053a4 <HAL_RCC_OscConfig+0x4bc>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fc ff5d 	bl	8002094 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fc ff59 	bl	8002094 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e183      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f0:	4b6c      	ldr	r3, [pc, #432]	@ (80053a4 <HAL_RCC_OscConfig+0x4bc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d108      	bne.n	8005216 <HAL_RCC_OscConfig+0x32e>
 8005204:	4b66      	ldr	r3, [pc, #408]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	4a65      	ldr	r2, [pc, #404]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005214:	e024      	b.n	8005260 <HAL_RCC_OscConfig+0x378>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d110      	bne.n	8005240 <HAL_RCC_OscConfig+0x358>
 800521e:	4b60      	ldr	r3, [pc, #384]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005224:	4a5e      	ldr	r2, [pc, #376]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800522e:	4b5c      	ldr	r3, [pc, #368]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	4a5a      	ldr	r2, [pc, #360]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523e:	e00f      	b.n	8005260 <HAL_RCC_OscConfig+0x378>
 8005240:	4b57      	ldr	r3, [pc, #348]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005246:	4a56      	ldr	r2, [pc, #344]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005250:	4b53      	ldr	r3, [pc, #332]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	4a52      	ldr	r2, [pc, #328]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d016      	beq.n	8005296 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fc ff14 	bl	8002094 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc ff10 	bl	8002094 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e138      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005286:	4b46      	ldr	r3, [pc, #280]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ed      	beq.n	8005270 <HAL_RCC_OscConfig+0x388>
 8005294:	e015      	b.n	80052c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fc fefd 	bl	8002094 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc fef9 	bl	8002094 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e121      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b4:	4b3a      	ldr	r3, [pc, #232]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ed      	bne.n	800529e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052c2:	7ffb      	ldrb	r3, [r7, #31]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b35      	ldr	r3, [pc, #212]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	4a34      	ldr	r2, [pc, #208]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d03c      	beq.n	800535a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01c      	beq.n	8005322 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e8:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ee:	4a2c      	ldr	r2, [pc, #176]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc fecc 	bl	8002094 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005300:	f7fc fec8 	bl	8002094 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0f2      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ef      	beq.n	8005300 <HAL_RCC_OscConfig+0x418>
 8005320:	e01b      	b.n	800535a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005322:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005328:	4a1d      	ldr	r2, [pc, #116]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fc feaf 	bl	8002094 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800533a:	f7fc feab 	bl	8002094 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e0d5      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800534c:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ef      	bne.n	800533a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80c9 	beq.w	80054f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005364:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b0c      	cmp	r3, #12
 800536e:	f000 8083 	beq.w	8005478 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d15e      	bne.n	8005438 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a08      	ldr	r2, [pc, #32]	@ (80053a0 <HAL_RCC_OscConfig+0x4b8>)
 8005380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fc fe85 	bl	8002094 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800538c:	e00c      	b.n	80053a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538e:	f7fc fe81 	bl	8002094 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d905      	bls.n	80053a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e0ab      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a8:	4b55      	ldr	r3, [pc, #340]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ec      	bne.n	800538e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b4:	4b52      	ldr	r3, [pc, #328]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	4b52      	ldr	r3, [pc, #328]	@ (8005504 <HAL_RCC_OscConfig+0x61c>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6a11      	ldr	r1, [r2, #32]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053c4:	3a01      	subs	r2, #1
 80053c6:	0112      	lsls	r2, r2, #4
 80053c8:	4311      	orrs	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053ce:	0212      	lsls	r2, r2, #8
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053d6:	0852      	lsrs	r2, r2, #1
 80053d8:	3a01      	subs	r2, #1
 80053da:	0552      	lsls	r2, r2, #21
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053e2:	0852      	lsrs	r2, r2, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0652      	lsls	r2, r2, #25
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053ee:	06d2      	lsls	r2, r2, #27
 80053f0:	430a      	orrs	r2, r1
 80053f2:	4943      	ldr	r1, [pc, #268]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f8:	4b41      	ldr	r3, [pc, #260]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a40      	ldr	r2, [pc, #256]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005402:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005404:	4b3e      	ldr	r3, [pc, #248]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a3d      	ldr	r2, [pc, #244]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fc fe40 	bl	8002094 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005418:	f7fc fe3c 	bl	8002094 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e066      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542a:	4b35      	ldr	r3, [pc, #212]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x530>
 8005436:	e05e      	b.n	80054f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4b31      	ldr	r3, [pc, #196]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a30      	ldr	r2, [pc, #192]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fc fe26 	bl	8002094 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fc fe22 	bl	8002094 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04c      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545e:	4b28      	ldr	r3, [pc, #160]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	4924      	ldr	r1, [pc, #144]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 8005470:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <HAL_RCC_OscConfig+0x620>)
 8005472:	4013      	ands	r3, r2
 8005474:	60cb      	str	r3, [r1, #12]
 8005476:	e03e      	b.n	80054f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e039      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005484:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_OscConfig+0x618>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f003 0203 	and.w	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	429a      	cmp	r2, r3
 8005496:	d12c      	bne.n	80054f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	3b01      	subs	r3, #1
 80054a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d123      	bne.n	80054f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d11b      	bne.n	80054f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d113      	bne.n	80054f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d109      	bne.n	80054f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	3b01      	subs	r3, #1
 80054ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000
 8005504:	019f800c 	.word	0x019f800c
 8005508:	feeefffc 	.word	0xfeeefffc

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e11e      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005524:	4b91      	ldr	r3, [pc, #580]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d910      	bls.n	8005554 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b8e      	ldr	r3, [pc, #568]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 020f 	bic.w	r2, r3, #15
 800553a:	498c      	ldr	r1, [pc, #560]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b8a      	ldr	r3, [pc, #552]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e106      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d073      	beq.n	8005648 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d129      	bne.n	80055bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005568:	4b81      	ldr	r3, [pc, #516]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0f4      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005578:	f000 f966 	bl	8005848 <RCC_GetSysClockFreqFromPLLSource>
 800557c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4a7c      	ldr	r2, [pc, #496]	@ (8005774 <HAL_RCC_ClockConfig+0x268>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d93f      	bls.n	8005606 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005586:	4b7a      	ldr	r3, [pc, #488]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d033      	beq.n	8005606 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d12f      	bne.n	8005606 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055a6:	4b72      	ldr	r3, [pc, #456]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ae:	4a70      	ldr	r2, [pc, #448]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e024      	b.n	8005606 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d107      	bne.n	80055d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0c6      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d4:	4b66      	ldr	r3, [pc, #408]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0be      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055e4:	f000 f8ce 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4a61      	ldr	r2, [pc, #388]	@ (8005774 <HAL_RCC_ClockConfig+0x268>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d909      	bls.n	8005606 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055fa:	4a5d      	ldr	r2, [pc, #372]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005600:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005602:	2380      	movs	r3, #128	@ 0x80
 8005604:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b5a      	ldr	r3, [pc, #360]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4957      	ldr	r1, [pc, #348]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005618:	f7fc fd3c 	bl	8002094 <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fc fd38 	bl	8002094 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e095      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b4e      	ldr	r3, [pc, #312]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d023      	beq.n	800569c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005660:	4b43      	ldr	r3, [pc, #268]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a42      	ldr	r2, [pc, #264]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800566a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005678:	4b3d      	ldr	r3, [pc, #244]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005680:	4a3b      	ldr	r2, [pc, #236]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005682:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005686:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005688:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4936      	ldr	r1, [pc, #216]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
 800569a:	e008      	b.n	80056ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b80      	cmp	r3, #128	@ 0x80
 80056a0:	d105      	bne.n	80056ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056a2:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a32      	ldr	r2, [pc, #200]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ae:	4b2f      	ldr	r3, [pc, #188]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d21d      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056bc:	4b2b      	ldr	r3, [pc, #172]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 020f 	bic.w	r2, r3, #15
 80056c4:	4929      	ldr	r1, [pc, #164]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056cc:	f7fc fce2 	bl	8002094 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fc fcde 	bl	8002094 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e03b      	b.n	8005762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b20      	ldr	r3, [pc, #128]	@ (800576c <HAL_RCC_ClockConfig+0x260>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1ed      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005704:	4b1a      	ldr	r3, [pc, #104]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4917      	ldr	r1, [pc, #92]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005722:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	490f      	ldr	r1, [pc, #60]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005736:	f000 f825 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 800573a:	4602      	mov	r2, r0
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <HAL_RCC_ClockConfig+0x264>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	490c      	ldr	r1, [pc, #48]	@ (8005778 <HAL_RCC_ClockConfig+0x26c>)
 8005748:	5ccb      	ldrb	r3, [r1, r3]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	4a0a      	ldr	r2, [pc, #40]	@ (800577c <HAL_RCC_ClockConfig+0x270>)
 8005754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005756:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <HAL_RCC_ClockConfig+0x274>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fc fc4e 	bl	8001ffc <HAL_InitTick>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40022000 	.word	0x40022000
 8005770:	40021000 	.word	0x40021000
 8005774:	04c4b400 	.word	0x04c4b400
 8005778:	080073dc 	.word	0x080073dc
 800577c:	20000000 	.word	0x20000000
 8005780:	20000004 	.word	0x20000004

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800578a:	4b2c      	ldr	r3, [pc, #176]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b04      	cmp	r3, #4
 8005794:	d102      	bne.n	800579c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005796:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e047      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800579c:	4b27      	ldr	r3, [pc, #156]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d102      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a8:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e03e      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057ae:	4b23      	ldr	r3, [pc, #140]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d136      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ba:	4b20      	ldr	r3, [pc, #128]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c4:	4b1d      	ldr	r3, [pc, #116]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3301      	adds	r3, #1
 80057d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d10c      	bne.n	80057f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	4a16      	ldr	r2, [pc, #88]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e2:	68d2      	ldr	r2, [r2, #12]
 80057e4:	0a12      	lsrs	r2, r2, #8
 80057e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	617b      	str	r3, [r7, #20]
      break;
 80057f0:	e00c      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057f2:	4a13      	ldr	r2, [pc, #76]	@ (8005840 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	4a10      	ldr	r2, [pc, #64]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	0a12      	lsrs	r2, r2, #8
 8005800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]
      break;
 800580a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_GetSysClockFreq+0xb8>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0e5b      	lsrs	r3, r3, #25
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	3301      	adds	r3, #1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e001      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800582c:	693b      	ldr	r3, [r7, #16]
}
 800582e:	4618      	mov	r0, r3
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	00f42400 	.word	0x00f42400
 8005844:	007a1200 	.word	0x007a1200

08005848 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005858:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d10c      	bne.n	8005886 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800586c:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005876:	68d2      	ldr	r2, [r2, #12]
 8005878:	0a12      	lsrs	r2, r2, #8
 800587a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
    break;
 8005884:	e00c      	b.n	80058a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005886:	4a12      	ldr	r2, [pc, #72]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	4a0e      	ldr	r2, [pc, #56]	@ (80058c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005890:	68d2      	ldr	r2, [r2, #12]
 8005892:	0a12      	lsrs	r2, r2, #8
 8005894:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005898:	fb02 f303 	mul.w	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]
    break;
 800589e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058a0:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	0e5b      	lsrs	r3, r3, #25
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058ba:	687b      	ldr	r3, [r7, #4]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40021000 	.word	0x40021000
 80058cc:	007a1200 	.word	0x007a1200
 80058d0:	00f42400 	.word	0x00f42400

080058d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058dc:	2300      	movs	r3, #0
 80058de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058e0:	2300      	movs	r3, #0
 80058e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8098 	beq.w	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f6:	4b43      	ldr	r3, [pc, #268]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b40      	ldr	r3, [pc, #256]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	4a3f      	ldr	r2, [pc, #252]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	@ 0x58
 800590e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800591e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a39      	ldr	r2, [pc, #228]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800592a:	f7fc fbb3 	bl	8002094 <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005930:	e009      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005932:	f7fc fbaf 	bl	8002094 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d902      	bls.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	74fb      	strb	r3, [r7, #19]
        break;
 8005944:	e005      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005946:	4b30      	ldr	r3, [pc, #192]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d159      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005958:	4b2a      	ldr	r3, [pc, #168]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005962:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01e      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	429a      	cmp	r2, r3
 8005972:	d019      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005974:	4b23      	ldr	r3, [pc, #140]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005980:	4b20      	ldr	r3, [pc, #128]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005990:	4b1c      	ldr	r3, [pc, #112]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	4a1b      	ldr	r2, [pc, #108]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059a0:	4a18      	ldr	r2, [pc, #96]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d016      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fc fb6f 	bl	8002094 <HAL_GetTick>
 80059b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b8:	e00b      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fc fb6b 	bl	8002094 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d902      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	74fb      	strb	r3, [r7, #19]
            break;
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ec      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059e0:	7cfb      	ldrb	r3, [r7, #19]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e6:	4b07      	ldr	r3, [pc, #28]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	4903      	ldr	r1, [pc, #12]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059fc:	e008      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	74bb      	strb	r3, [r7, #18]
 8005a02:	e005      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a10:	7c7b      	ldrb	r3, [r7, #17]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a16:	4ba6      	ldr	r3, [pc, #664]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1a:	4aa5      	ldr	r2, [pc, #660]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a2e:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f023 0203 	bic.w	r2, r3, #3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	499c      	ldr	r1, [pc, #624]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a50:	4b97      	ldr	r3, [pc, #604]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 020c 	bic.w	r2, r3, #12
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	4994      	ldr	r1, [pc, #592]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a72:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	498b      	ldr	r1, [pc, #556]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a94:	4b86      	ldr	r3, [pc, #536]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	4983      	ldr	r1, [pc, #524]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	497a      	ldr	r1, [pc, #488]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ad8:	4b75      	ldr	r3, [pc, #468]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	4972      	ldr	r1, [pc, #456]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005afa:	4b6d      	ldr	r3, [pc, #436]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	4969      	ldr	r1, [pc, #420]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b1c:	4b64      	ldr	r3, [pc, #400]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4961      	ldr	r1, [pc, #388]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	4958      	ldr	r1, [pc, #352]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b60:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6e:	4950      	ldr	r1, [pc, #320]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b80:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a4a      	ldr	r2, [pc, #296]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b98:	4b45      	ldr	r3, [pc, #276]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	4942      	ldr	r1, [pc, #264]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bd0:	4b37      	ldr	r3, [pc, #220]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	4934      	ldr	r1, [pc, #208]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bfa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c08:	4b29      	ldr	r3, [pc, #164]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c16:	4926      	ldr	r1, [pc, #152]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c28:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c40:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	4918      	ldr	r1, [pc, #96]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a12      	ldr	r2, [pc, #72]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c78:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	490a      	ldr	r1, [pc, #40]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ca4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e049      	b.n	8005d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb ffa0 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f000 fd92 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d001      	beq.n	8005d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e04a      	b.n	8005e12 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a21      	ldr	r2, [pc, #132]	@ (8005e20 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da6:	d013      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <HAL_TIM_Base_Start_IT+0xc0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d115      	bne.n	8005dfc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d015      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0xaa>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de8:	d011      	beq.n	8005e0e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e008      	b.n	8005e0e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	00010007 	.word	0x00010007

08005e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e049      	b.n	8005ede <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f841 	bl	8005ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fcd0 	bl	800681c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x24>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e03c      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d109      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x3e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e02f      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d109      	bne.n	8005f54 <HAL_TIM_PWM_Start+0x58>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e022      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d109      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x72>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e015      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d109      	bne.n	8005f88 <HAL_TIM_PWM_Start+0x8c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	e008      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e097      	b.n	80060d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xb6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb0:	e023      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xc6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc0:	e01b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xe6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xf6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f838 	bl	8007078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a33      	ldr	r2, [pc, #204]	@ (80060dc <HAL_TIM_PWM_Start+0x1e0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_PWM_Start+0x13e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a32      	ldr	r2, [pc, #200]	@ (80060e0 <HAL_TIM_PWM_Start+0x1e4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_PWM_Start+0x13e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a30      	ldr	r2, [pc, #192]	@ (80060e4 <HAL_TIM_PWM_Start+0x1e8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_PWM_Start+0x13e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2f      	ldr	r2, [pc, #188]	@ (80060e8 <HAL_TIM_PWM_Start+0x1ec>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start+0x13e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <HAL_TIM_PWM_Start+0x1f0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d101      	bne.n	800603e <HAL_TIM_PWM_Start+0x142>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <HAL_TIM_PWM_Start+0x144>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006052:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a20      	ldr	r2, [pc, #128]	@ (80060dc <HAL_TIM_PWM_Start+0x1e0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d018      	beq.n	8006090 <HAL_TIM_PWM_Start+0x194>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006066:	d013      	beq.n	8006090 <HAL_TIM_PWM_Start+0x194>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <HAL_TIM_PWM_Start+0x1f4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00e      	beq.n	8006090 <HAL_TIM_PWM_Start+0x194>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <HAL_TIM_PWM_Start+0x1f8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_TIM_PWM_Start+0x194>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <HAL_TIM_PWM_Start+0x1e4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_TIM_PWM_Start+0x194>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a16      	ldr	r2, [pc, #88]	@ (80060e4 <HAL_TIM_PWM_Start+0x1e8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d115      	bne.n	80060bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	4b18      	ldr	r3, [pc, #96]	@ (80060f8 <HAL_TIM_PWM_Start+0x1fc>)
 8006098:	4013      	ands	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d015      	beq.n	80060ce <HAL_TIM_PWM_Start+0x1d2>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a8:	d011      	beq.n	80060ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	e008      	b.n	80060ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e000      	b.n	80060d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	00010007 	.word	0x00010007

080060fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0202 	mvn.w	r2, #2
 8006130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb4a 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb3c 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fb4d 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0204 	mvn.w	r2, #4
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fb24 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb16 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb27 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0208 	mvn.w	r2, #8
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2204      	movs	r2, #4
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fafe 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 faf0 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb01 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d020      	beq.n	8006244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01b      	beq.n	8006244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0210 	mvn.w	r2, #16
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2208      	movs	r2, #8
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fad8 	bl	80067e0 <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 faca 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fadb 	bl	80067f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0201 	mvn.w	r2, #1
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 faa8 	bl	80067b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800628e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 f82f 	bl	80072f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f827 	bl	8007308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fa95 	bl	8006808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0220 	mvn.w	r2, #32
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 ffef 	bl	80072e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fffb 	bl	800731c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fff3 	bl	8007330 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 ffeb 	bl	8007344 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 ffe3 	bl	8007358 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0ff      	b.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b14      	cmp	r3, #20
 80063c6:	f200 80f0 	bhi.w	80065aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	08006425 	.word	0x08006425
 80063d4:	080065ab 	.word	0x080065ab
 80063d8:	080065ab 	.word	0x080065ab
 80063dc:	080065ab 	.word	0x080065ab
 80063e0:	08006465 	.word	0x08006465
 80063e4:	080065ab 	.word	0x080065ab
 80063e8:	080065ab 	.word	0x080065ab
 80063ec:	080065ab 	.word	0x080065ab
 80063f0:	080064a7 	.word	0x080064a7
 80063f4:	080065ab 	.word	0x080065ab
 80063f8:	080065ab 	.word	0x080065ab
 80063fc:	080065ab 	.word	0x080065ab
 8006400:	080064e7 	.word	0x080064e7
 8006404:	080065ab 	.word	0x080065ab
 8006408:	080065ab 	.word	0x080065ab
 800640c:	080065ab 	.word	0x080065ab
 8006410:	08006529 	.word	0x08006529
 8006414:	080065ab 	.word	0x080065ab
 8006418:	080065ab 	.word	0x080065ab
 800641c:	080065ab 	.word	0x080065ab
 8006420:	08006569 	.word	0x08006569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa92 	bl	8006954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6999      	ldr	r1, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	619a      	str	r2, [r3, #24]
      break;
 8006462:	e0a5      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fb02 	bl	8006a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	619a      	str	r2, [r3, #24]
      break;
 80064a4:	e084      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fb6b 	bl	8006b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0208 	orr.w	r2, r2, #8
 80064c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0204 	bic.w	r2, r2, #4
 80064d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	61da      	str	r2, [r3, #28]
      break;
 80064e4:	e064      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fbd3 	bl	8006c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	021a      	lsls	r2, r3, #8
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	61da      	str	r2, [r3, #28]
      break;
 8006526:	e043      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fc3c 	bl	8006dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006566:	e023      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fc80 	bl	8006e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006582:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006592:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80065a8:	e002      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop

080065c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c>
 80065dc:	2302      	movs	r3, #2
 80065de:	e0de      	b.n	800679e <HAL_TIM_ConfigClockSource+0x1da>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80065fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800660a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a63      	ldr	r2, [pc, #396]	@ (80067a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	f000 80a9 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 8006620:	4a61      	ldr	r2, [pc, #388]	@ (80067a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f200 80ae 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006628:	4a60      	ldr	r2, [pc, #384]	@ (80067ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	f000 80a1 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 8006630:	4a5e      	ldr	r2, [pc, #376]	@ (80067ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f200 80a6 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006638:	4a5d      	ldr	r2, [pc, #372]	@ (80067b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f000 8099 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 8006640:	4a5b      	ldr	r2, [pc, #364]	@ (80067b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f200 809e 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006648:	4a5a      	ldr	r2, [pc, #360]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f000 8091 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 8006650:	4a58      	ldr	r2, [pc, #352]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f200 8096 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800665c:	f000 8089 	beq.w	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 8006660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006664:	f200 808e 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0x128>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x1c6>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006684:	2b70      	cmp	r3, #112	@ 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xfa>
 8006688:	2b70      	cmp	r3, #112	@ 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 800668c:	2b60      	cmp	r3, #96	@ 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x16e>
 8006690:	2b60      	cmp	r3, #96	@ 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 8006694:	2b50      	cmp	r3, #80	@ 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x14e>
 8006698:	2b50      	cmp	r3, #80	@ 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x18e>
 80066a0:	2b40      	cmp	r3, #64	@ 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 80066a4:	2b30      	cmp	r3, #48	@ 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 80066a8:	2b30      	cmp	r3, #48	@ 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x1ae>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	f000 fcb3 	bl	8007038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	f000 fc9c 	bl	8007038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fc0e 	bl	8006f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	@ 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fc67 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fc2d 	bl	8006f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	@ 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fc57 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fbee 	bl	8006f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	@ 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fc47 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 fc3e 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	00100070 	.word	0x00100070
 80067ac:	00100040 	.word	0x00100040
 80067b0:	00100030 	.word	0x00100030
 80067b4:	00100020 	.word	0x00100020

080067b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a42      	ldr	r2, [pc, #264]	@ (8006938 <TIM_Base_SetConfig+0x11c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683a:	d00b      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a3f      	ldr	r2, [pc, #252]	@ (800693c <TIM_Base_SetConfig+0x120>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a3e      	ldr	r2, [pc, #248]	@ (8006940 <TIM_Base_SetConfig+0x124>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x38>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a3d      	ldr	r2, [pc, #244]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <TIM_Base_SetConfig+0x11c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01b      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006874:	d017      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a30      	ldr	r2, [pc, #192]	@ (800693c <TIM_Base_SetConfig+0x120>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2f      	ldr	r2, [pc, #188]	@ (8006940 <TIM_Base_SetConfig+0x124>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00f      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2d      	ldr	r2, [pc, #180]	@ (8006948 <TIM_Base_SetConfig+0x12c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2c      	ldr	r2, [pc, #176]	@ (800694c <TIM_Base_SetConfig+0x130>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006950 <TIM_Base_SetConfig+0x134>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d108      	bne.n	80068b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a16      	ldr	r2, [pc, #88]	@ (8006938 <TIM_Base_SetConfig+0x11c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00f      	beq.n	8006904 <TIM_Base_SetConfig+0xe8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a17      	ldr	r2, [pc, #92]	@ (8006944 <TIM_Base_SetConfig+0x128>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00b      	beq.n	8006904 <TIM_Base_SetConfig+0xe8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a16      	ldr	r2, [pc, #88]	@ (8006948 <TIM_Base_SetConfig+0x12c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d007      	beq.n	8006904 <TIM_Base_SetConfig+0xe8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <TIM_Base_SetConfig+0x130>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_Base_SetConfig+0xe8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <TIM_Base_SetConfig+0x134>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d103      	bne.n	800690c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f023 0201 	bic.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]
  }
}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40000400 	.word	0x40000400
 8006940:	40000800 	.word	0x40000800
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f023 0201 	bic.w	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f023 0302 	bic.w	r3, r3, #2
 80069a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006a60 <TIM_OC1_SetConfig+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_OC1_SetConfig+0x80>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a64 <TIM_OC1_SetConfig+0x110>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_OC1_SetConfig+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a2a      	ldr	r2, [pc, #168]	@ (8006a68 <TIM_OC1_SetConfig+0x114>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_OC1_SetConfig+0x80>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a29      	ldr	r2, [pc, #164]	@ (8006a6c <TIM_OC1_SetConfig+0x118>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC1_SetConfig+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a28      	ldr	r2, [pc, #160]	@ (8006a70 <TIM_OC1_SetConfig+0x11c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10c      	bne.n	80069ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0308 	bic.w	r3, r3, #8
 80069da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 0304 	bic.w	r3, r3, #4
 80069ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <TIM_OC1_SetConfig+0x10c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_OC1_SetConfig+0xc2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <TIM_OC1_SetConfig+0x110>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_OC1_SetConfig+0xc2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <TIM_OC1_SetConfig+0x114>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_OC1_SetConfig+0xc2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <TIM_OC1_SetConfig+0x118>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_OC1_SetConfig+0xc2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <TIM_OC1_SetConfig+0x11c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d111      	bne.n	8006a3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	621a      	str	r2, [r3, #32]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800

08006a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0320 	bic.w	r3, r3, #32
 8006ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a28      	ldr	r2, [pc, #160]	@ (8006b74 <TIM_OC2_SetConfig+0x100>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC2_SetConfig+0x6c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a27      	ldr	r2, [pc, #156]	@ (8006b78 <TIM_OC2_SetConfig+0x104>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10d      	bne.n	8006afc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b74 <TIM_OC2_SetConfig+0x100>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_OC2_SetConfig+0xb0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	@ (8006b78 <TIM_OC2_SetConfig+0x104>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_OC2_SetConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b7c <TIM_OC2_SetConfig+0x108>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_OC2_SetConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1a      	ldr	r2, [pc, #104]	@ (8006b80 <TIM_OC2_SetConfig+0x10c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC2_SetConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a19      	ldr	r2, [pc, #100]	@ (8006b84 <TIM_OC2_SetConfig+0x110>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d113      	bne.n	8006b4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40012c00 	.word	0x40012c00
 8006b78:	40013400 	.word	0x40013400
 8006b7c:	40014000 	.word	0x40014000
 8006b80:	40014400 	.word	0x40014400
 8006b84:	40014800 	.word	0x40014800

08006b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a27      	ldr	r2, [pc, #156]	@ (8006c84 <TIM_OC3_SetConfig+0xfc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x6a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a26      	ldr	r2, [pc, #152]	@ (8006c88 <TIM_OC3_SetConfig+0x100>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d10d      	bne.n	8006c0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	@ (8006c84 <TIM_OC3_SetConfig+0xfc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00f      	beq.n	8006c36 <TIM_OC3_SetConfig+0xae>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <TIM_OC3_SetConfig+0x100>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00b      	beq.n	8006c36 <TIM_OC3_SetConfig+0xae>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1a      	ldr	r2, [pc, #104]	@ (8006c8c <TIM_OC3_SetConfig+0x104>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d007      	beq.n	8006c36 <TIM_OC3_SetConfig+0xae>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a19      	ldr	r2, [pc, #100]	@ (8006c90 <TIM_OC3_SetConfig+0x108>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_OC3_SetConfig+0xae>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a18      	ldr	r2, [pc, #96]	@ (8006c94 <TIM_OC3_SetConfig+0x10c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d113      	bne.n	8006c5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	40013400 	.word	0x40013400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800

08006c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	031b      	lsls	r3, r3, #12
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a28      	ldr	r2, [pc, #160]	@ (8006d98 <TIM_OC4_SetConfig+0x100>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_OC4_SetConfig+0x6c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a27      	ldr	r2, [pc, #156]	@ (8006d9c <TIM_OC4_SetConfig+0x104>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d10d      	bne.n	8006d20 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	@ (8006d98 <TIM_OC4_SetConfig+0x100>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00f      	beq.n	8006d48 <TIM_OC4_SetConfig+0xb0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <TIM_OC4_SetConfig+0x104>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00b      	beq.n	8006d48 <TIM_OC4_SetConfig+0xb0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1b      	ldr	r2, [pc, #108]	@ (8006da0 <TIM_OC4_SetConfig+0x108>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d007      	beq.n	8006d48 <TIM_OC4_SetConfig+0xb0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006da4 <TIM_OC4_SetConfig+0x10c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <TIM_OC4_SetConfig+0xb0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a19      	ldr	r2, [pc, #100]	@ (8006da8 <TIM_OC4_SetConfig+0x110>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d113      	bne.n	8006d70 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d56:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	019b      	lsls	r3, r3, #6
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40013400 	.word	0x40013400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800

08006dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a17      	ldr	r2, [pc, #92]	@ (8006e60 <TIM_OC5_SetConfig+0xb4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_OC5_SetConfig+0x7a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a16      	ldr	r2, [pc, #88]	@ (8006e64 <TIM_OC5_SetConfig+0xb8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_OC5_SetConfig+0x7a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a15      	ldr	r2, [pc, #84]	@ (8006e68 <TIM_OC5_SetConfig+0xbc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_OC5_SetConfig+0x7a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a14      	ldr	r2, [pc, #80]	@ (8006e6c <TIM_OC5_SetConfig+0xc0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC5_SetConfig+0x7a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a13      	ldr	r2, [pc, #76]	@ (8006e70 <TIM_OC5_SetConfig+0xc4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d109      	bne.n	8006e3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800

08006e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	051b      	lsls	r3, r3, #20
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <TIM_OC6_SetConfig+0xb8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00f      	beq.n	8006ef0 <TIM_OC6_SetConfig+0x7c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <TIM_OC6_SetConfig+0xbc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00b      	beq.n	8006ef0 <TIM_OC6_SetConfig+0x7c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <TIM_OC6_SetConfig+0xc0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d007      	beq.n	8006ef0 <TIM_OC6_SetConfig+0x7c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a15      	ldr	r2, [pc, #84]	@ (8006f38 <TIM_OC6_SetConfig+0xc4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC6_SetConfig+0x7c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a14      	ldr	r2, [pc, #80]	@ (8006f3c <TIM_OC6_SetConfig+0xc8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d109      	bne.n	8006f04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	029b      	lsls	r3, r3, #10
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40013400 	.word	0x40013400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800

08006f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f023 0201 	bic.w	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 030a 	bic.w	r3, r3, #10
 8006f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	621a      	str	r2, [r3, #32]
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f023 0210 	bic.w	r2, r3, #16
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	031b      	lsls	r3, r3, #12
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	f043 0307 	orr.w	r3, r3, #7
 8007024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	609a      	str	r2, [r3, #8]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	431a      	orrs	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2201      	movs	r2, #1
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	43db      	mvns	r3, r3
 800709a:	401a      	ands	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1a      	ldr	r2, [r3, #32]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	fa01 f303 	lsl.w	r3, r1, r3
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e065      	b.n	80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2c      	ldr	r2, [pc, #176]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2b      	ldr	r2, [pc, #172]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d108      	bne.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800712c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1b      	ldr	r2, [pc, #108]	@ (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d018      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007152:	d013      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a18      	ldr	r2, [pc, #96]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a17      	ldr	r2, [pc, #92]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a12      	ldr	r2, [pc, #72]	@ (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a13      	ldr	r2, [pc, #76]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10c      	bne.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	4313      	orrs	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40014000 	.word	0x40014000

080071c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e073      	b.n	80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a19      	ldr	r2, [pc, #100]	@ (80072d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a18      	ldr	r2, [pc, #96]	@ (80072dc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d11c      	bne.n	80072ba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	051b      	lsls	r3, r3, #20
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40013400 	.word	0x40013400

080072e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4d0d      	ldr	r5, [pc, #52]	@ (80073b4 <__libc_init_array+0x38>)
 8007380:	4c0d      	ldr	r4, [pc, #52]	@ (80073b8 <__libc_init_array+0x3c>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	2600      	movs	r6, #0
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	4d0b      	ldr	r5, [pc, #44]	@ (80073bc <__libc_init_array+0x40>)
 800738e:	4c0c      	ldr	r4, [pc, #48]	@ (80073c0 <__libc_init_array+0x44>)
 8007390:	f000 f818 	bl	80073c4 <_init>
 8007394:	1b64      	subs	r4, r4, r5
 8007396:	10a4      	asrs	r4, r4, #2
 8007398:	2600      	movs	r6, #0
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	080073fc 	.word	0x080073fc
 80073b8:	080073fc 	.word	0x080073fc
 80073bc:	080073fc 	.word	0x080073fc
 80073c0:	08007400 	.word	0x08007400

080073c4 <_init>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr

080073d0 <_fini>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr
