
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009868  08009868  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009870  08009870  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000060  080098d8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  080098d8  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2f6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000319a  00000000  00000000  0003b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001240  00000000  00000000  0003fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021819  00000000  00000000  00040f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adec  00000000  00000000  00062739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0b9f  00000000  00000000  0007d525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aa0  00000000  00000000  0015e0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00164b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009680 	.word	0x08009680

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08009680 	.word	0x08009680

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <decode_uart>:

#include "main.h"



void decode_uart(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if(strcmp(uart_rx_buffer,"PWM READ") == 0){
 80005e0:	4910      	ldr	r1, [pc, #64]	; (8000624 <decode_uart+0x48>)
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <decode_uart+0x4c>)
 80005e4:	f7ff fe1c 	bl	8000220 <strcmp>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d102      	bne.n	80005f4 <decode_uart+0x18>
		PWM();
 80005ee:	f000 f825 	bl	800063c <PWM>
 80005f2:	e011      	b.n	8000618 <decode_uart+0x3c>
	}else if(strcmp(uart_rx_buffer,"OUT READ") == 0){
 80005f4:	490d      	ldr	r1, [pc, #52]	; (800062c <decode_uart+0x50>)
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <decode_uart+0x4c>)
 80005f8:	f7ff fe12 	bl	8000220 <strcmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d102      	bne.n	8000608 <decode_uart+0x2c>
		OUT_READ();
 8000602:	f000 f851 	bl	80006a8 <OUT_READ>
 8000606:	e007      	b.n	8000618 <decode_uart+0x3c>
	}else{
		print_out(-1, "!!WRONG COMMAND!!", data_output_switch);
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <decode_uart+0x54>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <decode_uart+0x58>)
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 fc06 	bl	8000e24 <print_out>
	}

	command_received_flag = 0;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <decode_uart+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08009698 	.word	0x08009698
 8000628:	2000069c 	.word	0x2000069c
 800062c:	080096a4 	.word	0x080096a4
 8000630:	20000000 	.word	0x20000000
 8000634:	080096b0 	.word	0x080096b0
 8000638:	200006a5 	.word	0x200006a5

0800063c <PWM>:

void PWM(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	print_out(PWM_width[0], "PWM_1 PULSE WIDTH",data_output_switch);
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <PWM+0x50>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PWM+0x54>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4911      	ldr	r1, [pc, #68]	; (8000694 <PWM+0x58>)
 800064e:	f000 fbe9 	bl	8000e24 <print_out>
	print_out(PWM_speed[0], "PWM_1 frequency",data_output_switch);
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <PWM+0x5c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <PWM+0x54>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	490f      	ldr	r1, [pc, #60]	; (800069c <PWM+0x60>)
 8000660:	f000 fbe0 	bl	8000e24 <print_out>
	print_out(PWM_width[1], "PWM_2 PULSE WIDTH",data_output_switch);
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <PWM+0x50>)
 8000666:	885b      	ldrh	r3, [r3, #2]
 8000668:	4618      	mov	r0, r3
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <PWM+0x54>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	490b      	ldr	r1, [pc, #44]	; (80006a0 <PWM+0x64>)
 8000672:	f000 fbd7 	bl	8000e24 <print_out>
	print_out(PWM_speed[1], "PWM_2 frequency",data_output_switch);
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <PWM+0x5c>)
 8000678:	885b      	ldrh	r3, [r3, #2]
 800067a:	4618      	mov	r0, r3
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <PWM+0x54>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <PWM+0x68>)
 8000684:	f000 fbce 	bl	8000e24 <print_out>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200006b4 	.word	0x200006b4
 8000690:	20000000 	.word	0x20000000
 8000694:	080096c4 	.word	0x080096c4
 8000698:	200006b8 	.word	0x200006b8
 800069c:	080096d8 	.word	0x080096d8
 80006a0:	080096e8 	.word	0x080096e8
 80006a4:	080096fc 	.word	0x080096fc

080006a8 <OUT_READ>:

void OUT_READ(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	uint8_t status_bit;
	char msg[8];
	for(int i = 0; i < 8; i++){
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e01a      	b.n	80006ea <OUT_READ+0x42>
		status_bit = check_bit(Default_Switch_State, i);
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <OUT_READ+0x54>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fc46 	bl	8000f50 <check_bit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	72fb      	strb	r3, [r7, #11]
		sprintf(msg,"OUTPUT %d", i+1);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	463b      	mov	r3, r7
 80006ce:	490c      	ldr	r1, [pc, #48]	; (8000700 <OUT_READ+0x58>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f008 fb31 	bl	8008d38 <siprintf>
		print_out(status_bit,msg, data_output_switch);
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <OUT_READ+0x5c>)
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	4639      	mov	r1, r7
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fba0 	bl	8000e24 <print_out>
	for(int i = 0; i < 8; i++){
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	dde1      	ble.n	80006b4 <OUT_READ+0xc>
	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200006ab 	.word	0x200006ab
 8000700:	0800970c 	.word	0x0800970c
 8000704:	20000000 	.word	0x20000000

08000708 <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 800070c:	f000 f802 	bl	8000714 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <Config_1>:

void Config_1(void){
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 8000718:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <Config_1+0x17c>)
 800071a:	f240 726c 	movw	r2, #1900	; 0x76c
 800071e:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 8000720:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <Config_1+0x180>)
 8000722:	f640 0202 	movw	r2, #2050	; 0x802
 8000726:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 8000728:	4b5b      	ldr	r3, [pc, #364]	; (8000898 <Config_1+0x184>)
 800072a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800072e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 8000730:	4b5a      	ldr	r3, [pc, #360]	; (800089c <Config_1+0x188>)
 8000732:	f240 726c 	movw	r2, #1900	; 0x76c
 8000736:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 8000738:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <Config_1+0x18c>)
 800073a:	f640 0202 	movw	r2, #2050	; 0x802
 800073e:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 8000740:	4b58      	ldr	r3, [pc, #352]	; (80008a4 <Config_1+0x190>)
 8000742:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000746:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 8000748:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <Config_1+0x194>)
 800074a:	f240 726c 	movw	r2, #1900	; 0x76c
 800074e:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 8000750:	4b56      	ldr	r3, [pc, #344]	; (80008ac <Config_1+0x198>)
 8000752:	f640 0202 	movw	r2, #2050	; 0x802
 8000756:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 8000758:	4b55      	ldr	r3, [pc, #340]	; (80008b0 <Config_1+0x19c>)
 800075a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800075e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000760:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <Config_1+0x1a0>)
 8000762:	f240 726c 	movw	r2, #1900	; 0x76c
 8000766:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <Config_1+0x1a4>)
 800076a:	f640 0202 	movw	r2, #2050	; 0x802
 800076e:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000770:	4b52      	ldr	r3, [pc, #328]	; (80008bc <Config_1+0x1a8>)
 8000772:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000776:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 8000778:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <Config_1+0x1ac>)
 800077a:	f240 726c 	movw	r2, #1900	; 0x76c
 800077e:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000780:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <Config_1+0x1b0>)
 8000782:	f640 0202 	movw	r2, #2050	; 0x802
 8000786:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 8000788:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <Config_1+0x1b4>)
 800078a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800078e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000790:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <Config_1+0x1b8>)
 8000792:	f240 726c 	movw	r2, #1900	; 0x76c
 8000796:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 8000798:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <Config_1+0x1bc>)
 800079a:	f640 0202 	movw	r2, #2050	; 0x802
 800079e:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 80007a0:	4b4c      	ldr	r3, [pc, #304]	; (80008d4 <Config_1+0x1c0>)
 80007a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80007a6:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 80007a8:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <Config_1+0x1c4>)
 80007aa:	f240 726c 	movw	r2, #1900	; 0x76c
 80007ae:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 80007b0:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <Config_1+0x1c8>)
 80007b2:	f640 0202 	movw	r2, #2050	; 0x802
 80007b6:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <Config_1+0x1cc>)
 80007ba:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80007be:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 80007c0:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <Config_1+0x1d0>)
 80007c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80007c6:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <Config_1+0x1d4>)
 80007ca:	f640 0202 	movw	r2, #2050	; 0x802
 80007ce:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <Config_1+0x1d8>)
 80007d2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80007d6:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b00011011; //each bit represent one output [1,2,3,4,5,6,7,8]
 80007d8:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <Config_1+0x1dc>)
 80007da:	221b      	movs	r2, #27
 80007dc:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <Config_1+0x1e0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <Config_1+0x1e4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <Config_1+0x1e4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 80007f0:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <Config_1+0x1e0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	089b      	lsrs	r3, r3, #2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00c      	beq.n	8000816 <Config_1+0x102>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 80007fc:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <Config_1+0x1e4>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <Config_1+0x1e8>)
 800080a:	fb92 f3f3 	sdiv	r3, r2, r3
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <Config_1+0x1ec>)
 8000812:	801a      	strh	r2, [r3, #0]
 8000814:	e002      	b.n	800081c <Config_1+0x108>
	}else{
		PWM_speed[0] = 0;
 8000816:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <Config_1+0x1ec>)
 8000818:	2200      	movs	r2, #0
 800081a:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 800081c:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <Config_1+0x1e0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00c      	beq.n	8000842 <Config_1+0x12e>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <Config_1+0x1e4>)
 800082a:	885b      	ldrh	r3, [r3, #2]
 800082c:	461a      	mov	r2, r3
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4a31      	ldr	r2, [pc, #196]	; (80008fc <Config_1+0x1e8>)
 8000836:	fb92 f3f3 	sdiv	r3, r2, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <Config_1+0x1ec>)
 800083e:	805a      	strh	r2, [r3, #2]
 8000840:	e002      	b.n	8000848 <Config_1+0x134>
	}else{
		PWM_speed[1] = 0;
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <Config_1+0x1ec>)
 8000844:	2200      	movs	r2, #0
 8000846:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <Config_1+0x1f0>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <Config_1+0x1f0>)
 8000850:	2200      	movs	r2, #0
 8000852:	805a      	strh	r2, [r3, #2]

	CAN_id[0] = 0x01; //CAN ID for output 1
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <Config_1+0x1f4>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
	CAN_id[1] = 0x02; //CAN ID for output 2
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <Config_1+0x1f4>)
 800085c:	2202      	movs	r2, #2
 800085e:	705a      	strb	r2, [r3, #1]
	CAN_id[2] = 0x03; //CAN ID for output 3
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <Config_1+0x1f4>)
 8000862:	2203      	movs	r2, #3
 8000864:	709a      	strb	r2, [r3, #2]
	CAN_id[3] = 0x04; //CAN ID for output 4
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <Config_1+0x1f4>)
 8000868:	2204      	movs	r2, #4
 800086a:	70da      	strb	r2, [r3, #3]
	CAN_id[4] = 0x05; //CAN ID for output 5
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <Config_1+0x1f4>)
 800086e:	2205      	movs	r2, #5
 8000870:	711a      	strb	r2, [r3, #4]
	CAN_id[5] = 0x06; //CAN ID for output 6
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <Config_1+0x1f4>)
 8000874:	2206      	movs	r2, #6
 8000876:	715a      	strb	r2, [r3, #5]
	CAN_id[6] = 0x07; //CAN ID for output 7
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <Config_1+0x1f4>)
 800087a:	2207      	movs	r2, #7
 800087c:	719a      	strb	r2, [r3, #6]
	CAN_id[7] = 0x08; //CAN ID for output 8
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <Config_1+0x1f4>)
 8000880:	2208      	movs	r2, #8
 8000882:	71da      	strb	r2, [r3, #7]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	2000066c 	.word	0x2000066c
 8000894:	2000066e 	.word	0x2000066e
 8000898:	20000670 	.word	0x20000670
 800089c:	20000672 	.word	0x20000672
 80008a0:	20000674 	.word	0x20000674
 80008a4:	20000676 	.word	0x20000676
 80008a8:	20000678 	.word	0x20000678
 80008ac:	2000067a 	.word	0x2000067a
 80008b0:	2000067c 	.word	0x2000067c
 80008b4:	2000067e 	.word	0x2000067e
 80008b8:	20000680 	.word	0x20000680
 80008bc:	20000682 	.word	0x20000682
 80008c0:	20000684 	.word	0x20000684
 80008c4:	20000686 	.word	0x20000686
 80008c8:	20000688 	.word	0x20000688
 80008cc:	2000068a 	.word	0x2000068a
 80008d0:	2000068c 	.word	0x2000068c
 80008d4:	2000068e 	.word	0x2000068e
 80008d8:	20000690 	.word	0x20000690
 80008dc:	20000692 	.word	0x20000692
 80008e0:	20000694 	.word	0x20000694
 80008e4:	20000696 	.word	0x20000696
 80008e8:	20000698 	.word	0x20000698
 80008ec:	2000069a 	.word	0x2000069a
 80008f0:	200006ab 	.word	0x200006ab
 80008f4:	200006ac 	.word	0x200006ac
 80008f8:	200006b0 	.word	0x200006b0
 80008fc:	08f0d180 	.word	0x08f0d180
 8000900:	200006b8 	.word	0x200006b8
 8000904:	200006b4 	.word	0x200006b4
 8000908:	200006bc 	.word	0x200006bc

0800090c <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <CS_process+0x148>)
 8000914:	881a      	ldrh	r2, [r3, #0]
 8000916:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <CS_process+0x14c>)
 8000918:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 800091a:	4b50      	ldr	r3, [pc, #320]	; (8000a5c <CS_process+0x150>)
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <CS_process+0x154>)
 8000920:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <CS_process+0x158>)
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <CS_process+0x15c>)
 8000928:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <CS_process+0x160>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <CS_process+0x164>)
 8000930:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <CS_process+0x168>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <CS_process+0x16c>)
 8000938:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <CS_process+0x170>)
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	4b50      	ldr	r3, [pc, #320]	; (8000a80 <CS_process+0x174>)
 8000940:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 8000942:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <CS_process+0x178>)
 8000944:	881a      	ldrh	r2, [r3, #0]
 8000946:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <CS_process+0x17c>)
 8000948:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <CS_process+0x180>)
 800094c:	881a      	ldrh	r2, [r3, #0]
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <CS_process+0x184>)
 8000950:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000952:	2301      	movs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	e072      	b.n	8000a3e <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <CS_process+0x14c>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <CS_process+0x148>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	440b      	add	r3, r1
 8000968:	0fda      	lsrs	r2, r3, #31
 800096a:	4413      	add	r3, r2
 800096c:	105b      	asrs	r3, r3, #1
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <CS_process+0x14c>)
 8000972:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 8000974:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <CS_process+0x154>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <CS_process+0x150>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000982:	440b      	add	r3, r1
 8000984:	0fda      	lsrs	r2, r3, #31
 8000986:	4413      	add	r3, r2
 8000988:	105b      	asrs	r3, r3, #1
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <CS_process+0x154>)
 800098e:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <CS_process+0x15c>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <CS_process+0x158>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099e:	440b      	add	r3, r1
 80009a0:	0fda      	lsrs	r2, r3, #31
 80009a2:	4413      	add	r3, r2
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <CS_process+0x15c>)
 80009aa:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <CS_process+0x164>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <CS_process+0x160>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ba:	440b      	add	r3, r1
 80009bc:	0fda      	lsrs	r2, r3, #31
 80009be:	4413      	add	r3, r2
 80009c0:	105b      	asrs	r3, r3, #1
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <CS_process+0x164>)
 80009c6:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <CS_process+0x16c>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <CS_process+0x168>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d6:	440b      	add	r3, r1
 80009d8:	0fda      	lsrs	r2, r3, #31
 80009da:	4413      	add	r3, r2
 80009dc:	105b      	asrs	r3, r3, #1
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <CS_process+0x16c>)
 80009e2:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <CS_process+0x174>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <CS_process+0x170>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f2:	440b      	add	r3, r1
 80009f4:	0fda      	lsrs	r2, r3, #31
 80009f6:	4413      	add	r3, r2
 80009f8:	105b      	asrs	r3, r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <CS_process+0x174>)
 80009fe:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <CS_process+0x17c>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <CS_process+0x178>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a0e:	440b      	add	r3, r1
 8000a10:	0fda      	lsrs	r2, r3, #31
 8000a12:	4413      	add	r3, r2
 8000a14:	105b      	asrs	r3, r3, #1
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <CS_process+0x17c>)
 8000a1a:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <CS_process+0x184>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <CS_process+0x180>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	0fda      	lsrs	r2, r3, #31
 8000a2e:	4413      	add	r3, r2
 8000a30:	105b      	asrs	r3, r3, #1
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <CS_process+0x184>)
 8000a36:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	dd89      	ble.n	8000958 <CS_process+0x4c>
	}

}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000045c 	.word	0x2000045c
 8000a58:	2000065c 	.word	0x2000065c
 8000a5c:	2000049c 	.word	0x2000049c
 8000a60:	2000065e 	.word	0x2000065e
 8000a64:	200004dc 	.word	0x200004dc
 8000a68:	20000660 	.word	0x20000660
 8000a6c:	2000051c 	.word	0x2000051c
 8000a70:	20000662 	.word	0x20000662
 8000a74:	2000055c 	.word	0x2000055c
 8000a78:	20000664 	.word	0x20000664
 8000a7c:	2000059c 	.word	0x2000059c
 8000a80:	20000666 	.word	0x20000666
 8000a84:	200005dc 	.word	0x200005dc
 8000a88:	20000668 	.word	0x20000668
 8000a8c:	2000061c 	.word	0x2000061c
 8000a90:	2000066a 	.word	0x2000066a

08000a94 <CS_read>:
	if(IN4_2_PROC <= UC_4_2){
		print_out(-1,"8_UC",data_output_switch);
	}
}

void CS_read(){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e1af      	b.n	8000e00 <CS_read+0x36c>
		switch(x){
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	f200 81a9 	bhi.w	8000dfa <CS_read+0x366>
 8000aa8:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <CS_read+0x1c>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000b85 	.word	0x08000b85
 8000ab8:	08000c49 	.word	0x08000c49
 8000abc:	08000d0d 	.word	0x08000d0d
		case 0:
			CS_SEL[0] = 0;
 8000ac0:	4b9e      	ldr	r3, [pc, #632]	; (8000d3c <CS_read+0x2a8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000ac6:	4b9d      	ldr	r3, [pc, #628]	; (8000d3c <CS_read+0x2a8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000acc:	4b9b      	ldr	r3, [pc, #620]	; (8000d3c <CS_read+0x2a8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	489a      	ldr	r0, [pc, #616]	; (8000d40 <CS_read+0x2ac>)
 8000ad6:	f003 fcad 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000ada:	4b98      	ldr	r3, [pc, #608]	; (8000d3c <CS_read+0x2a8>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4897      	ldr	r0, [pc, #604]	; (8000d40 <CS_read+0x2ac>)
 8000ae4:	f003 fca6 	bl	8004434 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	e046      	b.n	8000b7c <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000aee:	4895      	ldr	r0, [pc, #596]	; (8000d44 <CS_read+0x2b0>)
 8000af0:	f001 ffee 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <CS_read+0x6a>
 8000afa:	f000 ff35 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000afe:	4892      	ldr	r0, [pc, #584]	; (8000d48 <CS_read+0x2b4>)
 8000b00:	f001 ffe6 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <CS_read+0x7a>
 8000b0a:	f000 ff2d 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000b0e:	210a      	movs	r1, #10
 8000b10:	488c      	ldr	r0, [pc, #560]	; (8000d44 <CS_read+0x2b0>)
 8000b12:	f001 ff05 	bl	8002920 <HAL_ADC_PollForConversion>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <CS_read+0x8c>
 8000b1c:	f000 ff24 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000b20:	210a      	movs	r1, #10
 8000b22:	4889      	ldr	r0, [pc, #548]	; (8000d48 <CS_read+0x2b4>)
 8000b24:	f001 fefc 	bl	8002920 <HAL_ADC_PollForConversion>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <CS_read+0x9e>
 8000b2e:	f000 ff1b 	bl	8001968 <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000b32:	4884      	ldr	r0, [pc, #528]	; (8000d44 <CS_read+0x2b0>)
 8000b34:	f002 f937 	bl	8002da6 <HAL_ADC_GetValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b299      	uxth	r1, r3
 8000b3c:	4a83      	ldr	r2, [pc, #524]	; (8000d4c <CS_read+0x2b8>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000b44:	4880      	ldr	r0, [pc, #512]	; (8000d48 <CS_read+0x2b4>)
 8000b46:	f002 f92e 	bl	8002da6 <HAL_ADC_GetValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	4a80      	ldr	r2, [pc, #512]	; (8000d50 <CS_read+0x2bc>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000b56:	487b      	ldr	r0, [pc, #492]	; (8000d44 <CS_read+0x2b0>)
 8000b58:	f002 f8ea 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <CS_read+0xd2>
 8000b62:	f000 ff01 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000b66:	4878      	ldr	r0, [pc, #480]	; (8000d48 <CS_read+0x2b4>)
 8000b68:	f002 f8e2 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <CS_read+0xe2>
 8000b72:	f000 fef9 	bl	8001968 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2b1f      	cmp	r3, #31
 8000b80:	ddb5      	ble.n	8000aee <CS_read+0x5a>
			}
			break;
 8000b82:	e13a      	b.n	8000dfa <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000b84:	4b6d      	ldr	r3, [pc, #436]	; (8000d3c <CS_read+0x2a8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000b8a:	4b6c      	ldr	r3, [pc, #432]	; (8000d3c <CS_read+0x2a8>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000b90:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <CS_read+0x2a8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4869      	ldr	r0, [pc, #420]	; (8000d40 <CS_read+0x2ac>)
 8000b9a:	f003 fc4b 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000b9e:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <CS_read+0x2a8>)
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	4866      	ldr	r0, [pc, #408]	; (8000d40 <CS_read+0x2ac>)
 8000ba8:	f003 fc44 	bl	8004434 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e046      	b.n	8000c40 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000bb2:	4864      	ldr	r0, [pc, #400]	; (8000d44 <CS_read+0x2b0>)
 8000bb4:	f001 ff8c 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <CS_read+0x12e>
 8000bbe:	f000 fed3 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000bc2:	4861      	ldr	r0, [pc, #388]	; (8000d48 <CS_read+0x2b4>)
 8000bc4:	f001 ff84 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <CS_read+0x13e>
 8000bce:	f000 fecb 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000bd2:	210a      	movs	r1, #10
 8000bd4:	485b      	ldr	r0, [pc, #364]	; (8000d44 <CS_read+0x2b0>)
 8000bd6:	f001 fea3 	bl	8002920 <HAL_ADC_PollForConversion>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <CS_read+0x150>
 8000be0:	f000 fec2 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000be4:	210a      	movs	r1, #10
 8000be6:	4858      	ldr	r0, [pc, #352]	; (8000d48 <CS_read+0x2b4>)
 8000be8:	f001 fe9a 	bl	8002920 <HAL_ADC_PollForConversion>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <CS_read+0x162>
 8000bf2:	f000 feb9 	bl	8001968 <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000bf6:	4853      	ldr	r0, [pc, #332]	; (8000d44 <CS_read+0x2b0>)
 8000bf8:	f002 f8d5 	bl	8002da6 <HAL_ADC_GetValue>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <CS_read+0x2c0>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000c08:	484f      	ldr	r0, [pc, #316]	; (8000d48 <CS_read+0x2b4>)
 8000c0a:	f002 f8cc 	bl	8002da6 <HAL_ADC_GetValue>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b299      	uxth	r1, r3
 8000c12:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <CS_read+0x2c4>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c1a:	484a      	ldr	r0, [pc, #296]	; (8000d44 <CS_read+0x2b0>)
 8000c1c:	f002 f888 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <CS_read+0x196>
 8000c26:	f000 fe9f 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <CS_read+0x2b4>)
 8000c2c:	f002 f880 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <CS_read+0x1a6>
 8000c36:	f000 fe97 	bl	8001968 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2b1f      	cmp	r3, #31
 8000c44:	ddb5      	ble.n	8000bb2 <CS_read+0x11e>
			}
			break;
 8000c46:	e0d8      	b.n	8000dfa <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000c48:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <CS_read+0x2a8>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000c4e:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <CS_read+0x2a8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <CS_read+0x2a8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	4838      	ldr	r0, [pc, #224]	; (8000d40 <CS_read+0x2ac>)
 8000c5e:	f003 fbe9 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <CS_read+0x2a8>)
 8000c64:	785b      	ldrb	r3, [r3, #1]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4835      	ldr	r0, [pc, #212]	; (8000d40 <CS_read+0x2ac>)
 8000c6c:	f003 fbe2 	bl	8004434 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e046      	b.n	8000d04 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c76:	4833      	ldr	r0, [pc, #204]	; (8000d44 <CS_read+0x2b0>)
 8000c78:	f001 ff2a 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <CS_read+0x1f2>
 8000c82:	f000 fe71 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c86:	4830      	ldr	r0, [pc, #192]	; (8000d48 <CS_read+0x2b4>)
 8000c88:	f001 ff22 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <CS_read+0x202>
 8000c92:	f000 fe69 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000c96:	210a      	movs	r1, #10
 8000c98:	482a      	ldr	r0, [pc, #168]	; (8000d44 <CS_read+0x2b0>)
 8000c9a:	f001 fe41 	bl	8002920 <HAL_ADC_PollForConversion>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <CS_read+0x214>
 8000ca4:	f000 fe60 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000ca8:	210a      	movs	r1, #10
 8000caa:	4827      	ldr	r0, [pc, #156]	; (8000d48 <CS_read+0x2b4>)
 8000cac:	f001 fe38 	bl	8002920 <HAL_ADC_PollForConversion>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <CS_read+0x226>
 8000cb6:	f000 fe57 	bl	8001968 <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <CS_read+0x2b0>)
 8000cbc:	f002 f873 	bl	8002da6 <HAL_ADC_GetValue>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <CS_read+0x2c8>)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000ccc:	481e      	ldr	r0, [pc, #120]	; (8000d48 <CS_read+0x2b4>)
 8000cce:	f002 f86a 	bl	8002da6 <HAL_ADC_GetValue>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <CS_read+0x2cc>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <CS_read+0x2b0>)
 8000ce0:	f002 f826 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <CS_read+0x25a>
 8000cea:	f000 fe3d 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <CS_read+0x2b4>)
 8000cf0:	f002 f81e 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <CS_read+0x26a>
 8000cfa:	f000 fe35 	bl	8001968 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b1f      	cmp	r3, #31
 8000d08:	ddb5      	ble.n	8000c76 <CS_read+0x1e2>
			}
			break;
 8000d0a:	e076      	b.n	8000dfa <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <CS_read+0x2a8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <CS_read+0x2a8>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <CS_read+0x2a8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <CS_read+0x2ac>)
 8000d22:	f003 fb87 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <CS_read+0x2a8>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <CS_read+0x2ac>)
 8000d30:	f003 fb80 	bl	8004434 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	e05b      	b.n	8000df2 <CS_read+0x35e>
 8000d3a:	bf00      	nop
 8000d3c:	200006a8 	.word	0x200006a8
 8000d40:	48000400 	.word	0x48000400
 8000d44:	2000007c 	.word	0x2000007c
 8000d48:	200000e8 	.word	0x200000e8
 8000d4c:	2000045c 	.word	0x2000045c
 8000d50:	2000055c 	.word	0x2000055c
 8000d54:	2000049c 	.word	0x2000049c
 8000d58:	2000059c 	.word	0x2000059c
 8000d5c:	200004dc 	.word	0x200004dc
 8000d60:	200005dc 	.word	0x200005dc
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d64:	482b      	ldr	r0, [pc, #172]	; (8000e14 <CS_read+0x380>)
 8000d66:	f001 feb3 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <CS_read+0x2e0>
 8000d70:	f000 fdfa 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <CS_read+0x384>)
 8000d76:	f001 feab 	bl	8002ad0 <HAL_ADC_Start_IT>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <CS_read+0x2f0>
 8000d80:	f000 fdf2 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000d84:	210a      	movs	r1, #10
 8000d86:	4823      	ldr	r0, [pc, #140]	; (8000e14 <CS_read+0x380>)
 8000d88:	f001 fdca 	bl	8002920 <HAL_ADC_PollForConversion>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <CS_read+0x302>
 8000d92:	f000 fde9 	bl	8001968 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000d96:	210a      	movs	r1, #10
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <CS_read+0x384>)
 8000d9a:	f001 fdc1 	bl	8002920 <HAL_ADC_PollForConversion>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <CS_read+0x314>
 8000da4:	f000 fde0 	bl	8001968 <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <CS_read+0x380>)
 8000daa:	f001 fffc 	bl	8002da6 <HAL_ADC_GetValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b299      	uxth	r1, r3
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <CS_read+0x388>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000dba:	4817      	ldr	r0, [pc, #92]	; (8000e18 <CS_read+0x384>)
 8000dbc:	f001 fff3 	bl	8002da6 <HAL_ADC_GetValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <CS_read+0x38c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <CS_read+0x380>)
 8000dce:	f001 ffaf 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <CS_read+0x348>
 8000dd8:	f000 fdc6 	bl	8001968 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <CS_read+0x384>)
 8000dde:	f001 ffa7 	bl	8002d30 <HAL_ADC_Stop_IT>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <CS_read+0x358>
 8000de8:	f000 fdbe 	bl	8001968 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b1f      	cmp	r3, #31
 8000df6:	ddb5      	ble.n	8000d64 <CS_read+0x2d0>
			}
			break;
 8000df8:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	f77f ae4c 	ble.w	8000aa0 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000e08:	f7ff fd80 	bl	800090c <CS_process>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000007c 	.word	0x2000007c
 8000e18:	200000e8 	.word	0x200000e8
 8000e1c:	2000051c 	.word	0x2000051c
 8000e20:	2000061c 	.word	0x2000061c

08000e24 <print_out>:

void print_out(uint32_t data, const char *text, uint8_t out_mode){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)+sizeof(data_buffer)+4+2+4] = "";
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	821a      	strh	r2, [r3, #16]
	if(data == -1){
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d107      	bne.n	8000e6a <print_out+0x46>
		sprintf(msg, "%s \r\n", buffer);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e60:	4916      	ldr	r1, [pc, #88]	; (8000ebc <print_out+0x98>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 ff68 	bl	8008d38 <siprintf>
 8000e68:	e006      	b.n	8000e78 <print_out+0x54>
	}else{
		sprintf(msg, "%s %lu\r\n", buffer, data_buffer);
 8000e6a:	f107 0010 	add.w	r0, r7, #16
 8000e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e72:	4913      	ldr	r1, [pc, #76]	; (8000ec0 <print_out+0x9c>)
 8000e74:	f007 ff60 	bl	8008d38 <siprintf>
	}

	switch(out_mode){
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d00f      	beq.n	8000e9e <print_out+0x7a>
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	dc17      	bgt.n	8000eb2 <print_out+0x8e>
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d001      	beq.n	8000e8a <print_out+0x66>
 8000e86:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
			  text = "";
			  break;
		  case 0b10: //output only through CAN
			  //TODO implement CAN
			  break;
 8000e88:	e013      	b.n	8000eb2 <print_out+0x8e>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8000e8a:	f107 0110 	add.w	r1, r7, #16
 8000e8e:	23ff      	movs	r3, #255	; 0xff
 8000e90:	2216      	movs	r2, #22
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <print_out+0xa0>)
 8000e94:	f005 fd10 	bl	80068b8 <HAL_UART_Transmit>
			  text = "";
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <print_out+0xa4>)
 8000e9a:	60bb      	str	r3, [r7, #8]
			  break;
 8000e9c:	e009      	b.n	8000eb2 <print_out+0x8e>
		  case 0b11://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8000e9e:	f107 0110 	add.w	r1, r7, #16
 8000ea2:	23ff      	movs	r3, #255	; 0xff
 8000ea4:	2216      	movs	r2, #22
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <print_out+0xa0>)
 8000ea8:	f005 fd06 	bl	80068b8 <HAL_UART_Transmit>
			  text = "";
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <print_out+0xa4>)
 8000eae:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 8000eb0:	bf00      	nop
		  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	080097d8 	.word	0x080097d8
 8000ec0:	080097e0 	.word	0x080097e0
 8000ec4:	200003cc 	.word	0x200003cc
 8000ec8:	080097ec 	.word	0x080097ec

08000ecc <HAL_UART_RxCpltCallback>:
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(uart_receive == 13){
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0d      	cmp	r3, #13
 8000eda:	d10d      	bne.n	8000ef8 <HAL_UART_RxCpltCallback+0x2c>
		const char *newline = "\r\n";
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000ede:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit_IT(huart, (uint8_t*)newline,2);
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f005 fd7d 	bl	80069e4 <HAL_UART_Transmit_IT>
		uart_rx_buffer[8] = 0;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_RxCpltCallback+0x7c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	721a      	strb	r2, [r3, #8]
		command_received_flag = 1;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_UART_RxCpltCallback+0x80>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e01a      	b.n	8000f2e <HAL_UART_RxCpltCallback+0x62>
	}else{
		for(int i = 0; i < 7; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00b      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x4a>
			uart_rx_buffer[i] = uart_rx_buffer[i+1];
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_UART_RxCpltCallback+0x7c>)
 8000f04:	5cd1      	ldrb	r1, [r2, r3]
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_UART_RxCpltCallback+0x7c>)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 7; i++){
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	ddf0      	ble.n	8000efe <HAL_UART_RxCpltCallback+0x32>
		}
		HAL_UART_Transmit_IT(huart, &uart_receive,1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f005 fd5f 	bl	80069e4 <HAL_UART_Transmit_IT>
		uart_rx_buffer[7] = uart_receive;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_UART_RxCpltCallback+0x7c>)
 8000f2c:	71da      	strb	r2, [r3, #7]
	}
	HAL_UART_Receive_IT(huart, &uart_receive,1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4903      	ldr	r1, [pc, #12]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f005 fdfe 	bl	8006b34 <HAL_UART_Receive_IT>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200006aa 	.word	0x200006aa
 8000f44:	080097f0 	.word	0x080097f0
 8000f48:	2000069c 	.word	0x2000069c
 8000f4c:	200006a5 	.word	0x200006a5

08000f50 <check_bit>:

uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2201      	movs	r2, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <check_bit+0x2a>
		return 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <check_bit+0x2c>
	}else{
		return 0;
 8000f7a:	2300      	movs	r3, #0
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f001 f84f 	bl	800202e <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000f90:	f7ff fbba 	bl	8000708 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f836 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 fc6e 	bl	8001878 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f9c:	f000 f87e 	bl	800109c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000fa0:	f000 f95e 	bl	8001260 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f9a2 	bl	80012ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fa8:	f000 fa50 	bl	800144c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fac:	f000 fac4 	bl	8001538 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fb0:	f000 fb10 	bl	80015d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000fb4:	f000 fb82 	bl	80016bc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fb8:	f000 fbb6 	bl	8001728 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000fbc:	f000 fbea 	bl	8001794 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000fc0:	f000 fc0e 	bl	80017e0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000fc4:	f000 f8e4 	bl	8001190 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <main+0x68>)
 8000fca:	f004 fa7a 	bl	80054c2 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <main+0x6c>)
 8000fd0:	f004 fa77 	bl	80054c2 <HAL_TIM_PWM_Init>

  HAL_UART_Receive_IT(&huart2, &uart_receive, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <main+0x70>)
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <main+0x74>)
 8000fda:	f005 fdab 	bl	8006b34 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CS_read();
 8000fde:	f7ff fd59 	bl	8000a94 <CS_read>
	  if(command_received_flag == 1){
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <main+0x78>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d1f9      	bne.n	8000fde <main+0x56>
		  decode_uart();
 8000fea:	f7ff faf7 	bl	80005dc <decode_uart>
	  CS_read();
 8000fee:	e7f6      	b.n	8000fde <main+0x56>
 8000ff0:	200001b8 	.word	0x200001b8
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	200006aa 	.word	0x200006aa
 8000ffc:	200003cc 	.word	0x200003cc
 8001000:	200006a5 	.word	0x200006a5

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	2238      	movs	r2, #56	; 0x38
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f007 feb0 	bl	8008d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001026:	f44f 7000 	mov.w	r0, #512	; 0x200
 800102a:	f003 fa1b 	bl	8004464 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001044:	2304      	movs	r3, #4
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001048:	234b      	movs	r3, #75	; 0x4b
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fab5 	bl	80045cc <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001068:	f000 fc7e 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2303      	movs	r3, #3
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fdb9 	bl	8004bfc <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001090:	f000 fc6a 	bl	8001968 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fe5f 	bl	8008d78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_ADC1_Init+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_ADC1_Init+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_ADC1_Init+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_ADC1_Init+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_ADC1_Init+0xe8>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_ADC1_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	4817      	ldr	r0, [pc, #92]	; (8001184 <MX_ADC1_Init+0xe8>)
 8001126:	f001 fa71 	bl	800260c <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001130:	f000 fc1a 	bl	8001968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_ADC1_Init+0xe8>)
 8001140:	f002 fbd2 	bl	80038e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 fc0d 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_ADC1_Init+0xec>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001152:	2306      	movs	r3, #6
 8001154:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_ADC1_Init+0xf0>)
 800115c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115e:	2304      	movs	r3, #4
 8001160:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_ADC1_Init+0xe8>)
 800116c:	f001 fe28 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001176:	f000 fbf7 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000007c 	.word	0x2000007c
 8001188:	04300002 	.word	0x04300002
 800118c:	407f0000 	.word	0x407f0000

08001190 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fdeb 	bl	8008d78 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011a4:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <MX_ADC2_Init+0xc4>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011dc:	2201      	movs	r2, #1
 80011de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_ADC2_Init+0xc0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_ADC2_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_ADC2_Init+0xc0>)
 800120c:	f001 f9fe 	bl	800260c <HAL_ADC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001216:	f000 fba7 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_ADC2_Init+0xc8>)
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121e:	2306      	movs	r3, #6
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_ADC2_Init+0xcc>)
 8001228:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122a:	2304      	movs	r3, #4
 800122c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_ADC2_Init+0xc0>)
 8001238:	f001 fdc2 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001242:	f000 fb91 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000e8 	.word	0x200000e8
 8001254:	50000100 	.word	0x50000100
 8001258:	0c900008 	.word	0x0c900008
 800125c:	407f0000 	.word	0x407f0000

08001260 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001266:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <MX_FDCAN1_Init+0x88>)
 8001268:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 800127e:	2200      	movs	r2, #0
 8001280:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001284:	2200      	movs	r2, #0
 8001286:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 800128a:	2200      	movs	r2, #0
 800128c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001290:	2210      	movs	r2, #16
 8001292:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 8001296:	2201      	movs	r2, #1
 8001298:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 800129c:	2202      	movs	r2, #2
 800129e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_FDCAN1_Init+0x84>)
 80012d2:	f002 fd7d 	bl	8003dd0 <HAL_FDCAN_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80012dc:	f000 fb44 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000154 	.word	0x20000154
 80012e8:	40006400 	.word	0x40006400

080012ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09c      	sub	sp, #112	; 0x70
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fd26 	bl	8008d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b45      	ldr	r3, [pc, #276]	; (8001444 <MX_TIM1_Init+0x158>)
 800132e:	4a46      	ldr	r2, [pc, #280]	; (8001448 <MX_TIM1_Init+0x15c>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <MX_TIM1_Init+0x158>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <MX_TIM1_Init+0x158>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <MX_TIM1_Init+0x158>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_TIM1_Init+0x158>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_TIM1_Init+0x158>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <MX_TIM1_Init+0x158>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	483a      	ldr	r0, [pc, #232]	; (8001444 <MX_TIM1_Init+0x158>)
 800135a:	f004 f85b 	bl	8005414 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 fb00 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001372:	4619      	mov	r1, r3
 8001374:	4833      	ldr	r0, [pc, #204]	; (8001444 <MX_TIM1_Init+0x158>)
 8001376:	f004 fb99 	bl	8005aac <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001380:	f000 faf2 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001384:	482f      	ldr	r0, [pc, #188]	; (8001444 <MX_TIM1_Init+0x158>)
 8001386:	f004 f89c 	bl	80054c2 <HAL_TIM_PWM_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001390:	f000 faea 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a4:	4619      	mov	r1, r3
 80013a6:	4827      	ldr	r0, [pc, #156]	; (8001444 <MX_TIM1_Init+0x158>)
 80013a8:	f005 f8ce 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013b2:	f000 fad9 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_TIM1_Init+0x158>)
 80013dc:	f004 fa52 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013e6:	f000 fabf 	bl	8001968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM1_Init+0x158>)
 8001428:	f005 f910 	bl	800664c <HAL_TIMEx_ConfigBreakDeadTime>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001432:	f000 fa99 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM1_Init+0x158>)
 8001438:	f000 fc72 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3770      	adds	r7, #112	; 0x70
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001b8 	.word	0x200001b8
 8001448:	40012c00 	.word	0x40012c00

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_TIM2_Init+0xe8>)
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_TIM2_Init+0xe8>)
 8001488:	2295      	movs	r2, #149	; 0x95
 800148a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <MX_TIM2_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967294E9;
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_TIM2_Init+0xe8>)
 8001494:	f06f 0201 	mvn.w	r2, #1
 8001498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_TIM2_Init+0xe8>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_TIM2_Init+0xe8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a6:	4823      	ldr	r0, [pc, #140]	; (8001534 <MX_TIM2_Init+0xe8>)
 80014a8:	f003 ffb4 	bl	8005414 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014b2:	f000 fa59 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c0:	4619      	mov	r1, r3
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <MX_TIM2_Init+0xe8>)
 80014c4:	f004 faf2 	bl	8005aac <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014ce:	f000 fa4b 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d2:	4818      	ldr	r0, [pc, #96]	; (8001534 <MX_TIM2_Init+0xe8>)
 80014d4:	f003 fff5 	bl	80054c2 <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014de:	f000 fa43 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <MX_TIM2_Init+0xe8>)
 80014f2:	f005 f829 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014fc:	f000 fa34 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_TIM2_Init+0xe8>)
 8001518:	f004 f9b4 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001522:	f000 fa21 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <MX_TIM2_Init+0xe8>)
 8001528:	f000 fbfa 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 800152c:	bf00      	nop
 800152e:	3738      	adds	r7, #56	; 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000204 	.word	0x20000204

08001538 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM3_Init+0x94>)
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <MX_TIM3_Init+0x98>)
 800155a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_TIM3_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM3_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM3_Init+0x94>)
 800156a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM3_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157c:	4813      	ldr	r0, [pc, #76]	; (80015cc <MX_TIM3_Init+0x94>)
 800157e:	f003 ff49 	bl	8005414 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001588:	f000 f9ee 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <MX_TIM3_Init+0x94>)
 800159a:	f004 fa87 	bl	8005aac <HAL_TIM_ConfigClockSource>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015a4:	f000 f9e0 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_TIM3_Init+0x94>)
 80015b6:	f004 ffc7 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f000 f9d2 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000250 	.word	0x20000250
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <MX_TIM4_Init+0xe0>)
 8001608:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <MX_TIM4_Init+0xe4>)
 800160a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800160c:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <MX_TIM4_Init+0xe0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_TIM4_Init+0xe0>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_TIM4_Init+0xe0>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800162c:	4821      	ldr	r0, [pc, #132]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800162e:	f003 fef1 	bl	8005414 <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001638:	f000 f996 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	4619      	mov	r1, r3
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800164a:	f004 fa2f 	bl	8005aac <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001654:	f000 f988 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800165a:	f003 ff32 	bl	80054c2 <HAL_TIM_PWM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001664:	f000 f980 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <MX_TIM4_Init+0xe0>)
 8001678:	f004 ff66 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001682:	f000 f971 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001686:	2360      	movs	r3, #96	; 0x60
 8001688:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM4_Init+0xe0>)
 800169e:	f004 f8f1 	bl	8005884 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016a8:	f000 f95e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3738      	adds	r7, #56	; 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000029c 	.word	0x2000029c
 80016b8:	40000800 	.word	0x40000800

080016bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_TIM6_Init+0x64>)
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <MX_TIM6_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_TIM6_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_TIM6_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_TIM6_Init+0x64>)
 80016e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_TIM6_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_TIM6_Init+0x64>)
 80016ee:	f003 fe91 	bl	8005414 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016f8:	f000 f936 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_TIM6_Init+0x64>)
 800170a:	f004 ff1d 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001714:	f000 f928 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002e8 	.word	0x200002e8
 8001724:	40001000 	.word	0x40001000

08001728 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_TIM7_Init+0x64>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_TIM7_Init+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_TIM7_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_TIM7_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_TIM7_Init+0x64>)
 800174c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001750:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_TIM7_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_TIM7_Init+0x64>)
 800175a:	f003 fe5b 	bl	8005414 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001764:	f000 f900 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM7_Init+0x64>)
 8001776:	f004 fee7 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001780:	f000 f8f2 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000334 	.word	0x20000334
 8001790:	40001400 	.word	0x40001400

08001794 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_TIM16_Init+0x44>)
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <MX_TIM16_Init+0x48>)
 800179c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_TIM16_Init+0x44>)
 80017c6:	f003 fe25 	bl	8005414 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80017d0:	f000 f8ca 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000380 	.word	0x20000380
 80017dc:	40014400 	.word	0x40014400

080017e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_USART2_UART_Init+0x90>)
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <MX_USART2_UART_Init+0x94>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_USART2_UART_Init+0x90>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_USART2_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_USART2_UART_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_USART2_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_USART2_UART_Init+0x90>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_USART2_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_USART2_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART2_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800182a:	f004 fff5 	bl	8006818 <HAL_UART_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 f898 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800183c:	f007 f9b1 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001846:	f000 f88f 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800184e:	f007 f9e6 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001858:	f000 f886 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_USART2_UART_Init+0x90>)
 800185e:	f007 f967 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001868:	f000 f87e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200003cc 	.word	0x200003cc
 8001874:	40004400 	.word	0x40004400

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <MX_GPIO_Init+0xe4>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <MX_GPIO_Init+0xe4>)
 8001894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <MX_GPIO_Init+0xe4>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <MX_GPIO_Init+0xe4>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a2c      	ldr	r2, [pc, #176]	; (800195c <MX_GPIO_Init+0xe4>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <MX_GPIO_Init+0xe4>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_GPIO_Init+0xe4>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a26      	ldr	r2, [pc, #152]	; (800195c <MX_GPIO_Init+0xe4>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_GPIO_Init+0xe4>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018dc:	4820      	ldr	r0, [pc, #128]	; (8001960 <MX_GPIO_Init+0xe8>)
 80018de:	f002 fda9 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f248 6110 	movw	r1, #34320	; 0x8610
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f002 fda2 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 80018f0:	2200      	movs	r2, #0
 80018f2:	21f8      	movs	r1, #248	; 0xf8
 80018f4:	481b      	ldr	r0, [pc, #108]	; (8001964 <MX_GPIO_Init+0xec>)
 80018f6:	f002 fd9d 	bl	8004434 <HAL_GPIO_WritePin>
                          |IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 80018fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4619      	mov	r1, r3
 8001912:	4813      	ldr	r0, [pc, #76]	; (8001960 <MX_GPIO_Init+0xe8>)
 8001914:	f002 fc0c 	bl	8004130 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001918:	f248 6310 	movw	r3, #34320	; 0x8610
 800191c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f002 fbfc 	bl	8004130 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN3_2_Pin SEL1_Pin SEL0_Pin
                           IN2_2_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 8001938:	23f8      	movs	r3, #248	; 0xf8
 800193a:	60fb      	str	r3, [r7, #12]
                          |IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_GPIO_Init+0xec>)
 8001950:	f002 fbee 	bl	8004130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	48001800 	.word	0x48001800
 8001964:	48000400 	.word	0x48000400

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_MspInit+0x44>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_MspInit+0x44>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6613      	str	r3, [r2, #96]	; 0x60
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_MspInit+0x44>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_MspInit+0x44>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_MspInit+0x44>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_MspInit+0x44>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019aa:	f002 fdff 	bl	80045ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09c      	sub	sp, #112	; 0x70
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2244      	movs	r2, #68	; 0x44
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f007 f9cb 	bl	8008d78 <memset>
  if(hadc->Instance==ADC1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ea:	d13e      	bne.n	8001a6a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fb19 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a08:	f7ff ffae 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001a14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d10b      	bne.n	8001a36 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a30      	ldr	r2, [pc, #192]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a52:	2303      	movs	r3, #3
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f002 fb64 	bl	8004130 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a68:	e042      	b.n	8001af0 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_ADC_MspInit+0x144>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13d      	bne.n	8001af0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a7a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fad5 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001a90:	f7ff ff6a 	bl	8001968 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001a9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_ADC_MspInit+0x13c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_ADC_MspInit+0x140>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ada:	2303      	movs	r3, #3
 8001adc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f002 fb20 	bl	8004130 <HAL_GPIO_Init>
}
 8001af0:	bf00      	nop
 8001af2:	3770      	adds	r7, #112	; 0x70
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200006c4 	.word	0x200006c4
 8001afc:	40021000 	.word	0x40021000
 8001b00:	50000100 	.word	0x50000100

08001b04 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09a      	sub	sp, #104	; 0x68
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2244      	movs	r2, #68	; 0x44
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 f927 	bl	8008d78 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_FDCAN_MspInit+0xac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d139      	bne.n	8001ba8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fa75 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b50:	f7ff ff0a 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_FDCAN_MspInit+0xb0>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b88:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b96:	2309      	movs	r3, #9
 8001b98:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba4:	f002 fac4 	bl	8004130 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3768      	adds	r7, #104	; 0x68
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40006400 	.word	0x40006400
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <HAL_TIM_Base_MspInit+0x14c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001be2:	e08a      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d114      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f001 ffeb 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	201c      	movs	r0, #28
 8001c12:	f002 f802 	bl	8003c1a <HAL_NVIC_EnableIRQ>
}
 8001c16:	e070      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_TIM_Base_MspInit+0x154>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d114      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	201d      	movs	r0, #29
 8001c40:	f001 ffd1 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c44:	201d      	movs	r0, #29
 8001c46:	f001 ffe8 	bl	8003c1a <HAL_NVIC_EnableIRQ>
}
 8001c4a:	e056      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_TIM_Base_MspInit+0x158>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d114      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	201e      	movs	r0, #30
 8001c74:	f001 ffb7 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c78:	201e      	movs	r0, #30
 8001c7a:	f001 ffce 	bl	8003c1a <HAL_NVIC_EnableIRQ>
}
 8001c7e:	e03c      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_Base_MspInit+0x15c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10c      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
}
 8001ca2:	e02a      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_TIM_Base_MspInit+0x160>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d114      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2037      	movs	r0, #55	; 0x37
 8001ccc:	f001 ff8b 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd0:	2037      	movs	r0, #55	; 0x37
 8001cd2:	f001 ffa2 	bl	8003c1a <HAL_NVIC_EnableIRQ>
}
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_TIM_Base_MspInit+0x164>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_TIM_Base_MspInit+0x150>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40001000 	.word	0x40001000
 8001d18:	40001400 	.word	0x40001400
 8001d1c:	40014400 	.word	0x40014400

08001d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_TIM_MspPostInit+0xac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d11e      	bne.n	8001d80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7a:	f002 f9d9 	bl	8004130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d7e:	e021      	b.n	8001dc4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d11c      	bne.n	8001dc4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_TIM_MspPostInit+0xb0>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001da2:	2320      	movs	r3, #32
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f002 f9b6 	bl	8004130 <HAL_GPIO_Init>
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09a      	sub	sp, #104	; 0x68
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2244      	movs	r2, #68	; 0x44
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 ffbf 	bl	8008d78 <memset>
  if(huart->Instance==USART2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_UART_MspInit+0xb8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d13e      	bne.n	8001e82 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f90f 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e1c:	f7ff fda4 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0xbc>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e50:	230c      	movs	r3, #12
 8001e52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e60:	2307      	movs	r3, #7
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f002 f95f 	bl	8004130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2026      	movs	r0, #38	; 0x26
 8001e78:	f001 feb5 	bl	8003be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e7c:	2026      	movs	r0, #38	; 0x26
 8001e7e:	f001 fecc 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3768      	adds	r7, #104	; 0x68
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40021000 	.word	0x40021000

08001e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <NMI_Handler+0x4>

08001e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 f8f8 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM2_IRQHandler+0x10>)
 8001eee:	f003 fb49 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000204 	.word	0x20000204

08001efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIM3_IRQHandler+0x10>)
 8001f02:	f003 fb3f 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000250 	.word	0x20000250

08001f10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM4_IRQHandler+0x10>)
 8001f16:	f003 fb35 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000029c 	.word	0x2000029c

08001f24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <USART2_IRQHandler+0x10>)
 8001f2a:	f004 fe59 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003cc 	.word	0x200003cc

08001f38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM7_IRQHandler+0x10>)
 8001f3e:	f003 fb21 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000334 	.word	0x20000334

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d207      	bcs.n	8001f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f7c:	f006 ff04 	bl	8008d88 <__errno>
 8001f80:	4603      	mov	r3, r0
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20008000 	.word	0x20008000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	200006c8 	.word	0x200006c8
 8001fb4:	20000818 	.word	0x20000818

08001fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <SystemInit+0x20>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <SystemInit+0x20>)
 8001fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002006:	f7ff ffd7 	bl	8001fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f006 fec3 	bl	8008d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7fe ffbb 	bl	8000f88 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   r0, =_estack
 8002014:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002020:	08009878 	.word	0x08009878
  ldr r2, =_sbss
 8002024:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002028:	20000818 	.word	0x20000818

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>

0800202e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f001 fdc9 	bl	8003bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	200f      	movs	r0, #15
 8002040:	f000 f80e 	bl	8002060 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002050:	f7ff fc90 	bl	8001974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	79fb      	ldrb	r3, [r7, #7]

}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_InitTick+0x68>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d022      	beq.n	80020ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_InitTick+0x6c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_InitTick+0x68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fdd4 	bl	8003c36 <HAL_SYSTICK_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d809      	bhi.n	80020ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209a:	2200      	movs	r2, #0
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	f04f 30ff 	mov.w	r0, #4294967295
 80020a2:	f001 fda0 	bl	8003be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_InitTick+0x70>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e007      	b.n	80020be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e004      	b.n	80020be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	20000004 	.word	0x20000004
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x1c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x20>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_IncTick+0x1c>)
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	200006cc 	.word	0x200006cc
 80020f4:	2000000c 	.word	0x2000000c

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	200006cc 	.word	0x200006cc

08002110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <LL_ADC_SetOffset+0x44>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	03fff000 	.word	0x03fff000

080021c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3360      	adds	r3, #96	; 0x60
 80021ce:	461a      	mov	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3360      	adds	r3, #96	; 0x60
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002222:	b480      	push	{r7}
 8002224:	b087      	sub	sp, #28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3360      	adds	r3, #96	; 0x60
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	615a      	str	r2, [r3, #20]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022da:	b480      	push	{r7}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3330      	adds	r3, #48	; 0x30
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	4413      	add	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	211f      	movs	r1, #31
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	f003 011f 	and.w	r1, r3, #31
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002332:	b480      	push	{r7}
 8002334:	b087      	sub	sp, #28
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3314      	adds	r3, #20
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	0e5b      	lsrs	r3, r3, #25
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0d1b      	lsrs	r3, r3, #20
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2107      	movs	r1, #7
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	401a      	ands	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0d1b      	lsrs	r3, r3, #20
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	431a      	orrs	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10a      	bne.n	80023b2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80023b0:	e00a      	b.n	80023c8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	43db      	mvns	r3, r3
 80023c0:	401a      	ands	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	407f0000 	.word	0x407f0000

080023d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 031f 	and.w	r3, r3, #31
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002448:	d101      	bne.n	800244e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002498:	d101      	bne.n	800249e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <LL_ADC_IsEnabled+0x18>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <LL_ADC_IsEnabled+0x1a>
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d101      	bne.n	800253a <LL_ADC_IsDisableOngoing+0x18>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_IsDisableOngoing+0x1a>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d101      	bne.n	80025b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d101      	bne.n	80025fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e177      	b.n	8002916 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff f9c1 	bl	80019bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fef1 	bl	8002434 <LL_ADC_IsDeepPowerDownEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fed7 	bl	8002410 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff0c 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fef0 	bl	800245c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267c:	4b9c      	ldr	r3, [pc, #624]	; (80028f0 <HAL_ADC_Init+0x2e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	4a9c      	ldr	r2, [pc, #624]	; (80028f4 <HAL_ADC_Init+0x2e8>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002690:	e002      	b.n	8002698 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff feee 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f043 0210 	orr.w	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff62 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 80026d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 8110 	bne.w	8002904 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 810c 	bne.w	8002904 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026f4:	f043 0202 	orr.w	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fefb 	bl	80024fc <LL_ADC_IsEnabled>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002710:	f7ff fef4 	bl	80024fc <LL_ADC_IsEnabled>
 8002714:	4604      	mov	r4, r0
 8002716:	4878      	ldr	r0, [pc, #480]	; (80028f8 <HAL_ADC_Init+0x2ec>)
 8002718:	f7ff fef0 	bl	80024fc <LL_ADC_IsEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	4323      	orrs	r3, r4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	4874      	ldr	r0, [pc, #464]	; (80028fc <HAL_ADC_Init+0x2f0>)
 800272c:	f7ff fcf0 	bl	8002110 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7f5b      	ldrb	r3, [r3, #29]
 8002734:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800273a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002740:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002746:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800274e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	045b      	lsls	r3, r3, #17
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_ADC_Init+0x2f4>)
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	69b9      	ldr	r1, [r7, #24]
 8002798:	430b      	orrs	r3, r1
 800279a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff feee 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff0f 	bl	80025e6 <LL_ADC_INJ_IsConversionOngoing>
 80027c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d16d      	bne.n	80028ac <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d16a      	bne.n	80028ac <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f2:	f023 0302 	bic.w	r3, r3, #2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d017      	beq.n	8002838 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002816:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002820:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6911      	ldr	r1, [r2, #16]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002836:	e013      	b.n	8002860 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002846:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800285c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002866:	2b01      	cmp	r3, #1
 8002868:	d118      	bne.n	800289c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800288c:	430a      	orrs	r2, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10c      	bne.n	80028ce <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f023 010f 	bic.w	r1, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
 80028cc:	e007      	b.n	80028de <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 020f 	bic.w	r2, r2, #15
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ee:	e011      	b.n	8002914 <HAL_ADC_Init+0x308>
 80028f0:	20000004 	.word	0x20000004
 80028f4:	053e2d63 	.word	0x053e2d63
 80028f8:	50000100 	.word	0x50000100
 80028fc:	50000300 	.word	0x50000300
 8002900:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002914:	7ffb      	ldrb	r3, [r7, #31]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop

08002920 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292a:	4867      	ldr	r0, [pc, #412]	; (8002ac8 <HAL_ADC_PollForConversion+0x1a8>)
 800292c:	f7ff fd54 	bl	80023d8 <LL_ADC_GetMultimode>
 8002930:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d102      	bne.n	8002940 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800293a:	2308      	movs	r3, #8
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e02a      	b.n	8002996 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d002      	beq.n	8002952 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b09      	cmp	r3, #9
 8002950:	d111      	bne.n	8002976 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0a6      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002970:	2304      	movs	r3, #4
 8002972:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002974:	e00f      	b.n	8002996 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002976:	4854      	ldr	r0, [pc, #336]	; (8002ac8 <HAL_ADC_PollForConversion+0x1a8>)
 8002978:	f7ff fd3c 	bl	80023f4 <LL_ADC_GetMultiDMATransfer>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e095      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002992:	2304      	movs	r3, #4
 8002994:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002996:	f7ff fbaf 	bl	80020f8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800299c:	e021      	b.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d01d      	beq.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029a6:	f7ff fba7 	bl	80020f8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <HAL_ADC_PollForConversion+0x9c>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d112      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e06d      	b.n	8002abe <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0d6      	beq.n	800299e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fc57 	bl	80022b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7f5b      	ldrb	r3, [r3, #29]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d118      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_ADC_PollForConversion+0x1ac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d002      	beq.n	8002a56 <HAL_ADC_PollForConversion+0x136>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e001      	b.n	8002a5a <HAL_ADC_PollForConversion+0x13a>
 8002a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d008      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d002      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d104      	bne.n	8002a7e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e00d      	b.n	8002a9a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_ADC_PollForConversion+0x1ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_ADC_PollForConversion+0x16e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e001      	b.n	8002a92 <HAL_ADC_PollForConversion+0x172>
 8002a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d104      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e008      	b.n	8002abc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	50000300 	.word	0x50000300
 8002acc:	50000100 	.word	0x50000100

08002ad0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad8:	4893      	ldr	r0, [pc, #588]	; (8002d28 <HAL_ADC_Start_IT+0x258>)
 8002ada:	f7ff fc7d 	bl	80023d8 <LL_ADC_GetMultimode>
 8002ade:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fd57 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 8113 	bne.w	8002d18 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_Start_IT+0x30>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e10e      	b.n	8002d1e <HAL_ADC_Start_IT+0x24e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fe05 	bl	8003718 <ADC_Enable>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 80fa 	bne.w	8002d0e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	; (8002d2c <HAL_ADC_Start_IT+0x25c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d002      	beq.n	8002b3e <HAL_ADC_Start_IT+0x6e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	e001      	b.n	8002b42 <HAL_ADC_Start_IT+0x72>
 8002b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d002      	beq.n	8002b50 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	f023 0206 	bic.w	r2, r3, #6
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
 8002b74:	e002      	b.n	8002b7c <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	221c      	movs	r2, #28
 8002b82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 021c 	bic.w	r2, r2, #28
 8002b9a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d108      	bne.n	8002bb6 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0208 	orr.w	r2, r2, #8
 8002bb2:	605a      	str	r2, [r3, #4]
          break;
 8002bb4:	e008      	b.n	8002bc8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0204 	orr.w	r2, r2, #4
 8002bc4:	605a      	str	r2, [r3, #4]
          break;
 8002bc6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0210 	orr.w	r2, r2, #16
 8002bde:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_ADC_Start_IT+0x25c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d002      	beq.n	8002bf0 <HAL_ADC_Start_IT+0x120>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e001      	b.n	8002bf4 <HAL_ADC_Start_IT+0x124>
 8002bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d008      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d13a      	bne.n	8002c84 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02d      	beq.n	8002c78 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d110      	bne.n	8002c56 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c52:	605a      	str	r2, [r3, #4]
              break;
 8002c54:	e010      	b.n	8002c78 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c64:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	605a      	str	r2, [r3, #4]
              break;
 8002c76:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fc63 	bl	8002548 <LL_ADC_REG_StartConversion>
 8002c82:	e04b      	b.n	8002d1c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <HAL_ADC_Start_IT+0x25c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d002      	beq.n	8002ca0 <HAL_ADC_Start_IT+0x1d0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e001      	b.n	8002ca4 <HAL_ADC_Start_IT+0x1d4>
 8002ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ca4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d034      	beq.n	8002d1c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d110      	bne.n	8002cec <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0220 	bic.w	r2, r2, #32
 8002cd8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	605a      	str	r2, [r3, #4]
              break;
 8002cea:	e017      	b.n	8002d1c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	605a      	str	r2, [r3, #4]
              break;
 8002d0c:	e006      	b.n	8002d1c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002d16:	e001      	b.n	8002d1c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	50000300 	.word	0x50000300
 8002d2c:	50000100 	.word	0x50000100

08002d30 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Stop_IT+0x16>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e02b      	b.n	8002d9e <HAL_ADC_Stop_IT+0x6e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d4e:	2103      	movs	r1, #3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fc25 	bl	80035a0 <ADC_ConversionStop>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d119      	bne.n	8002d94 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 021c 	bic.w	r2, r2, #28
 8002d6e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fd33 	bl	80037dc <ADC_Disable>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0b6      	sub	sp, #216	; 0xd8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x22>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e3c8      	b.n	8003574 <HAL_ADC_ConfigChannel+0x7b4>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fbd2 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 83ad 	bne.w	8003556 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7ff fa66 	bl	80022da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbc0 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 8002e18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fbe0 	bl	80025e6 <LL_ADC_INJ_IsConversionOngoing>
 8002e26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 81d9 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 81d4 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e46:	d10f      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7ff fa6d 	bl	8002332 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fa14 	bl	800228e <LL_ADC_SetSamplingTimeCommonConfig>
 8002e66:	e00e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff fa5c 	bl	8002332 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fa04 	bl	800228e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d022      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6919      	ldr	r1, [r3, #16]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eb8:	f7ff f95e 	bl	8002178 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f7ff f9aa 	bl	8002222 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7f1b      	ldrb	r3, [r3, #28]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x124>
 8002ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x126>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff f9b6 	bl	8002258 <LL_ADC_SetOffsetSaturation>
 8002eec:	e17b      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f963 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x15a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f958 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	e01e      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x198>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f94d 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1b0>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	e018      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x1e2>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d106      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f91c 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f900 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x220>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f8f5 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	f003 021f 	and.w	r2, r3, #31
 8002fde:	e01e      	b.n	800301e <HAL_ADC_ConfigChannel+0x25e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f8ea 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x276>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	e018      	b.n	8003068 <HAL_ADC_ConfigChannel+0x2a8>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800304a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800305e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003068:	429a      	cmp	r2, r3
 800306a:	d106      	bne.n	800307a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f8b9 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f89d 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x2e6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f892 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	e01e      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x324>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2102      	movs	r1, #2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f887 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80030c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80030cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e004      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80030d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x33c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	e016      	b.n	800312a <HAL_ADC_ConfigChannel+0x36a>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800310e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e004      	b.n	800312a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800312a:	429a      	cmp	r2, r3
 800312c:	d106      	bne.n	800313c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f858 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2103      	movs	r1, #3
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f83c 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x3a8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2103      	movs	r1, #3
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f831 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	e017      	b.n	8003198 <HAL_ADC_ConfigChannel+0x3d8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2103      	movs	r1, #3
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f826 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8003174:	4603      	mov	r3, r0
 8003176:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003182:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e003      	b.n	8003196 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800318e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x3f0>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	e011      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x414>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80031be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d106      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2200      	movs	r2, #0
 80031de:	2103      	movs	r1, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f803 	bl	80021ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f986 	bl	80024fc <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 8140 	bne.w	8003478 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	461a      	mov	r2, r3
 8003206:	f7ff f8bf 	bl	8002388 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a8f      	ldr	r2, [pc, #572]	; (800344c <HAL_ADC_ConfigChannel+0x68c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f040 8131 	bne.w	8003478 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_ADC_ConfigChannel+0x47e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	3301      	adds	r3, #1
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2b09      	cmp	r3, #9
 8003234:	bf94      	ite	ls
 8003236:	2301      	movls	r3, #1
 8003238:	2300      	movhi	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e019      	b.n	8003272 <HAL_ADC_ConfigChannel+0x4b2>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800324c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800325a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2b09      	cmp	r3, #9
 800326a:	bf94      	ite	ls
 800326c:	2301      	movls	r3, #1
 800326e:	2300      	movhi	r3, #0
 8003270:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003272:	2b00      	cmp	r3, #0
 8003274:	d079      	beq.n	800336a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x4d2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003290:	e015      	b.n	80032be <HAL_ADC_ConfigChannel+0x4fe>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	069b      	lsls	r3, r3, #26
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ADC_ConfigChannel+0x51e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	3301      	adds	r3, #1
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	e017      	b.n	800330e <HAL_ADC_ConfigChannel+0x54e>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e003      	b.n	8003302 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	ea42 0103 	orr.w	r1, r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x574>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	3301      	adds	r3, #1
 8003326:	f003 021f 	and.w	r2, r3, #31
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	051b      	lsls	r3, r3, #20
 8003332:	e018      	b.n	8003366 <HAL_ADC_ConfigChannel+0x5a6>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f003 021f 	and.w	r2, r3, #31
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003366:	430b      	orrs	r3, r1
 8003368:	e081      	b.n	800346e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x5c6>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	3301      	adds	r3, #1
 800337e:	069b      	lsls	r3, r3, #26
 8003380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003384:	e015      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x5f2>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	069b      	lsls	r3, r3, #26
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x612>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	3301      	adds	r3, #1
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	e017      	b.n	8003402 <HAL_ADC_ConfigChannel+0x642>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	61fb      	str	r3, [r7, #28]
  return result;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	ea42 0103 	orr.w	r1, r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_ADC_ConfigChannel+0x66e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	3301      	adds	r3, #1
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	3b1e      	subs	r3, #30
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800342c:	e01e      	b.n	800346c <HAL_ADC_ConfigChannel+0x6ac>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	613b      	str	r3, [r7, #16]
  return result;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e006      	b.n	8003458 <HAL_ADC_ConfigChannel+0x698>
 800344a:	bf00      	nop
 800344c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f003 021f 	and.w	r2, r3, #31
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	3b1e      	subs	r3, #30
 8003466:	051b      	lsls	r3, r3, #20
 8003468:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	430b      	orrs	r3, r1
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	4619      	mov	r1, r3
 8003474:	f7fe ff5d 	bl	8002332 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_ADC_ConfigChannel+0x7bc>)
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d071      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003484:	483e      	ldr	r0, [pc, #248]	; (8003580 <HAL_ADC_ConfigChannel+0x7c0>)
 8003486:	f7fe fe69 	bl	800215c <LL_ADC_GetCommonPathInternalCh>
 800348a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3c      	ldr	r2, [pc, #240]	; (8003584 <HAL_ADC_ConfigChannel+0x7c4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x6e2>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_ADC_ConfigChannel+0x7c8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d127      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d121      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b6:	d157      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034c0:	4619      	mov	r1, r3
 80034c2:	482f      	ldr	r0, [pc, #188]	; (8003580 <HAL_ADC_ConfigChannel+0x7c0>)
 80034c4:	f7fe fe37 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_ADC_ConfigChannel+0x7cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <HAL_ADC_ConfigChannel+0x7d0>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034e2:	e002      	b.n	80034ea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f9      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f0:	e03a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a27      	ldr	r2, [pc, #156]	; (8003594 <HAL_ADC_ConfigChannel+0x7d4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d113      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x764>
 80034fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_ADC_ConfigChannel+0x7d8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02a      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	4619      	mov	r1, r3
 800351c:	4818      	ldr	r0, [pc, #96]	; (8003580 <HAL_ADC_ConfigChannel+0x7c0>)
 800351e:	f7fe fe0a 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003522:	e021      	b.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_ADC_ConfigChannel+0x7dc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d11c      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800352e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_ADC_ConfigChannel+0x7d8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d011      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800354c:	4619      	mov	r1, r3
 800354e:	480c      	ldr	r0, [pc, #48]	; (8003580 <HAL_ADC_ConfigChannel+0x7c0>)
 8003550:	f7fe fdf1 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
 8003554:	e008      	b.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003570:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003574:	4618      	mov	r0, r3
 8003576:	37d8      	adds	r7, #216	; 0xd8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	80080000 	.word	0x80080000
 8003580:	50000300 	.word	0x50000300
 8003584:	c3210000 	.word	0xc3210000
 8003588:	90c00010 	.word	0x90c00010
 800358c:	20000004 	.word	0x20000004
 8003590:	053e2d63 	.word	0x053e2d63
 8003594:	c7520000 	.word	0xc7520000
 8003598:	50000100 	.word	0x50000100
 800359c:	cb840000 	.word	0xcb840000

080035a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe ffee 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 80035bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f80f 	bl	80025e6 <LL_ADC_INJ_IsConversionOngoing>
 80035c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8098 	beq.w	8003708 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02a      	beq.n	800363c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7f5b      	ldrb	r3, [r3, #29]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d126      	bne.n	800363c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d122      	bne.n	800363c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035fa:	e014      	b.n	8003626 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4a45      	ldr	r2, [pc, #276]	; (8003714 <ADC_ConversionStop+0x174>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d90d      	bls.n	8003620 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	f043 0210 	orr.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e074      	b.n	800370a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d1e3      	bne.n	80035fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2240      	movs	r2, #64	; 0x40
 800363a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d014      	beq.n	800366c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe ffa6 	bl	8002598 <LL_ADC_REG_IsConversionOngoing>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe ff63 	bl	8002522 <LL_ADC_IsDisableOngoing>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe ff82 	bl	8002570 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d014      	beq.n	800369c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe ffb5 	bl	80025e6 <LL_ADC_INJ_IsConversionOngoing>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe ff4b 	bl	8002522 <LL_ADC_IsDisableOngoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe ff91 	bl	80025be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d005      	beq.n	80036ae <ADC_ConversionStop+0x10e>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d105      	bne.n	80036b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036a8:	230c      	movs	r3, #12
 80036aa:	617b      	str	r3, [r7, #20]
        break;
 80036ac:	e005      	b.n	80036ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036ae:	2308      	movs	r3, #8
 80036b0:	617b      	str	r3, [r7, #20]
        break;
 80036b2:	e002      	b.n	80036ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036b4:	2304      	movs	r3, #4
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fd1d 	bl	80020f8 <HAL_GetTick>
 80036be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036c0:	e01b      	b.n	80036fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036c2:	f7fe fd19 	bl	80020f8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d914      	bls.n	80036fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1dc      	bne.n	80036c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	a33fffff 	.word	0xa33fffff

08003718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fee9 	bl	80024fc <LL_ADC_IsEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14d      	bne.n	80037cc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <ADC_Enable+0xc0>)
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e039      	b.n	80037ce <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fea4 	bl	80024ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003764:	f7fe fcc8 	bl	80020f8 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376a:	e028      	b.n	80037be <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fec3 	bl	80024fc <LL_ADC_IsEnabled>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fe93 	bl	80024ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003786:	f7fe fcb7 	bl	80020f8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d914      	bls.n	80037be <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00d      	beq.n	80037be <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	f043 0210 	orr.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d1cf      	bne.n	800376c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	8000003f 	.word	0x8000003f

080037dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fe9a 	bl	8002522 <LL_ADC_IsDisableOngoing>
 80037ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fe81 	bl	80024fc <LL_ADC_IsEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d047      	beq.n	8003890 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d144      	bne.n	8003890 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030d 	and.w	r3, r3, #13
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fe5b 	bl	80024d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2203      	movs	r2, #3
 8003824:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003826:	f7fe fc67 	bl	80020f8 <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800382c:	e029      	b.n	8003882 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f043 0210 	orr.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e023      	b.n	8003892 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800384a:	f7fe fc55 	bl	80020f8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d914      	bls.n	8003882 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e007      	b.n	8003892 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1dc      	bne.n	800384a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <LL_ADC_IsEnabled>:
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <LL_ADC_IsEnabled+0x18>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <LL_ADC_IsEnabled+0x1a>
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_REG_IsConversionOngoing>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b0a1      	sub	sp, #132	; 0x84
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003902:	2302      	movs	r3, #2
 8003904:	e08b      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800390e:	2300      	movs	r3, #0
 8003910:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003912:	2300      	movs	r3, #0
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391e:	d102      	bne.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003920:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e001      	b.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e06a      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ffb8 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 8003950:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ffb2 	bl	80038c0 <LL_ADC_REG_IsConversionOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d14c      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003964:	2b00      	cmp	r3, #0
 8003966:	d149      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003968:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800396a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d028      	beq.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003986:	035b      	lsls	r3, r3, #13
 8003988:	430b      	orrs	r3, r1
 800398a:	431a      	orrs	r2, r3
 800398c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003990:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003994:	f7ff ff81 	bl	800389a <LL_ADC_IsEnabled>
 8003998:	4604      	mov	r4, r0
 800399a:	4823      	ldr	r0, [pc, #140]	; (8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800399c:	f7ff ff7d 	bl	800389a <LL_ADC_IsEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4323      	orrs	r3, r4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d133      	bne.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	6811      	ldr	r1, [r2, #0]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	6892      	ldr	r2, [r2, #8]
 80039bc:	430a      	orrs	r2, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039c4:	e024      	b.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039d6:	f7ff ff60 	bl	800389a <LL_ADC_IsEnabled>
 80039da:	4604      	mov	r4, r0
 80039dc:	4812      	ldr	r0, [pc, #72]	; (8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039de:	f7ff ff5c 	bl	800389a <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4323      	orrs	r3, r4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d112      	bne.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039f2:	f023 030f 	bic.w	r3, r3, #15
 80039f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039fa:	e009      	b.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a0e:	e000      	b.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3784      	adds	r7, #132	; 0x84
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	bf00      	nop
 8003a28:	50000100 	.word	0x50000100
 8003a2c:	50000300 	.word	0x50000300

08003a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <__NVIC_SetPriorityGrouping+0x44>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	60d3      	str	r3, [r2, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <__NVIC_GetPriorityGrouping+0x18>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 0307 	and.w	r3, r3, #7
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	db0b      	blt.n	8003abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <__NVIC_EnableIRQ+0x38>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	; (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b9c:	d301      	bcc.n	8003ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00f      	b.n	8003bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <SysTick_Config+0x40>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003baa:	210f      	movs	r1, #15
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	f7ff ff8e 	bl	8003ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <SysTick_Config+0x40>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <SysTick_Config+0x40>)
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000e010 	.word	0xe000e010

08003bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff29 	bl	8003a30 <__NVIC_SetPriorityGrouping>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf4:	f7ff ff40 	bl	8003a78 <__NVIC_GetPriorityGrouping>
 8003bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff90 	bl	8003b24 <NVIC_EncodePriority>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5f 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff33 	bl	8003a94 <__NVIC_EnableIRQ>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ffa4 	bl	8003b8c <SysTick_Config>
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d005      	beq.n	8003c72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e037      	b.n	8003ce2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 020e 	bic.w	r2, r2, #14
 8003c80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 021f 	and.w	r2, r3, #31
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ce0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d00d      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e047      	b.n	8003dc4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 020e 	bic.w	r2, r2, #14
 8003d42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003da2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
    }
  }
  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e147      	b.n	8004072 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fe84 	bl	8001b04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0210 	bic.w	r2, r2, #16
 8003e0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e0c:	f7fe f974 	bl	80020f8 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e12:	e012      	b.n	8003e3a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e14:	f7fe f970 	bl	80020f8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b0a      	cmp	r3, #10
 8003e20:	d90b      	bls.n	8003e3a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e11b      	b.n	8004072 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d0e5      	beq.n	8003e14 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e58:	f7fe f94e 	bl	80020f8 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e5e:	e012      	b.n	8003e86 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e60:	f7fe f94a 	bl	80020f8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d90b      	bls.n	8003e86 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0f5      	b.n	8004072 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0e5      	beq.n	8003e60 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0202 	orr.w	r2, r2, #2
 8003ea2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	; (800407c <HAL_FDCAN_Init+0x2ac>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d103      	bne.n	8003eb6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003eae:	4a74      	ldr	r2, [pc, #464]	; (8004080 <HAL_FDCAN_Init+0x2b0>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7c1b      	ldrb	r3, [r3, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d108      	bne.n	8003ed0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	619a      	str	r2, [r3, #24]
 8003ece:	e007      	b.n	8003ee0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7c5b      	ldrb	r3, [r3, #17]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d108      	bne.n	8003efa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	e007      	b.n	8003f0a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f08:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7c9b      	ldrb	r3, [r3, #18]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d108      	bne.n	8003f24 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f20:	619a      	str	r2, [r3, #24]
 8003f22:	e007      	b.n	8003f34 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f32:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003f58:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0204 	orr.w	r2, r2, #4
 8003f80:	619a      	str	r2, [r3, #24]
 8003f82:	e02c      	b.n	8003fde <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d028      	beq.n	8003fde <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d01c      	beq.n	8003fce <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0210 	orr.w	r2, r2, #16
 8003fb2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d110      	bne.n	8003fde <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0220 	orr.w	r2, r2, #32
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e007      	b.n	8003fde <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fee:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ff6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004006:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004008:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004012:	d115      	bne.n	8004040 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	3b01      	subs	r3, #1
 8004020:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004022:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	3b01      	subs	r3, #1
 800402a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800402c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	3b01      	subs	r3, #1
 8004036:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800403c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800403e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f814 	bl	8004084 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40006400 	.word	0x40006400
 8004080:	40006500 	.word	0x40006500

08004084 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800408e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	041a      	lsls	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	061a      	lsls	r2, r3, #24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e005      	b.n	8004112 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	d3f3      	bcc.n	8004106 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	4000a400 	.word	0x4000a400

08004130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800413e:	e15a      	b.n	80043f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 814c 	beq.w	80043f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d005      	beq.n	8004170 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800416c:	2b02      	cmp	r3, #2
 800416e:	d130      	bne.n	80041d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041a6:	2201      	movs	r2, #1
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0201 	and.w	r2, r3, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d017      	beq.n	800420e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d123      	bne.n	8004262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	08da      	lsrs	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3208      	adds	r2, #8
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	08da      	lsrs	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3208      	adds	r2, #8
 800425c:	6939      	ldr	r1, [r7, #16]
 800425e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	2203      	movs	r2, #3
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0203 	and.w	r2, r3, #3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80a6 	beq.w	80043f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a4:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_GPIO_Init+0x2e4>)
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_GPIO_Init+0x2e4>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6613      	str	r3, [r2, #96]	; 0x60
 80042b0:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_GPIO_Init+0x2e4>)
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042bc:	4a56      	ldr	r2, [pc, #344]	; (8004418 <HAL_GPIO_Init+0x2e8>)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	089b      	lsrs	r3, r3, #2
 80042c2:	3302      	adds	r3, #2
 80042c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	220f      	movs	r2, #15
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042e6:	d01f      	beq.n	8004328 <HAL_GPIO_Init+0x1f8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a4c      	ldr	r2, [pc, #304]	; (800441c <HAL_GPIO_Init+0x2ec>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d019      	beq.n	8004324 <HAL_GPIO_Init+0x1f4>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_GPIO_Init+0x2f0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_GPIO_Init+0x1f0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a4a      	ldr	r2, [pc, #296]	; (8004424 <HAL_GPIO_Init+0x2f4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00d      	beq.n	800431c <HAL_GPIO_Init+0x1ec>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_GPIO_Init+0x2f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d007      	beq.n	8004318 <HAL_GPIO_Init+0x1e8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a48      	ldr	r2, [pc, #288]	; (800442c <HAL_GPIO_Init+0x2fc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_GPIO_Init+0x1e4>
 8004310:	2305      	movs	r3, #5
 8004312:	e00a      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 8004314:	2306      	movs	r3, #6
 8004316:	e008      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 8004318:	2304      	movs	r3, #4
 800431a:	e006      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 800431c:	2303      	movs	r3, #3
 800431e:	e004      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 8004320:	2302      	movs	r3, #2
 8004322:	e002      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_GPIO_Init+0x1fa>
 8004328:	2300      	movs	r3, #0
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	f002 0203 	and.w	r2, r2, #3
 8004330:	0092      	lsls	r2, r2, #2
 8004332:	4093      	lsls	r3, r2
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800433a:	4937      	ldr	r1, [pc, #220]	; (8004418 <HAL_GPIO_Init+0x2e8>)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	3302      	adds	r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004348:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_GPIO_Init+0x300>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	43db      	mvns	r3, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800436c:	4a30      	ldr	r2, [pc, #192]	; (8004430 <HAL_GPIO_Init+0x300>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004372:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <HAL_GPIO_Init+0x300>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <HAL_GPIO_Init+0x300>)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_GPIO_Init+0x300>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_GPIO_Init+0x300>)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_GPIO_Init+0x300>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <HAL_GPIO_Init+0x300>)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3301      	adds	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f ae9d 	bne.w	8004140 <HAL_GPIO_Init+0x10>
  }
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40021000 	.word	0x40021000
 8004418:	40010000 	.word	0x40010000
 800441c:	48000400 	.word	0x48000400
 8004420:	48000800 	.word	0x48000800
 8004424:	48000c00 	.word	0x48000c00
 8004428:	48001000 	.word	0x48001000
 800442c:	48001400 	.word	0x48001400
 8004430:	40010400 	.word	0x40010400

08004434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
 8004440:	4613      	mov	r3, r2
 8004442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004444:	787b      	ldrb	r3, [r7, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004450:	e002      	b.n	8004458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d141      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004472:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d131      	bne.n	80044e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004480:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004486:	4a46      	ldr	r2, [pc, #280]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004498:	4a41      	ldr	r2, [pc, #260]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800449e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044a0:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2232      	movs	r2, #50	; 0x32
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	0c9b      	lsrs	r3, r3, #18
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b6:	e002      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d102      	bne.n	80044d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f2      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d2:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d158      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e057      	b.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ea:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044f4:	e04d      	b.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fc:	d141      	bne.n	8004582 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044fe:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450a:	d131      	bne.n	8004570 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004512:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004518:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800451c:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004524:	4a1e      	ldr	r2, [pc, #120]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2232      	movs	r2, #50	; 0x32
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	0c9b      	lsrs	r3, r3, #18
 800453e:	3301      	adds	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004542:	e002      	b.n	800454a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3b01      	subs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d102      	bne.n	800455e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f2      	bne.n	8004544 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456a:	d112      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e011      	b.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004576:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004580:	e007      	b.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800458a:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004590:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40007000 	.word	0x40007000
 80045a4:	20000004 	.word	0x20000004
 80045a8:	431bde83 	.word	0x431bde83

080045ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ba:	6093      	str	r3, [r2, #8]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000

080045cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e306      	b.n	8004bec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d075      	beq.n	80046d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ea:	4b97      	ldr	r3, [pc, #604]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f4:	4b94      	ldr	r3, [pc, #592]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d102      	bne.n	800460a <HAL_RCC_OscConfig+0x3e>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d002      	beq.n	8004610 <HAL_RCC_OscConfig+0x44>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10b      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	4b8d      	ldr	r3, [pc, #564]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x108>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d157      	bne.n	80046d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e2e1      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d106      	bne.n	8004640 <HAL_RCC_OscConfig+0x74>
 8004632:	4b85      	ldr	r3, [pc, #532]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a84      	ldr	r2, [pc, #528]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x98>
 800464a:	4b7f      	ldr	r3, [pc, #508]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7e      	ldr	r2, [pc, #504]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b7c      	ldr	r3, [pc, #496]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7b      	ldr	r2, [pc, #492]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004664:	4b78      	ldr	r3, [pc, #480]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b75      	ldr	r3, [pc, #468]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a74      	ldr	r2, [pc, #464]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fd38 	bl	80020f8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd fd34 	bl	80020f8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e2a6      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469e:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0xc0>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd fd24 	bl	80020f8 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fd fd20 	bl	80020f8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e292      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	4b60      	ldr	r3, [pc, #384]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0xe8>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d075      	beq.n	80047ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ec:	4b56      	ldr	r3, [pc, #344]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d102      	bne.n	8004702 <HAL_RCC_OscConfig+0x136>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d002      	beq.n	8004708 <HAL_RCC_OscConfig+0x13c>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11f      	bne.n	8004748 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x154>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e265      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4946      	ldr	r1, [pc, #280]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004734:	4b45      	ldr	r3, [pc, #276]	; (800484c <HAL_RCC_OscConfig+0x280>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fd fc91 	bl	8002060 <HAL_InitTick>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d043      	beq.n	80047cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e251      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d023      	beq.n	8004798 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3c      	ldr	r2, [pc, #240]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd fccc 	bl	80020f8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004764:	f7fd fcc8 	bl	80020f8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e23a      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004776:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004782:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	492d      	ldr	r1, [pc, #180]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
 8004796:	e01a      	b.n	80047ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800479e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd fca8 	bl	80020f8 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fd fca4 	bl	80020f8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e216      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x1e0>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d041      	beq.n	800485e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01c      	beq.n	800481c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80047e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f2:	f7fd fc81 	bl	80020f8 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fa:	f7fd fc7d 	bl	80020f8 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e1ef      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800480e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ef      	beq.n	80047fa <HAL_RCC_OscConfig+0x22e>
 800481a:	e020      	b.n	800485e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fd fc64 	bl	80020f8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004832:	e00d      	b.n	8004850 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004834:	f7fd fc60 	bl	80020f8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d906      	bls.n	8004850 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1d2      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004850:	4b8c      	ldr	r3, [pc, #560]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ea      	bne.n	8004834 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a6 	beq.w	80049b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004870:	4b84      	ldr	r3, [pc, #528]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_OscConfig+0x2b4>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x2b6>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	4b7f      	ldr	r3, [pc, #508]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	4a7e      	ldr	r2, [pc, #504]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6593      	str	r3, [r2, #88]	; 0x58
 8004892:	4b7c      	ldr	r3, [pc, #496]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a2:	4b79      	ldr	r3, [pc, #484]	; (8004a88 <HAL_RCC_OscConfig+0x4bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ae:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_RCC_OscConfig+0x4bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <HAL_RCC_OscConfig+0x4bc>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fd fc1d 	bl	80020f8 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fd fc19 	bl	80020f8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e18b      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d4:	4b6c      	ldr	r3, [pc, #432]	; (8004a88 <HAL_RCC_OscConfig+0x4bc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <HAL_RCC_OscConfig+0x32e>
 80048e8:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a65      	ldr	r2, [pc, #404]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	e024      	b.n	8004944 <HAL_RCC_OscConfig+0x378>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d110      	bne.n	8004924 <HAL_RCC_OscConfig+0x358>
 8004902:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	4a5e      	ldr	r2, [pc, #376]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800490a:	f043 0304 	orr.w	r3, r3, #4
 800490e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004912:	4b5c      	ldr	r3, [pc, #368]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004918:	4a5a      	ldr	r2, [pc, #360]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004922:	e00f      	b.n	8004944 <HAL_RCC_OscConfig+0x378>
 8004924:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a56      	ldr	r2, [pc, #344]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004934:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fd fbd4 	bl	80020f8 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fd fbd0 	bl	80020f8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e140      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496a:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ed      	beq.n	8004954 <HAL_RCC_OscConfig+0x388>
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fbbd 	bl	80020f8 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fbb9 	bl	80020f8 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e129      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004998:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ed      	bne.n	8004982 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	4a34      	ldr	r2, [pc, #208]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049cc:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d2:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fb8c 	bl	80020f8 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e4:	f7fd fb88 	bl	80020f8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0fa      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ef      	beq.n	80049e4 <HAL_RCC_OscConfig+0x418>
 8004a04:	e01b      	b.n	8004a3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a06:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fd fb6f 	bl	80020f8 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1e:	f7fd fb6b 	bl	80020f8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0dd      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80d1 	beq.w	8004bea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	f000 808b 	beq.w	8004b6c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d15e      	bne.n	8004b1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fd fb45 	bl	80020f8 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a70:	e00c      	b.n	8004a8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a72:	f7fd fb41 	bl	80020f8 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d905      	bls.n	8004a8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0b3      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ec      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a98:	4b56      	ldr	r3, [pc, #344]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <HAL_RCC_OscConfig+0x62c>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6a11      	ldr	r1, [r2, #32]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0112      	lsls	r2, r2, #4
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ab2:	0212      	lsls	r2, r2, #8
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004aba:	0852      	lsrs	r2, r2, #1
 8004abc:	3a01      	subs	r2, #1
 8004abe:	0552      	lsls	r2, r2, #21
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac6:	0852      	lsrs	r2, r2, #1
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	0652      	lsls	r2, r2, #25
 8004acc:	4311      	orrs	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ad2:	06d2      	lsls	r2, r2, #27
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004adc:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a44      	ldr	r2, [pc, #272]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fb00 	bl	80020f8 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd fafc 	bl	80020f8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e06e      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0e:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x530>
 8004b1a:	e066      	b.n	8004bea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1c:	4b35      	ldr	r3, [pc, #212]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a34      	ldr	r2, [pc, #208]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b28:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a31      	ldr	r2, [pc, #196]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b34:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4a2e      	ldr	r2, [pc, #184]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fad8 	bl	80020f8 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fd fad4 	bl	80020f8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e046      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x580>
 8004b6a:	e03e      	b.n	8004bea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e039      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <HAL_RCC_OscConfig+0x628>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 0203 	and.w	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d12c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	3b01      	subs	r3, #1
 8004b98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d123      	bne.n	8004be6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d11b      	bne.n	8004be6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d113      	bne.n	8004be6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	3b01      	subs	r3, #1
 8004be0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	019f800c 	.word	0x019f800c

08004bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e11e      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d910      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 020f 	bic.w	r2, r3, #15
 8004c2a:	498c      	ldr	r1, [pc, #560]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b8a      	ldr	r3, [pc, #552]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e106      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d073      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d129      	bne.n	8004cac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c58:	4b81      	ldr	r3, [pc, #516]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0f4      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c68:	f000 f99e 	bl	8004fa8 <RCC_GetSysClockFreqFromPLLSource>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4a7c      	ldr	r2, [pc, #496]	; (8004e64 <HAL_RCC_ClockConfig+0x268>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d93f      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c76:	4b7a      	ldr	r3, [pc, #488]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d033      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d12f      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9e:	4a70      	ldr	r2, [pc, #448]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e024      	b.n	8004cf6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0c6      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0be      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cd4:	f000 f8ce 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4a61      	ldr	r2, [pc, #388]	; (8004e64 <HAL_RCC_ClockConfig+0x268>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d909      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cea:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cf6:	4b5a      	ldr	r3, [pc, #360]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4957      	ldr	r1, [pc, #348]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fd f9f6 	bl	80020f8 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fd f9f2 	bl	80020f8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e095      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	4b4e      	ldr	r3, [pc, #312]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 020c 	and.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1eb      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d023      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d68:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d70:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4936      	ldr	r1, [pc, #216]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d105      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a32      	ldr	r2, [pc, #200]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d21d      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 020f 	bic.w	r2, r3, #15
 8004db4:	4929      	ldr	r1, [pc, #164]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004dbc:	f7fd f99c 	bl	80020f8 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7fd f998 	bl	80020f8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e03b      	b.n	8004e52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x260>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1ed      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4917      	ldr	r1, [pc, #92]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	490f      	ldr	r1, [pc, #60]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e26:	f000 f825 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	490c      	ldr	r1, [pc, #48]	; (8004e68 <HAL_RCC_ClockConfig+0x26c>)
 8004e38:	5ccb      	ldrb	r3, [r1, r3]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <HAL_RCC_ClockConfig+0x270>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x274>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd f908 	bl	8002060 <HAL_InitTick>
 8004e50:	4603      	mov	r3, r0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	04c4b400 	.word	0x04c4b400
 8004e68:	080097f4 	.word	0x080097f4
 8004e6c:	20000004 	.word	0x20000004
 8004e70:	20000008 	.word	0x20000008

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e7a:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e047      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d102      	bne.n	8004e9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e98:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e03e      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d136      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d10c      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed2:	68d2      	ldr	r2, [r2, #12]
 8004ed4:	0a12      	lsrs	r2, r2, #8
 8004ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	617b      	str	r3, [r7, #20]
      break;
 8004ee0:	e00c      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ee2:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eec:	68d2      	ldr	r2, [r2, #12]
 8004eee:	0a12      	lsrs	r2, r2, #8
 8004ef0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]
      break;
 8004efa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	0e5b      	lsrs	r3, r3, #25
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	3301      	adds	r3, #1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	e001      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f1c:	693b      	ldr	r3, [r7, #16]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200

08004f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000004 	.word	0x20000004

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4904      	ldr	r1, [pc, #16]	; (8004f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08009804 	.word	0x08009804

08004f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f80:	f7ff ffda 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0adb      	lsrs	r3, r3, #11
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	08009804 	.word	0x08009804

08004fa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d10c      	bne.n	8004fe6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	4a14      	ldr	r2, [pc, #80]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fd6:	68d2      	ldr	r2, [r2, #12]
 8004fd8:	0a12      	lsrs	r2, r2, #8
 8004fda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
    break;
 8004fe4:	e00c      	b.n	8005000 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	0a12      	lsrs	r2, r2, #8
 8004ff4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    break;
 8004ffe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0e5b      	lsrs	r3, r3, #25
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800501a:	687b      	ldr	r3, [r7, #4]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40021000 	.word	0x40021000
 800502c:	007a1200 	.word	0x007a1200
 8005030:	00f42400 	.word	0x00f42400

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800503c:	2300      	movs	r3, #0
 800503e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005040:	2300      	movs	r3, #0
 8005042:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8098 	beq.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b43      	ldr	r3, [pc, #268]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	4b40      	ldr	r3, [pc, #256]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	4a3f      	ldr	r2, [pc, #252]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6593      	str	r3, [r2, #88]	; 0x58
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507e:	4b3a      	ldr	r3, [pc, #232]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a39      	ldr	r2, [pc, #228]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508a:	f7fd f835 	bl	80020f8 <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005090:	e009      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd f831 	bl	80020f8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	74fb      	strb	r3, [r7, #19]
        break;
 80050a4:	e005      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ef      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d159      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01e      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d019      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050f0:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005100:	4a18      	ldr	r2, [pc, #96]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005112:	f7fc fff1 	bl	80020f8 <HAL_GetTick>
 8005116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005118:	e00b      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fc ffed 	bl	80020f8 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d902      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	74fb      	strb	r3, [r7, #19]
            break;
 8005130:	e006      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ec      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005146:	4b07      	ldr	r3, [pc, #28]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	4903      	ldr	r1, [pc, #12]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800515c:	e008      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800515e:	7cfb      	ldrb	r3, [r7, #19]
 8005160:	74bb      	strb	r3, [r7, #18]
 8005162:	e005      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005170:	7c7b      	ldrb	r3, [r7, #17]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d105      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005176:	4ba6      	ldr	r3, [pc, #664]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	4aa5      	ldr	r2, [pc, #660]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800518e:	4ba0      	ldr	r3, [pc, #640]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f023 0203 	bic.w	r2, r3, #3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	499c      	ldr	r1, [pc, #624]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b0:	4b97      	ldr	r3, [pc, #604]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f023 020c 	bic.w	r2, r3, #12
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4994      	ldr	r1, [pc, #592]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d2:	4b8f      	ldr	r3, [pc, #572]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	498b      	ldr	r1, [pc, #556]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051f4:	4b86      	ldr	r3, [pc, #536]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4983      	ldr	r1, [pc, #524]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005216:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	497a      	ldr	r1, [pc, #488]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005238:	4b75      	ldr	r3, [pc, #468]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	4972      	ldr	r1, [pc, #456]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800525a:	4b6d      	ldr	r3, [pc, #436]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4969      	ldr	r1, [pc, #420]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800527c:	4b64      	ldr	r3, [pc, #400]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4961      	ldr	r1, [pc, #388]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529e:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	4958      	ldr	r1, [pc, #352]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	4950      	ldr	r1, [pc, #320]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e0:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a4a      	ldr	r2, [pc, #296]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052f8:	4b45      	ldr	r3, [pc, #276]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4942      	ldr	r1, [pc, #264]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005322:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005330:	4b37      	ldr	r3, [pc, #220]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4934      	ldr	r1, [pc, #208]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a2e      	ldr	r2, [pc, #184]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	4926      	ldr	r1, [pc, #152]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005388:	4b21      	ldr	r3, [pc, #132]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005392:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4918      	ldr	r1, [pc, #96]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	490a      	ldr	r1, [pc, #40]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005404:	7cbb      	ldrb	r3, [r7, #18]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000

08005414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e049      	b.n	80054ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fbbc 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fc56 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e049      	b.n	8005568 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f841 	bl	8005570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f000 fbff 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0202 	mvn.w	r2, #2
 80055b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fb7e 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fb70 	bl	8005cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb81 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0204 	mvn.w	r2, #4
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fb54 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fb46 	bl	8005cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fb57 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b08      	cmp	r3, #8
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b08      	cmp	r3, #8
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fb2a 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fb1c 	bl	8005cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fb2d 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b10      	cmp	r3, #16
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0210 	mvn.w	r2, #16
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2208      	movs	r2, #8
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fb00 	bl	8005cc8 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 faf2 	bl	8005cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb03 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d10e      	bne.n	8005708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d107      	bne.n	8005708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0201 	mvn.w	r2, #1
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 facc 	bl	8005ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d10e      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d107      	bne.n	8005734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800572c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 f836 	bl	80067a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	d10e      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d107      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 f829 	bl	80067b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d10e      	bne.n	800578e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fab1 	bl	8005cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b20      	cmp	r3, #32
 800579a:	d10e      	bne.n	80057ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d107      	bne.n	80057ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f06f 0220 	mvn.w	r2, #32
 80057b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 ffe9 	bl	800678c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c8:	d10f      	bne.n	80057ea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 ffef 	bl	80067c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f8:	d10f      	bne.n	800581a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 ffe1 	bl	80067dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005828:	d10f      	bne.n	800584a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d107      	bne.n	800584a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 ffd3 	bl	80067f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005858:	d10f      	bne.n	800587a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005868:	d107      	bne.n	800587a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 ffc5 	bl	8006804 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800589e:	2302      	movs	r3, #2
 80058a0:	e0ff      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b14      	cmp	r3, #20
 80058ae:	f200 80f0 	bhi.w	8005a92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005a93 	.word	0x08005a93
 80058c0:	08005a93 	.word	0x08005a93
 80058c4:	08005a93 	.word	0x08005a93
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	08005a93 	.word	0x08005a93
 80058d0:	08005a93 	.word	0x08005a93
 80058d4:	08005a93 	.word	0x08005a93
 80058d8:	0800598f 	.word	0x0800598f
 80058dc:	08005a93 	.word	0x08005a93
 80058e0:	08005a93 	.word	0x08005a93
 80058e4:	08005a93 	.word	0x08005a93
 80058e8:	080059cf 	.word	0x080059cf
 80058ec:	08005a93 	.word	0x08005a93
 80058f0:	08005a93 	.word	0x08005a93
 80058f4:	08005a93 	.word	0x08005a93
 80058f8:	08005a11 	.word	0x08005a11
 80058fc:	08005a93 	.word	0x08005a93
 8005900:	08005a93 	.word	0x08005a93
 8005904:	08005a93 	.word	0x08005a93
 8005908:	08005a51 	.word	0x08005a51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fa86 	bl	8005e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	619a      	str	r2, [r3, #24]
      break;
 800594a:	e0a5      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 faf6 	bl	8005f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	021a      	lsls	r2, r3, #8
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	619a      	str	r2, [r3, #24]
      break;
 800598c:	e084      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fb5f 	bl	8006058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0208 	orr.w	r2, r2, #8
 80059a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0204 	bic.w	r2, r2, #4
 80059b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	61da      	str	r2, [r3, #28]
      break;
 80059cc:	e064      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fbc7 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	021a      	lsls	r2, r3, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	61da      	str	r2, [r3, #28]
      break;
 8005a0e:	e043      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fc30 	bl	800627c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0208 	orr.w	r2, r2, #8
 8005a2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a4e:	e023      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fc74 	bl	8006344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a90:	e002      	b.n	8005a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
      break;
 8005a96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0de      	b.n	8005c86 <HAL_TIM_ConfigClockSource+0x1da>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005ae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a63      	ldr	r2, [pc, #396]	; (8005c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f000 80a9 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b08:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f200 80ae 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b10:	4a60      	ldr	r2, [pc, #384]	; (8005c94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	f000 80a1 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b18:	4a5e      	ldr	r2, [pc, #376]	; (8005c94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f200 80a6 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b20:	4a5d      	ldr	r2, [pc, #372]	; (8005c98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f000 8099 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b28:	4a5b      	ldr	r2, [pc, #364]	; (8005c98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f200 809e 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b30:	4a5a      	ldr	r2, [pc, #360]	; (8005c9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	f000 8091 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b38:	4a58      	ldr	r2, [pc, #352]	; (8005c9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f200 8096 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b44:	f000 8089 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b4c:	f200 808e 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b54:	d03e      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0x128>
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5a:	f200 8087 	bhi.w	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b62:	f000 8086 	beq.w	8005c72 <HAL_TIM_ConfigClockSource+0x1c6>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d87f      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b6c:	2b70      	cmp	r3, #112	; 0x70
 8005b6e:	d01a      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b70:	2b70      	cmp	r3, #112	; 0x70
 8005b72:	d87b      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b74:	2b60      	cmp	r3, #96	; 0x60
 8005b76:	d050      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x16e>
 8005b78:	2b60      	cmp	r3, #96	; 0x60
 8005b7a:	d877      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b7c:	2b50      	cmp	r3, #80	; 0x50
 8005b7e:	d03c      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x14e>
 8005b80:	2b50      	cmp	r3, #80	; 0x50
 8005b82:	d873      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d058      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x18e>
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d86f      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b8c:	2b30      	cmp	r3, #48	; 0x30
 8005b8e:	d064      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b90:	2b30      	cmp	r3, #48	; 0x30
 8005b92:	d86b      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d060      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d867      	bhi.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d05c      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d05a      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005ba4:	e062      	b.n	8005c6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f000 fca7 	bl	8006508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	609a      	str	r2, [r3, #8]
      break;
 8005bd2:	e04f      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6899      	ldr	r1, [r3, #8]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f000 fc90 	bl	8006508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf6:	609a      	str	r2, [r3, #8]
      break;
 8005bf8:	e03c      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 fc02 	bl	8006410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2150      	movs	r1, #80	; 0x50
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fc5b 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8005c18:	e02c      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f000 fc21 	bl	800646e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2160      	movs	r1, #96	; 0x60
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fc4b 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8005c38:	e01c      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 fbe2 	bl	8006410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2140      	movs	r1, #64	; 0x40
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fc3b 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8005c58:	e00c      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f000 fc32 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 8005c6a:	e003      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e000      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	00100070 	.word	0x00100070
 8005c94:	00100040 	.word	0x00100040
 8005c98:	00100030 	.word	0x00100030
 8005c9c:	00100020 	.word	0x00100020

08005ca0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <TIM_Base_SetConfig+0x104>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00f      	beq.n	8005d3c <TIM_Base_SetConfig+0x38>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d00b      	beq.n	8005d3c <TIM_Base_SetConfig+0x38>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a39      	ldr	r2, [pc, #228]	; (8005e0c <TIM_Base_SetConfig+0x108>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_Base_SetConfig+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a38      	ldr	r2, [pc, #224]	; (8005e10 <TIM_Base_SetConfig+0x10c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_Base_SetConfig+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a37      	ldr	r2, [pc, #220]	; (8005e14 <TIM_Base_SetConfig+0x110>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d108      	bne.n	8005d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <TIM_Base_SetConfig+0x104>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01b      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d017      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <TIM_Base_SetConfig+0x108>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <TIM_Base_SetConfig+0x10c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a28      	ldr	r2, [pc, #160]	; (8005e14 <TIM_Base_SetConfig+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <TIM_Base_SetConfig+0x114>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <TIM_Base_SetConfig+0x118>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <TIM_Base_SetConfig+0x11c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <TIM_Base_SetConfig+0x104>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_Base_SetConfig+0xe8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <TIM_Base_SetConfig+0x110>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_Base_SetConfig+0xe8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <TIM_Base_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_Base_SetConfig+0xe8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <TIM_Base_SetConfig+0x118>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_Base_SetConfig+0xe8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <TIM_Base_SetConfig+0x11c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d103      	bne.n	8005df4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	615a      	str	r2, [r3, #20]
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40013400 	.word	0x40013400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800

08005e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 0302 	bic.w	r3, r3, #2
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <TIM_OC1_SetConfig+0x10c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00f      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x80>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <TIM_OC1_SetConfig+0x110>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x80>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <TIM_OC1_SetConfig+0x114>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x80>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a29      	ldr	r2, [pc, #164]	; (8005f3c <TIM_OC1_SetConfig+0x118>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <TIM_OC1_SetConfig+0x11c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0308 	bic.w	r3, r3, #8
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <TIM_OC1_SetConfig+0x10c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_OC1_SetConfig+0xc2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <TIM_OC1_SetConfig+0x110>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_OC1_SetConfig+0xc2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <TIM_OC1_SetConfig+0x114>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_OC1_SetConfig+0xc2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <TIM_OC1_SetConfig+0x118>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC1_SetConfig+0xc2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <TIM_OC1_SetConfig+0x11c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d111      	bne.n	8005f0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800

08005f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0210 	bic.w	r2, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0320 	bic.w	r3, r3, #32
 8005f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a28      	ldr	r2, [pc, #160]	; (8006044 <TIM_OC2_SetConfig+0x100>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x6c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a27      	ldr	r2, [pc, #156]	; (8006048 <TIM_OC2_SetConfig+0x104>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <TIM_OC2_SetConfig+0x100>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_OC2_SetConfig+0xb0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <TIM_OC2_SetConfig+0x104>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_OC2_SetConfig+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <TIM_OC2_SetConfig+0x108>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_OC2_SetConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <TIM_OC2_SetConfig+0x10c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC2_SetConfig+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <TIM_OC2_SetConfig+0x110>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d113      	bne.n	800601c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40012c00 	.word	0x40012c00
 8006048:	40013400 	.word	0x40013400
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800

08006058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a27      	ldr	r2, [pc, #156]	; (8006154 <TIM_OC3_SetConfig+0xfc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC3_SetConfig+0x6a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a26      	ldr	r2, [pc, #152]	; (8006158 <TIM_OC3_SetConfig+0x100>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d10d      	bne.n	80060de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <TIM_OC3_SetConfig+0xfc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00f      	beq.n	8006106 <TIM_OC3_SetConfig+0xae>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <TIM_OC3_SetConfig+0x100>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00b      	beq.n	8006106 <TIM_OC3_SetConfig+0xae>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a1a      	ldr	r2, [pc, #104]	; (800615c <TIM_OC3_SetConfig+0x104>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d007      	beq.n	8006106 <TIM_OC3_SetConfig+0xae>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a19      	ldr	r2, [pc, #100]	; (8006160 <TIM_OC3_SetConfig+0x108>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_OC3_SetConfig+0xae>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a18      	ldr	r2, [pc, #96]	; (8006164 <TIM_OC3_SetConfig+0x10c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d113      	bne.n	800612e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	621a      	str	r2, [r3, #32]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a28      	ldr	r2, [pc, #160]	; (8006268 <TIM_OC4_SetConfig+0x100>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC4_SetConfig+0x6c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a27      	ldr	r2, [pc, #156]	; (800626c <TIM_OC4_SetConfig+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d10d      	bne.n	80061f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	031b      	lsls	r3, r3, #12
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <TIM_OC4_SetConfig+0x100>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00f      	beq.n	8006218 <TIM_OC4_SetConfig+0xb0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a1c      	ldr	r2, [pc, #112]	; (800626c <TIM_OC4_SetConfig+0x104>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00b      	beq.n	8006218 <TIM_OC4_SetConfig+0xb0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <TIM_OC4_SetConfig+0x108>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_OC4_SetConfig+0xb0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <TIM_OC4_SetConfig+0x10c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC4_SetConfig+0xb0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a19      	ldr	r2, [pc, #100]	; (8006278 <TIM_OC4_SetConfig+0x110>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d113      	bne.n	8006240 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800621e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006226:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	019b      	lsls	r3, r3, #6
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	019b      	lsls	r3, r3, #6
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800

0800627c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a17      	ldr	r2, [pc, #92]	; (8006330 <TIM_OC5_SetConfig+0xb4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_OC5_SetConfig+0x7a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a16      	ldr	r2, [pc, #88]	; (8006334 <TIM_OC5_SetConfig+0xb8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_OC5_SetConfig+0x7a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <TIM_OC5_SetConfig+0xbc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_OC5_SetConfig+0x7a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a14      	ldr	r2, [pc, #80]	; (800633c <TIM_OC5_SetConfig+0xc0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC5_SetConfig+0x7a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a13      	ldr	r2, [pc, #76]	; (8006340 <TIM_OC5_SetConfig+0xc4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d109      	bne.n	800630a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	621a      	str	r2, [r3, #32]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800

08006344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800638a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	051b      	lsls	r3, r3, #20
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a18      	ldr	r2, [pc, #96]	; (80063fc <TIM_OC6_SetConfig+0xb8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_OC6_SetConfig+0x7c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a17      	ldr	r2, [pc, #92]	; (8006400 <TIM_OC6_SetConfig+0xbc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC6_SetConfig+0x7c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a16      	ldr	r2, [pc, #88]	; (8006404 <TIM_OC6_SetConfig+0xc0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC6_SetConfig+0x7c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <TIM_OC6_SetConfig+0xc4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC6_SetConfig+0x7c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <TIM_OC6_SetConfig+0xc8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d109      	bne.n	80063d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40013400 	.word	0x40013400
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800643a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646e:	b480      	push	{r7}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f043 0307 	orr.w	r3, r3, #7
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	021a      	lsls	r2, r3, #8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	431a      	orrs	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4313      	orrs	r3, r2
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	609a      	str	r2, [r3, #8]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e065      	b.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2b      	ldr	r2, [pc, #172]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800659a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d013      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a18      	ldr	r2, [pc, #96]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a12      	ldr	r2, [pc, #72]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a13      	ldr	r2, [pc, #76]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10c      	bne.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40013400 	.word	0x40013400
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40014000 	.word	0x40014000

0800664c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006664:	2302      	movs	r3, #2
 8006666:	e087      	b.n	8006778 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a27      	ldr	r2, [pc, #156]	; (8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a25      	ldr	r2, [pc, #148]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d106      	bne.n	8006704 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1d      	ldr	r2, [pc, #116]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d126      	bne.n	8006766 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	051b      	lsls	r3, r3, #20
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a0e      	ldr	r2, [pc, #56]	; (8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d106      	bne.n	8006766 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400

0800678c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e042      	b.n	80068b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fb fac9 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2224      	movs	r2, #36	; 0x24
 8006846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0201 	bic.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fcf8 	bl	8007250 <UART_SetConfig>
 8006860:	4603      	mov	r3, r0
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e022      	b.n	80068b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 ffb8 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f83f 	bl	800792c <UART_CheckIdleState>
 80068ae:	4603      	mov	r3, r0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	f040 8083 	bne.w	80069da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_UART_Transmit+0x28>
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e07b      	b.n	80069dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_UART_Transmit+0x3a>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e074      	b.n	80069dc <HAL_UART_Transmit+0x124>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2221      	movs	r2, #33	; 0x21
 8006906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800690a:	f7fb fbf5 	bl	80020f8 <HAL_GetTick>
 800690e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006928:	d108      	bne.n	800693c <HAL_UART_Transmit+0x84>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e003      	b.n	8006944 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800694c:	e02c      	b.n	80069a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 f832 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e039      	b.n	80069dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800697c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3302      	adds	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e007      	b.n	8006996 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1cc      	bne.n	800694e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2140      	movs	r1, #64	; 0x40
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 ffff 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e006      	b.n	80069dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b091      	sub	sp, #68	; 0x44
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	f040 808c 	bne.w	8006b16 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_UART_Transmit_IT+0x26>
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e084      	b.n	8006b18 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Transmit_IT+0x38>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e07d      	b.n	8006b18 <HAL_UART_Transmit_IT+0x134>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	88fa      	ldrh	r2, [r7, #6]
 8006a36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2221      	movs	r2, #33	; 0x21
 8006a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a58:	d12e      	bne.n	8006ab8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d107      	bne.n	8006a74 <HAL_UART_Transmit_IT+0x90>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <HAL_UART_Transmit_IT+0x140>)
 8006a70:	675a      	str	r2, [r3, #116]	; 0x74
 8006a72:	e002      	b.n	8006a7a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <HAL_UART_Transmit_IT+0x144>)
 8006a78:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aa2:	637a      	str	r2, [r7, #52]	; 0x34
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <HAL_UART_Transmit_IT+0x9e>
 8006ab6:	e02c      	b.n	8006b12 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac0:	d107      	bne.n	8006ad2 <HAL_UART_Transmit_IT+0xee>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a17      	ldr	r2, [pc, #92]	; (8006b2c <HAL_UART_Transmit_IT+0x148>)
 8006ace:	675a      	str	r2, [r3, #116]	; 0x74
 8006ad0:	e002      	b.n	8006ad8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_UART_Transmit_IT+0x14c>)
 8006ad6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69f9      	ldr	r1, [r7, #28]
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e6      	bne.n	8006ae0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3744      	adds	r7, #68	; 0x44
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	080080fb 	.word	0x080080fb
 8006b28:	0800801b 	.word	0x0800801b
 8006b2c:	08007f59 	.word	0x08007f59
 8006b30:	08007ea1 	.word	0x08007ea1

08006b34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d142      	bne.n	8006bd2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_UART_Receive_IT+0x24>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e03b      	b.n	8006bd4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Receive_IT+0x36>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e034      	b.n	8006bd4 <HAL_UART_Receive_IT+0xa0>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <HAL_UART_Receive_IT+0xa8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01f      	beq.n	8006bc2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d018      	beq.n	8006bc2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	623b      	str	r3, [r7, #32]
 8006bb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	69f9      	ldr	r1, [r7, #28]
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 ffc3 	bl	8007b54 <UART_Start_Receive_IT>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	e000      	b.n	8006bd4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40008000 	.word	0x40008000

08006be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0ba      	sub	sp, #232	; 0xe8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c0e:	4013      	ands	r3, r2
 8006c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11b      	bne.n	8006c54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d009      	beq.n	8006c54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 82d6 	beq.w	80071f6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
      }
      return;
 8006c52:	e2d0      	b.n	80071f6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 811f 	beq.w	8006e9c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c62:	4b8b      	ldr	r3, [pc, #556]	; (8006e90 <HAL_UART_IRQHandler+0x2b0>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c6e:	4b89      	ldr	r3, [pc, #548]	; (8006e94 <HAL_UART_IRQHandler+0x2b4>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8112 	beq.w	8006e9c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d011      	beq.n	8006ca8 <HAL_UART_IRQHandler+0xc8>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2201      	movs	r2, #1
 8006c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9e:	f043 0201 	orr.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d011      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xf8>
 8006cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cce:	f043 0204 	orr.w	r2, r3, #4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d011      	beq.n	8006d08 <HAL_UART_IRQHandler+0x128>
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfe:	f043 0202 	orr.w	r2, r3, #2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d017      	beq.n	8006d44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d24:	4b5a      	ldr	r3, [pc, #360]	; (8006e90 <HAL_UART_IRQHandler+0x2b0>)
 8006d26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2208      	movs	r2, #8
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3a:	f043 0208 	orr.w	r2, r3, #8
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <HAL_UART_IRQHandler+0x196>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 823c 	beq.w	80071fa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d005      	beq.n	8006dda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d04f      	beq.n	8006e7a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 ffe4 	bl	8007da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d141      	bne.n	8006e72 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1d9      	bne.n	8006dee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d013      	beq.n	8006e6a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <HAL_UART_IRQHandler+0x2b8>)
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fc ff56 	bl	8003d00 <HAL_DMA_Abort_IT>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d017      	beq.n	8006e8a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	e00f      	b.n	8006e8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9da 	bl	8007224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	e00b      	b.n	8006e8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f9d6 	bl	8007224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e78:	e007      	b.n	8006e8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9d2 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e88:	e1b7      	b.n	80071fa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8a:	bf00      	nop
    return;
 8006e8c:	e1b5      	b.n	80071fa <HAL_UART_IRQHandler+0x61a>
 8006e8e:	bf00      	nop
 8006e90:	10000001 	.word	0x10000001
 8006e94:	04000120 	.word	0x04000120
 8006e98:	08007e75 	.word	0x08007e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	f040 814a 	bne.w	800713a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8143 	beq.w	800713a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 813c 	beq.w	800713a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	f040 80b5 	bne.w	8007044 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ee6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8187 	beq.w	80071fe <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006efa:	429a      	cmp	r2, r3
 8006efc:	f080 817f 	bcs.w	80071fe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 8086 	bne.w	8007028 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1da      	bne.n	8006f1c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e1      	bne.n	8006f66 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e3      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff8:	f023 0310 	bic.w	r3, r3, #16
 8006ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800700a:	65bb      	str	r3, [r7, #88]	; 0x58
 800700c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e4      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	4618      	mov	r0, r3
 8007024:	f7fc fe13 	bl	8003c4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007034:	b29b      	uxth	r3, r3
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	b29b      	uxth	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8fb 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007042:	e0dc      	b.n	80071fe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80ce 	beq.w	8007202 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80c9 	beq.w	8007202 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e4      	bne.n	8007070 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	623b      	str	r3, [r7, #32]
   return(result);
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ce:	633a      	str	r2, [r7, #48]	; 0x30
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e1      	bne.n	80070a6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60fb      	str	r3, [r7, #12]
   return(result);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	69b9      	ldr	r1, [r7, #24]
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	617b      	str	r3, [r7, #20]
   return(result);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e4      	bne.n	80070f6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800712c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f880 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007138:	e063      	b.n	8007202 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <HAL_UART_IRQHandler+0x584>
 8007146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800715a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 fcc9 	bl	8008af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007162:	e051      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007178:	2b00      	cmp	r3, #0
 800717a:	d105      	bne.n	8007188 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800717c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718c:	2b00      	cmp	r3, #0
 800718e:	d03a      	beq.n	8007206 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
    }
    return;
 8007198:	e035      	b.n	8007206 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <HAL_UART_IRQHandler+0x5da>
 80071a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 f816 	bl	80081e4 <UART_EndTransmit_IT>
    return;
 80071b8:	e026      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <HAL_UART_IRQHandler+0x5fa>
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fca2 	bl	8008b1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d8:	e016      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <HAL_UART_IRQHandler+0x628>
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da0c      	bge.n	8007208 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fc8a 	bl	8008b08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f4:	e008      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
      return;
 80071f6:	bf00      	nop
 80071f8:	e006      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
    return;
 80071fa:	bf00      	nop
 80071fc:	e004      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
      return;
 80071fe:	bf00      	nop
 8007200:	e002      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
      return;
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <HAL_UART_IRQHandler+0x628>
    return;
 8007206:	bf00      	nop
  }
}
 8007208:	37e8      	adds	r7, #232	; 0xe8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop

08007210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007254:	b08c      	sub	sp, #48	; 0x30
 8007256:	af00      	add	r7, sp, #0
 8007258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	431a      	orrs	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	431a      	orrs	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	4313      	orrs	r3, r2
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4bab      	ldr	r3, [pc, #684]	; (800752c <UART_SetConfig+0x2dc>)
 8007280:	4013      	ands	r3, r2
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007288:	430b      	orrs	r3, r1
 800728a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4aa0      	ldr	r2, [pc, #640]	; (8007530 <UART_SetConfig+0x2e0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d004      	beq.n	80072bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b8:	4313      	orrs	r3, r2
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	f023 010f 	bic.w	r1, r3, #15
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a91      	ldr	r2, [pc, #580]	; (8007534 <UART_SetConfig+0x2e4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d125      	bne.n	8007340 <UART_SetConfig+0xf0>
 80072f4:	4b90      	ldr	r3, [pc, #576]	; (8007538 <UART_SetConfig+0x2e8>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d81a      	bhi.n	8007338 <UART_SetConfig+0xe8>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <UART_SetConfig+0xb8>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007319 	.word	0x08007319
 800730c:	08007329 	.word	0x08007329
 8007310:	08007321 	.word	0x08007321
 8007314:	08007331 	.word	0x08007331
 8007318:	2301      	movs	r3, #1
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731e:	e0d6      	b.n	80074ce <UART_SetConfig+0x27e>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007326:	e0d2      	b.n	80074ce <UART_SetConfig+0x27e>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732e:	e0ce      	b.n	80074ce <UART_SetConfig+0x27e>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e0ca      	b.n	80074ce <UART_SetConfig+0x27e>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e0c6      	b.n	80074ce <UART_SetConfig+0x27e>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a7d      	ldr	r2, [pc, #500]	; (800753c <UART_SetConfig+0x2ec>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d138      	bne.n	80073bc <UART_SetConfig+0x16c>
 800734a:	4b7b      	ldr	r3, [pc, #492]	; (8007538 <UART_SetConfig+0x2e8>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	2b0c      	cmp	r3, #12
 8007356:	d82d      	bhi.n	80073b4 <UART_SetConfig+0x164>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0x110>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007395 	.word	0x08007395
 8007364:	080073b5 	.word	0x080073b5
 8007368:	080073b5 	.word	0x080073b5
 800736c:	080073b5 	.word	0x080073b5
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073b5 	.word	0x080073b5
 8007378:	080073b5 	.word	0x080073b5
 800737c:	080073b5 	.word	0x080073b5
 8007380:	0800739d 	.word	0x0800739d
 8007384:	080073b5 	.word	0x080073b5
 8007388:	080073b5 	.word	0x080073b5
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073ad 	.word	0x080073ad
 8007394:	2300      	movs	r3, #0
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e098      	b.n	80074ce <UART_SetConfig+0x27e>
 800739c:	2302      	movs	r3, #2
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e094      	b.n	80074ce <UART_SetConfig+0x27e>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e090      	b.n	80074ce <UART_SetConfig+0x27e>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e08c      	b.n	80074ce <UART_SetConfig+0x27e>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ba:	e088      	b.n	80074ce <UART_SetConfig+0x27e>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a5f      	ldr	r2, [pc, #380]	; (8007540 <UART_SetConfig+0x2f0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d125      	bne.n	8007412 <UART_SetConfig+0x1c2>
 80073c6:	4b5c      	ldr	r3, [pc, #368]	; (8007538 <UART_SetConfig+0x2e8>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d016      	beq.n	8007402 <UART_SetConfig+0x1b2>
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	d818      	bhi.n	800740a <UART_SetConfig+0x1ba>
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d00a      	beq.n	80073f2 <UART_SetConfig+0x1a2>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d814      	bhi.n	800740a <UART_SetConfig+0x1ba>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <UART_SetConfig+0x19a>
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d008      	beq.n	80073fa <UART_SetConfig+0x1aa>
 80073e8:	e00f      	b.n	800740a <UART_SetConfig+0x1ba>
 80073ea:	2300      	movs	r3, #0
 80073ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f0:	e06d      	b.n	80074ce <UART_SetConfig+0x27e>
 80073f2:	2302      	movs	r3, #2
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f8:	e069      	b.n	80074ce <UART_SetConfig+0x27e>
 80073fa:	2304      	movs	r3, #4
 80073fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007400:	e065      	b.n	80074ce <UART_SetConfig+0x27e>
 8007402:	2308      	movs	r3, #8
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007408:	e061      	b.n	80074ce <UART_SetConfig+0x27e>
 800740a:	2310      	movs	r3, #16
 800740c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007410:	e05d      	b.n	80074ce <UART_SetConfig+0x27e>
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4b      	ldr	r2, [pc, #300]	; (8007544 <UART_SetConfig+0x2f4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d125      	bne.n	8007468 <UART_SetConfig+0x218>
 800741c:	4b46      	ldr	r3, [pc, #280]	; (8007538 <UART_SetConfig+0x2e8>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007426:	2bc0      	cmp	r3, #192	; 0xc0
 8007428:	d016      	beq.n	8007458 <UART_SetConfig+0x208>
 800742a:	2bc0      	cmp	r3, #192	; 0xc0
 800742c:	d818      	bhi.n	8007460 <UART_SetConfig+0x210>
 800742e:	2b80      	cmp	r3, #128	; 0x80
 8007430:	d00a      	beq.n	8007448 <UART_SetConfig+0x1f8>
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d814      	bhi.n	8007460 <UART_SetConfig+0x210>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <UART_SetConfig+0x1f0>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d008      	beq.n	8007450 <UART_SetConfig+0x200>
 800743e:	e00f      	b.n	8007460 <UART_SetConfig+0x210>
 8007440:	2300      	movs	r3, #0
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e042      	b.n	80074ce <UART_SetConfig+0x27e>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e03e      	b.n	80074ce <UART_SetConfig+0x27e>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e03a      	b.n	80074ce <UART_SetConfig+0x27e>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e036      	b.n	80074ce <UART_SetConfig+0x27e>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e032      	b.n	80074ce <UART_SetConfig+0x27e>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a30      	ldr	r2, [pc, #192]	; (8007530 <UART_SetConfig+0x2e0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d12a      	bne.n	80074c8 <UART_SetConfig+0x278>
 8007472:	4b31      	ldr	r3, [pc, #196]	; (8007538 <UART_SetConfig+0x2e8>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800747c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007480:	d01a      	beq.n	80074b8 <UART_SetConfig+0x268>
 8007482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007486:	d81b      	bhi.n	80074c0 <UART_SetConfig+0x270>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748c:	d00c      	beq.n	80074a8 <UART_SetConfig+0x258>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007492:	d815      	bhi.n	80074c0 <UART_SetConfig+0x270>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x250>
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x260>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x270>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e012      	b.n	80074ce <UART_SetConfig+0x27e>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e00e      	b.n	80074ce <UART_SetConfig+0x27e>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e00a      	b.n	80074ce <UART_SetConfig+0x27e>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e006      	b.n	80074ce <UART_SetConfig+0x27e>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e002      	b.n	80074ce <UART_SetConfig+0x27e>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a17      	ldr	r2, [pc, #92]	; (8007530 <UART_SetConfig+0x2e0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	f040 80a8 	bne.w	800762a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d834      	bhi.n	800754c <UART_SetConfig+0x2fc>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <UART_SetConfig+0x298>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800750d 	.word	0x0800750d
 80074ec:	0800754d 	.word	0x0800754d
 80074f0:	08007515 	.word	0x08007515
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	0800751b 	.word	0x0800751b
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	0800754d 	.word	0x0800754d
 8007504:	0800754d 	.word	0x0800754d
 8007508:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800750c:	f7fd fd20 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007512:	e021      	b.n	8007558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <UART_SetConfig+0x2f8>)
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007518:	e01e      	b.n	8007558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fd fcab 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800751e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007520:	e01a      	b.n	8007558 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007528:	e016      	b.n	8007558 <UART_SetConfig+0x308>
 800752a:	bf00      	nop
 800752c:	cfff69f3 	.word	0xcfff69f3
 8007530:	40008000 	.word	0x40008000
 8007534:	40013800 	.word	0x40013800
 8007538:	40021000 	.word	0x40021000
 800753c:	40004400 	.word	0x40004400
 8007540:	40004800 	.word	0x40004800
 8007544:	40004c00 	.word	0x40004c00
 8007548:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007556:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 812a 	beq.w	80077b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	4a9e      	ldr	r2, [pc, #632]	; (80077e0 <UART_SetConfig+0x590>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	461a      	mov	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007572:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	429a      	cmp	r2, r3
 8007582:	d305      	bcc.n	8007590 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	429a      	cmp	r2, r3
 800758e:	d903      	bls.n	8007598 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007596:	e10d      	b.n	80077b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2200      	movs	r2, #0
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	60fa      	str	r2, [r7, #12]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	4a8e      	ldr	r2, [pc, #568]	; (80077e0 <UART_SetConfig+0x590>)
 80075a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2200      	movs	r2, #0
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ba:	f7f8 fe91 	bl	80002e0 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4610      	mov	r0, r2
 80075c4:	4619      	mov	r1, r3
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	020b      	lsls	r3, r1, #8
 80075d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075d4:	0202      	lsls	r2, r0, #8
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	6849      	ldr	r1, [r1, #4]
 80075da:	0849      	lsrs	r1, r1, #1
 80075dc:	2000      	movs	r0, #0
 80075de:	460c      	mov	r4, r1
 80075e0:	4605      	mov	r5, r0
 80075e2:	eb12 0804 	adds.w	r8, r2, r4
 80075e6:	eb43 0905 	adc.w	r9, r3, r5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	469a      	mov	sl, r3
 80075f2:	4693      	mov	fp, r2
 80075f4:	4652      	mov	r2, sl
 80075f6:	465b      	mov	r3, fp
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f8 fe70 	bl	80002e0 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4613      	mov	r3, r2
 8007606:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d308      	bcc.n	8007622 <UART_SetConfig+0x3d2>
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007616:	d204      	bcs.n	8007622 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a3a      	ldr	r2, [r7, #32]
 800761e:	60da      	str	r2, [r3, #12]
 8007620:	e0c8      	b.n	80077b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007628:	e0c4      	b.n	80077b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007632:	d167      	bne.n	8007704 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007638:	2b08      	cmp	r3, #8
 800763a:	d828      	bhi.n	800768e <UART_SetConfig+0x43e>
 800763c:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0x3f4>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	0800768f 	.word	0x0800768f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800768f 	.word	0x0800768f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fd fc72 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 800766c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800766e:	e014      	b.n	800769a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fd fc84 	bl	8004f7c <HAL_RCC_GetPCLK2Freq>
 8007674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007676:	e010      	b.n	800769a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b5a      	ldr	r3, [pc, #360]	; (80077e4 <UART_SetConfig+0x594>)
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800767c:	e00d      	b.n	800769a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd fbf9 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007684:	e009      	b.n	800769a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800768c:	e005      	b.n	800769a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8089 	beq.w	80077b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	4a4e      	ldr	r2, [pc, #312]	; (80077e0 <UART_SetConfig+0x590>)
 80076a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b4:	005a      	lsls	r2, r3, #1
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	441a      	add	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d916      	bls.n	80076fc <UART_SetConfig+0x4ac>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d212      	bcs.n	80076fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f023 030f 	bic.w	r3, r3, #15
 80076de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	8bfb      	ldrh	r3, [r7, #30]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	8bfa      	ldrh	r2, [r7, #30]
 80076f8:	60da      	str	r2, [r3, #12]
 80076fa:	e05b      	b.n	80077b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007702:	e057      	b.n	80077b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007708:	2b08      	cmp	r3, #8
 800770a:	d828      	bhi.n	800775e <UART_SetConfig+0x50e>
 800770c:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <UART_SetConfig+0x4c4>)
 800770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007712:	bf00      	nop
 8007714:	08007739 	.word	0x08007739
 8007718:	08007741 	.word	0x08007741
 800771c:	08007749 	.word	0x08007749
 8007720:	0800775f 	.word	0x0800775f
 8007724:	0800774f 	.word	0x0800774f
 8007728:	0800775f 	.word	0x0800775f
 800772c:	0800775f 	.word	0x0800775f
 8007730:	0800775f 	.word	0x0800775f
 8007734:	08007757 	.word	0x08007757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007738:	f7fd fc0a 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 800773c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773e:	e014      	b.n	800776a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007740:	f7fd fc1c 	bl	8004f7c <HAL_RCC_GetPCLK2Freq>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007746:	e010      	b.n	800776a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007748:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <UART_SetConfig+0x594>)
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800774c:	e00d      	b.n	800776a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774e:	f7fd fb91 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8007752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007754:	e009      	b.n	800776a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800775c:	e005      	b.n	800776a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007768:	bf00      	nop
    }

    if (pclk != 0U)
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d021      	beq.n	80077b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <UART_SetConfig+0x590>)
 8007776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777a:	461a      	mov	r2, r3
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	441a      	add	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d909      	bls.n	80077ae <UART_SetConfig+0x55e>
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d205      	bcs.n	80077ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60da      	str	r2, [r3, #12]
 80077ac:	e002      	b.n	80077b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2201      	movs	r2, #1
 80077c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2200      	movs	r2, #0
 80077c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3730      	adds	r7, #48	; 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077de:	bf00      	nop
 80077e0:	0800980c 	.word	0x0800980c
 80077e4:	00f42400 	.word	0x00f42400

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01a      	beq.n	80078fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e6:	d10a      	bne.n	80078fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800793c:	f7fa fbdc 	bl	80020f8 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10e      	bne.n	800796e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f82f 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e025      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b04      	cmp	r3, #4
 800797a:	d10e      	bne.n	800799a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f819 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e00f      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b09c      	sub	sp, #112	; 0x70
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d2:	e0a9      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	f000 80a5 	beq.w	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079de:	f7fa fb8b 	bl	80020f8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d302      	bcc.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d140      	bne.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a08:	667b      	str	r3, [r7, #100]	; 0x64
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e069      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d051      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a92:	d149      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
 8007abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007af0:	623a      	str	r2, [r7, #32]
 8007af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69f9      	ldr	r1, [r7, #28]
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e010      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	f43f af46 	beq.w	80079d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3770      	adds	r7, #112	; 0x70
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b0a3      	sub	sp, #140	; 0x8c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	d10e      	bne.n	8007ba6 <UART_Start_Receive_IT+0x52>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <UART_Start_Receive_IT+0x48>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b9a:	e02d      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	22ff      	movs	r2, #255	; 0xff
 8007ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ba4:	e028      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10d      	bne.n	8007bca <UART_Start_Receive_IT+0x76>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <UART_Start_Receive_IT+0x6c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bbe:	e01b      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	227f      	movs	r2, #127	; 0x7f
 8007bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bc8:	e016      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bd2:	d10d      	bne.n	8007bf0 <UART_Start_Receive_IT+0x9c>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <UART_Start_Receive_IT+0x92>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	227f      	movs	r2, #127	; 0x7f
 8007be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007be4:	e008      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	223f      	movs	r2, #63	; 0x3f
 8007bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bee:	e003      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2222      	movs	r2, #34	; 0x22
 8007c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c2c:	673a      	str	r2, [r7, #112]	; 0x70
 8007c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e3      	bne.n	8007c08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d153      	bne.n	8007cf2 <UART_Start_Receive_IT+0x19e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d34d      	bcc.n	8007cf2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5e:	d107      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a4b      	ldr	r2, [pc, #300]	; (8007d98 <UART_Start_Receive_IT+0x244>)
 8007c6c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c6e:	e002      	b.n	8007c76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a4a      	ldr	r2, [pc, #296]	; (8007d9c <UART_Start_Receive_IT+0x248>)
 8007c74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007caa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_Start_Receive_IT+0x168>
 8007cf0:	e04a      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfa:	d107      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a26      	ldr	r2, [pc, #152]	; (8007da0 <UART_Start_Receive_IT+0x24c>)
 8007d08:	671a      	str	r2, [r3, #112]	; 0x70
 8007d0a:	e002      	b.n	8007d12 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	; (8007da4 <UART_Start_Receive_IT+0x250>)
 8007d10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d36:	677b      	str	r3, [r7, #116]	; 0x74
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
 8007d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_Start_Receive_IT+0x1ce>
 8007d54:	e018      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	613b      	str	r3, [r7, #16]
   return(result);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f043 0320 	orr.w	r3, r3, #32
 8007d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	378c      	adds	r7, #140	; 0x8c
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	080087f5 	.word	0x080087f5
 8007d9c:	080084fd 	.word	0x080084fd
 8007da0:	0800839b 	.word	0x0800839b
 8007da4:	0800823b 	.word	0x0800823b

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	; 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dce:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e3      	bne.n	8007de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d118      	bne.n	8007e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f023 0310 	bic.w	r3, r3, #16
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e68:	bf00      	nop
 8007e6a:	3754      	adds	r7, #84	; 0x54
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff f9c6 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b08f      	sub	sp, #60	; 0x3c
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eae:	2b21      	cmp	r3, #33	; 0x21
 8007eb0:	d14c      	bne.n	8007f4c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d132      	bne.n	8007f24 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ede:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e6      	bne.n	8007ebe <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f04:	633b      	str	r3, [r7, #48]	; 0x30
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f22:	e013      	b.n	8007f4c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007f4c:	bf00      	nop
 8007f4e:	373c      	adds	r7, #60	; 0x3c
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b091      	sub	sp, #68	; 0x44
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f66:	2b21      	cmp	r3, #33	; 0x21
 8007f68:	d151      	bne.n	800800e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d132      	bne.n	8007fdc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	623b      	str	r3, [r7, #32]
   return(result);
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	633b      	str	r3, [r7, #48]	; 0x30
 8007f96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e6      	bne.n	8007f76 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	69b9      	ldr	r1, [r7, #24]
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007fda:	e018      	b.n	800800e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800800e:	bf00      	nop
 8008010:	3744      	adds	r7, #68	; 0x44
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800801a:	b480      	push	{r7}
 800801c:	b091      	sub	sp, #68	; 0x44
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	2b21      	cmp	r3, #33	; 0x21
 800802a:	d160      	bne.n	80080ee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008032:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008034:	e057      	b.n	80080e6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d133      	bne.n	80080aa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	623b      	str	r3, [r7, #32]
   return(result);
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008058:	63bb      	str	r3, [r7, #56]	; 0x38
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008062:	633a      	str	r2, [r7, #48]	; 0x30
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e5      	bne.n	8008042 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	60fb      	str	r3, [r7, #12]
   return(result);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	69b9      	ldr	r1, [r7, #24]
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	617b      	str	r3, [r7, #20]
   return(result);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80080a8:	e021      	b.n	80080ee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80080e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080e2:	3b01      	subs	r3, #1
 80080e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80080e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1a4      	bne.n	8008036 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80080ec:	e7ff      	b.n	80080ee <UART_TxISR_8BIT_FIFOEN+0xd4>
 80080ee:	bf00      	nop
 80080f0:	3744      	adds	r7, #68	; 0x44
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b091      	sub	sp, #68	; 0x44
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008108:	2b21      	cmp	r3, #33	; 0x21
 800810a:	d165      	bne.n	80081d8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008112:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008114:	e05c      	b.n	80081d0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d133      	bne.n	800818a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	61fb      	str	r3, [r7, #28]
   return(result);
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008138:	637b      	str	r3, [r7, #52]	; 0x34
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e5      	bne.n	8008122 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	60bb      	str	r3, [r7, #8]
   return(result);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816a:	633b      	str	r3, [r7, #48]	; 0x30
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6979      	ldr	r1, [r7, #20]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	613b      	str	r3, [r7, #16]
   return(result);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008188:	e026      	b.n	80081d8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b00      	cmp	r3, #0
 8008196:	d018      	beq.n	80081ca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b2:	1c9a      	adds	r2, r3, #2
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081be:	b29b      	uxth	r3, r3
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081cc:	3b01      	subs	r3, #1
 80081ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d19f      	bne.n	8008116 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081d6:	e7ff      	b.n	80081d8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80081d8:	bf00      	nop
 80081da:	3744      	adds	r7, #68	; 0x44
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6979      	ldr	r1, [r7, #20]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	613b      	str	r3, [r7, #16]
   return(result);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7fe ffef 	bl	8007210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008232:	bf00      	nop
 8008234:	3720      	adds	r7, #32
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b096      	sub	sp, #88	; 0x58
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008248:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008252:	2b22      	cmp	r3, #34	; 0x22
 8008254:	f040 8095 	bne.w	8008382 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008262:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008266:	b2d9      	uxtb	r1, r3
 8008268:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800826c:	b2da      	uxtb	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008272:	400a      	ands	r2, r1
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800829a:	b29b      	uxth	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d178      	bne.n	8008392 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	647b      	str	r3, [r7, #68]	; 0x44
 80082c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e6      	bne.n	80082a0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	623b      	str	r3, [r7, #32]
   return(result);
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f2:	633a      	str	r2, [r7, #48]	; 0x30
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e5      	bne.n	80082d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d12e      	bne.n	800837a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0310 	bic.w	r3, r3, #16
 8008336:	64bb      	str	r3, [r7, #72]	; 0x48
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008340:	61fb      	str	r3, [r7, #28]
 8008342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	69b9      	ldr	r1, [r7, #24]
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	617b      	str	r3, [r7, #20]
   return(result);
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f003 0310 	and.w	r3, r3, #16
 800835e:	2b10      	cmp	r3, #16
 8008360:	d103      	bne.n	800836a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2210      	movs	r2, #16
 8008368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fe ff60 	bl	8007238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008378:	e00b      	b.n	8008392 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f8 fda6 	bl	8000ecc <HAL_UART_RxCpltCallback>
}
 8008380:	e007      	b.n	8008392 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0208 	orr.w	r2, r2, #8
 8008390:	619a      	str	r2, [r3, #24]
}
 8008392:	bf00      	nop
 8008394:	3758      	adds	r7, #88	; 0x58
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b096      	sub	sp, #88	; 0x58
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b2:	2b22      	cmp	r3, #34	; 0x22
 80083b4:	f040 8095 	bne.w	80084e2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80083c8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80083cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083d0:	4013      	ands	r3, r2
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083dc:	1c9a      	adds	r2, r3, #2
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d178      	bne.n	80084f2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	643b      	str	r3, [r7, #64]	; 0x40
 8008420:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e6      	bne.n	8008400 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	61fb      	str	r3, [r7, #28]
   return(result);
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	64bb      	str	r3, [r7, #72]	; 0x48
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e5      	bne.n	8008432 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d12e      	bne.n	80084da <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f023 0310 	bic.w	r3, r3, #16
 8008496:	647b      	str	r3, [r7, #68]	; 0x44
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a0:	61bb      	str	r3, [r7, #24]
 80084a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6979      	ldr	r1, [r7, #20]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	613b      	str	r3, [r7, #16]
   return(result);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b10      	cmp	r3, #16
 80084c0:	d103      	bne.n	80084ca <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2210      	movs	r2, #16
 80084c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fe feb0 	bl	8007238 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084d8:	e00b      	b.n	80084f2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7f8 fcf6 	bl	8000ecc <HAL_UART_RxCpltCallback>
}
 80084e0:	e007      	b.n	80084f2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0208 	orr.w	r2, r2, #8
 80084f0:	619a      	str	r2, [r3, #24]
}
 80084f2:	bf00      	nop
 80084f4:	3758      	adds	r7, #88	; 0x58
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b0a6      	sub	sp, #152	; 0x98
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800850a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	2b22      	cmp	r3, #34	; 0x22
 8008534:	f040 814f 	bne.w	80087d6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800853e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008542:	e0f6      	b.n	8008732 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800854e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008552:	b2d9      	uxtb	r1, r3
 8008554:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855e:	400a      	ands	r2, r1
 8008560:	b2d2      	uxtb	r2, r2
 8008562:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800858a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	2b00      	cmp	r3, #0
 8008594:	d053      	beq.n	800863e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008596:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d011      	beq.n	80085c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80085a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2201      	movs	r2, #1
 80085b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085bc:	f043 0201 	orr.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d011      	beq.n	80085f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80085d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2202      	movs	r2, #2
 80085e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ec:	f043 0204 	orr.w	r2, r3, #4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d011      	beq.n	8008626 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2204      	movs	r2, #4
 8008614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861c:	f043 0202 	orr.w	r2, r3, #2
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d006      	beq.n	800863e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fe fdf7 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d173      	bne.n	8008732 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800865a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800865e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800866c:	66bb      	str	r3, [r7, #104]	; 0x68
 800866e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800867a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e4      	bne.n	800864a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086a4:	657a      	str	r2, [r7, #84]	; 0x54
 80086a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e3      	bne.n	8008680 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d12e      	bne.n	800872c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	f023 0310 	bic.w	r3, r3, #16
 80086e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
 80086f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	2b10      	cmp	r3, #16
 8008712:	d103      	bne.n	800871c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2210      	movs	r2, #16
 800871a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fe fd87 	bl	8007238 <HAL_UARTEx_RxEventCallback>
 800872a:	e002      	b.n	8008732 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7f8 fbcd 	bl	8000ecc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008732:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800873a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	f47f aefe 	bne.w	8008544 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800874e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008752:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008756:	2b00      	cmp	r3, #0
 8008758:	d045      	beq.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008760:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008764:	429a      	cmp	r2, r3
 8008766:	d23e      	bcs.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	61fb      	str	r3, [r7, #28]
   return(result);
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800877e:	673b      	str	r3, [r7, #112]	; 0x70
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800878e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a14      	ldr	r2, [pc, #80]	; (80087f0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80087a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f043 0320 	orr.w	r3, r3, #32
 80087b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	613b      	str	r3, [r7, #16]
   return(result);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087d4:	e007      	b.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0208 	orr.w	r2, r2, #8
 80087e4:	619a      	str	r2, [r3, #24]
}
 80087e6:	bf00      	nop
 80087e8:	3798      	adds	r7, #152	; 0x98
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	0800823b 	.word	0x0800823b

080087f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b0a8      	sub	sp, #160	; 0xa0
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008802:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882a:	2b22      	cmp	r3, #34	; 0x22
 800882c:	f040 8153 	bne.w	8008ad6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008836:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800883a:	e0fa      	b.n	8008a32 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800884e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008852:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008856:	4013      	ands	r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800885e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008864:	1c9a      	adds	r2, r3, #2
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b00      	cmp	r3, #0
 8008890:	d053      	beq.n	800893a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800889e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00b      	beq.n	80088c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088b8:	f043 0201 	orr.w	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d011      	beq.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80088ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2202      	movs	r2, #2
 80088e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e8:	f043 0204 	orr.w	r2, r3, #4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80088fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2204      	movs	r2, #4
 8008910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008918:	f043 0202 	orr.w	r2, r3, #2
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d006      	beq.n	800893a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fe fc79 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d175      	bne.n	8008a32 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800895a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800896a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800896e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e4      	bne.n	8008946 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800898c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80089a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e1      	bne.n	800897c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d12e      	bne.n	8008a2c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	f023 0310 	bic.w	r3, r3, #16
 80089e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089f2:	647b      	str	r3, [r7, #68]	; 0x44
 80089f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e6      	bne.n	80089d4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d103      	bne.n	8008a1c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2210      	movs	r2, #16
 8008a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7fe fc07 	bl	8007238 <HAL_UARTEx_RxEventCallback>
 8008a2a:	e002      	b.n	8008a32 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7f8 fa4d 	bl	8000ecc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f47f aefa 	bne.w	800883c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d045      	beq.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a60:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d23e      	bcs.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	e853 3f00 	ldrex	r3, [r3]
 8008a76:	623b      	str	r3, [r7, #32]
   return(result);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	677b      	str	r3, [r7, #116]	; 0x74
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a88:	633a      	str	r2, [r7, #48]	; 0x30
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e5      	bne.n	8008a68 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008aa0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f043 0320 	orr.w	r3, r3, #32
 8008ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ad4:	e007      	b.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0208 	orr.w	r2, r2, #8
 8008ae4:	619a      	str	r2, [r3, #24]
}
 8008ae6:	bf00      	nop
 8008ae8:	37a0      	adds	r7, #160	; 0xa0
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	0800839b 	.word	0x0800839b

08008af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e027      	b.n	8008b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2224      	movs	r2, #36	; 0x24
 8008b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e02d      	b.n	8008c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2224      	movs	r2, #36	; 0x24
 8008bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f850 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e02d      	b.n	8008c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2224      	movs	r2, #36	; 0x24
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f812 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d108      	bne.n	8008cbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cbc:	e031      	b.n	8008d22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cc2:	2308      	movs	r3, #8
 8008cc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	0e5b      	lsrs	r3, r3, #25
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	0f5b      	lsrs	r3, r3, #29
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	7b3a      	ldrb	r2, [r7, #12]
 8008cea:	4911      	ldr	r1, [pc, #68]	; (8008d30 <UARTEx_SetNbDataToProcess+0x94>)
 8008cec:	5c8a      	ldrb	r2, [r1, r2]
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cf2:	7b3a      	ldrb	r2, [r7, #12]
 8008cf4:	490f      	ldr	r1, [pc, #60]	; (8008d34 <UARTEx_SetNbDataToProcess+0x98>)
 8008cf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	7b7a      	ldrb	r2, [r7, #13]
 8008d08:	4909      	ldr	r1, [pc, #36]	; (8008d30 <UARTEx_SetNbDataToProcess+0x94>)
 8008d0a:	5c8a      	ldrb	r2, [r1, r2]
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d10:	7b7a      	ldrb	r2, [r7, #13]
 8008d12:	4908      	ldr	r1, [pc, #32]	; (8008d34 <UARTEx_SetNbDataToProcess+0x98>)
 8008d14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	08009824 	.word	0x08009824
 8008d34:	0800982c 	.word	0x0800982c

08008d38 <siprintf>:
 8008d38:	b40e      	push	{r1, r2, r3}
 8008d3a:	b500      	push	{lr}
 8008d3c:	b09c      	sub	sp, #112	; 0x70
 8008d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d40:	9002      	str	r0, [sp, #8]
 8008d42:	9006      	str	r0, [sp, #24]
 8008d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <siprintf+0x38>)
 8008d4a:	9107      	str	r1, [sp, #28]
 8008d4c:	9104      	str	r1, [sp, #16]
 8008d4e:	4909      	ldr	r1, [pc, #36]	; (8008d74 <siprintf+0x3c>)
 8008d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	6800      	ldr	r0, [r0, #0]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	a902      	add	r1, sp, #8
 8008d5c:	f000 f992 	bl	8009084 <_svfiprintf_r>
 8008d60:	9b02      	ldr	r3, [sp, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	b01c      	add	sp, #112	; 0x70
 8008d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d6c:	b003      	add	sp, #12
 8008d6e:	4770      	bx	lr
 8008d70:	2000005c 	.word	0x2000005c
 8008d74:	ffff0208 	.word	0xffff0208

08008d78 <memset>:
 8008d78:	4402      	add	r2, r0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <memset+0xa>
 8008d80:	4770      	bx	lr
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <memset+0x4>

08008d88 <__errno>:
 8008d88:	4b01      	ldr	r3, [pc, #4]	; (8008d90 <__errno+0x8>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	2000005c 	.word	0x2000005c

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4d0d      	ldr	r5, [pc, #52]	; (8008dcc <__libc_init_array+0x38>)
 8008d98:	4c0d      	ldr	r4, [pc, #52]	; (8008dd0 <__libc_init_array+0x3c>)
 8008d9a:	1b64      	subs	r4, r4, r5
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	4d0b      	ldr	r5, [pc, #44]	; (8008dd4 <__libc_init_array+0x40>)
 8008da6:	4c0c      	ldr	r4, [pc, #48]	; (8008dd8 <__libc_init_array+0x44>)
 8008da8:	f000 fc6a 	bl	8009680 <_init>
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	2600      	movs	r6, #0
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	08009870 	.word	0x08009870
 8008dd0:	08009870 	.word	0x08009870
 8008dd4:	08009870 	.word	0x08009870
 8008dd8:	08009874 	.word	0x08009874

08008ddc <__retarget_lock_acquire_recursive>:
 8008ddc:	4770      	bx	lr

08008dde <__retarget_lock_release_recursive>:
 8008dde:	4770      	bx	lr

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f8df 	bl	8008fb8 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b8da 	b.w	8008fc4 <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	440c      	add	r4, r1
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	20000810 	.word	0x20000810

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 fba6 	bl	80095d4 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 fba1 	bl	80095d4 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 fb96 	bl	80095d4 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	20000814 	.word	0x20000814

08008eb8 <_malloc_r>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fb4 <_malloc_r+0xfc>
 8008ee4:	f000 f868 	bl	8008fb8 <__malloc_lock>
 8008ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eec:	461c      	mov	r4, r3
 8008eee:	bb5c      	cbnz	r4, 8008f48 <_malloc_r+0x90>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff ffc0 	bl	8008e78 <sbrk_aligned>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	4604      	mov	r4, r0
 8008efc:	d155      	bne.n	8008faa <_malloc_r+0xf2>
 8008efe:	f8d8 4000 	ldr.w	r4, [r8]
 8008f02:	4626      	mov	r6, r4
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	d145      	bne.n	8008f94 <_malloc_r+0xdc>
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d048      	beq.n	8008f9e <_malloc_r+0xe6>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4638      	mov	r0, r7
 8008f12:	eb04 0903 	add.w	r9, r4, r3
 8008f16:	f000 fb5d 	bl	80095d4 <_sbrk_r>
 8008f1a:	4581      	cmp	r9, r0
 8008f1c:	d13f      	bne.n	8008f9e <_malloc_r+0xe6>
 8008f1e:	6821      	ldr	r1, [r4, #0]
 8008f20:	1a6d      	subs	r5, r5, r1
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ffa7 	bl	8008e78 <sbrk_aligned>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d037      	beq.n	8008f9e <_malloc_r+0xe6>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	442b      	add	r3, r5
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	f8d8 3000 	ldr.w	r3, [r8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d038      	beq.n	8008fae <_malloc_r+0xf6>
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	42a2      	cmp	r2, r4
 8008f40:	d12b      	bne.n	8008f9a <_malloc_r+0xe2>
 8008f42:	2200      	movs	r2, #0
 8008f44:	605a      	str	r2, [r3, #4]
 8008f46:	e00f      	b.n	8008f68 <_malloc_r+0xb0>
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	1b52      	subs	r2, r2, r5
 8008f4c:	d41f      	bmi.n	8008f8e <_malloc_r+0xd6>
 8008f4e:	2a0b      	cmp	r2, #11
 8008f50:	d917      	bls.n	8008f82 <_malloc_r+0xca>
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	6025      	str	r5, [r4, #0]
 8008f58:	bf18      	it	ne
 8008f5a:	6059      	strne	r1, [r3, #4]
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	bf08      	it	eq
 8008f60:	f8c8 1000 	streq.w	r1, [r8]
 8008f64:	5162      	str	r2, [r4, r5]
 8008f66:	604b      	str	r3, [r1, #4]
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f104 060b 	add.w	r6, r4, #11
 8008f6e:	f000 f829 	bl	8008fc4 <__malloc_unlock>
 8008f72:	f026 0607 	bic.w	r6, r6, #7
 8008f76:	1d23      	adds	r3, r4, #4
 8008f78:	1af2      	subs	r2, r6, r3
 8008f7a:	d0ae      	beq.n	8008eda <_malloc_r+0x22>
 8008f7c:	1b9b      	subs	r3, r3, r6
 8008f7e:	50a3      	str	r3, [r4, r2]
 8008f80:	e7ab      	b.n	8008eda <_malloc_r+0x22>
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	6862      	ldr	r2, [r4, #4]
 8008f86:	d1dd      	bne.n	8008f44 <_malloc_r+0x8c>
 8008f88:	f8c8 2000 	str.w	r2, [r8]
 8008f8c:	e7ec      	b.n	8008f68 <_malloc_r+0xb0>
 8008f8e:	4623      	mov	r3, r4
 8008f90:	6864      	ldr	r4, [r4, #4]
 8008f92:	e7ac      	b.n	8008eee <_malloc_r+0x36>
 8008f94:	4634      	mov	r4, r6
 8008f96:	6876      	ldr	r6, [r6, #4]
 8008f98:	e7b4      	b.n	8008f04 <_malloc_r+0x4c>
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	e7cc      	b.n	8008f38 <_malloc_r+0x80>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f000 f80e 	bl	8008fc4 <__malloc_unlock>
 8008fa8:	e797      	b.n	8008eda <_malloc_r+0x22>
 8008faa:	6025      	str	r5, [r4, #0]
 8008fac:	e7dc      	b.n	8008f68 <_malloc_r+0xb0>
 8008fae:	605b      	str	r3, [r3, #4]
 8008fb0:	deff      	udf	#255	; 0xff
 8008fb2:	bf00      	nop
 8008fb4:	20000810 	.word	0x20000810

08008fb8 <__malloc_lock>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__malloc_lock+0x8>)
 8008fba:	f7ff bf0f 	b.w	8008ddc <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	2000080c 	.word	0x2000080c

08008fc4 <__malloc_unlock>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__malloc_unlock+0x8>)
 8008fc6:	f7ff bf0a 	b.w	8008dde <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	2000080c 	.word	0x2000080c

08008fd0 <__ssputs_r>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	688e      	ldr	r6, [r1, #8]
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	42be      	cmp	r6, r7
 8008fda:	680b      	ldr	r3, [r1, #0]
 8008fdc:	4682      	mov	sl, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4690      	mov	r8, r2
 8008fe2:	d82c      	bhi.n	800903e <__ssputs_r+0x6e>
 8008fe4:	898a      	ldrh	r2, [r1, #12]
 8008fe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fea:	d026      	beq.n	800903a <__ssputs_r+0x6a>
 8008fec:	6965      	ldr	r5, [r4, #20]
 8008fee:	6909      	ldr	r1, [r1, #16]
 8008ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ff4:	eba3 0901 	sub.w	r9, r3, r1
 8008ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ffc:	1c7b      	adds	r3, r7, #1
 8008ffe:	444b      	add	r3, r9
 8009000:	106d      	asrs	r5, r5, #1
 8009002:	429d      	cmp	r5, r3
 8009004:	bf38      	it	cc
 8009006:	461d      	movcc	r5, r3
 8009008:	0553      	lsls	r3, r2, #21
 800900a:	d527      	bpl.n	800905c <__ssputs_r+0x8c>
 800900c:	4629      	mov	r1, r5
 800900e:	f7ff ff53 	bl	8008eb8 <_malloc_r>
 8009012:	4606      	mov	r6, r0
 8009014:	b360      	cbz	r0, 8009070 <__ssputs_r+0xa0>
 8009016:	6921      	ldr	r1, [r4, #16]
 8009018:	464a      	mov	r2, r9
 800901a:	f000 faeb 	bl	80095f4 <memcpy>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	6126      	str	r6, [r4, #16]
 800902c:	6165      	str	r5, [r4, #20]
 800902e:	444e      	add	r6, r9
 8009030:	eba5 0509 	sub.w	r5, r5, r9
 8009034:	6026      	str	r6, [r4, #0]
 8009036:	60a5      	str	r5, [r4, #8]
 8009038:	463e      	mov	r6, r7
 800903a:	42be      	cmp	r6, r7
 800903c:	d900      	bls.n	8009040 <__ssputs_r+0x70>
 800903e:	463e      	mov	r6, r7
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	4632      	mov	r2, r6
 8009044:	4641      	mov	r1, r8
 8009046:	f000 faab 	bl	80095a0 <memmove>
 800904a:	68a3      	ldr	r3, [r4, #8]
 800904c:	1b9b      	subs	r3, r3, r6
 800904e:	60a3      	str	r3, [r4, #8]
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	4433      	add	r3, r6
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	2000      	movs	r0, #0
 8009058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905c:	462a      	mov	r2, r5
 800905e:	f000 fad7 	bl	8009610 <_realloc_r>
 8009062:	4606      	mov	r6, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e0      	bne.n	800902a <__ssputs_r+0x5a>
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	4650      	mov	r0, sl
 800906c:	f7ff feb8 	bl	8008de0 <_free_r>
 8009070:	230c      	movs	r3, #12
 8009072:	f8ca 3000 	str.w	r3, [sl]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	e7e9      	b.n	8009058 <__ssputs_r+0x88>

08009084 <_svfiprintf_r>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	4698      	mov	r8, r3
 800908a:	898b      	ldrh	r3, [r1, #12]
 800908c:	061b      	lsls	r3, r3, #24
 800908e:	b09d      	sub	sp, #116	; 0x74
 8009090:	4607      	mov	r7, r0
 8009092:	460d      	mov	r5, r1
 8009094:	4614      	mov	r4, r2
 8009096:	d50e      	bpl.n	80090b6 <_svfiprintf_r+0x32>
 8009098:	690b      	ldr	r3, [r1, #16]
 800909a:	b963      	cbnz	r3, 80090b6 <_svfiprintf_r+0x32>
 800909c:	2140      	movs	r1, #64	; 0x40
 800909e:	f7ff ff0b 	bl	8008eb8 <_malloc_r>
 80090a2:	6028      	str	r0, [r5, #0]
 80090a4:	6128      	str	r0, [r5, #16]
 80090a6:	b920      	cbnz	r0, 80090b2 <_svfiprintf_r+0x2e>
 80090a8:	230c      	movs	r3, #12
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	e0d0      	b.n	8009254 <_svfiprintf_r+0x1d0>
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	616b      	str	r3, [r5, #20]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ba:	2320      	movs	r3, #32
 80090bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c4:	2330      	movs	r3, #48	; 0x30
 80090c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800926c <_svfiprintf_r+0x1e8>
 80090ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ce:	f04f 0901 	mov.w	r9, #1
 80090d2:	4623      	mov	r3, r4
 80090d4:	469a      	mov	sl, r3
 80090d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090da:	b10a      	cbz	r2, 80090e0 <_svfiprintf_r+0x5c>
 80090dc:	2a25      	cmp	r2, #37	; 0x25
 80090de:	d1f9      	bne.n	80090d4 <_svfiprintf_r+0x50>
 80090e0:	ebba 0b04 	subs.w	fp, sl, r4
 80090e4:	d00b      	beq.n	80090fe <_svfiprintf_r+0x7a>
 80090e6:	465b      	mov	r3, fp
 80090e8:	4622      	mov	r2, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ff6f 	bl	8008fd0 <__ssputs_r>
 80090f2:	3001      	adds	r0, #1
 80090f4:	f000 80a9 	beq.w	800924a <_svfiprintf_r+0x1c6>
 80090f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090fa:	445a      	add	r2, fp
 80090fc:	9209      	str	r2, [sp, #36]	; 0x24
 80090fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a1 	beq.w	800924a <_svfiprintf_r+0x1c6>
 8009108:	2300      	movs	r3, #0
 800910a:	f04f 32ff 	mov.w	r2, #4294967295
 800910e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009112:	f10a 0a01 	add.w	sl, sl, #1
 8009116:	9304      	str	r3, [sp, #16]
 8009118:	9307      	str	r3, [sp, #28]
 800911a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800911e:	931a      	str	r3, [sp, #104]	; 0x68
 8009120:	4654      	mov	r4, sl
 8009122:	2205      	movs	r2, #5
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	4850      	ldr	r0, [pc, #320]	; (800926c <_svfiprintf_r+0x1e8>)
 800912a:	f7f7 f889 	bl	8000240 <memchr>
 800912e:	9a04      	ldr	r2, [sp, #16]
 8009130:	b9d8      	cbnz	r0, 800916a <_svfiprintf_r+0xe6>
 8009132:	06d0      	lsls	r0, r2, #27
 8009134:	bf44      	itt	mi
 8009136:	2320      	movmi	r3, #32
 8009138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913c:	0711      	lsls	r1, r2, #28
 800913e:	bf44      	itt	mi
 8009140:	232b      	movmi	r3, #43	; 0x2b
 8009142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009146:	f89a 3000 	ldrb.w	r3, [sl]
 800914a:	2b2a      	cmp	r3, #42	; 0x2a
 800914c:	d015      	beq.n	800917a <_svfiprintf_r+0xf6>
 800914e:	9a07      	ldr	r2, [sp, #28]
 8009150:	4654      	mov	r4, sl
 8009152:	2000      	movs	r0, #0
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4621      	mov	r1, r4
 800915a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800915e:	3b30      	subs	r3, #48	; 0x30
 8009160:	2b09      	cmp	r3, #9
 8009162:	d94d      	bls.n	8009200 <_svfiprintf_r+0x17c>
 8009164:	b1b0      	cbz	r0, 8009194 <_svfiprintf_r+0x110>
 8009166:	9207      	str	r2, [sp, #28]
 8009168:	e014      	b.n	8009194 <_svfiprintf_r+0x110>
 800916a:	eba0 0308 	sub.w	r3, r0, r8
 800916e:	fa09 f303 	lsl.w	r3, r9, r3
 8009172:	4313      	orrs	r3, r2
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	46a2      	mov	sl, r4
 8009178:	e7d2      	b.n	8009120 <_svfiprintf_r+0x9c>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	1d19      	adds	r1, r3, #4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	9103      	str	r1, [sp, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfbb      	ittet	lt
 8009186:	425b      	neglt	r3, r3
 8009188:	f042 0202 	orrlt.w	r2, r2, #2
 800918c:	9307      	strge	r3, [sp, #28]
 800918e:	9307      	strlt	r3, [sp, #28]
 8009190:	bfb8      	it	lt
 8009192:	9204      	strlt	r2, [sp, #16]
 8009194:	7823      	ldrb	r3, [r4, #0]
 8009196:	2b2e      	cmp	r3, #46	; 0x2e
 8009198:	d10c      	bne.n	80091b4 <_svfiprintf_r+0x130>
 800919a:	7863      	ldrb	r3, [r4, #1]
 800919c:	2b2a      	cmp	r3, #42	; 0x2a
 800919e:	d134      	bne.n	800920a <_svfiprintf_r+0x186>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d1a      	adds	r2, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9203      	str	r2, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfb8      	it	lt
 80091ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80091b0:	3402      	adds	r4, #2
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800927c <_svfiprintf_r+0x1f8>
 80091b8:	7821      	ldrb	r1, [r4, #0]
 80091ba:	2203      	movs	r2, #3
 80091bc:	4650      	mov	r0, sl
 80091be:	f7f7 f83f 	bl	8000240 <memchr>
 80091c2:	b138      	cbz	r0, 80091d4 <_svfiprintf_r+0x150>
 80091c4:	9b04      	ldr	r3, [sp, #16]
 80091c6:	eba0 000a 	sub.w	r0, r0, sl
 80091ca:	2240      	movs	r2, #64	; 0x40
 80091cc:	4082      	lsls	r2, r0
 80091ce:	4313      	orrs	r3, r2
 80091d0:	3401      	adds	r4, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	4825      	ldr	r0, [pc, #148]	; (8009270 <_svfiprintf_r+0x1ec>)
 80091da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091de:	2206      	movs	r2, #6
 80091e0:	f7f7 f82e 	bl	8000240 <memchr>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d038      	beq.n	800925a <_svfiprintf_r+0x1d6>
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <_svfiprintf_r+0x1f0>)
 80091ea:	bb1b      	cbnz	r3, 8009234 <_svfiprintf_r+0x1b0>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	3307      	adds	r3, #7
 80091f0:	f023 0307 	bic.w	r3, r3, #7
 80091f4:	3308      	adds	r3, #8
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fa:	4433      	add	r3, r6
 80091fc:	9309      	str	r3, [sp, #36]	; 0x24
 80091fe:	e768      	b.n	80090d2 <_svfiprintf_r+0x4e>
 8009200:	fb0c 3202 	mla	r2, ip, r2, r3
 8009204:	460c      	mov	r4, r1
 8009206:	2001      	movs	r0, #1
 8009208:	e7a6      	b.n	8009158 <_svfiprintf_r+0xd4>
 800920a:	2300      	movs	r3, #0
 800920c:	3401      	adds	r4, #1
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	4619      	mov	r1, r3
 8009212:	f04f 0c0a 	mov.w	ip, #10
 8009216:	4620      	mov	r0, r4
 8009218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800921c:	3a30      	subs	r2, #48	; 0x30
 800921e:	2a09      	cmp	r2, #9
 8009220:	d903      	bls.n	800922a <_svfiprintf_r+0x1a6>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0c6      	beq.n	80091b4 <_svfiprintf_r+0x130>
 8009226:	9105      	str	r1, [sp, #20]
 8009228:	e7c4      	b.n	80091b4 <_svfiprintf_r+0x130>
 800922a:	fb0c 2101 	mla	r1, ip, r1, r2
 800922e:	4604      	mov	r4, r0
 8009230:	2301      	movs	r3, #1
 8009232:	e7f0      	b.n	8009216 <_svfiprintf_r+0x192>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <_svfiprintf_r+0x1f4>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4638      	mov	r0, r7
 8009240:	f3af 8000 	nop.w
 8009244:	1c42      	adds	r2, r0, #1
 8009246:	4606      	mov	r6, r0
 8009248:	d1d6      	bne.n	80091f8 <_svfiprintf_r+0x174>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	065b      	lsls	r3, r3, #25
 800924e:	f53f af2d 	bmi.w	80090ac <_svfiprintf_r+0x28>
 8009252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009254:	b01d      	add	sp, #116	; 0x74
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <_svfiprintf_r+0x1f4>)
 8009262:	a904      	add	r1, sp, #16
 8009264:	4638      	mov	r0, r7
 8009266:	f000 f879 	bl	800935c <_printf_i>
 800926a:	e7eb      	b.n	8009244 <_svfiprintf_r+0x1c0>
 800926c:	08009834 	.word	0x08009834
 8009270:	0800983e 	.word	0x0800983e
 8009274:	00000000 	.word	0x00000000
 8009278:	08008fd1 	.word	0x08008fd1
 800927c:	0800983a 	.word	0x0800983a

08009280 <_printf_common>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	4616      	mov	r6, r2
 8009286:	4699      	mov	r9, r3
 8009288:	688a      	ldr	r2, [r1, #8]
 800928a:	690b      	ldr	r3, [r1, #16]
 800928c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009290:	4293      	cmp	r3, r2
 8009292:	bfb8      	it	lt
 8009294:	4613      	movlt	r3, r2
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800929c:	4607      	mov	r7, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b10a      	cbz	r2, 80092a6 <_printf_common+0x26>
 80092a2:	3301      	adds	r3, #1
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	0699      	lsls	r1, r3, #26
 80092aa:	bf42      	ittt	mi
 80092ac:	6833      	ldrmi	r3, [r6, #0]
 80092ae:	3302      	addmi	r3, #2
 80092b0:	6033      	strmi	r3, [r6, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	f015 0506 	ands.w	r5, r5, #6
 80092b8:	d106      	bne.n	80092c8 <_printf_common+0x48>
 80092ba:	f104 0a19 	add.w	sl, r4, #25
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	6832      	ldr	r2, [r6, #0]
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dc26      	bgt.n	8009316 <_printf_common+0x96>
 80092c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092cc:	1e13      	subs	r3, r2, #0
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	bf18      	it	ne
 80092d2:	2301      	movne	r3, #1
 80092d4:	0692      	lsls	r2, r2, #26
 80092d6:	d42b      	bmi.n	8009330 <_printf_common+0xb0>
 80092d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092dc:	4649      	mov	r1, r9
 80092de:	4638      	mov	r0, r7
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d01e      	beq.n	8009324 <_printf_common+0xa4>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	f003 0306 	and.w	r3, r3, #6
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	bf02      	ittt	eq
 80092f2:	68e5      	ldreq	r5, [r4, #12]
 80092f4:	6833      	ldreq	r3, [r6, #0]
 80092f6:	1aed      	subeq	r5, r5, r3
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	bf0c      	ite	eq
 80092fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009300:	2500      	movne	r5, #0
 8009302:	4293      	cmp	r3, r2
 8009304:	bfc4      	itt	gt
 8009306:	1a9b      	subgt	r3, r3, r2
 8009308:	18ed      	addgt	r5, r5, r3
 800930a:	2600      	movs	r6, #0
 800930c:	341a      	adds	r4, #26
 800930e:	42b5      	cmp	r5, r6
 8009310:	d11a      	bne.n	8009348 <_printf_common+0xc8>
 8009312:	2000      	movs	r0, #0
 8009314:	e008      	b.n	8009328 <_printf_common+0xa8>
 8009316:	2301      	movs	r3, #1
 8009318:	4652      	mov	r2, sl
 800931a:	4649      	mov	r1, r9
 800931c:	4638      	mov	r0, r7
 800931e:	47c0      	blx	r8
 8009320:	3001      	adds	r0, #1
 8009322:	d103      	bne.n	800932c <_printf_common+0xac>
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	3501      	adds	r5, #1
 800932e:	e7c6      	b.n	80092be <_printf_common+0x3e>
 8009330:	18e1      	adds	r1, r4, r3
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	2030      	movs	r0, #48	; 0x30
 8009336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800933a:	4422      	add	r2, r4
 800933c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009344:	3302      	adds	r3, #2
 8009346:	e7c7      	b.n	80092d8 <_printf_common+0x58>
 8009348:	2301      	movs	r3, #1
 800934a:	4622      	mov	r2, r4
 800934c:	4649      	mov	r1, r9
 800934e:	4638      	mov	r0, r7
 8009350:	47c0      	blx	r8
 8009352:	3001      	adds	r0, #1
 8009354:	d0e6      	beq.n	8009324 <_printf_common+0xa4>
 8009356:	3601      	adds	r6, #1
 8009358:	e7d9      	b.n	800930e <_printf_common+0x8e>
	...

0800935c <_printf_i>:
 800935c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	7e0f      	ldrb	r7, [r1, #24]
 8009362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009364:	2f78      	cmp	r7, #120	; 0x78
 8009366:	4691      	mov	r9, r2
 8009368:	4680      	mov	r8, r0
 800936a:	460c      	mov	r4, r1
 800936c:	469a      	mov	sl, r3
 800936e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009372:	d807      	bhi.n	8009384 <_printf_i+0x28>
 8009374:	2f62      	cmp	r7, #98	; 0x62
 8009376:	d80a      	bhi.n	800938e <_printf_i+0x32>
 8009378:	2f00      	cmp	r7, #0
 800937a:	f000 80d4 	beq.w	8009526 <_printf_i+0x1ca>
 800937e:	2f58      	cmp	r7, #88	; 0x58
 8009380:	f000 80c0 	beq.w	8009504 <_printf_i+0x1a8>
 8009384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800938c:	e03a      	b.n	8009404 <_printf_i+0xa8>
 800938e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009392:	2b15      	cmp	r3, #21
 8009394:	d8f6      	bhi.n	8009384 <_printf_i+0x28>
 8009396:	a101      	add	r1, pc, #4	; (adr r1, 800939c <_printf_i+0x40>)
 8009398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800939c:	080093f5 	.word	0x080093f5
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009385 	.word	0x08009385
 80093a8:	08009385 	.word	0x08009385
 80093ac:	08009385 	.word	0x08009385
 80093b0:	08009385 	.word	0x08009385
 80093b4:	08009409 	.word	0x08009409
 80093b8:	08009385 	.word	0x08009385
 80093bc:	08009385 	.word	0x08009385
 80093c0:	08009385 	.word	0x08009385
 80093c4:	08009385 	.word	0x08009385
 80093c8:	0800950d 	.word	0x0800950d
 80093cc:	08009435 	.word	0x08009435
 80093d0:	080094c7 	.word	0x080094c7
 80093d4:	08009385 	.word	0x08009385
 80093d8:	08009385 	.word	0x08009385
 80093dc:	0800952f 	.word	0x0800952f
 80093e0:	08009385 	.word	0x08009385
 80093e4:	08009435 	.word	0x08009435
 80093e8:	08009385 	.word	0x08009385
 80093ec:	08009385 	.word	0x08009385
 80093f0:	080094cf 	.word	0x080094cf
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	602a      	str	r2, [r5, #0]
 80093fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009404:	2301      	movs	r3, #1
 8009406:	e09f      	b.n	8009548 <_printf_i+0x1ec>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	0607      	lsls	r7, r0, #24
 800940e:	f103 0104 	add.w	r1, r3, #4
 8009412:	6029      	str	r1, [r5, #0]
 8009414:	d501      	bpl.n	800941a <_printf_i+0xbe>
 8009416:	681e      	ldr	r6, [r3, #0]
 8009418:	e003      	b.n	8009422 <_printf_i+0xc6>
 800941a:	0646      	lsls	r6, r0, #25
 800941c:	d5fb      	bpl.n	8009416 <_printf_i+0xba>
 800941e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009422:	2e00      	cmp	r6, #0
 8009424:	da03      	bge.n	800942e <_printf_i+0xd2>
 8009426:	232d      	movs	r3, #45	; 0x2d
 8009428:	4276      	negs	r6, r6
 800942a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800942e:	485a      	ldr	r0, [pc, #360]	; (8009598 <_printf_i+0x23c>)
 8009430:	230a      	movs	r3, #10
 8009432:	e012      	b.n	800945a <_printf_i+0xfe>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	1d19      	adds	r1, r3, #4
 800943a:	6029      	str	r1, [r5, #0]
 800943c:	0605      	lsls	r5, r0, #24
 800943e:	d501      	bpl.n	8009444 <_printf_i+0xe8>
 8009440:	681e      	ldr	r6, [r3, #0]
 8009442:	e002      	b.n	800944a <_printf_i+0xee>
 8009444:	0641      	lsls	r1, r0, #25
 8009446:	d5fb      	bpl.n	8009440 <_printf_i+0xe4>
 8009448:	881e      	ldrh	r6, [r3, #0]
 800944a:	4853      	ldr	r0, [pc, #332]	; (8009598 <_printf_i+0x23c>)
 800944c:	2f6f      	cmp	r7, #111	; 0x6f
 800944e:	bf0c      	ite	eq
 8009450:	2308      	moveq	r3, #8
 8009452:	230a      	movne	r3, #10
 8009454:	2100      	movs	r1, #0
 8009456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800945a:	6865      	ldr	r5, [r4, #4]
 800945c:	60a5      	str	r5, [r4, #8]
 800945e:	2d00      	cmp	r5, #0
 8009460:	bfa2      	ittt	ge
 8009462:	6821      	ldrge	r1, [r4, #0]
 8009464:	f021 0104 	bicge.w	r1, r1, #4
 8009468:	6021      	strge	r1, [r4, #0]
 800946a:	b90e      	cbnz	r6, 8009470 <_printf_i+0x114>
 800946c:	2d00      	cmp	r5, #0
 800946e:	d04b      	beq.n	8009508 <_printf_i+0x1ac>
 8009470:	4615      	mov	r5, r2
 8009472:	fbb6 f1f3 	udiv	r1, r6, r3
 8009476:	fb03 6711 	mls	r7, r3, r1, r6
 800947a:	5dc7      	ldrb	r7, [r0, r7]
 800947c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009480:	4637      	mov	r7, r6
 8009482:	42bb      	cmp	r3, r7
 8009484:	460e      	mov	r6, r1
 8009486:	d9f4      	bls.n	8009472 <_printf_i+0x116>
 8009488:	2b08      	cmp	r3, #8
 800948a:	d10b      	bne.n	80094a4 <_printf_i+0x148>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07de      	lsls	r6, r3, #31
 8009490:	d508      	bpl.n	80094a4 <_printf_i+0x148>
 8009492:	6923      	ldr	r3, [r4, #16]
 8009494:	6861      	ldr	r1, [r4, #4]
 8009496:	4299      	cmp	r1, r3
 8009498:	bfde      	ittt	le
 800949a:	2330      	movle	r3, #48	; 0x30
 800949c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094a4:	1b52      	subs	r2, r2, r5
 80094a6:	6122      	str	r2, [r4, #16]
 80094a8:	f8cd a000 	str.w	sl, [sp]
 80094ac:	464b      	mov	r3, r9
 80094ae:	aa03      	add	r2, sp, #12
 80094b0:	4621      	mov	r1, r4
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7ff fee4 	bl	8009280 <_printf_common>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d14a      	bne.n	8009552 <_printf_i+0x1f6>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b004      	add	sp, #16
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f043 0320 	orr.w	r3, r3, #32
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	4833      	ldr	r0, [pc, #204]	; (800959c <_printf_i+0x240>)
 80094d0:	2778      	movs	r7, #120	; 0x78
 80094d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	061f      	lsls	r7, r3, #24
 80094dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80094e0:	d402      	bmi.n	80094e8 <_printf_i+0x18c>
 80094e2:	065f      	lsls	r7, r3, #25
 80094e4:	bf48      	it	mi
 80094e6:	b2b6      	uxthmi	r6, r6
 80094e8:	07df      	lsls	r7, r3, #31
 80094ea:	bf48      	it	mi
 80094ec:	f043 0320 	orrmi.w	r3, r3, #32
 80094f0:	6029      	str	r1, [r5, #0]
 80094f2:	bf48      	it	mi
 80094f4:	6023      	strmi	r3, [r4, #0]
 80094f6:	b91e      	cbnz	r6, 8009500 <_printf_i+0x1a4>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	f023 0320 	bic.w	r3, r3, #32
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	2310      	movs	r3, #16
 8009502:	e7a7      	b.n	8009454 <_printf_i+0xf8>
 8009504:	4824      	ldr	r0, [pc, #144]	; (8009598 <_printf_i+0x23c>)
 8009506:	e7e4      	b.n	80094d2 <_printf_i+0x176>
 8009508:	4615      	mov	r5, r2
 800950a:	e7bd      	b.n	8009488 <_printf_i+0x12c>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	6826      	ldr	r6, [r4, #0]
 8009510:	6961      	ldr	r1, [r4, #20]
 8009512:	1d18      	adds	r0, r3, #4
 8009514:	6028      	str	r0, [r5, #0]
 8009516:	0635      	lsls	r5, r6, #24
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	d501      	bpl.n	8009520 <_printf_i+0x1c4>
 800951c:	6019      	str	r1, [r3, #0]
 800951e:	e002      	b.n	8009526 <_printf_i+0x1ca>
 8009520:	0670      	lsls	r0, r6, #25
 8009522:	d5fb      	bpl.n	800951c <_printf_i+0x1c0>
 8009524:	8019      	strh	r1, [r3, #0]
 8009526:	2300      	movs	r3, #0
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	4615      	mov	r5, r2
 800952c:	e7bc      	b.n	80094a8 <_printf_i+0x14c>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	1d1a      	adds	r2, r3, #4
 8009532:	602a      	str	r2, [r5, #0]
 8009534:	681d      	ldr	r5, [r3, #0]
 8009536:	6862      	ldr	r2, [r4, #4]
 8009538:	2100      	movs	r1, #0
 800953a:	4628      	mov	r0, r5
 800953c:	f7f6 fe80 	bl	8000240 <memchr>
 8009540:	b108      	cbz	r0, 8009546 <_printf_i+0x1ea>
 8009542:	1b40      	subs	r0, r0, r5
 8009544:	6060      	str	r0, [r4, #4]
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	2300      	movs	r3, #0
 800954c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009550:	e7aa      	b.n	80094a8 <_printf_i+0x14c>
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	462a      	mov	r2, r5
 8009556:	4649      	mov	r1, r9
 8009558:	4640      	mov	r0, r8
 800955a:	47d0      	blx	sl
 800955c:	3001      	adds	r0, #1
 800955e:	d0ad      	beq.n	80094bc <_printf_i+0x160>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	079b      	lsls	r3, r3, #30
 8009564:	d413      	bmi.n	800958e <_printf_i+0x232>
 8009566:	68e0      	ldr	r0, [r4, #12]
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	4298      	cmp	r0, r3
 800956c:	bfb8      	it	lt
 800956e:	4618      	movlt	r0, r3
 8009570:	e7a6      	b.n	80094c0 <_printf_i+0x164>
 8009572:	2301      	movs	r3, #1
 8009574:	4632      	mov	r2, r6
 8009576:	4649      	mov	r1, r9
 8009578:	4640      	mov	r0, r8
 800957a:	47d0      	blx	sl
 800957c:	3001      	adds	r0, #1
 800957e:	d09d      	beq.n	80094bc <_printf_i+0x160>
 8009580:	3501      	adds	r5, #1
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	9903      	ldr	r1, [sp, #12]
 8009586:	1a5b      	subs	r3, r3, r1
 8009588:	42ab      	cmp	r3, r5
 800958a:	dcf2      	bgt.n	8009572 <_printf_i+0x216>
 800958c:	e7eb      	b.n	8009566 <_printf_i+0x20a>
 800958e:	2500      	movs	r5, #0
 8009590:	f104 0619 	add.w	r6, r4, #25
 8009594:	e7f5      	b.n	8009582 <_printf_i+0x226>
 8009596:	bf00      	nop
 8009598:	08009845 	.word	0x08009845
 800959c:	08009856 	.word	0x08009856

080095a0 <memmove>:
 80095a0:	4288      	cmp	r0, r1
 80095a2:	b510      	push	{r4, lr}
 80095a4:	eb01 0402 	add.w	r4, r1, r2
 80095a8:	d902      	bls.n	80095b0 <memmove+0x10>
 80095aa:	4284      	cmp	r4, r0
 80095ac:	4623      	mov	r3, r4
 80095ae:	d807      	bhi.n	80095c0 <memmove+0x20>
 80095b0:	1e43      	subs	r3, r0, #1
 80095b2:	42a1      	cmp	r1, r4
 80095b4:	d008      	beq.n	80095c8 <memmove+0x28>
 80095b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095be:	e7f8      	b.n	80095b2 <memmove+0x12>
 80095c0:	4402      	add	r2, r0
 80095c2:	4601      	mov	r1, r0
 80095c4:	428a      	cmp	r2, r1
 80095c6:	d100      	bne.n	80095ca <memmove+0x2a>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d2:	e7f7      	b.n	80095c4 <memmove+0x24>

080095d4 <_sbrk_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d06      	ldr	r5, [pc, #24]	; (80095f0 <_sbrk_r+0x1c>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7f8 fcb4 	bl	8001f4c <_sbrk>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_sbrk_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_sbrk_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000808 	.word	0x20000808

080095f4 <memcpy>:
 80095f4:	440a      	add	r2, r1
 80095f6:	4291      	cmp	r1, r2
 80095f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fc:	d100      	bne.n	8009600 <memcpy+0xc>
 80095fe:	4770      	bx	lr
 8009600:	b510      	push	{r4, lr}
 8009602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800960a:	4291      	cmp	r1, r2
 800960c:	d1f9      	bne.n	8009602 <memcpy+0xe>
 800960e:	bd10      	pop	{r4, pc}

08009610 <_realloc_r>:
 8009610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009614:	4680      	mov	r8, r0
 8009616:	4614      	mov	r4, r2
 8009618:	460e      	mov	r6, r1
 800961a:	b921      	cbnz	r1, 8009626 <_realloc_r+0x16>
 800961c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	4611      	mov	r1, r2
 8009622:	f7ff bc49 	b.w	8008eb8 <_malloc_r>
 8009626:	b92a      	cbnz	r2, 8009634 <_realloc_r+0x24>
 8009628:	f7ff fbda 	bl	8008de0 <_free_r>
 800962c:	4625      	mov	r5, r4
 800962e:	4628      	mov	r0, r5
 8009630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009634:	f000 f81b 	bl	800966e <_malloc_usable_size_r>
 8009638:	4284      	cmp	r4, r0
 800963a:	4607      	mov	r7, r0
 800963c:	d802      	bhi.n	8009644 <_realloc_r+0x34>
 800963e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009642:	d812      	bhi.n	800966a <_realloc_r+0x5a>
 8009644:	4621      	mov	r1, r4
 8009646:	4640      	mov	r0, r8
 8009648:	f7ff fc36 	bl	8008eb8 <_malloc_r>
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d0ed      	beq.n	800962e <_realloc_r+0x1e>
 8009652:	42bc      	cmp	r4, r7
 8009654:	4622      	mov	r2, r4
 8009656:	4631      	mov	r1, r6
 8009658:	bf28      	it	cs
 800965a:	463a      	movcs	r2, r7
 800965c:	f7ff ffca 	bl	80095f4 <memcpy>
 8009660:	4631      	mov	r1, r6
 8009662:	4640      	mov	r0, r8
 8009664:	f7ff fbbc 	bl	8008de0 <_free_r>
 8009668:	e7e1      	b.n	800962e <_realloc_r+0x1e>
 800966a:	4635      	mov	r5, r6
 800966c:	e7df      	b.n	800962e <_realloc_r+0x1e>

0800966e <_malloc_usable_size_r>:
 800966e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009672:	1f18      	subs	r0, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfbc      	itt	lt
 8009678:	580b      	ldrlt	r3, [r1, r0]
 800967a:	18c0      	addlt	r0, r0, r3
 800967c:	4770      	bx	lr
	...

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
