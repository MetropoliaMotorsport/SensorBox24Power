
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c0c  08005c0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000000c  08005c20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08005c20  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001821c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae0  00000000  00000000  0003829b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001192  00000000  00000000  0003c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bc4  00000000  00000000  0003d592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001886f  00000000  00000000  0005e156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfb1a  00000000  00000000  000769c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062bc  00000000  00000000  001564e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015c79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005bac 	.word	0x08005bac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005bac 	.word	0x08005bac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ffc7 	bl	80014aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f819 	bl	8000552 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000520:	f000 fc60 	bl	8000de4 <MX_DMA_Init>
  MX_GPIO_Init();
 8000524:	f000 fca8 	bl	8000e78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000528:	f000 f854 	bl	80005d4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f8cc 	bl	80006c8 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000530:	f000 f910 	bl	8000754 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000534:	f000 f9be 	bl	80008b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000538:	f000 fa32 	bl	80009a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800053c:	f000 faa8 	bl	8000a90 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000540:	f000 fb1e 	bl	8000b80 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000544:	f000 fb52 	bl	8000bec <MX_TIM7_Init>
  MX_TIM16_Init();
 8000548:	f000 fb86 	bl	8000c58 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800054c:	f000 fbfe 	bl	8000d4c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x3c>

08000552 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b094      	sub	sp, #80	; 0x50
 8000556:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	2238      	movs	r2, #56	; 0x38
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f005 faf7 	bl	8005b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000578:	f002 fd46 	bl	8003008 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fddc 	bl	8003150 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800059e:	f000 fc8f 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a6:	2301      	movs	r3, #1
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f8e0 	bl	8003780 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005c6:	f000 fc7b 	bl	8000ec0 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2220      	movs	r2, #32
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 fab1 	bl	8005b54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fa:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_ADC1_Init+0xe8>)
 800061c:	2204      	movs	r2, #4
 800061e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_ADC1_Init+0xe8>)
 800062e:	2201      	movs	r2, #1
 8000630:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_ADC1_Init+0xe8>)
 800065e:	f001 f96f 	bl	8001940 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000668:	f000 fc2a 	bl	8000ec0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000674:	4619      	mov	r1, r3
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000678:	f001 ff02 	bl	8002480 <HAL_ADCEx_MultiModeConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000682:	f000 fc1d 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068a:	2306      	movs	r3, #6
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_ADC1_Init+0xf0>)
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000696:	2304      	movs	r3, #4
 8000698:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_ADC1_Init+0xe8>)
 80006a4:	f001 fad6 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ae:	f000 fc07 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3730      	adds	r7, #48	; 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	04300002 	.word	0x04300002
 80006c4:	407f0000 	.word	0x407f0000

080006c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_FDCAN1_Init+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006f8:	2210      	movs	r2, #16
 80006fa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_FDCAN1_Init+0x84>)
 80006fe:	2201      	movs	r2, #1
 8000700:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000704:	2202      	movs	r2, #2
 8000706:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_FDCAN1_Init+0x84>)
 800070a:	2202      	movs	r2, #2
 800070c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000710:	2201      	movs	r2, #1
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000716:	2201      	movs	r2, #1
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_FDCAN1_Init+0x84>)
 800071c:	2201      	movs	r2, #1
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000722:	2201      	movs	r2, #1
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_FDCAN1_Init+0x84>)
 800072e:	2200      	movs	r2, #0
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_FDCAN1_Init+0x84>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_FDCAN1_Init+0x84>)
 800073a:	f002 f933 	bl	80029a4 <HAL_FDCAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000744:	f000 fbbc 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000094 	.word	0x20000094
 8000750:	40006400 	.word	0x40006400

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	; 0x70
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 f9e0 	bl	8005b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_TIM1_Init+0x158>)
 8000796:	4a46      	ldr	r2, [pc, #280]	; (80008b0 <MX_TIM1_Init+0x15c>)
 8000798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_TIM1_Init+0x158>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b42      	ldr	r3, [pc, #264]	; (80008ac <MX_TIM1_Init+0x158>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_TIM1_Init+0x158>)
 80007a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_TIM1_Init+0x158>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b4:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_TIM1_Init+0x158>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_TIM1_Init+0x158>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c0:	483a      	ldr	r0, [pc, #232]	; (80008ac <MX_TIM1_Init+0x158>)
 80007c2:	f003 fbe9 	bl	8003f98 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 fb78 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007da:	4619      	mov	r1, r3
 80007dc:	4833      	ldr	r0, [pc, #204]	; (80008ac <MX_TIM1_Init+0x158>)
 80007de:	f003 fda7 	bl	8004330 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007e8:	f000 fb6a 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ec:	482f      	ldr	r0, [pc, #188]	; (80008ac <MX_TIM1_Init+0x158>)
 80007ee:	f003 fc2a 	bl	8004046 <HAL_TIM_PWM_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007f8:	f000 fb62 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080c:	4619      	mov	r1, r3
 800080e:	4827      	ldr	r0, [pc, #156]	; (80008ac <MX_TIM1_Init+0x158>)
 8000810:	f004 faaa 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800081a:	f000 fb51 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_TIM1_Init+0x158>)
 8000844:	f003 fc60 	bl	8004108 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800084e:	f000 fb37 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_TIM1_Init+0x158>)
 8000890:	f004 faec 	bl	8004e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800089a:	f000 fb11 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <MX_TIM1_Init+0x158>)
 80008a0:	f000 fc7c 	bl	800119c <HAL_TIM_MspPostInit>

}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000f8 	.word	0x200000f8
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_TIM2_Init+0xe8>)
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_TIM2_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_TIM2_Init+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_TIM2_Init+0xe8>)
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM2_Init+0xe8>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_TIM2_Init+0xe8>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090e:	4823      	ldr	r0, [pc, #140]	; (800099c <MX_TIM2_Init+0xe8>)
 8000910:	f003 fb42 	bl	8003f98 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 fad1 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_TIM2_Init+0xe8>)
 800092c:	f003 fd00 	bl	8004330 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000936:	f000 fac3 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800093a:	4818      	ldr	r0, [pc, #96]	; (800099c <MX_TIM2_Init+0xe8>)
 800093c:	f003 fb83 	bl	8004046 <HAL_TIM_PWM_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000946:	f000 fabb 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <MX_TIM2_Init+0xe8>)
 800095a:	f004 fa05 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000964:	f000 faac 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	; 0x60
 800096a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM2_Init+0xe8>)
 8000980:	f003 fbc2 	bl	8004108 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800098a:	f000 fa99 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM2_Init+0xe8>)
 8000990:	f000 fc04 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	; 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000144 	.word	0x20000144

080009a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <MX_TIM3_Init+0xec>)
 80009d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009f8:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_TIM3_Init+0xe8>)
 80009fa:	f003 facd 	bl	8003f98 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a04:	f000 fa5c 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM3_Init+0xe8>)
 8000a16:	f003 fc8b 	bl	8004330 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a20:	f000 fa4e 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a24:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM3_Init+0xe8>)
 8000a26:	f003 fb0e 	bl	8004046 <HAL_TIM_PWM_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a30:	f000 fa46 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_TIM3_Init+0xe8>)
 8000a44:	f004 f990 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 fa37 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM3_Init+0xe8>)
 8000a6a:	f003 fb4d 	bl	8004108 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a74:	f000 fa24 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM3_Init+0xe8>)
 8000a7a:	f000 fb8f 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3738      	adds	r7, #56	; 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000190 	.word	0x20000190
 8000a8c:	40000400 	.word	0x40000400

08000a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000ac4:	4a2d      	ldr	r2, [pc, #180]	; (8000b7c <MX_TIM4_Init+0xec>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ae8:	4823      	ldr	r0, [pc, #140]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000aea:	f003 fa55 	bl	8003f98 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000af4:	f000 f9e4 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000b06:	f003 fc13 	bl	8004330 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b10:	f000 f9d6 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b14:	4818      	ldr	r0, [pc, #96]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000b16:	f003 fa96 	bl	8004046 <HAL_TIM_PWM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b20:	f000 f9ce 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000b34:	f004 f918 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b3e:	f000 f9bf 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b42:	2360      	movs	r3, #96	; 0x60
 8000b44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000b5a:	f003 fad5 	bl	8004108 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b64:	f000 f9ac 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <MX_TIM4_Init+0xe8>)
 8000b6a:	f000 fb17 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3738      	adds	r7, #56	; 0x38
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200001dc 	.word	0x200001dc
 8000b7c:	40000800 	.word	0x40000800

08000b80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_TIM6_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bb2:	f003 f9f1 	bl	8003f98 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bbc:	f000 f980 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM6_Init+0x64>)
 8000bce:	f004 f8cb 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bd8:	f000 f972 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000228 	.word	0x20000228
 8000be8:	40001000 	.word	0x40001000

08000bec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_TIM7_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c1e:	f003 f9bb 	bl	8003f98 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c28:	f000 f94a 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_TIM7_Init+0x64>)
 8000c3a:	f004 f895 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c44:	f000 f93c 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000274 	.word	0x20000274
 8000c54:	40001400 	.word	0x40001400

08000c58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2234      	movs	r2, #52	; 0x34
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 ff6b 	bl	8005b54 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <MX_TIM16_Init+0xf0>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cac:	f003 f974 	bl	8003f98 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000cb6:	f000 f903 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cbc:	f003 f9c3 	bl	8004046 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cc6:	f000 f8fb 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cca:	2360      	movs	r3, #96	; 0x60
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cf0:	f003 fa0a 	bl	8004108 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cfa:	f000 f8e1 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000d26:	f004 f8a1 	bl	8004e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d30:	f000 f8c6 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000d36:	f000 fa31 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3750      	adds	r7, #80	; 0x50
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200002c0 	.word	0x200002c0
 8000d48:	40014400 	.word	0x40014400

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000d96:	f004 f909 	bl	8004fac <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f88e 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000da8:	f004 fe0a 	bl	80059c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 f885 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000dba:	f004 fe3f 	bl	8005a3c <HAL_UARTEx_SetRxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 f87c 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_USART2_UART_Init+0x90>)
 8000dca:	f004 fdc0 	bl	800594e <HAL_UARTEx_DisableFifoMode>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f874 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000030c 	.word	0x2000030c
 8000de0:	40004400 	.word	0x40004400

08000de4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_DMA_Init+0x88>)
 8000dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <MX_DMA_Init+0x88>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6493      	str	r3, [r2, #72]	; 0x48
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_DMA_Init+0x88>)
 8000df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_DMA_Init+0x88>)
 8000e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <MX_DMA_Init+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_DMA_Init+0x88>)
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e1c:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_DMA_Init+0x90>)
 8000e1e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e30:	2240      	movs	r2, #64	; 0x40
 8000e32:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_DMA_Init+0x8c>)
 8000e54:	f001 fc9c 	bl	8002790 <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 8000e5e:	f000 f82f 	bl	8000ec0 <Error_Handler>
  }

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	2000039c 	.word	0x2000039c
 8000e74:	40020008 	.word	0x40020008

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_GPIO_Init+0x44>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b09a      	sub	sp, #104	; 0x68
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2244      	movs	r2, #68	; 0x44
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fe0d 	bl	8005b54 <memset>
  if(hadc->Instance==ADC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f42:	d134      	bne.n	8000fae <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fe2f 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f60:	f7ff ffae 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa4>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f94:	2303      	movs	r3, #3
 8000f96:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f001 feab 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3768      	adds	r7, #104	; 0x68
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09a      	sub	sp, #104	; 0x68
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2244      	movs	r2, #68	; 0x44
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 fdb9 	bl	8005b54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <HAL_FDCAN_MspInit+0xac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d139      	bne.n	8001060 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fddb 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001008:	f7ff ff5a 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	6593      	str	r3, [r2, #88]	; 0x58
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_FDCAN_MspInit+0xb0>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800103c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800104e:	2309      	movs	r3, #9
 8001050:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 fe52 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3768      	adds	r7, #104	; 0x68
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40006400 	.word	0x40006400
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <HAL_TIM_Base_MspInit+0x110>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10c      	bne.n	800109c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001082:	4b40      	ldr	r3, [pc, #256]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108c:	6613      	str	r3, [r2, #96]	; 0x60
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800109a:	e06a      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d10c      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a36      	ldr	r2, [pc, #216]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
}
 80010be:	e058      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <HAL_TIM_Base_MspInit+0x118>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10c      	bne.n	80010e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6593      	str	r3, [r2, #88]	; 0x58
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
}
 80010e2:	e046      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <HAL_TIM_Base_MspInit+0x11c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10c      	bne.n	8001108 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a24      	ldr	r2, [pc, #144]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
}
 8001106:	e034      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_TIM_Base_MspInit+0x120>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10c      	bne.n	800112c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
}
 800112a:	e022      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_TIM_Base_MspInit+0x124>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10c      	bne.n	8001150 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6593      	str	r3, [r2, #88]	; 0x58
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
}
 800114e:	e010      	b.n	8001172 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM16)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <HAL_TIM_Base_MspInit+0x128>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10b      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_TIM_Base_MspInit+0x114>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	bf00      	nop
 8001174:	372c      	adds	r7, #44	; 0x2c
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40000400 	.word	0x40000400
 800118c:	40000800 	.word	0x40000800
 8001190:	40001000 	.word	0x40001000
 8001194:	40001400 	.word	0x40001400
 8001198:	40014400 	.word	0x40014400

0800119c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a57      	ldr	r2, [pc, #348]	; (8001318 <HAL_TIM_MspPostInit+0x17c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11e      	bne.n	80011fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b54      	ldr	r3, [pc, #336]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011e8:	2306      	movs	r3, #6
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f001 fd85 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80011fa:	e088      	b.n	800130e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d11d      	bne.n	8001242 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a44      	ldr	r2, [pc, #272]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121e:	2320      	movs	r3, #32
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800122e:	2301      	movs	r3, #1
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f001 fd62 	bl	8002d04 <HAL_GPIO_Init>
}
 8001240:	e065      	b.n	800130e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_TIM_MspPostInit+0x184>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d11d      	bne.n	8001288 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001264:	2340      	movs	r3, #64	; 0x40
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001274:	2302      	movs	r3, #2
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 fd3f 	bl	8002d04 <HAL_GPIO_Init>
}
 8001286:	e042      	b.n	800130e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_TIM_MspPostInit+0x188>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11c      	bne.n	80012cc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_TIM_MspPostInit+0x18c>)
 80012c6:	f001 fd1d 	bl	8002d04 <HAL_GPIO_Init>
}
 80012ca:	e020      	b.n	800130e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM16)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_TIM_MspPostInit+0x190>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d11b      	bne.n	800130e <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_TIM_MspPostInit+0x180>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ee:	2310      	movs	r3, #16
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <HAL_TIM_MspPostInit+0x18c>)
 800130a:	f001 fcfb 	bl	8002d04 <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40012c00 	.word	0x40012c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40000400 	.word	0x40000400
 8001324:	40000800 	.word	0x40000800
 8001328:	48000400 	.word	0x48000400
 800132c:	40014400 	.word	0x40014400

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09a      	sub	sp, #104	; 0x68
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2244      	movs	r2, #68	; 0x44
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fbff 	bl	8005b54 <memset>
  if(huart->Instance==USART2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_UART_MspInit+0xa8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d136      	bne.n	80013ce <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001360:	2302      	movs	r3, #2
 8001362:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fc23 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001378:	f7ff fda2 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_UART_MspInit+0xac>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_UART_MspInit+0xac>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	6593      	str	r3, [r2, #88]	; 0x58
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_UART_MspInit+0xac>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0xac>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0xac>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_UART_MspInit+0xac>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ac:	230c      	movs	r3, #12
 80013ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013bc:	2307      	movs	r3, #7
 80013be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f001 fc9b 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3768      	adds	r7, #104	; 0x68
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f890 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001482:	f7ff ffd7 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f004 fb6d 	bl	8005b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148a:	f7ff f843 	bl	8000514 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800149c:	08005c14 	.word	0x08005c14
  ldr r2, =_sbss
 80014a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a4:	20000400 	.word	0x20000400

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>

080014aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f001 f939 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ba:	200f      	movs	r0, #15
 80014bc:	f000 f80e 	bl	80014dc <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	e001      	b.n	80014d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014cc:	f7ff fcfe 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d0:	79fb      	ldrb	r3, [r7, #7]

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_InitTick+0x68>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d022      	beq.n	8001536 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_InitTick+0x6c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_InitTick+0x68>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f001 f936 	bl	8002776 <HAL_SYSTICK_Config>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10f      	bne.n	8001530 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	d809      	bhi.n	800152a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001516:	2200      	movs	r2, #0
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
 800151e:	f001 f910 	bl	8002742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_InitTick+0x70>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e007      	b.n	800153a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e004      	b.n	800153a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000008 	.word	0x20000008
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x1c>)
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200003fc 	.word	0x200003fc
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200003fc 	.word	0x200003fc

0800158c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3360      	adds	r3, #96	; 0x60
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <LL_ADC_SetOffset+0x44>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	4313      	orrs	r3, r2
 8001624:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	03fff000 	.word	0x03fff000

0800163c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3360      	adds	r3, #96	; 0x60
 800164a:	461a      	mov	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3360      	adds	r3, #96	; 0x60
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800169e:	b480      	push	{r7}
 80016a0:	b087      	sub	sp, #28
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3360      	adds	r3, #96	; 0x60
 80016ae:	461a      	mov	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3360      	adds	r3, #96	; 0x60
 80016e4:	461a      	mov	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	615a      	str	r2, [r3, #20]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3330      	adds	r3, #48	; 0x30
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	4413      	add	r3, r2
 800174e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	211f      	movs	r1, #31
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	0e9b      	lsrs	r3, r3, #26
 8001768:	f003 011f 	and.w	r1, r3, #31
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	431a      	orrs	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3314      	adds	r3, #20
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0e5b      	lsrs	r3, r3, #25
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	0d1b      	lsrs	r3, r3, #20
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	2107      	movs	r1, #7
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	401a      	ands	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	0d1b      	lsrs	r3, r3, #20
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d10a      	bne.n	800180a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	431a      	orrs	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001808:	e00a      	b.n	8001820 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	407f0000 	.word	0x407f0000

08001830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6093      	str	r3, [r2, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001868:	d101      	bne.n	800186e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800188c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <LL_ADC_IsEnabled+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_IsEnabled+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b04      	cmp	r3, #4
 8001904:	d101      	bne.n	800190a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b08      	cmp	r3, #8
 800192a:	d101      	bne.n	8001930 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e177      	b.n	8001c4a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fad3 	bl	8000f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff67 	bl	8001854 <LL_ADC_IsDeepPowerDownEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff4d 	bl	8001830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff82 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff66 	bl	800187c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b0:	4b9c      	ldr	r3, [pc, #624]	; (8001c24 <HAL_ADC_Init+0x2e4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	4a9c      	ldr	r2, [pc, #624]	; (8001c28 <HAL_ADC_Init+0x2e8>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	3301      	adds	r3, #1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019c4:	e002      	b.n	80019cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f9      	bne.n	80019c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff64 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	f043 0210 	orr.w	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff75 	bl	80018f2 <LL_ADC_REG_IsConversionOngoing>
 8001a08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8110 	bne.w	8001c38 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 810c 	bne.w	8001c38 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a28:	f043 0202 	orr.w	r2, r3, #2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff49 	bl	80018cc <LL_ADC_IsEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a44:	f7ff ff42 	bl	80018cc <LL_ADC_IsEnabled>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	4878      	ldr	r0, [pc, #480]	; (8001c2c <HAL_ADC_Init+0x2ec>)
 8001a4c:	f7ff ff3e 	bl	80018cc <LL_ADC_IsEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4323      	orrs	r3, r4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4874      	ldr	r0, [pc, #464]	; (8001c30 <HAL_ADC_Init+0x2f0>)
 8001a60:	f7ff fd94 	bl	800158c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7f5b      	ldrb	r3, [r3, #29]
 8001a68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	045b      	lsls	r3, r3, #17
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_ADC_Init+0x2f4>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff01 	bl	80018f2 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff0e 	bl	8001918 <LL_ADC_INJ_IsConversionOngoing>
 8001afc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d16d      	bne.n	8001be0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d16a      	bne.n	8001be0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b0e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b16:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b26:	f023 0302 	bic.w	r3, r3, #2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d017      	beq.n	8001b6c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6911      	ldr	r1, [r2, #16]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b6a:	e013      	b.n	8001b94 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b90:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	e007      	b.n	8001be0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10c      	bne.n	8001c02 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f023 010f 	bic.w	r1, r3, #15
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001c00:	e007      	b.n	8001c12 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020f 	bic.w	r2, r2, #15
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c22:	e011      	b.n	8001c48 <HAL_ADC_Init+0x308>
 8001c24:	20000000 	.word	0x20000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	50000100 	.word	0x50000100
 8001c30:	50000300 	.word	0x50000300
 8001c34:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop

08001c54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0b6      	sub	sp, #216	; 0xd8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x22>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e3c8      	b.n	8002408 <HAL_ADC_ConfigChannel+0x7b4>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe35 	bl	80018f2 <LL_ADC_REG_IsConversionOngoing>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 83ad 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f7ff fd47 	bl	8001730 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe23 	bl	80018f2 <LL_ADC_REG_IsConversionOngoing>
 8001cac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe2f 	bl	8001918 <LL_ADC_INJ_IsConversionOngoing>
 8001cba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 81d9 	bne.w	800207a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 81d4 	bne.w	800207a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cda:	d10f      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7ff fd4e 	bl	8001788 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fd08 	bl	800170a <LL_ADC_SetSamplingTimeCommonConfig>
 8001cfa:	e00e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f7ff fd3d 	bl	8001788 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fcf8 	bl	800170a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d022      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6919      	ldr	r1, [r3, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d4c:	f7ff fc52 	bl	80015f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f7ff fc9e 	bl	800169e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	7f1b      	ldrb	r3, [r3, #28]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x124>
 8001d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x126>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f7ff fcaa 	bl	80016d4 <LL_ADC_SetOffsetSaturation>
 8001d80:	e17b      	b.n	800207a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc57 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x15a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fc4c 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	e01e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x198>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc41 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e004      	b.n	8001dea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001de0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1b0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	e018      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x1e2>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e004      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d106      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fc10 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbf4 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10a      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x220>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fbe9 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	f003 021f 	and.w	r2, r3, #31
 8001e72:	e01e      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x25e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fbde 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e004      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x276>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	e018      	b.n	8001efc <HAL_ADC_ConfigChannel+0x2a8>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	e004      	b.n	8001efc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fbad 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2102      	movs	r1, #2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fb91 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x2e6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fb86 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	e01e      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fb7b 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e004      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x33c>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	e016      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x36a>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e004      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb4c 	bl	8001668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb30 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x3a8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2103      	movs	r1, #3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb25 	bl	800163c <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	e017      	b.n	800202c <HAL_ADC_ConfigChannel+0x3d8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2103      	movs	r1, #3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fb1a 	bl	800163c <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002016:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x3f0>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	e011      	b.n	8002068 <HAL_ADC_ConfigChannel+0x414>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002054:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002068:	429a      	cmp	r2, r3
 800206a:	d106      	bne.n	800207a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	2103      	movs	r1, #3
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff faf7 	bl	8001668 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fc24 	bl	80018cc <LL_ADC_IsEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8140 	bne.w	800230c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	461a      	mov	r2, r3
 800209a:	f7ff fba1 	bl	80017e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a8f      	ldr	r2, [pc, #572]	; (80022e0 <HAL_ADC_ConfigChannel+0x68c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f040 8131 	bne.w	800230c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10b      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x47e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	bf94      	ite	ls
 80020ca:	2301      	movls	r3, #1
 80020cc:	2300      	movhi	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	e019      	b.n	8002106 <HAL_ADC_ConfigChannel+0x4b2>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80020ea:	2320      	movs	r3, #32
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80020ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	bf94      	ite	ls
 8002100:	2301      	movls	r3, #1
 8002102:	2300      	movhi	r3, #0
 8002104:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002106:	2b00      	cmp	r3, #0
 8002108:	d079      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x4d2>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	3301      	adds	r3, #1
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002124:	e015      	b.n	8002152 <HAL_ADC_ConfigChannel+0x4fe>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002136:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800213e:	2320      	movs	r3, #32
 8002140:	e003      	b.n	800214a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3301      	adds	r3, #1
 800214c:	069b      	lsls	r3, r3, #26
 800214e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x51e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	3301      	adds	r3, #1
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	e017      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x54e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e003      	b.n	8002196 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800218e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	ea42 0103 	orr.w	r1, r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x574>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	3301      	adds	r3, #1
 80021ba:	f003 021f 	and.w	r2, r3, #31
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	051b      	lsls	r3, r3, #20
 80021c6:	e018      	b.n	80021fa <HAL_ADC_ConfigChannel+0x5a6>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e003      	b.n	80021ec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80021e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fa:	430b      	orrs	r3, r1
 80021fc:	e081      	b.n	8002302 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <HAL_ADC_ConfigChannel+0x5c6>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	3301      	adds	r3, #1
 8002212:	069b      	lsls	r3, r3, #26
 8002214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002218:	e015      	b.n	8002246 <HAL_ADC_ConfigChannel+0x5f2>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e003      	b.n	800223e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3301      	adds	r3, #1
 8002240:	069b      	lsls	r3, r3, #26
 8002242:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x612>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	3301      	adds	r3, #1
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	e017      	b.n	8002296 <HAL_ADC_ConfigChannel+0x642>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	61fb      	str	r3, [r7, #28]
  return result;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800227e:	2320      	movs	r3, #32
 8002280:	e003      	b.n	800228a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	ea42 0103 	orr.w	r1, r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x66e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	3301      	adds	r3, #1
 80022ae:	f003 021f 	and.w	r2, r3, #31
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	3b1e      	subs	r3, #30
 80022ba:	051b      	lsls	r3, r3, #20
 80022bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c0:	e01e      	b.n	8002300 <HAL_ADC_ConfigChannel+0x6ac>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	613b      	str	r3, [r7, #16]
  return result;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e006      	b.n	80022ec <HAL_ADC_ConfigChannel+0x698>
 80022de:	bf00      	nop
 80022e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	3b1e      	subs	r3, #30
 80022fa:	051b      	lsls	r3, r3, #20
 80022fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002300:	430b      	orrs	r3, r1
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	4619      	mov	r1, r3
 8002308:	f7ff fa3e 	bl	8001788 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_ADC_ConfigChannel+0x7bc>)
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d071      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002318:	483e      	ldr	r0, [pc, #248]	; (8002414 <HAL_ADC_ConfigChannel+0x7c0>)
 800231a:	f7ff f95d 	bl	80015d8 <LL_ADC_GetCommonPathInternalCh>
 800231e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <HAL_ADC_ConfigChannel+0x7c4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x6e2>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3a      	ldr	r2, [pc, #232]	; (800241c <HAL_ADC_ConfigChannel+0x7c8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d127      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800234a:	d157      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002354:	4619      	mov	r1, r3
 8002356:	482f      	ldr	r0, [pc, #188]	; (8002414 <HAL_ADC_ConfigChannel+0x7c0>)
 8002358:	f7ff f92b 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_ADC_ConfigChannel+0x7cc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	4a30      	ldr	r2, [pc, #192]	; (8002424 <HAL_ADC_ConfigChannel+0x7d0>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002376:	e002      	b.n	800237e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3b01      	subs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f9      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002384:	e03a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_ADC_ConfigChannel+0x7d4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d113      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x764>
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_ADC_ConfigChannel+0x7d8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02a      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	4619      	mov	r1, r3
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <HAL_ADC_ConfigChannel+0x7c0>)
 80023b2:	f7ff f8fe 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b6:	e021      	b.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_ADC_ConfigChannel+0x7dc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11c      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_ADC_ConfigChannel+0x7d8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d011      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e0:	4619      	mov	r1, r3
 80023e2:	480c      	ldr	r0, [pc, #48]	; (8002414 <HAL_ADC_ConfigChannel+0x7c0>)
 80023e4:	f7ff f8e5 	bl	80015b2 <LL_ADC_SetCommonPathInternalCh>
 80023e8:	e008      	b.n	80023fc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002404:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002408:	4618      	mov	r0, r3
 800240a:	37d8      	adds	r7, #216	; 0xd8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	80080000 	.word	0x80080000
 8002414:	50000300 	.word	0x50000300
 8002418:	c3210000 	.word	0xc3210000
 800241c:	90c00010 	.word	0x90c00010
 8002420:	20000000 	.word	0x20000000
 8002424:	053e2d63 	.word	0x053e2d63
 8002428:	c7520000 	.word	0xc7520000
 800242c:	50000100 	.word	0x50000100
 8002430:	cb840000 	.word	0xcb840000

08002434 <LL_ADC_IsEnabled>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <LL_ADC_IsEnabled+0x18>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <LL_ADC_IsEnabled+0x1a>
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_REG_IsConversionOngoing>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d101      	bne.n	8002472 <LL_ADC_REG_IsConversionOngoing+0x18>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b0a1      	sub	sp, #132	; 0x84
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e08b      	b.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80024a6:	2300      	movs	r3, #0
 80024a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80024aa:	2300      	movs	r3, #0
 80024ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b6:	d102      	bne.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	e001      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	f043 0220 	orr.w	r2, r3, #32
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e06a      	b.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffb9 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 80024e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ffb3 	bl	800245a <LL_ADC_REG_IsConversionOngoing>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d14c      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d149      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002502:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d028      	beq.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800250c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800251e:	035b      	lsls	r3, r3, #13
 8002520:	430b      	orrs	r3, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002528:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800252c:	f7ff ff82 	bl	8002434 <LL_ADC_IsEnabled>
 8002530:	4604      	mov	r4, r0
 8002532:	4823      	ldr	r0, [pc, #140]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002534:	f7ff ff7e 	bl	8002434 <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	4323      	orrs	r3, r4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d133      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002548:	f023 030f 	bic.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	430a      	orrs	r2, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800255c:	e024      	b.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002568:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800256e:	f7ff ff61 	bl	8002434 <LL_ADC_IsEnabled>
 8002572:	4604      	mov	r4, r0
 8002574:	4812      	ldr	r0, [pc, #72]	; (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002576:	f7ff ff5d 	bl	8002434 <LL_ADC_IsEnabled>
 800257a:	4603      	mov	r3, r0
 800257c:	4323      	orrs	r3, r4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d112      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800258a:	f023 030f 	bic.w	r3, r3, #15
 800258e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002590:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002592:	e009      	b.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025a6:	e000      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3784      	adds	r7, #132	; 0x84
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd90      	pop	{r4, r7, pc}
 80025be:	bf00      	nop
 80025c0:	50000100 	.word	0x50000100
 80025c4:	50000300 	.word	0x50000300

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff8e 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff47 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff5e 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff90 	bl	8002680 <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffb2 	bl	80026e8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e08d      	b.n	80028be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_DMA_Init+0x138>)
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d80f      	bhi.n	80027ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b45      	ldr	r3, [pc, #276]	; (80028cc <HAL_DMA_Init+0x13c>)
 80027b6:	4413      	add	r3, r2
 80027b8:	4a45      	ldr	r2, [pc, #276]	; (80028d0 <HAL_DMA_Init+0x140>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	009a      	lsls	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a42      	ldr	r2, [pc, #264]	; (80028d4 <HAL_DMA_Init+0x144>)
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
 80027cc:	e00e      	b.n	80027ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_DMA_Init+0x148>)
 80027d6:	4413      	add	r3, r2
 80027d8:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <HAL_DMA_Init+0x140>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	009a      	lsls	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a3c      	ldr	r2, [pc, #240]	; (80028dc <HAL_DMA_Init+0x14c>)
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f84e 	bl	80028e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284c:	d102      	bne.n	8002854 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002868:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_DMA_Init+0x104>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b04      	cmp	r3, #4
 8002878:	d80c      	bhi.n	8002894 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f86e 	bl	800295c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e008      	b.n	80028a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40020407 	.word	0x40020407
 80028cc:	bffdfff8 	.word	0xbffdfff8
 80028d0:	cccccccd 	.word	0xcccccccd
 80028d4:	40020000 	.word	0x40020000
 80028d8:	bffdfbf8 	.word	0xbffdfbf8
 80028dc:	40020400 	.word	0x40020400

080028e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d802      	bhi.n	80028fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e001      	b.n	80028fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028fc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3b08      	subs	r3, #8
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800292a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2201      	movs	r2, #1
 8002934:	409a      	lsls	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40020407 	.word	0x40020407
 800294c:	40020800 	.word	0x40020800
 8002950:	40020820 	.word	0x40020820
 8002954:	cccccccd 	.word	0xcccccccd
 8002958:	40020880 	.word	0x40020880

0800295c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800297e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	1000823f 	.word	0x1000823f
 80029a0:	40020940 	.word	0x40020940

080029a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e147      	b.n	8002c46 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe faf6 	bl	8000fbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0210 	bic.w	r2, r2, #16
 80029de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7fe fdc8 	bl	8001574 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80029e6:	e012      	b.n	8002a0e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80029e8:	f7fe fdc4 	bl	8001574 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b0a      	cmp	r3, #10
 80029f4:	d90b      	bls.n	8002a0e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e11b      	b.n	8002c46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d0e5      	beq.n	80029e8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7fe fda2 	bl	8001574 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a32:	e012      	b.n	8002a5a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a34:	f7fe fd9e 	bl	8001574 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d90b      	bls.n	8002a5a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0f5      	b.n	8002c46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0e5      	beq.n	8002a34 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0202 	orr.w	r2, r2, #2
 8002a76:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a74      	ldr	r2, [pc, #464]	; (8002c50 <HAL_FDCAN_Init+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d103      	bne.n	8002a8a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002a82:	4a74      	ldr	r2, [pc, #464]	; (8002c54 <HAL_FDCAN_Init+0x2b0>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7c1b      	ldrb	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	619a      	str	r2, [r3, #24]
 8002aa2:	e007      	b.n	8002ab4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7c5b      	ldrb	r3, [r3, #17]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aca:	619a      	str	r2, [r3, #24]
 8002acc:	e007      	b.n	8002ade <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002adc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7c9b      	ldrb	r3, [r3, #18]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af4:	619a      	str	r2, [r3, #24]
 8002af6:	e007      	b.n	8002b08 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b06:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002b2c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0210 	bic.w	r2, r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0204 	orr.w	r2, r2, #4
 8002b54:	619a      	str	r2, [r3, #24]
 8002b56:	e02c      	b.n	8002bb2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d01c      	beq.n	8002ba2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b76:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0210 	orr.w	r2, r2, #16
 8002b86:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d110      	bne.n	8002bb2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	619a      	str	r2, [r3, #24]
 8002ba0:	e007      	b.n	8002bb2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0220 	orr.w	r2, r2, #32
 8002bb0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bc2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002bca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002bda:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002bdc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be6:	d115      	bne.n	8002c14 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002bf6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c10:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c12:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f814 	bl	8002c58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40006400 	.word	0x40006400
 8002c54:	40006500 	.word	0x40006500

08002c58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002c62:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c72:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	041a      	lsls	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c98:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	061a      	lsls	r2, r3, #24
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e005      	b.n	8002ce6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3f3      	bcc.n	8002cda <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	4000a400 	.word	0x4000a400

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d12:	e15a      	b.n	8002fca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 814c 	beq.w	8002fc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d005      	beq.n	8002d44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d130      	bne.n	8002da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 0201 	and.w	r2, r3, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d017      	beq.n	8002de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d123      	bne.n	8002e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	6939      	ldr	r1, [r7, #16]
 8002e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80a6 	beq.w	8002fc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e78:	4b5b      	ldr	r3, [pc, #364]	; (8002fe8 <HAL_GPIO_Init+0x2e4>)
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	4a5a      	ldr	r2, [pc, #360]	; (8002fe8 <HAL_GPIO_Init+0x2e4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6613      	str	r3, [r2, #96]	; 0x60
 8002e84:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_GPIO_Init+0x2e4>)
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e90:	4a56      	ldr	r2, [pc, #344]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eba:	d01f      	beq.n	8002efc <HAL_GPIO_Init+0x1f8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d019      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_GPIO_Init+0x2f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_GPIO_Init+0x1f0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a4a      	ldr	r2, [pc, #296]	; (8002ff8 <HAL_GPIO_Init+0x2f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_GPIO_Init+0x1ec>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <HAL_GPIO_Init+0x2f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <HAL_GPIO_Init+0x1e8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a48      	ldr	r2, [pc, #288]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_GPIO_Init+0x1e4>
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	e00a      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ee8:	2306      	movs	r3, #6
 8002eea:	e008      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e006      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e004      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e002      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002efc:	2300      	movs	r3, #0
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	f002 0203 	and.w	r2, r2, #3
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	4093      	lsls	r3, r2
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0e:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f40:	4a30      	ldr	r2, [pc, #192]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6a:	4a26      	ldr	r2, [pc, #152]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fbe:	4a11      	ldr	r2, [pc, #68]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f ae9d 	bne.w	8002d14 <HAL_GPIO_Init+0x10>
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	48000400 	.word	0x48000400
 8002ff4:	48000800 	.word	0x48000800
 8002ff8:	48000c00 	.word	0x48000c00
 8002ffc:	48001000 	.word	0x48001000
 8003000:	48001400 	.word	0x48001400
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d141      	bne.n	800309a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d131      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302a:	4a46      	ldr	r2, [pc, #280]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a41      	ldr	r2, [pc, #260]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2232      	movs	r2, #50	; 0x32
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305a:	e002      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	4b38      	ldr	r3, [pc, #224]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d102      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f2      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d158      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e057      	b.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a2d      	ldr	r2, [pc, #180]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003098:	e04d      	b.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d141      	bne.n	8003126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d131      	bne.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b6:	4a23      	ldr	r2, [pc, #140]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2232      	movs	r2, #50	; 0x32
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9b      	lsrs	r3, r3, #18
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e6:	e002      	b.n	80030ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d102      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f2      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d112      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e011      	b.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003124:	e007      	b.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003134:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40007000 	.word	0x40007000
 8003148:	20000000 	.word	0x20000000
 800314c:	431bde83 	.word	0x431bde83

08003150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e306      	b.n	8003770 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d075      	beq.n	800325a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4b97      	ldr	r3, [pc, #604]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d102      	bne.n	800318e <HAL_RCC_OscConfig+0x3e>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b03      	cmp	r3, #3
 800318c:	d002      	beq.n	8003194 <HAL_RCC_OscConfig+0x44>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d10b      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	4b8d      	ldr	r3, [pc, #564]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05b      	beq.n	8003258 <HAL_RCC_OscConfig+0x108>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d157      	bne.n	8003258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e2e1      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x74>
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a84      	ldr	r2, [pc, #528]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031ce:	4b7f      	ldr	r3, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031e8:	4b78      	ldr	r3, [pc, #480]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a77      	ldr	r2, [pc, #476]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a74      	ldr	r2, [pc, #464]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe f9b4 	bl	8001574 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe f9b0 	bl	8001574 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e2a6      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xc0>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe f9a0 	bl	8001574 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe f99c 	bl	8001574 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e292      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	4b60      	ldr	r3, [pc, #384]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0xe8>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d075      	beq.n	8003352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003266:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d102      	bne.n	8003286 <HAL_RCC_OscConfig+0x136>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d002      	beq.n	800328c <HAL_RCC_OscConfig+0x13c>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11f      	bne.n	80032cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x154>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e265      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4946      	ldr	r1, [pc, #280]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <HAL_RCC_OscConfig+0x280>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe f90d 	bl	80014dc <HAL_InitTick>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d043      	beq.n	8003350 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e251      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3c      	ldr	r2, [pc, #240]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f948 	bl	8001574 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fe f944 	bl	8001574 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e23a      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	061b      	lsls	r3, r3, #24
 8003314:	492d      	ldr	r1, [pc, #180]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
 800331a:	e01a      	b.n	8003352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f924 	bl	8001574 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003330:	f7fe f920 	bl	8001574 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e216      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x1e0>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d041      	beq.n	80033e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fe f8fd 	bl	8001574 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe f8f9 	bl	8001574 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1ef      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ef      	beq.n	800337e <HAL_RCC_OscConfig+0x22e>
 800339e:	e020      	b.n	80033e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe f8e0 	bl	8001574 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b6:	e00d      	b.n	80033d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe f8dc 	bl	8001574 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d906      	bls.n	80033d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1d2      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ea      	bne.n	80033b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f4:	4b84      	ldr	r3, [pc, #528]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_OscConfig+0x2b4>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x2b6>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b7f      	ldr	r3, [pc, #508]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	4a7e      	ldr	r2, [pc, #504]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	6593      	str	r3, [r2, #88]	; 0x58
 8003416:	4b7c      	ldr	r3, [pc, #496]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	4b79      	ldr	r3, [pc, #484]	; (800360c <HAL_RCC_OscConfig+0x4bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x4bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x4bc>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7fe f899 	bl	8001574 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7fe f895 	bl	8001574 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e18b      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003458:	4b6c      	ldr	r3, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x4bc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d108      	bne.n	800347e <HAL_RCC_OscConfig+0x32e>
 800346c:	4b66      	ldr	r3, [pc, #408]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a65      	ldr	r2, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	e024      	b.n	80034c8 <HAL_RCC_OscConfig+0x378>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d110      	bne.n	80034a8 <HAL_RCC_OscConfig+0x358>
 8003486:	4b60      	ldr	r3, [pc, #384]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003496:	4b5c      	ldr	r3, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a6:	e00f      	b.n	80034c8 <HAL_RCC_OscConfig+0x378>
 80034a8:	4b57      	ldr	r3, [pc, #348]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	4a56      	ldr	r2, [pc, #344]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe f850 	bl	8001574 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe f84c 	bl	8001574 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e140      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCC_OscConfig+0x388>
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe f839 	bl	8001574 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fe f835 	bl	8001574 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e129      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ed      	bne.n	8003506 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800352a:	7ffb      	ldrb	r3, [r7, #31]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01c      	beq.n	800358a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe f808 	bl	8001574 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003568:	f7fe f804 	bl	8001574 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0fa      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <HAL_RCC_OscConfig+0x418>
 8003588:	e01b      	b.n	80035c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd ffeb 	bl	8001574 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a2:	f7fd ffe7 	bl	8001574 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0dd      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ef      	bne.n	80035a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80d1 	beq.w	800376e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	f000 808b 	beq.w	80036f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d15e      	bne.n	80036a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd ffc1 	bl	8001574 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	e00c      	b.n	8003610 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd ffbd 	bl	8001574 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d905      	bls.n	8003610 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0b3      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ec      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361c:	4b56      	ldr	r3, [pc, #344]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_OscConfig+0x62c>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6a11      	ldr	r1, [r2, #32]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362c:	3a01      	subs	r2, #1
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003636:	0212      	lsls	r2, r2, #8
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800363e:	0852      	lsrs	r2, r2, #1
 8003640:	3a01      	subs	r2, #1
 8003642:	0552      	lsls	r2, r2, #21
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800364a:	0852      	lsrs	r2, r2, #1
 800364c:	3a01      	subs	r2, #1
 800364e:	0652      	lsls	r2, r2, #25
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003656:	06d2      	lsls	r2, r2, #27
 8003658:	430a      	orrs	r2, r1
 800365a:	4947      	ldr	r1, [pc, #284]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b45      	ldr	r3, [pc, #276]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a44      	ldr	r2, [pc, #272]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd ff7c 	bl	8001574 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd ff78 	bl	8001574 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e06e      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x530>
 800369e:	e066      	b.n	800376e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b35      	ldr	r3, [pc, #212]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd ff54 	bl	8001574 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd ff50 	bl	8001574 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e046      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e2:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x580>
 80036ee:	e03e      	b.n	800376e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e039      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036fc:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_RCC_OscConfig+0x628>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0203 	and.w	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	429a      	cmp	r2, r3
 800370e:	d12c      	bne.n	800376a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d123      	bne.n	800376a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11b      	bne.n	800376a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d113      	bne.n	800376a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d109      	bne.n	800376a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	019f800c 	.word	0x019f800c

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e11e      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d910      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b8e      	ldr	r3, [pc, #568]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 020f 	bic.w	r2, r3, #15
 80037ae:	498c      	ldr	r1, [pc, #560]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b8a      	ldr	r3, [pc, #552]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e106      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d073      	beq.n	80038bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d129      	bne.n	8003830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037dc:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f4      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037ec:	f000 f99e 	bl	8003b2c <RCC_GetSysClockFreqFromPLLSource>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_RCC_ClockConfig+0x268>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d93f      	bls.n	800387a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fa:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d033      	beq.n	800387a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d12f      	bne.n	800387a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800381a:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e024      	b.n	800387a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0c6      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0be      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003858:	f000 f8ce 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800385c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4a61      	ldr	r2, [pc, #388]	; (80039e8 <HAL_RCC_ClockConfig+0x268>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d909      	bls.n	800387a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003866:	4b5f      	ldr	r3, [pc, #380]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	4a5d      	ldr	r2, [pc, #372]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4957      	ldr	r1, [pc, #348]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fd fe72 	bl	8001574 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fd fe6e 	bl	8001574 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e095      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038ec:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038f4:	4a3b      	ldr	r2, [pc, #236]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4936      	ldr	r1, [pc, #216]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
 800390e:	e008      	b.n	8003922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d105      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003916:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800391c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d21d      	bcs.n	800396c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 020f 	bic.w	r2, r3, #15
 8003938:	4929      	ldr	r1, [pc, #164]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003940:	f7fd fe18 	bl	8001574 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd fe14 	bl	8001574 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e03b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d1ed      	bne.n	8003948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4917      	ldr	r1, [pc, #92]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490f      	ldr	r1, [pc, #60]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039aa:	f000 f825 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490c      	ldr	r1, [pc, #48]	; (80039ec <HAL_RCC_ClockConfig+0x26c>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x270>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fd84 	bl	80014dc <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	04c4b400 	.word	0x04c4b400
 80039ec:	08005bc4 	.word	0x08005bc4
 80039f0:	20000000 	.word	0x20000000
 80039f4:	20000004 	.word	0x20000004

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e047      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a1c:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e03e      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d136      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3301      	adds	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a56:	68d2      	ldr	r2, [r2, #12]
 8003a58:	0a12      	lsrs	r2, r2, #8
 8003a5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
      break;
 8003a64:	e00c      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	0a12      	lsrs	r2, r2, #8
 8003a74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
      break;
 8003a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0e5b      	lsrs	r3, r3, #25
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003aa0:	693b      	ldr	r3, [r7, #16]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	007a1200 	.word	0x007a1200

08003abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad8:	f7ff fff0 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08005bd4 	.word	0x08005bd4

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b04:	f7ff ffda 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4904      	ldr	r1, [pc, #16]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	08005bd4 	.word	0x08005bd4

08003b2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d10c      	bne.n	8003b6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b5a:	68d2      	ldr	r2, [r2, #12]
 8003b5c:	0a12      	lsrs	r2, r2, #8
 8003b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
    break;
 8003b68:	e00c      	b.n	8003b84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	0a12      	lsrs	r2, r2, #8
 8003b78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    break;
 8003b82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0e5b      	lsrs	r3, r3, #25
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b9e:	687b      	ldr	r3, [r7, #4]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	007a1200 	.word	0x007a1200
 8003bb4:	00f42400 	.word	0x00f42400

08003bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8098 	beq.w	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a39      	ldr	r2, [pc, #228]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fcb1 	bl	8001574 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c14:	e009      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd fcad 	bl	8001574 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d902      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	74fb      	strb	r3, [r7, #19]
        break;
 8003c28:	e005      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ef      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d159      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01e      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d019      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd fc6d 	bl	8001574 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fd fc69 	bl	8001574 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d902      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	74fb      	strb	r3, [r7, #19]
            break;
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ec      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf4:	7c7b      	ldrb	r3, [r7, #17]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4aa5      	ldr	r2, [pc, #660]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d12:	4ba0      	ldr	r3, [pc, #640]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f023 0203 	bic.w	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	499c      	ldr	r1, [pc, #624]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d34:	4b97      	ldr	r3, [pc, #604]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f023 020c 	bic.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4994      	ldr	r1, [pc, #592]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d56:	4b8f      	ldr	r3, [pc, #572]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	498b      	ldr	r1, [pc, #556]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d78:	4b86      	ldr	r3, [pc, #536]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4983      	ldr	r1, [pc, #524]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9a:	4b7e      	ldr	r3, [pc, #504]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	497a      	ldr	r1, [pc, #488]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dbc:	4b75      	ldr	r3, [pc, #468]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	4972      	ldr	r1, [pc, #456]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dde:	4b6d      	ldr	r3, [pc, #436]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4969      	ldr	r1, [pc, #420]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e00:	4b64      	ldr	r3, [pc, #400]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4961      	ldr	r1, [pc, #388]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b5c      	ldr	r3, [pc, #368]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	4958      	ldr	r1, [pc, #352]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	4950      	ldr	r1, [pc, #320]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e7c:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4942      	ldr	r1, [pc, #264]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb4:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4934      	ldr	r1, [pc, #208]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a2e      	ldr	r2, [pc, #184]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	4926      	ldr	r1, [pc, #152]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a20      	ldr	r2, [pc, #128]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4918      	ldr	r1, [pc, #96]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	490a      	ldr	r1, [pc, #40]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd f856 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 faa4 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e049      	b.n	80040ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f841 	bl	80040f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fa4d 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004122:	2302      	movs	r3, #2
 8004124:	e0ff      	b.n	8004326 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b14      	cmp	r3, #20
 8004132:	f200 80f0 	bhi.w	8004316 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004191 	.word	0x08004191
 8004140:	08004317 	.word	0x08004317
 8004144:	08004317 	.word	0x08004317
 8004148:	08004317 	.word	0x08004317
 800414c:	080041d1 	.word	0x080041d1
 8004150:	08004317 	.word	0x08004317
 8004154:	08004317 	.word	0x08004317
 8004158:	08004317 	.word	0x08004317
 800415c:	08004213 	.word	0x08004213
 8004160:	08004317 	.word	0x08004317
 8004164:	08004317 	.word	0x08004317
 8004168:	08004317 	.word	0x08004317
 800416c:	08004253 	.word	0x08004253
 8004170:	08004317 	.word	0x08004317
 8004174:	08004317 	.word	0x08004317
 8004178:	08004317 	.word	0x08004317
 800417c:	08004295 	.word	0x08004295
 8004180:	08004317 	.word	0x08004317
 8004184:	08004317 	.word	0x08004317
 8004188:	08004317 	.word	0x08004317
 800418c:	080042d5 	.word	0x080042d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa54 	bl	8004644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
      break;
 80041ce:	e0a5      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fac4 	bl	8004764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6999      	ldr	r1, [r3, #24]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	619a      	str	r2, [r3, #24]
      break;
 8004210:	e084      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fb2d 	bl	8004878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0208 	orr.w	r2, r2, #8
 800422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0204 	bic.w	r2, r2, #4
 800423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	61da      	str	r2, [r3, #28]
      break;
 8004250:	e064      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fb95 	bl	8004988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69d9      	ldr	r1, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	61da      	str	r2, [r3, #28]
      break;
 8004292:	e043      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fbfe 	bl	8004a9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0208 	orr.w	r2, r2, #8
 80042ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042d2:	e023      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fc42 	bl	8004b64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004314:	e002      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
      break;
 800431a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIM_ConfigClockSource+0x1c>
 8004348:	2302      	movs	r3, #2
 800434a:	e0de      	b.n	800450a <HAL_TIM_ConfigClockSource+0x1da>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800436a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 80a9 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 800438c:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_TIM_ConfigClockSource+0x1e4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f200 80ae 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004394:	4a60      	ldr	r2, [pc, #384]	; (8004518 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f000 80a1 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_TIM_ConfigClockSource+0x1e8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f200 80a6 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043a4:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_TIM_ConfigClockSource+0x1ec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f000 8099 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 80043ac:	4a5b      	ldr	r2, [pc, #364]	; (800451c <HAL_TIM_ConfigClockSource+0x1ec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f200 809e 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043b4:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_TIM_ConfigClockSource+0x1f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 8091 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 80043bc:	4a58      	ldr	r2, [pc, #352]	; (8004520 <HAL_TIM_ConfigClockSource+0x1f0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f200 8096 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043c8:	f000 8089 	beq.w	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 80043cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043d0:	f200 808e 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0x128>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043f0:	2b70      	cmp	r3, #112	; 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xfa>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80043f8:	2b60      	cmp	r3, #96	; 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x16e>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x14e>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x18e>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x1ae>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fc75 	bl	8004d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 fc5e 	bl	8004d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fbd0 	bl	8004c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	; 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc29 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fbef 	bl	8004c8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	; 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fc19 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fbb0 	bl	8004c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fc09 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 fc00 	bl	8004cee <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	00100070 	.word	0x00100070
 8004518:	00100040 	.word	0x00100040
 800451c:	00100030 	.word	0x00100030
 8004520:	00100020 	.word	0x00100020

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <TIM_Base_SetConfig+0x104>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a39      	ldr	r2, [pc, #228]	; (800462c <TIM_Base_SetConfig+0x108>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a38      	ldr	r2, [pc, #224]	; (8004630 <TIM_Base_SetConfig+0x10c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a37      	ldr	r2, [pc, #220]	; (8004634 <TIM_Base_SetConfig+0x110>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <TIM_Base_SetConfig+0x104>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d017      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_Base_SetConfig+0x108>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_Base_SetConfig+0x10c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <TIM_Base_SetConfig+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <TIM_Base_SetConfig+0x114>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <TIM_Base_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <TIM_Base_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <TIM_Base_SetConfig+0x104>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a11      	ldr	r2, [pc, #68]	; (8004634 <TIM_Base_SetConfig+0x110>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <TIM_Base_SetConfig+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0f      	ldr	r2, [pc, #60]	; (800463c <TIM_Base_SetConfig+0x118>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0xe8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <TIM_Base_SetConfig+0x11c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40013400 	.word	0x40013400
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800

08004644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 0302 	bic.w	r3, r3, #2
 8004690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <TIM_OC1_SetConfig+0x10c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2b      	ldr	r2, [pc, #172]	; (8004754 <TIM_OC1_SetConfig+0x110>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <TIM_OC1_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a29      	ldr	r2, [pc, #164]	; (800475c <TIM_OC1_SetConfig+0x118>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_OC1_SetConfig+0x11c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10c      	bne.n	80046de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0308 	bic.w	r3, r3, #8
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <TIM_OC1_SetConfig+0x10c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <TIM_OC1_SetConfig+0x110>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <TIM_OC1_SetConfig+0x114>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <TIM_OC1_SetConfig+0x118>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <TIM_OC1_SetConfig+0x11c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800

08004764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_OC2_SetConfig+0x100>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC2_SetConfig+0x6c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a27      	ldr	r2, [pc, #156]	; (8004868 <TIM_OC2_SetConfig+0x104>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10d      	bne.n	80047ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <TIM_OC2_SetConfig+0x100>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <TIM_OC2_SetConfig+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <TIM_OC2_SetConfig+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <TIM_OC2_SetConfig+0x10c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <TIM_OC2_SetConfig+0x110>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d113      	bne.n	800483c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <TIM_OC3_SetConfig+0xfc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC3_SetConfig+0x6a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <TIM_OC3_SetConfig+0x100>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10d      	bne.n	80048fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <TIM_OC3_SetConfig+0xfc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00f      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <TIM_OC3_SetConfig+0x100>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1a      	ldr	r2, [pc, #104]	; (800497c <TIM_OC3_SetConfig+0x104>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <TIM_OC3_SetConfig+0x108>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <TIM_OC3_SetConfig+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d113      	bne.n	800494e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <TIM_OC4_SetConfig+0x100>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_OC4_SetConfig+0x6c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <TIM_OC4_SetConfig+0x104>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <TIM_OC4_SetConfig+0x100>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00f      	beq.n	8004a38 <TIM_OC4_SetConfig+0xb0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <TIM_OC4_SetConfig+0x104>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <TIM_OC4_SetConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <TIM_OC4_SetConfig+0x108>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_OC4_SetConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <TIM_OC4_SetConfig+0x10c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC4_SetConfig+0xb0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <TIM_OC4_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d113      	bne.n	8004a60 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40013400 	.word	0x40013400
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800

08004a9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ae0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <TIM_OC5_SetConfig+0xb4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00f      	beq.n	8004b16 <TIM_OC5_SetConfig+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <TIM_OC5_SetConfig+0xb8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <TIM_OC5_SetConfig+0x7a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <TIM_OC5_SetConfig+0xbc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <TIM_OC5_SetConfig+0x7a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <TIM_OC5_SetConfig+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC5_SetConfig+0x7a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <TIM_OC5_SetConfig+0xc4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d109      	bne.n	8004b2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	051b      	lsls	r3, r3, #20
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <TIM_OC6_SetConfig+0xb8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00f      	beq.n	8004be0 <TIM_OC6_SetConfig+0x7c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <TIM_OC6_SetConfig+0xbc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC6_SetConfig+0x7c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <TIM_OC6_SetConfig+0xc0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC6_SetConfig+0x7c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <TIM_OC6_SetConfig+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC6_SetConfig+0x7c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <TIM_OC6_SetConfig+0xc8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d109      	bne.n	8004bf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40013400 	.word	0x40013400
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40014400 	.word	0x40014400
 8004c2c:	40014800 	.word	0x40014800

08004c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 030a 	bic.w	r3, r3, #10
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0210 	bic.w	r2, r3, #16
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f043 0307 	orr.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e065      	b.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d018      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d013      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00e      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40014000 	.word	0x40014000

08004e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e087      	b.n	8004f98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d106      	bne.n	8004f24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d126      	bne.n	8004f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	051b      	lsls	r3, r3, #20
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d106      	bne.n	8004f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40013400 	.word	0x40013400

08004fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e042      	b.n	8005044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fc f9ad 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2224      	movs	r2, #36	; 0x24
 8004fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f82c 	bl	800504c <UART_SetConfig>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e022      	b.n	8005044 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 faec 	bl	80055e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fb73 	bl	8005728 <UART_CheckIdleState>
 8005042:	4603      	mov	r3, r0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b08c      	sub	sp, #48	; 0x30
 8005052:	af00      	add	r7, sp, #0
 8005054:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	431a      	orrs	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	431a      	orrs	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	4313      	orrs	r3, r2
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4bab      	ldr	r3, [pc, #684]	; (8005328 <UART_SetConfig+0x2dc>)
 800507c:	4013      	ands	r3, r2
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005084:	430b      	orrs	r3, r1
 8005086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4aa0      	ldr	r2, [pc, #640]	; (800532c <UART_SetConfig+0x2e0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	4313      	orrs	r3, r2
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	f023 010f 	bic.w	r1, r3, #15
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a91      	ldr	r2, [pc, #580]	; (8005330 <UART_SetConfig+0x2e4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d125      	bne.n	800513c <UART_SetConfig+0xf0>
 80050f0:	4b90      	ldr	r3, [pc, #576]	; (8005334 <UART_SetConfig+0x2e8>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d81a      	bhi.n	8005134 <UART_SetConfig+0xe8>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0xb8>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005115 	.word	0x08005115
 8005108:	08005125 	.word	0x08005125
 800510c:	0800511d 	.word	0x0800511d
 8005110:	0800512d 	.word	0x0800512d
 8005114:	2301      	movs	r3, #1
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511a:	e0d6      	b.n	80052ca <UART_SetConfig+0x27e>
 800511c:	2302      	movs	r3, #2
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005122:	e0d2      	b.n	80052ca <UART_SetConfig+0x27e>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512a:	e0ce      	b.n	80052ca <UART_SetConfig+0x27e>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005132:	e0ca      	b.n	80052ca <UART_SetConfig+0x27e>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513a:	e0c6      	b.n	80052ca <UART_SetConfig+0x27e>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <UART_SetConfig+0x2ec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d138      	bne.n	80051b8 <UART_SetConfig+0x16c>
 8005146:	4b7b      	ldr	r3, [pc, #492]	; (8005334 <UART_SetConfig+0x2e8>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d82d      	bhi.n	80051b0 <UART_SetConfig+0x164>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x110>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005191 	.word	0x08005191
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b1 	.word	0x080051b1
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
 800517c:	08005199 	.word	0x08005199
 8005180:	080051b1 	.word	0x080051b1
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	2300      	movs	r3, #0
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e098      	b.n	80052ca <UART_SetConfig+0x27e>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e094      	b.n	80052ca <UART_SetConfig+0x27e>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e090      	b.n	80052ca <UART_SetConfig+0x27e>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e08c      	b.n	80052ca <UART_SetConfig+0x27e>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e088      	b.n	80052ca <UART_SetConfig+0x27e>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a5f      	ldr	r2, [pc, #380]	; (800533c <UART_SetConfig+0x2f0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d125      	bne.n	800520e <UART_SetConfig+0x1c2>
 80051c2:	4b5c      	ldr	r3, [pc, #368]	; (8005334 <UART_SetConfig+0x2e8>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051cc:	2b30      	cmp	r3, #48	; 0x30
 80051ce:	d016      	beq.n	80051fe <UART_SetConfig+0x1b2>
 80051d0:	2b30      	cmp	r3, #48	; 0x30
 80051d2:	d818      	bhi.n	8005206 <UART_SetConfig+0x1ba>
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d00a      	beq.n	80051ee <UART_SetConfig+0x1a2>
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d814      	bhi.n	8005206 <UART_SetConfig+0x1ba>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <UART_SetConfig+0x19a>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d008      	beq.n	80051f6 <UART_SetConfig+0x1aa>
 80051e4:	e00f      	b.n	8005206 <UART_SetConfig+0x1ba>
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ec:	e06d      	b.n	80052ca <UART_SetConfig+0x27e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f4:	e069      	b.n	80052ca <UART_SetConfig+0x27e>
 80051f6:	2304      	movs	r3, #4
 80051f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fc:	e065      	b.n	80052ca <UART_SetConfig+0x27e>
 80051fe:	2308      	movs	r3, #8
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005204:	e061      	b.n	80052ca <UART_SetConfig+0x27e>
 8005206:	2310      	movs	r3, #16
 8005208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520c:	e05d      	b.n	80052ca <UART_SetConfig+0x27e>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4b      	ldr	r2, [pc, #300]	; (8005340 <UART_SetConfig+0x2f4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0x218>
 8005218:	4b46      	ldr	r3, [pc, #280]	; (8005334 <UART_SetConfig+0x2e8>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005222:	2bc0      	cmp	r3, #192	; 0xc0
 8005224:	d016      	beq.n	8005254 <UART_SetConfig+0x208>
 8005226:	2bc0      	cmp	r3, #192	; 0xc0
 8005228:	d818      	bhi.n	800525c <UART_SetConfig+0x210>
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d00a      	beq.n	8005244 <UART_SetConfig+0x1f8>
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d814      	bhi.n	800525c <UART_SetConfig+0x210>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <UART_SetConfig+0x1f0>
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d008      	beq.n	800524c <UART_SetConfig+0x200>
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x210>
 800523c:	2300      	movs	r3, #0
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e042      	b.n	80052ca <UART_SetConfig+0x27e>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e03e      	b.n	80052ca <UART_SetConfig+0x27e>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e03a      	b.n	80052ca <UART_SetConfig+0x27e>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e036      	b.n	80052ca <UART_SetConfig+0x27e>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e032      	b.n	80052ca <UART_SetConfig+0x27e>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <UART_SetConfig+0x2e0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d12a      	bne.n	80052c4 <UART_SetConfig+0x278>
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <UART_SetConfig+0x2e8>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d01a      	beq.n	80052b4 <UART_SetConfig+0x268>
 800527e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005282:	d81b      	bhi.n	80052bc <UART_SetConfig+0x270>
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d00c      	beq.n	80052a4 <UART_SetConfig+0x258>
 800528a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528e:	d815      	bhi.n	80052bc <UART_SetConfig+0x270>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <UART_SetConfig+0x250>
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d008      	beq.n	80052ac <UART_SetConfig+0x260>
 800529a:	e00f      	b.n	80052bc <UART_SetConfig+0x270>
 800529c:	2300      	movs	r3, #0
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a2:	e012      	b.n	80052ca <UART_SetConfig+0x27e>
 80052a4:	2302      	movs	r3, #2
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052aa:	e00e      	b.n	80052ca <UART_SetConfig+0x27e>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b2:	e00a      	b.n	80052ca <UART_SetConfig+0x27e>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ba:	e006      	b.n	80052ca <UART_SetConfig+0x27e>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c2:	e002      	b.n	80052ca <UART_SetConfig+0x27e>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a17      	ldr	r2, [pc, #92]	; (800532c <UART_SetConfig+0x2e0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	f040 80a8 	bne.w	8005426 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d834      	bhi.n	8005348 <UART_SetConfig+0x2fc>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x298>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005349 	.word	0x08005349
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005349 	.word	0x08005349
 80052f4:	08005317 	.word	0x08005317
 80052f8:	08005349 	.word	0x08005349
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005349 	.word	0x08005349
 8005304:	0800531f 	.word	0x0800531f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe fbe4 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 800530c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800530e:	e021      	b.n	8005354 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <UART_SetConfig+0x2f8>)
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005314:	e01e      	b.n	8005354 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005316:	f7fe fb6f 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800531c:	e01a      	b.n	8005354 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005324:	e016      	b.n	8005354 <UART_SetConfig+0x308>
 8005326:	bf00      	nop
 8005328:	cfff69f3 	.word	0xcfff69f3
 800532c:	40008000 	.word	0x40008000
 8005330:	40013800 	.word	0x40013800
 8005334:	40021000 	.word	0x40021000
 8005338:	40004400 	.word	0x40004400
 800533c:	40004800 	.word	0x40004800
 8005340:	40004c00 	.word	0x40004c00
 8005344:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005352:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 812a 	beq.w	80055b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	4a9e      	ldr	r2, [pc, #632]	; (80055dc <UART_SetConfig+0x590>)
 8005362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005366:	461a      	mov	r2, r3
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	fbb3 f3f2 	udiv	r3, r3, r2
 800536e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d305      	bcc.n	800538c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005392:	e10d      	b.n	80055b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	2200      	movs	r2, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	4a8e      	ldr	r2, [pc, #568]	; (80055dc <UART_SetConfig+0x590>)
 80053a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053b6:	f7fa ff2f 	bl	8000218 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	020b      	lsls	r3, r1, #8
 80053cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053d0:	0202      	lsls	r2, r0, #8
 80053d2:	6979      	ldr	r1, [r7, #20]
 80053d4:	6849      	ldr	r1, [r1, #4]
 80053d6:	0849      	lsrs	r1, r1, #1
 80053d8:	2000      	movs	r0, #0
 80053da:	460c      	mov	r4, r1
 80053dc:	4605      	mov	r5, r0
 80053de:	eb12 0804 	adds.w	r8, r2, r4
 80053e2:	eb43 0905 	adc.w	r9, r3, r5
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	469a      	mov	sl, r3
 80053ee:	4693      	mov	fp, r2
 80053f0:	4652      	mov	r2, sl
 80053f2:	465b      	mov	r3, fp
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fa ff0e 	bl	8000218 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540a:	d308      	bcc.n	800541e <UART_SetConfig+0x3d2>
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005412:	d204      	bcs.n	800541e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	60da      	str	r2, [r3, #12]
 800541c:	e0c8      	b.n	80055b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005424:	e0c4      	b.n	80055b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542e:	d167      	bne.n	8005500 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005434:	2b08      	cmp	r3, #8
 8005436:	d828      	bhi.n	800548a <UART_SetConfig+0x43e>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <UART_SetConfig+0x3f4>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	0800548b 	.word	0x0800548b
 8005450:	0800547b 	.word	0x0800547b
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800548b 	.word	0x0800548b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7fe fb36 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800546a:	e014      	b.n	8005496 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe fb48 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <UART_SetConfig+0x594>)
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fabd 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8089 	beq.w	80055b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <UART_SetConfig+0x590>)
 80054a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	441a      	add	r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d916      	bls.n	80054f8 <UART_SetConfig+0x4ac>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d212      	bcs.n	80054f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f023 030f 	bic.w	r3, r3, #15
 80054da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	8bfb      	ldrh	r3, [r7, #30]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	8bfa      	ldrh	r2, [r7, #30]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e05b      	b.n	80055b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054fe:	e057      	b.n	80055b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005504:	2b08      	cmp	r3, #8
 8005506:	d828      	bhi.n	800555a <UART_SetConfig+0x50e>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x4c4>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fe face 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800553a:	e014      	b.n	8005566 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fe fae0 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <UART_SetConfig+0x594>)
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe fa55 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800554e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005564:	bf00      	nop
    }

    if (pclk != 0U)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d021      	beq.n	80055b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <UART_SetConfig+0x590>)
 8005572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005576:	461a      	mov	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	fbb3 f2f2 	udiv	r2, r3, r2
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d909      	bls.n	80055aa <UART_SetConfig+0x55e>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d205      	bcs.n	80055aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e002      	b.n	80055b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3730      	adds	r7, #48	; 0x30
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	08005bdc 	.word	0x08005bdc
 80055e0:	00f42400 	.word	0x00f42400

080055e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01a      	beq.n	80056fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e2:	d10a      	bne.n	80056fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af02      	add	r7, sp, #8
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005738:	f7fb ff1c 	bl	8001574 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d10e      	bne.n	800576a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f82f 	bl	80057be <UART_WaitOnFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e025      	b.n	80057b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d10e      	bne.n	8005796 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f819 	bl	80057be <UART_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b09c      	sub	sp, #112	; 0x70
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ce:	e0a9      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	f000 80a5 	beq.w	8005924 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fb fecb 	bl	8001574 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80057ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d140      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005804:	667b      	str	r3, [r7, #100]	; 0x64
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005810:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800581c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	663b      	str	r3, [r7, #96]	; 0x60
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005842:	64ba      	str	r2, [r7, #72]	; 0x48
 8005844:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e069      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d051      	beq.n	8005924 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d149      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005898:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	613b      	str	r3, [r7, #16]
   return(result);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058ec:	623a      	str	r2, [r7, #32]
 80058ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	6a3a      	ldr	r2, [r7, #32]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e010      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	429a      	cmp	r2, r3
 8005940:	f43f af46 	beq.w	80057d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3770      	adds	r7, #112	; 0x70
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_UARTEx_DisableFifoMode+0x16>
 8005960:	2302      	movs	r3, #2
 8005962:	e027      	b.n	80059b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005992:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e02d      	b.n	8005a34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2224      	movs	r2, #36	; 0x24
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f84f 	bl	8005ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e02d      	b.n	8005ab0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2224      	movs	r2, #36	; 0x24
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f811 	bl	8005ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ad8:	e031      	b.n	8005b3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ada:	2308      	movs	r3, #8
 8005adc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	0e5b      	lsrs	r3, r3, #25
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	0f5b      	lsrs	r3, r3, #29
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
 8005b04:	7b3a      	ldrb	r2, [r7, #12]
 8005b06:	4911      	ldr	r1, [pc, #68]	; (8005b4c <UARTEx_SetNbDataToProcess+0x94>)
 8005b08:	5c8a      	ldrb	r2, [r1, r2]
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b0e:	7b3a      	ldrb	r2, [r7, #12]
 8005b10:	490f      	ldr	r1, [pc, #60]	; (8005b50 <UARTEx_SetNbDataToProcess+0x98>)
 8005b12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	7b7a      	ldrb	r2, [r7, #13]
 8005b24:	4909      	ldr	r1, [pc, #36]	; (8005b4c <UARTEx_SetNbDataToProcess+0x94>)
 8005b26:	5c8a      	ldrb	r2, [r1, r2]
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b2c:	7b7a      	ldrb	r2, [r7, #13]
 8005b2e:	4908      	ldr	r1, [pc, #32]	; (8005b50 <UARTEx_SetNbDataToProcess+0x98>)
 8005b30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08005bf4 	.word	0x08005bf4
 8005b50:	08005bfc 	.word	0x08005bfc

08005b54 <memset>:
 8005b54:	4402      	add	r2, r0
 8005b56:	4603      	mov	r3, r0
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <memset+0xa>
 8005b5c:	4770      	bx	lr
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <memset+0x4>

08005b64 <__libc_init_array>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	4d0d      	ldr	r5, [pc, #52]	; (8005b9c <__libc_init_array+0x38>)
 8005b68:	4c0d      	ldr	r4, [pc, #52]	; (8005ba0 <__libc_init_array+0x3c>)
 8005b6a:	1b64      	subs	r4, r4, r5
 8005b6c:	10a4      	asrs	r4, r4, #2
 8005b6e:	2600      	movs	r6, #0
 8005b70:	42a6      	cmp	r6, r4
 8005b72:	d109      	bne.n	8005b88 <__libc_init_array+0x24>
 8005b74:	4d0b      	ldr	r5, [pc, #44]	; (8005ba4 <__libc_init_array+0x40>)
 8005b76:	4c0c      	ldr	r4, [pc, #48]	; (8005ba8 <__libc_init_array+0x44>)
 8005b78:	f000 f818 	bl	8005bac <_init>
 8005b7c:	1b64      	subs	r4, r4, r5
 8005b7e:	10a4      	asrs	r4, r4, #2
 8005b80:	2600      	movs	r6, #0
 8005b82:	42a6      	cmp	r6, r4
 8005b84:	d105      	bne.n	8005b92 <__libc_init_array+0x2e>
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8c:	4798      	blx	r3
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7ee      	b.n	8005b70 <__libc_init_array+0xc>
 8005b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b96:	4798      	blx	r3
 8005b98:	3601      	adds	r6, #1
 8005b9a:	e7f2      	b.n	8005b82 <__libc_init_array+0x1e>
 8005b9c:	08005c0c 	.word	0x08005c0c
 8005ba0:	08005c0c 	.word	0x08005c0c
 8005ba4:	08005c0c 	.word	0x08005c0c
 8005ba8:	08005c10 	.word	0x08005c10

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
