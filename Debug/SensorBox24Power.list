
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007404  08007404  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007404  08007404  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007404  08007404  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00008404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800740c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  2000000c  08007418  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007418  00009698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015de2  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2f  00000000  00000000  0001ee1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00021950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  00022d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020728  00000000  00000000  00023cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001521b  00000000  00000000  00044414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da537  00000000  00000000  0005962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00133bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00139210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080073cc 	.word	0x080073cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080073cc 	.word	0x080073cc

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(check_bit(PWM_out_enable,1) != 0){
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <set_pwm_duty_cycle+0x84>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe64 	bl	8000ef4 <check_bit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d010      	beq.n	8000254 <set_pwm_duty_cycle+0x3c>
		PWM_speed[0] = (PWM_width[0] * 40)/100;
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4613      	mov	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4a18      	ldr	r2, [pc, #96]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 8000242:	fb82 1203 	smull	r1, r2, r2, r3
 8000246:	1152      	asrs	r2, r2, #5
 8000248:	17db      	asrs	r3, r3, #31
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000250:	801a      	strh	r2, [r3, #0]
 8000252:	e002      	b.n	800025a <set_pwm_duty_cycle+0x42>
	}else{
		PWM_speed[0] = 0;
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
	}
	if(check_bit(PWM_out_enable,0) != 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <set_pwm_duty_cycle+0x84>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fe47 	bl	8000ef4 <check_bit>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d010      	beq.n	800028e <set_pwm_duty_cycle+0x76>
		PWM_speed[1] = (PWM_width[1] * 40)/100;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 800026e:	885b      	ldrh	r3, [r3, #2]
 8000270:	461a      	mov	r2, r3
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 800027c:	fb82 1203 	smull	r1, r2, r2, r3
 8000280:	1152      	asrs	r2, r2, #5
 8000282:	17db      	asrs	r3, r3, #31
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	b29a      	uxth	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 800028a:	805a      	strh	r2, [r3, #2]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
	}*/
}
 800028c:	e002      	b.n	8000294 <set_pwm_duty_cycle+0x7c>
		PWM_speed[1] = 0;
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	805a      	strh	r2, [r3, #2]
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000633 	.word	0x20000633
 80002a0:	20000638 	.word	0x20000638
 80002a4:	51eb851f 	.word	0x51eb851f
 80002a8:	2000063c 	.word	0x2000063c

080002ac <set_pwm_freq>:

void set_pwm_freq(TIM_HandleTypeDef *htim){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
		 if (HAL_TIM_Base_Init(htim) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}*/
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80002c4:	f000 f802 	bl	80002cc <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <Config_1>:

void Config_1(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	CAN_ID = 17;
 80002d0:	4b3c      	ldr	r3, [pc, #240]	@ (80003c4 <Config_1+0xf8>)
 80002d2:	2211      	movs	r2, #17
 80002d4:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 80002d6:	4b3c      	ldr	r3, [pc, #240]	@ (80003c8 <Config_1+0xfc>)
 80002d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002dc:	801a      	strh	r2, [r3, #0]

	//OUTPUT 1 in mA
	Warning_Current[0] = 1900;
 80002de:	4b3b      	ldr	r3, [pc, #236]	@ (80003cc <Config_1+0x100>)
 80002e0:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002e4:	801a      	strh	r2, [r3, #0]
	Over_Current[0] = 2050;
 80002e6:	4b3a      	ldr	r3, [pc, #232]	@ (80003d0 <Config_1+0x104>)
 80002e8:	f640 0202 	movw	r2, #2050	@ 0x802
 80002ec:	801a      	strh	r2, [r3, #0]
	Under_Current[0] = 00;
 80002ee:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <Config_1+0x108>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	Warning_Current[1] = 1900;
 80002f4:	4b35      	ldr	r3, [pc, #212]	@ (80003cc <Config_1+0x100>)
 80002f6:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002fa:	805a      	strh	r2, [r3, #2]
	Over_Current[1] = 2050;
 80002fc:	4b34      	ldr	r3, [pc, #208]	@ (80003d0 <Config_1+0x104>)
 80002fe:	f640 0202 	movw	r2, #2050	@ 0x802
 8000302:	805a      	strh	r2, [r3, #2]
	Under_Current[1] = 00;
 8000304:	4b33      	ldr	r3, [pc, #204]	@ (80003d4 <Config_1+0x108>)
 8000306:	2200      	movs	r2, #0
 8000308:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	Warning_Current[2] = 1900;
 800030a:	4b30      	ldr	r3, [pc, #192]	@ (80003cc <Config_1+0x100>)
 800030c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000310:	809a      	strh	r2, [r3, #4]
	Over_Current[2] = 2050;
 8000312:	4b2f      	ldr	r3, [pc, #188]	@ (80003d0 <Config_1+0x104>)
 8000314:	f640 0202 	movw	r2, #2050	@ 0x802
 8000318:	809a      	strh	r2, [r3, #4]
	Under_Current[2] = 00;
 800031a:	4b2e      	ldr	r3, [pc, #184]	@ (80003d4 <Config_1+0x108>)
 800031c:	2200      	movs	r2, #0
 800031e:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	Warning_Current[3] = 1900;
 8000320:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <Config_1+0x100>)
 8000322:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000326:	80da      	strh	r2, [r3, #6]
	Over_Current[3] = 2050;
 8000328:	4b29      	ldr	r3, [pc, #164]	@ (80003d0 <Config_1+0x104>)
 800032a:	f640 0202 	movw	r2, #2050	@ 0x802
 800032e:	80da      	strh	r2, [r3, #6]
	Under_Current[3] = 00;
 8000330:	4b28      	ldr	r3, [pc, #160]	@ (80003d4 <Config_1+0x108>)
 8000332:	2200      	movs	r2, #0
 8000334:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	Warning_Current[4] = 1900;
 8000336:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <Config_1+0x100>)
 8000338:	f240 726c 	movw	r2, #1900	@ 0x76c
 800033c:	811a      	strh	r2, [r3, #8]
	Over_Current[4] = 2050;
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <Config_1+0x104>)
 8000340:	f640 0202 	movw	r2, #2050	@ 0x802
 8000344:	811a      	strh	r2, [r3, #8]
	Under_Current[4] = 00;
 8000346:	4b23      	ldr	r3, [pc, #140]	@ (80003d4 <Config_1+0x108>)
 8000348:	2200      	movs	r2, #0
 800034a:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	Warning_Current[5] = 1900;
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <Config_1+0x100>)
 800034e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000352:	815a      	strh	r2, [r3, #10]
	Over_Current[5] = 2050;
 8000354:	4b1e      	ldr	r3, [pc, #120]	@ (80003d0 <Config_1+0x104>)
 8000356:	f640 0202 	movw	r2, #2050	@ 0x802
 800035a:	815a      	strh	r2, [r3, #10]
	Under_Current[5] = 00;
 800035c:	4b1d      	ldr	r3, [pc, #116]	@ (80003d4 <Config_1+0x108>)
 800035e:	2200      	movs	r2, #0
 8000360:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	Warning_Current[6] = 1900;
 8000362:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <Config_1+0x100>)
 8000364:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000368:	819a      	strh	r2, [r3, #12]
	Over_Current[6] = 2050;
 800036a:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <Config_1+0x104>)
 800036c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000370:	819a      	strh	r2, [r3, #12]
	Under_Current[6] = 00;
 8000372:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <Config_1+0x108>)
 8000374:	2200      	movs	r2, #0
 8000376:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	Warning_Current[7] = 1900;
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <Config_1+0x100>)
 800037a:	f240 726c 	movw	r2, #1900	@ 0x76c
 800037e:	81da      	strh	r2, [r3, #14]
	Over_Current[7] = 2050;
 8000380:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <Config_1+0x104>)
 8000382:	f640 0202 	movw	r2, #2050	@ 0x802
 8000386:	81da      	strh	r2, [r3, #14]
	Under_Current[7] = 00;
 8000388:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <Config_1+0x108>)
 800038a:	2200      	movs	r2, #0
 800038c:	81da      	strh	r2, [r3, #14]

	//For analog node
	Warning_Current[8] = 2000;
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <Config_1+0x100>)
 8000390:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000394:	821a      	strh	r2, [r3, #16]
	Over_Current[8] = 2000;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <Config_1+0x104>)
 8000398:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800039c:	821a      	strh	r2, [r3, #16]
	Under_Current[8] = 0;
 800039e:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <Config_1+0x108>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	821a      	strh	r2, [r3, #16]

	Default_Switch_State = 0b11011111; //each bit represent one output [8,7,6,5,4,3,2,1]
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <Config_1+0x10c>)
 80003a6:	22df      	movs	r2, #223	@ 0xdf
 80003a8:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b11;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <Config_1+0x110>)
 80003ac:	2203      	movs	r2, #3
 80003ae:	701a      	strb	r2, [r3, #0]

	//Duty cycle 0-100%
	PWM_width[0] = 10;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <Config_1+0x114>)
 80003b2:	220a      	movs	r2, #10
 80003b4:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 10;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <Config_1+0x114>)
 80003b8:	220a      	movs	r2, #10
 80003ba:	805a      	strh	r2, [r3, #2]

	//set_pwm_freq(&htim1);
	//set_pwm_freq(&htim2);

	output();
 80003bc:	f000 f8c2 	bl	8000544 <output>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000640 	.word	0x20000640
 80003c8:	20000642 	.word	0x20000642
 80003cc:	200005fc 	.word	0x200005fc
 80003d0:	2000060c 	.word	0x2000060c
 80003d4:	2000061c 	.word	0x2000061c
 80003d8:	20000632 	.word	0x20000632
 80003dc:	20000633 	.word	0x20000633
 80003e0:	20000638 	.word	0x20000638

080003e4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d01d      	beq.n	8000434 <HAL_FDCAN_RxFifo0Callback+0x50>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80003f8:	4b10      	ldr	r3, [pc, #64]	@ (800043c <HAL_FDCAN_RxFifo0Callback+0x58>)
 80003fa:	4a11      	ldr	r2, [pc, #68]	@ (8000440 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80003fc:	2140      	movs	r1, #64	@ 0x40
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f003 fec8 	bl	8004194 <HAL_FDCAN_GetRxMessage>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800040a:	f001 fadd 	bl	80019c8 <Error_Handler>
 800040e:	e007      	b.n	8000420 <HAL_FDCAN_RxFifo0Callback+0x3c>
		}else{
			if(RxHeader.Identifier == CAN_ID){
 8000410:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	4293      	cmp	r3, r2
 800041a:	d101      	bne.n	8000420 <HAL_FDCAN_RxFifo0Callback+0x3c>
				decode();
 800041c:	f000 f936 	bl	800068c <decode>
			}
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f003 ffcf 	bl	80043c8 <HAL_FDCAN_ActivateNotification>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <HAL_FDCAN_RxFifo0Callback+0x50>
		{
			/* Notification Error */
			Error_Handler();
 8000430:	f001 faca 	bl	80019c8 <Error_Handler>
		}
	}
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000028 	.word	0x20000028
 8000440:	20000668 	.word	0x20000668
 8000444:	20000640 	.word	0x20000640

08000448 <CanSend>:

void CanSend(uint8_t *TxData){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000450:	e006      	b.n	8000460 <CanSend+0x18>
		Error_Handler();
 8000452:	f001 fab9 	bl	80019c8 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 8000456:	2200      	movs	r2, #0
 8000458:	2101      	movs	r1, #1
 800045a:	480a      	ldr	r0, [pc, #40]	@ (8000484 <CanSend+0x3c>)
 800045c:	f004 fc7c 	bl	8004d58 <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <CanSend+0x40>)
 8000462:	f003 ff9f 	bl	80043a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d007      	beq.n	800047c <CanSend+0x34>
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4907      	ldr	r1, [pc, #28]	@ (800048c <CanSend+0x44>)
 8000470:	4805      	ldr	r0, [pc, #20]	@ (8000488 <CanSend+0x40>)
 8000472:	f003 fe4b 	bl	800410c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1ea      	bne.n	8000452 <CanSend+0xa>
	}
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	48000400 	.word	0x48000400
 8000488:	20000110 	.word	0x20000110
 800048c:	20000644 	.word	0x20000644

08000490 <CAN_switch_state>:

void CAN_switch_state(uint8_t values){
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData1[5];
	uint8_t TxData2[5];

	if(can_select == 0){
 800049a:	4b28      	ldr	r3, [pc, #160]	@ (800053c <CAN_switch_state+0xac>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d121      	bne.n	80004e6 <CAN_switch_state+0x56>
		TxData1[0] = 11;
 80004a2:	230b      	movs	r3, #11
 80004a4:	743b      	strb	r3, [r7, #16]
		for(int i = 1; i < 5;i++){
 80004a6:	2301      	movs	r3, #1
 80004a8:	61fb      	str	r3, [r7, #28]
 80004aa:	e014      	b.n	80004d6 <CAN_switch_state+0x46>
			TxData1[i] = check_bit(Default_Switch_State,i-1);
 80004ac:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <CAN_switch_state+0xb0>)
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3b01      	subs	r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	4610      	mov	r0, r2
 80004bc:	f000 fd1a 	bl	8000ef4 <check_bit>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4619      	mov	r1, r3
 80004c4:	f107 0210 	add.w	r2, r7, #16
 80004c8:	69fb      	ldr	r3, [r7, #28]
 80004ca:	4413      	add	r3, r2
 80004cc:	460a      	mov	r2, r1
 80004ce:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	3301      	adds	r3, #1
 80004d4:	61fb      	str	r3, [r7, #28]
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	2b04      	cmp	r3, #4
 80004da:	dde7      	ble.n	80004ac <CAN_switch_state+0x1c>
		}
		CanSend(TxData1);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ffb1 	bl	8000448 <CanSend>
	}
	if(can_select == 1){
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <CAN_switch_state+0xac>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d121      	bne.n	8000532 <CAN_switch_state+0xa2>
		TxData2[0] = 12;
 80004ee:	230c      	movs	r3, #12
 80004f0:	723b      	strb	r3, [r7, #8]
		for(int i = 1; i < 5;i++){
 80004f2:	2301      	movs	r3, #1
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	e014      	b.n	8000522 <CAN_switch_state+0x92>
			TxData2[i] = check_bit(Default_Switch_State,i+3);
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <CAN_switch_state+0xb0>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	3303      	adds	r3, #3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	4610      	mov	r0, r2
 8000508:	f000 fcf4 	bl	8000ef4 <check_bit>
 800050c:	4603      	mov	r3, r0
 800050e:	4619      	mov	r1, r3
 8000510:	f107 0208 	add.w	r2, r7, #8
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	3301      	adds	r3, #1
 8000520:	61bb      	str	r3, [r7, #24]
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	2b04      	cmp	r3, #4
 8000526:	dde7      	ble.n	80004f8 <CAN_switch_state+0x68>
		}
		CanSend(TxData2);
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff8b 	bl	8000448 <CanSend>
	}
}
 8000532:	bf00      	nop
 8000534:	3720      	adds	r7, #32
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000062e 	.word	0x2000062e
 8000540:	20000632 	.word	0x20000632

08000544 <output>:



void output(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
 8000556:	e065      	b.n	8000624 <output+0xe0>
		bit = check_bit(Default_Switch_State, i);
 8000558:	4b36      	ldr	r3, [pc, #216]	@ (8000634 <output+0xf0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fcc7 	bl	8000ef4 <check_bit>
 8000566:	4603      	mov	r3, r0
 8000568:	71bb      	strb	r3, [r7, #6]
		switch(i){
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b07      	cmp	r3, #7
 800056e:	d853      	bhi.n	8000618 <output+0xd4>
 8000570:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <output+0x34>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000599 	.word	0x08000599
 800057c:	080005a7 	.word	0x080005a7
 8000580:	080005b9 	.word	0x080005b9
 8000584:	080005cb 	.word	0x080005cb
 8000588:	080005dd 	.word	0x080005dd
 800058c:	080005ed 	.word	0x080005ed
 8000590:	080005fd 	.word	0x080005fd
 8000594:	0800060b 	.word	0x0800060b
		case 0:
			HAL_GPIO_WritePin(GPIOB,IN0_Pin,bit);
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	461a      	mov	r2, r3
 800059c:	2108      	movs	r1, #8
 800059e:	4826      	ldr	r0, [pc, #152]	@ (8000638 <output+0xf4>)
 80005a0:	f004 fbda 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005a4:	e03b      	b.n	800061e <output+0xda>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	461a      	mov	r2, r3
 80005aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f004 fbd1 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005b6:	e032      	b.n	800061e <output+0xda>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	461a      	mov	r2, r3
 80005bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f004 fbc8 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005c8:	e029      	b.n	800061e <output+0xda>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f004 fbbf 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005da:	e020      	b.n	800061e <output+0xda>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	461a      	mov	r2, r3
 80005e0:	2110      	movs	r1, #16
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f004 fbb7 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005ea:	e018      	b.n	800061e <output+0xda>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2102      	movs	r1, #2
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f6:	f004 fbaf 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 80005fa:	e010      	b.n	800061e <output+0xda>
		case 6:
			HAL_GPIO_WritePin(GPIOB,IN2_2_Pin,bit);
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	461a      	mov	r2, r3
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <output+0xf4>)
 8000604:	f004 fba8 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 8000608:	e009      	b.n	800061e <output+0xda>
		case 7:
			HAL_GPIO_WritePin(GPIOB,IN3_2_Pin,bit);
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	461a      	mov	r2, r3
 800060e:	2110      	movs	r1, #16
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <output+0xf4>)
 8000612:	f004 fba1 	bl	8004d58 <HAL_GPIO_WritePin>
			break;
 8000616:	e002      	b.n	800061e <output+0xda>
		default:
			Error_Handler();
 8000618:	f001 f9d6 	bl	80019c8 <Error_Handler>
			break;
 800061c:	bf00      	nop
	for(i = 0; i < 8;i++){
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	3301      	adds	r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b07      	cmp	r3, #7
 8000628:	d996      	bls.n	8000558 <output+0x14>
		}
	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000632 	.word	0x20000632
 8000638:	48000400 	.word	0x48000400

0800063c <Over_current>:

void Over_current(uint8_t output_pin){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <Over_current+0x24>)
 8000648:	220f      	movs	r2, #15
 800064a:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <Over_current+0x24>)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <Over_current+0x24>)
 8000654:	f7ff fef8 	bl	8000448 <CanSend>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000030 	.word	0x20000030

08000664 <Warning_current>:

void Warning_current(uint8_t output_pin){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <Warning_current+0x24>)
 8000670:	220e      	movs	r2, #14
 8000672:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <Warning_current+0x24>)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <Warning_current+0x24>)
 800067c:	f7ff fee4 	bl	8000448 <CanSend>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000030 	.word	0x20000030

0800068c <decode>:
	TxData[0] = 13;
	TxData[1] = output_pin;
	CanSend(TxData);
}

void decode(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 8000690:	4b32      	ldr	r3, [pc, #200]	@ (800075c <decode+0xd0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d05e      	beq.n	8000756 <decode+0xca>
 8000698:	2b03      	cmp	r3, #3
 800069a:	dc59      	bgt.n	8000750 <decode+0xc4>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d002      	beq.n	80006a6 <decode+0x1a>
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d045      	beq.n	8000730 <decode+0xa4>
 80006a4:	e054      	b.n	8000750 <decode+0xc4>
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 80006a6:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <decode+0xd0>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d002      	beq.n	80006b4 <decode+0x28>
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d01d      	beq.n	80006ee <decode+0x62>
 80006b2:	e039      	b.n	8000728 <decode+0x9c>
		case 1:										//PUMPS
			switch(RxData[2]){
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <decode+0xd0>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d002      	beq.n	80006c2 <decode+0x36>
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d009      	beq.n	80006d4 <decode+0x48>
 80006c0:	e011      	b.n	80006e6 <decode+0x5a>
			case 1:
				PWM_width[0] = RxData[3];
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <decode+0xd0>)
 80006c4:	78db      	ldrb	r3, [r3, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <decode+0xd4>)
 80006ca:	801a      	strh	r2, [r3, #0]
				set_pwm_duty_cycle(&htim1);
 80006cc:	4825      	ldr	r0, [pc, #148]	@ (8000764 <decode+0xd8>)
 80006ce:	f7ff fda3 	bl	8000218 <set_pwm_duty_cycle>
				break;
 80006d2:	e00b      	b.n	80006ec <decode+0x60>
			case 2:
				PWM_Prescalers[0] = RxData[3];
 80006d4:	4b21      	ldr	r3, [pc, #132]	@ (800075c <decode+0xd0>)
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <decode+0xdc>)
 80006dc:	801a      	strh	r2, [r3, #0]
				set_pwm_freq(&htim1);
 80006de:	4821      	ldr	r0, [pc, #132]	@ (8000764 <decode+0xd8>)
 80006e0:	f7ff fde4 	bl	80002ac <set_pwm_freq>
				break;
 80006e4:	e002      	b.n	80006ec <decode+0x60>
			default:
				//decode_error();
				Error_Handler();
 80006e6:	f001 f96f 	bl	80019c8 <Error_Handler>
				break;
 80006ea:	bf00      	nop
			}
			break;
 80006ec:	e01f      	b.n	800072e <decode+0xa2>
		case 2:										//FANS
			switch(RxData[2]){
 80006ee:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <decode+0xd0>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d002      	beq.n	80006fc <decode+0x70>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d009      	beq.n	800070e <decode+0x82>
 80006fa:	e011      	b.n	8000720 <decode+0x94>
			case 1:
				PWM_width[1] = RxData[3];
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <decode+0xd0>)
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	461a      	mov	r2, r3
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <decode+0xd4>)
 8000704:	805a      	strh	r2, [r3, #2]
				set_pwm_duty_cycle(&htim2);
 8000706:	4819      	ldr	r0, [pc, #100]	@ (800076c <decode+0xe0>)
 8000708:	f7ff fd86 	bl	8000218 <set_pwm_duty_cycle>
				break;
 800070c:	e00b      	b.n	8000726 <decode+0x9a>
			case 2:
				PWM_Prescalers[1] = RxData[3];
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <decode+0xd0>)
 8000710:	78db      	ldrb	r3, [r3, #3]
 8000712:	461a      	mov	r2, r3
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <decode+0xdc>)
 8000716:	805a      	strh	r2, [r3, #2]
				set_pwm_freq(&htim2);
 8000718:	4814      	ldr	r0, [pc, #80]	@ (800076c <decode+0xe0>)
 800071a:	f7ff fdc7 	bl	80002ac <set_pwm_freq>
				break;
 800071e:	e002      	b.n	8000726 <decode+0x9a>
			default:
				//decode_error();
				Error_Handler();
 8000720:	f001 f952 	bl	80019c8 <Error_Handler>
				break;
 8000724:	bf00      	nop
			}
			break;
 8000726:	e002      	b.n	800072e <decode+0xa2>
		default:
			//decode_error(); //TODO: IMPLEMENT
			Error_Handler();
 8000728:	f001 f94e 	bl	80019c8 <Error_Handler>
			break;
 800072c:	bf00      	nop
		}
		break;
 800072e:	e013      	b.n	8000758 <decode+0xcc>
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <decode+0xe4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4a09      	ldr	r2, [pc, #36]	@ (800075c <decode+0xd0>)
 8000736:	7851      	ldrb	r1, [r2, #1]
 8000738:	4a08      	ldr	r2, [pc, #32]	@ (800075c <decode+0xd0>)
 800073a:	7892      	ldrb	r2, [r2, #2]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fbf5 	bl	8000f2c <set_bit>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <decode+0xe4>)
 8000748:	701a      	strb	r2, [r3, #0]
		output();
 800074a:	f7ff fefb 	bl	8000544 <output>
		break;
 800074e:	e003      	b.n	8000758 <decode+0xcc>
	case 3:
		//HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,RxData[1]);
		break;
	default:
		Error_Handler();
 8000750:	f001 f93a 	bl	80019c8 <Error_Handler>
		break;
 8000754:	e000      	b.n	8000758 <decode+0xcc>
		break;
 8000756:	bf00      	nop
	}
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	20000638 	.word	0x20000638
 8000764:	20000174 	.word	0x20000174
 8000768:	20000634 	.word	0x20000634
 800076c:	200001c0 	.word	0x200001c0
 8000770:	20000632 	.word	0x20000632

08000774 <Current_Sense_process>:



void Current_Sense_process(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	PROC[0] = IN1_1_Current_Sense[0];
 800077a:	4b86      	ldr	r3, [pc, #536]	@ (8000994 <Current_Sense_process+0x220>)
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b86      	ldr	r3, [pc, #536]	@ (8000998 <Current_Sense_process+0x224>)
 8000780:	801a      	strh	r2, [r3, #0]
	PROC[1] = IN2_1_Current_Sense[0];
 8000782:	4b86      	ldr	r3, [pc, #536]	@ (800099c <Current_Sense_process+0x228>)
 8000784:	881a      	ldrh	r2, [r3, #0]
 8000786:	4b84      	ldr	r3, [pc, #528]	@ (8000998 <Current_Sense_process+0x224>)
 8000788:	805a      	strh	r2, [r3, #2]
	PROC[2] = IN3_1_Current_Sense[0];
 800078a:	4b85      	ldr	r3, [pc, #532]	@ (80009a0 <Current_Sense_process+0x22c>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b82      	ldr	r3, [pc, #520]	@ (8000998 <Current_Sense_process+0x224>)
 8000790:	809a      	strh	r2, [r3, #4]
	PROC[3] = IN4_1_Current_Sense[0];
 8000792:	4b84      	ldr	r3, [pc, #528]	@ (80009a4 <Current_Sense_process+0x230>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	4b80      	ldr	r3, [pc, #512]	@ (8000998 <Current_Sense_process+0x224>)
 8000798:	80da      	strh	r2, [r3, #6]
	PROC[4] = IN1_2_Current_Sense[0];
 800079a:	4b83      	ldr	r3, [pc, #524]	@ (80009a8 <Current_Sense_process+0x234>)
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	4b7e      	ldr	r3, [pc, #504]	@ (8000998 <Current_Sense_process+0x224>)
 80007a0:	811a      	strh	r2, [r3, #8]
	PROC[5] = IN2_2_Current_Sense[0];
 80007a2:	4b82      	ldr	r3, [pc, #520]	@ (80009ac <Current_Sense_process+0x238>)
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	4b7c      	ldr	r3, [pc, #496]	@ (8000998 <Current_Sense_process+0x224>)
 80007a8:	815a      	strh	r2, [r3, #10]
	PROC[6] = IN3_2_Current_Sense[0];
 80007aa:	4b81      	ldr	r3, [pc, #516]	@ (80009b0 <Current_Sense_process+0x23c>)
 80007ac:	881a      	ldrh	r2, [r3, #0]
 80007ae:	4b7a      	ldr	r3, [pc, #488]	@ (8000998 <Current_Sense_process+0x224>)
 80007b0:	819a      	strh	r2, [r3, #12]
	PROC[7] = IN4_2_Current_Sense[0];
 80007b2:	4b80      	ldr	r3, [pc, #512]	@ (80009b4 <Current_Sense_process+0x240>)
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	4b78      	ldr	r3, [pc, #480]	@ (8000998 <Current_Sense_process+0x224>)
 80007b8:	81da      	strh	r2, [r3, #14]
	PROC[8] = Analog_Current_Sense[0];
 80007ba:	4b7f      	ldr	r3, [pc, #508]	@ (80009b8 <Current_Sense_process+0x244>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	4b76      	ldr	r3, [pc, #472]	@ (8000998 <Current_Sense_process+0x224>)
 80007c0:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	e089      	b.n	80008dc <Current_Sense_process+0x168>
		PROC[0] = (PROC[0] + IN1_1_Current_Sense[i])/2;
 80007c8:	4b73      	ldr	r3, [pc, #460]	@ (8000998 <Current_Sense_process+0x224>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4a71      	ldr	r2, [pc, #452]	@ (8000994 <Current_Sense_process+0x220>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d6:	440b      	add	r3, r1
 80007d8:	0fda      	lsrs	r2, r3, #31
 80007da:	4413      	add	r3, r2
 80007dc:	105b      	asrs	r3, r3, #1
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000998 <Current_Sense_process+0x224>)
 80007e2:	801a      	strh	r2, [r3, #0]
		PROC[1] = (PROC[1] + IN2_1_Current_Sense[i])/2;
 80007e4:	4b6c      	ldr	r3, [pc, #432]	@ (8000998 <Current_Sense_process+0x224>)
 80007e6:	885b      	ldrh	r3, [r3, #2]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4a6c      	ldr	r2, [pc, #432]	@ (800099c <Current_Sense_process+0x228>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f2:	440b      	add	r3, r1
 80007f4:	0fda      	lsrs	r2, r3, #31
 80007f6:	4413      	add	r3, r2
 80007f8:	105b      	asrs	r3, r3, #1
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b66      	ldr	r3, [pc, #408]	@ (8000998 <Current_Sense_process+0x224>)
 80007fe:	805a      	strh	r2, [r3, #2]
		PROC[2] = (PROC[2] + IN3_1_Current_Sense[i])/2;
 8000800:	4b65      	ldr	r3, [pc, #404]	@ (8000998 <Current_Sense_process+0x224>)
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	4619      	mov	r1, r3
 8000806:	4a66      	ldr	r2, [pc, #408]	@ (80009a0 <Current_Sense_process+0x22c>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080e:	440b      	add	r3, r1
 8000810:	0fda      	lsrs	r2, r3, #31
 8000812:	4413      	add	r3, r2
 8000814:	105b      	asrs	r3, r3, #1
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b5f      	ldr	r3, [pc, #380]	@ (8000998 <Current_Sense_process+0x224>)
 800081a:	809a      	strh	r2, [r3, #4]
		PROC[3] = (PROC[3] + IN4_1_Current_Sense[i])/2;
 800081c:	4b5e      	ldr	r3, [pc, #376]	@ (8000998 <Current_Sense_process+0x224>)
 800081e:	88db      	ldrh	r3, [r3, #6]
 8000820:	4619      	mov	r1, r3
 8000822:	4a60      	ldr	r2, [pc, #384]	@ (80009a4 <Current_Sense_process+0x230>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082a:	440b      	add	r3, r1
 800082c:	0fda      	lsrs	r2, r3, #31
 800082e:	4413      	add	r3, r2
 8000830:	105b      	asrs	r3, r3, #1
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b58      	ldr	r3, [pc, #352]	@ (8000998 <Current_Sense_process+0x224>)
 8000836:	80da      	strh	r2, [r3, #6]
		PROC[4] = (PROC[4] + IN1_2_Current_Sense[i])/2;
 8000838:	4b57      	ldr	r3, [pc, #348]	@ (8000998 <Current_Sense_process+0x224>)
 800083a:	891b      	ldrh	r3, [r3, #8]
 800083c:	4619      	mov	r1, r3
 800083e:	4a5a      	ldr	r2, [pc, #360]	@ (80009a8 <Current_Sense_process+0x234>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000846:	440b      	add	r3, r1
 8000848:	0fda      	lsrs	r2, r3, #31
 800084a:	4413      	add	r3, r2
 800084c:	105b      	asrs	r3, r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <Current_Sense_process+0x224>)
 8000852:	811a      	strh	r2, [r3, #8]
		PROC[5] = (PROC[5] + IN2_2_Current_Sense[i])/2;
 8000854:	4b50      	ldr	r3, [pc, #320]	@ (8000998 <Current_Sense_process+0x224>)
 8000856:	895b      	ldrh	r3, [r3, #10]
 8000858:	4619      	mov	r1, r3
 800085a:	4a54      	ldr	r2, [pc, #336]	@ (80009ac <Current_Sense_process+0x238>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000862:	440b      	add	r3, r1
 8000864:	0fda      	lsrs	r2, r3, #31
 8000866:	4413      	add	r3, r2
 8000868:	105b      	asrs	r3, r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <Current_Sense_process+0x224>)
 800086e:	815a      	strh	r2, [r3, #10]
		PROC[6] = (PROC[6] + IN3_2_Current_Sense[i])/2;
 8000870:	4b49      	ldr	r3, [pc, #292]	@ (8000998 <Current_Sense_process+0x224>)
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	4619      	mov	r1, r3
 8000876:	4a4e      	ldr	r2, [pc, #312]	@ (80009b0 <Current_Sense_process+0x23c>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800087e:	440b      	add	r3, r1
 8000880:	0fda      	lsrs	r2, r3, #31
 8000882:	4413      	add	r3, r2
 8000884:	105b      	asrs	r3, r3, #1
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b43      	ldr	r3, [pc, #268]	@ (8000998 <Current_Sense_process+0x224>)
 800088a:	819a      	strh	r2, [r3, #12]
		PROC[7] = (PROC[7] + IN4_2_Current_Sense[i])/2;
 800088c:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <Current_Sense_process+0x224>)
 800088e:	89db      	ldrh	r3, [r3, #14]
 8000890:	4619      	mov	r1, r3
 8000892:	4a48      	ldr	r2, [pc, #288]	@ (80009b4 <Current_Sense_process+0x240>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	440b      	add	r3, r1
 800089c:	0fda      	lsrs	r2, r3, #31
 800089e:	4413      	add	r3, r2
 80008a0:	105b      	asrs	r3, r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <Current_Sense_process+0x224>)
 80008a6:	81da      	strh	r2, [r3, #14]
		if(i % 2 == 0){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d111      	bne.n	80008d6 <Current_Sense_process+0x162>
			PROC[8] = (PROC[8] + Analog_Current_Sense[i/2])/2;
 80008b2:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <Current_Sense_process+0x224>)
 80008b4:	8a1b      	ldrh	r3, [r3, #16]
 80008b6:	4619      	mov	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0fda      	lsrs	r2, r3, #31
 80008bc:	4413      	add	r3, r2
 80008be:	105b      	asrs	r3, r3, #1
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <Current_Sense_process+0x244>)
 80008c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008c8:	440b      	add	r3, r1
 80008ca:	0fda      	lsrs	r2, r3, #31
 80008cc:	4413      	add	r3, r2
 80008ce:	105b      	asrs	r3, r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <Current_Sense_process+0x224>)
 80008d4:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3301      	adds	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b1f      	cmp	r3, #31
 80008e0:	f77f af72 	ble.w	80007c8 <Current_Sense_process+0x54>
		}
	}
	PROC[0] = Current_Sense_Raw_to_mA(PROC[0]);
 80008e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <Current_Sense_process+0x224>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fb45 	bl	8000f78 <Current_Sense_Raw_to_mA>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <Current_Sense_process+0x224>)
 80008f4:	801a      	strh	r2, [r3, #0]
	PROC[1] = Current_Sense_Raw_to_mA(PROC[1]);
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <Current_Sense_process+0x224>)
 80008f8:	885b      	ldrh	r3, [r3, #2]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fb3c 	bl	8000f78 <Current_Sense_Raw_to_mA>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <Current_Sense_process+0x224>)
 8000906:	805a      	strh	r2, [r3, #2]
	PROC[2] = Current_Sense_Raw_to_mA(PROC[2]);
 8000908:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <Current_Sense_process+0x224>)
 800090a:	889b      	ldrh	r3, [r3, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fb33 	bl	8000f78 <Current_Sense_Raw_to_mA>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <Current_Sense_process+0x224>)
 8000918:	809a      	strh	r2, [r3, #4]
	PROC[3] = Current_Sense_Raw_to_mA(PROC[3]);
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <Current_Sense_process+0x224>)
 800091c:	88db      	ldrh	r3, [r3, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb2a 	bl	8000f78 <Current_Sense_Raw_to_mA>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <Current_Sense_process+0x224>)
 800092a:	80da      	strh	r2, [r3, #6]
	PROC[4] = Current_Sense_Raw_to_mA(PROC[4]);
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <Current_Sense_process+0x224>)
 800092e:	891b      	ldrh	r3, [r3, #8]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fb21 	bl	8000f78 <Current_Sense_Raw_to_mA>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <Current_Sense_process+0x224>)
 800093c:	811a      	strh	r2, [r3, #8]
	PROC[5] = Current_Sense_Raw_to_mA(PROC[5]);
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <Current_Sense_process+0x224>)
 8000940:	895b      	ldrh	r3, [r3, #10]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fb18 	bl	8000f78 <Current_Sense_Raw_to_mA>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <Current_Sense_process+0x224>)
 800094e:	815a      	strh	r2, [r3, #10]
	PROC[6] = Current_Sense_Raw_to_mA(PROC[6]);
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <Current_Sense_process+0x224>)
 8000952:	899b      	ldrh	r3, [r3, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fb0f 	bl	8000f78 <Current_Sense_Raw_to_mA>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <Current_Sense_process+0x224>)
 8000960:	819a      	strh	r2, [r3, #12]
	PROC[7] = Current_Sense_Raw_to_mA(PROC[7]);
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <Current_Sense_process+0x224>)
 8000964:	89db      	ldrh	r3, [r3, #14]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fb06 	bl	8000f78 <Current_Sense_Raw_to_mA>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <Current_Sense_process+0x224>)
 8000972:	81da      	strh	r2, [r3, #14]
	PROC[8] = Current_Sense_Raw_to_mA(PROC[8]);
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <Current_Sense_process+0x224>)
 8000976:	8a1b      	ldrh	r3, [r3, #16]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fafd 	bl	8000f78 <Current_Sense_Raw_to_mA>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <Current_Sense_process+0x224>)
 8000984:	821a      	strh	r2, [r3, #16]
	check_warnings();
 8000986:	f000 f819 	bl	80009bc <check_warnings>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000388 	.word	0x20000388
 8000998:	200005e8 	.word	0x200005e8
 800099c:	200003c8 	.word	0x200003c8
 80009a0:	20000408 	.word	0x20000408
 80009a4:	20000448 	.word	0x20000448
 80009a8:	20000488 	.word	0x20000488
 80009ac:	200004c8 	.word	0x200004c8
 80009b0:	20000508 	.word	0x20000508
 80009b4:	20000548 	.word	0x20000548
 80009b8:	200005c8 	.word	0x200005c8

080009bc <check_warnings>:

void check_warnings(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	e02a      	b.n	8000a1e <check_warnings+0x62>
		if(PROC[x] >= Warning_Current[x]){
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <check_warnings+0x9c>)
 80009cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4922      	ldr	r1, [pc, #136]	@ (8000a5c <check_warnings+0xa0>)
 80009d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d31d      	bcc.n	8000a18 <check_warnings+0x5c>
			if(PROC[x] >= Over_Current[x]){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <check_warnings+0x9c>)
 80009e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	491e      	ldr	r1, [pc, #120]	@ (8000a60 <check_warnings+0xa4>)
 80009e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d30f      	bcc.n	8000a10 <check_warnings+0x54>
				Default_Switch_State = set_bit(Default_Switch_State, x, 0);
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <check_warnings+0xa8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	79f9      	ldrb	r1, [r7, #7]
 80009f6:	2200      	movs	r2, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fa97 	bl	8000f2c <set_bit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <check_warnings+0xa8>)
 8000a04:	701a      	strb	r2, [r3, #0]
				Over_current(x);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe17 	bl	800063c <Over_current>
 8000a0e:	e003      	b.n	8000a18 <check_warnings+0x5c>
			}else{
				Warning_current(x);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe26 	bl	8000664 <Warning_current>
	for(uint8_t x = 0; x < 7; x++){
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b06      	cmp	r3, #6
 8000a22:	d9d1      	bls.n	80009c8 <check_warnings+0xc>
		}
	/*	if(PROC[x] < Under_Current[x]){
			Under_current(x);
		}*/
	}
	if(PROC[8] >= Warning_Current[8]){
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <check_warnings+0x9c>)
 8000a26:	8a1a      	ldrh	r2, [r3, #16]
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <check_warnings+0xa0>)
 8000a2a:	8a1b      	ldrh	r3, [r3, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d30c      	bcc.n	8000a4a <check_warnings+0x8e>
		if(PROC[8] >= Over_Current[8]){
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <check_warnings+0x9c>)
 8000a32:	8a1a      	ldrh	r2, [r3, #16]
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <check_warnings+0xa4>)
 8000a36:	8a1b      	ldrh	r3, [r3, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d303      	bcc.n	8000a44 <check_warnings+0x88>
			Over_current(8);
 8000a3c:	2008      	movs	r0, #8
 8000a3e:	f7ff fdfd 	bl	800063c <Over_current>
 8000a42:	e002      	b.n	8000a4a <check_warnings+0x8e>
			//HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,0);
		}else{
			Warning_current(8);
 8000a44:	2008      	movs	r0, #8
 8000a46:	f7ff fe0d 	bl	8000664 <Warning_current>
		}
	}
	/*if(PROC[8] < Under_Current[8]){
		Under_current(8);
	}*/
	output();
 8000a4a:	f7ff fd7b 	bl	8000544 <output>

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200005e8 	.word	0x200005e8
 8000a5c:	200005fc 	.word	0x200005fc
 8000a60:	2000060c 	.word	0x2000060c
 8000a64:	20000632 	.word	0x20000632

08000a68 <Current_Sense_read>:

void Current_Sense_read(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
	for(int x = 0; x < 5; x++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	e226      	b.n	8000ec2 <Current_Sense_read+0x45a>
		switch(x){
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	f200 8220 	bhi.w	8000ebc <Current_Sense_read+0x454>
 8000a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a84 <Current_Sense_read+0x1c>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000a99 	.word	0x08000a99
 8000a88:	08000b5d 	.word	0x08000b5d
 8000a8c:	08000c21 	.word	0x08000c21
 8000a90:	08000ce5 	.word	0x08000ce5
 8000a94:	08000dd3 	.word	0x08000dd3
		case 0:
			//chip_select_read();
			Current_Sense_SEL[0] = 0;
 8000a98:	4b9e      	ldr	r3, [pc, #632]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 0;
 8000a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	489a      	ldr	r0, [pc, #616]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000aae:	f004 f953 	bl	8004d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000ab2:	4b98      	ldr	r3, [pc, #608]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000ab4:	785b      	ldrb	r3, [r3, #1]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4897      	ldr	r0, [pc, #604]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000abc:	f004 f94c 	bl	8004d58 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	e046      	b.n	8000b54 <Current_Sense_read+0xec>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000ac6:	4895      	ldr	r0, [pc, #596]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000ac8:	f001 fef2 	bl	80028b0 <HAL_ADC_Start>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <Current_Sense_read+0x6e>
 8000ad2:	f000 ff79 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000ad6:	4892      	ldr	r0, [pc, #584]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000ad8:	f001 feea 	bl	80028b0 <HAL_ADC_Start>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <Current_Sense_read+0x7e>
 8000ae2:	f000 ff71 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000ae6:	2164      	movs	r1, #100	@ 0x64
 8000ae8:	488c      	ldr	r0, [pc, #560]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000aea:	f001 ffd1 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <Current_Sense_read+0x90>
 8000af4:	f000 ff68 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000af8:	2164      	movs	r1, #100	@ 0x64
 8000afa:	4889      	ldr	r0, [pc, #548]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000afc:	f001 ffc8 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <Current_Sense_read+0xa2>
 8000b06:	f000 ff5f 	bl	80019c8 <Error_Handler>
				IN1_1_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000b0a:	4884      	ldr	r0, [pc, #528]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000b0c:	f002 fa03 	bl	8002f16 <HAL_ADC_GetValue>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b299      	uxth	r1, r3
 8000b14:	4a83      	ldr	r2, [pc, #524]	@ (8000d24 <Current_Sense_read+0x2bc>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000b1c:	4880      	ldr	r0, [pc, #512]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000b1e:	f002 f9fa 	bl	8002f16 <HAL_ADC_GetValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b299      	uxth	r1, r3
 8000b26:	4a80      	ldr	r2, [pc, #512]	@ (8000d28 <Current_Sense_read+0x2c0>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000b2e:	487b      	ldr	r0, [pc, #492]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000b30:	f001 ff7a 	bl	8002a28 <HAL_ADC_Stop>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <Current_Sense_read+0xd6>
 8000b3a:	f000 ff45 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000b3e:	4878      	ldr	r0, [pc, #480]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000b40:	f001 ff72 	bl	8002a28 <HAL_ADC_Stop>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <Current_Sense_read+0xe6>
 8000b4a:	f000 ff3d 	bl	80019c8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b1f      	cmp	r3, #31
 8000b58:	ddb5      	ble.n	8000ac6 <Current_Sense_read+0x5e>
			}
			break;
 8000b5a:	e1af      	b.n	8000ebc <Current_Sense_read+0x454>
		case 1:
			//chip_select_read();
			Current_Sense_SEL[0] = 0;
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 1;
 8000b62:	4b6c      	ldr	r3, [pc, #432]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000b68:	4b6a      	ldr	r3, [pc, #424]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2140      	movs	r1, #64	@ 0x40
 8000b70:	4869      	ldr	r0, [pc, #420]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000b72:	f004 f8f1 	bl	8004d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000b76:	4b67      	ldr	r3, [pc, #412]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4866      	ldr	r0, [pc, #408]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000b80:	f004 f8ea 	bl	8004d58 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e046      	b.n	8000c18 <Current_Sense_read+0x1b0>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000b8a:	4864      	ldr	r0, [pc, #400]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000b8c:	f001 fe90 	bl	80028b0 <HAL_ADC_Start>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <Current_Sense_read+0x132>
 8000b96:	f000 ff17 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000b9a:	4861      	ldr	r0, [pc, #388]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000b9c:	f001 fe88 	bl	80028b0 <HAL_ADC_Start>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <Current_Sense_read+0x142>
 8000ba6:	f000 ff0f 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000baa:	2164      	movs	r1, #100	@ 0x64
 8000bac:	485b      	ldr	r0, [pc, #364]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000bae:	f001 ff6f 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <Current_Sense_read+0x154>
 8000bb8:	f000 ff06 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000bbc:	2164      	movs	r1, #100	@ 0x64
 8000bbe:	4858      	ldr	r0, [pc, #352]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000bc0:	f001 ff66 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <Current_Sense_read+0x166>
 8000bca:	f000 fefd 	bl	80019c8 <Error_Handler>
				IN2_1_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000bce:	4853      	ldr	r0, [pc, #332]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000bd0:	f002 f9a1 	bl	8002f16 <HAL_ADC_GetValue>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b299      	uxth	r1, r3
 8000bd8:	4a54      	ldr	r2, [pc, #336]	@ (8000d2c <Current_Sense_read+0x2c4>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000be0:	484f      	ldr	r0, [pc, #316]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000be2:	f002 f998 	bl	8002f16 <HAL_ADC_GetValue>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b299      	uxth	r1, r3
 8000bea:	4a51      	ldr	r2, [pc, #324]	@ (8000d30 <Current_Sense_read+0x2c8>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000bf2:	484a      	ldr	r0, [pc, #296]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000bf4:	f001 ff18 	bl	8002a28 <HAL_ADC_Stop>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <Current_Sense_read+0x19a>
 8000bfe:	f000 fee3 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000c02:	4847      	ldr	r0, [pc, #284]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000c04:	f001 ff10 	bl	8002a28 <HAL_ADC_Stop>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <Current_Sense_read+0x1aa>
 8000c0e:	f000 fedb 	bl	80019c8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b1f      	cmp	r3, #31
 8000c1c:	ddb5      	ble.n	8000b8a <Current_Sense_read+0x122>
			}
			break;
 8000c1e:	e14d      	b.n	8000ebc <Current_Sense_read+0x454>
		case 2:
			//chip_select_read();
			Current_Sense_SEL[0] = 1;
 8000c20:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 0;
 8000c26:	4b3b      	ldr	r3, [pc, #236]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000c2c:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	2140      	movs	r1, #64	@ 0x40
 8000c34:	4838      	ldr	r0, [pc, #224]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000c36:	f004 f88f 	bl	8004d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	2120      	movs	r1, #32
 8000c42:	4835      	ldr	r0, [pc, #212]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000c44:	f004 f888 	bl	8004d58 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	e046      	b.n	8000cdc <Current_Sense_read+0x274>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c4e:	4833      	ldr	r0, [pc, #204]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000c50:	f001 fff6 	bl	8002c40 <HAL_ADC_Start_IT>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <Current_Sense_read+0x1f6>
 8000c5a:	f000 feb5 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c5e:	4830      	ldr	r0, [pc, #192]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000c60:	f001 ffee 	bl	8002c40 <HAL_ADC_Start_IT>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <Current_Sense_read+0x206>
 8000c6a:	f000 fead 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000c6e:	2164      	movs	r1, #100	@ 0x64
 8000c70:	482a      	ldr	r0, [pc, #168]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000c72:	f001 ff0d 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <Current_Sense_read+0x218>
 8000c7c:	f000 fea4 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000c80:	2164      	movs	r1, #100	@ 0x64
 8000c82:	4827      	ldr	r0, [pc, #156]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000c84:	f001 ff04 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <Current_Sense_read+0x22a>
 8000c8e:	f000 fe9b 	bl	80019c8 <Error_Handler>
				IN3_1_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000c92:	4822      	ldr	r0, [pc, #136]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000c94:	f002 f93f 	bl	8002f16 <HAL_ADC_GetValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <Current_Sense_read+0x2cc>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000ca4:	481e      	ldr	r0, [pc, #120]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000ca6:	f002 f936 	bl	8002f16 <HAL_ADC_GetValue>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b299      	uxth	r1, r3
 8000cae:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <Current_Sense_read+0x2d0>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000cb6:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <Current_Sense_read+0x2b4>)
 8000cb8:	f002 f8f2 	bl	8002ea0 <HAL_ADC_Stop_IT>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <Current_Sense_read+0x25e>
 8000cc2:	f000 fe81 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000cc6:	4816      	ldr	r0, [pc, #88]	@ (8000d20 <Current_Sense_read+0x2b8>)
 8000cc8:	f002 f8ea 	bl	8002ea0 <HAL_ADC_Stop_IT>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <Current_Sense_read+0x26e>
 8000cd2:	f000 fe79 	bl	80019c8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b1f      	cmp	r3, #31
 8000ce0:	ddb5      	ble.n	8000c4e <Current_Sense_read+0x1e6>
			}
			break;
 8000ce2:	e0eb      	b.n	8000ebc <Current_Sense_read+0x454>
		case 3:
			//chip_select_read();
			Current_Sense_SEL[0] = 1;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 1;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2140      	movs	r1, #64	@ 0x40
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000cfa:	f004 f82d 	bl	8004d58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <Current_Sense_read+0x2ac>)
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	461a      	mov	r2, r3
 8000d04:	2120      	movs	r1, #32
 8000d06:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <Current_Sense_read+0x2b0>)
 8000d08:	f004 f826 	bl	8004d58 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e05b      	b.n	8000dca <Current_Sense_read+0x362>
 8000d12:	bf00      	nop
 8000d14:	20000630 	.word	0x20000630
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	20000038 	.word	0x20000038
 8000d20:	200000a4 	.word	0x200000a4
 8000d24:	20000388 	.word	0x20000388
 8000d28:	20000488 	.word	0x20000488
 8000d2c:	200003c8 	.word	0x200003c8
 8000d30:	200004c8 	.word	0x200004c8
 8000d34:	20000408 	.word	0x20000408
 8000d38:	20000508 	.word	0x20000508
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d3c:	4866      	ldr	r0, [pc, #408]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000d3e:	f001 ff7f 	bl	8002c40 <HAL_ADC_Start_IT>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <Current_Sense_read+0x2e4>
 8000d48:	f000 fe3e 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d4c:	4863      	ldr	r0, [pc, #396]	@ (8000edc <Current_Sense_read+0x474>)
 8000d4e:	f001 ff77 	bl	8002c40 <HAL_ADC_Start_IT>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <Current_Sense_read+0x2f4>
 8000d58:	f000 fe36 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000d5c:	2164      	movs	r1, #100	@ 0x64
 8000d5e:	485e      	ldr	r0, [pc, #376]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000d60:	f001 fe96 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <Current_Sense_read+0x306>
 8000d6a:	f000 fe2d 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000d6e:	2164      	movs	r1, #100	@ 0x64
 8000d70:	485a      	ldr	r0, [pc, #360]	@ (8000edc <Current_Sense_read+0x474>)
 8000d72:	f001 fe8d 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <Current_Sense_read+0x318>
 8000d7c:	f000 fe24 	bl	80019c8 <Error_Handler>
				IN4_1_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000d80:	4855      	ldr	r0, [pc, #340]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000d82:	f002 f8c8 	bl	8002f16 <HAL_ADC_GetValue>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	4a55      	ldr	r2, [pc, #340]	@ (8000ee0 <Current_Sense_read+0x478>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000d92:	4852      	ldr	r0, [pc, #328]	@ (8000edc <Current_Sense_read+0x474>)
 8000d94:	f002 f8bf 	bl	8002f16 <HAL_ADC_GetValue>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b299      	uxth	r1, r3
 8000d9c:	4a51      	ldr	r2, [pc, #324]	@ (8000ee4 <Current_Sense_read+0x47c>)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000da4:	484c      	ldr	r0, [pc, #304]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000da6:	f002 f87b 	bl	8002ea0 <HAL_ADC_Stop_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <Current_Sense_read+0x34c>
 8000db0:	f000 fe0a 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000db4:	4849      	ldr	r0, [pc, #292]	@ (8000edc <Current_Sense_read+0x474>)
 8000db6:	f002 f873 	bl	8002ea0 <HAL_ADC_Stop_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <Current_Sense_read+0x35c>
 8000dc0:	f000 fe02 	bl	80019c8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	ddb5      	ble.n	8000d3c <Current_Sense_read+0x2d4>
			}
			break;
 8000dd0:	e074      	b.n	8000ebc <Current_Sense_read+0x454>
		case 4:
			//analog_read();
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	e024      	b.n	8000e22 <Current_Sense_read+0x3ba>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000dd8:	483f      	ldr	r0, [pc, #252]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000dda:	f001 fd69 	bl	80028b0 <HAL_ADC_Start>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <Current_Sense_read+0x380>
 8000de4:	f000 fdf0 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000de8:	2164      	movs	r1, #100	@ 0x64
 8000dea:	483b      	ldr	r0, [pc, #236]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000dec:	f001 fe50 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <Current_Sense_read+0x392>
 8000df6:	f000 fde7 	bl	80019c8 <Error_Handler>
				Analog_Current_Sense_1[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000dfa:	4837      	ldr	r0, [pc, #220]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000dfc:	f002 f88b 	bl	8002f16 <HAL_ADC_GetValue>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b299      	uxth	r1, r3
 8000e04:	4a38      	ldr	r2, [pc, #224]	@ (8000ee8 <Current_Sense_read+0x480>)
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e0c:	4832      	ldr	r0, [pc, #200]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000e0e:	f001 fe0b 	bl	8002a28 <HAL_ADC_Stop>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <Current_Sense_read+0x3b4>
 8000e18:	f000 fdd6 	bl	80019c8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	ddd7      	ble.n	8000dd8 <Current_Sense_read+0x370>
			}
			//analog_read();
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	e042      	b.n	8000eb4 <Current_Sense_read+0x44c>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e2e:	482a      	ldr	r0, [pc, #168]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000e30:	f001 fd3e 	bl	80028b0 <HAL_ADC_Start>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <Current_Sense_read+0x3d6>
 8000e3a:	f000 fdc5 	bl	80019c8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e3e:	2164      	movs	r1, #100	@ 0x64
 8000e40:	4825      	ldr	r0, [pc, #148]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000e42:	f001 fe25 	bl	8002a90 <HAL_ADC_PollForConversion>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <Current_Sense_read+0x3e8>
 8000e4c:	f000 fdbc 	bl	80019c8 <Error_Handler>
				Analog_Current_Sense_2[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000e52:	f002 f860 	bl	8002f16 <HAL_ADC_GetValue>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	4a24      	ldr	r2, [pc, #144]	@ (8000eec <Current_Sense_read+0x484>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <Current_Sense_read+0x470>)
 8000e64:	f001 fde0 	bl	8002a28 <HAL_ADC_Stop>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <Current_Sense_read+0x40a>
 8000e6e:	f000 fdab 	bl	80019c8 <Error_Handler>
				if(Analog_Current_Sense_1[i]>Analog_Current_Sense_2[i]){
 8000e72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <Current_Sense_read+0x480>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e7a:	491c      	ldr	r1, [pc, #112]	@ (8000eec <Current_Sense_read+0x484>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d90e      	bls.n	8000ea4 <Current_Sense_read+0x43c>
					Analog_Current_Sense[i] = Analog_Current_Sense_1[i] - Analog_Current_Sense_2[i];
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <Current_Sense_read+0x480>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e8e:	4917      	ldr	r1, [pc, #92]	@ (8000eec <Current_Sense_read+0x484>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	b299      	uxth	r1, r3
 8000e9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ef0 <Current_Sense_read+0x488>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ea2:	e004      	b.n	8000eae <Current_Sense_read+0x446>
				}else{
					Analog_Current_Sense[i] = 0;
 8000ea4:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <Current_Sense_read+0x488>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	ddb9      	ble.n	8000e2e <Current_Sense_read+0x3c6>
				}
			}
			break;
 8000eba:	bf00      	nop
	for(int x = 0; x < 5; x++){
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	f77f add5 	ble.w	8000a74 <Current_Sense_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	Current_Sense_process();
 8000eca:	f7ff fc53 	bl	8000774 <Current_Sense_process>
}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000038 	.word	0x20000038
 8000edc:	200000a4 	.word	0x200000a4
 8000ee0:	20000448 	.word	0x20000448
 8000ee4:	20000548 	.word	0x20000548
 8000ee8:	20000588 	.word	0x20000588
 8000eec:	200005a8 	.word	0x200005a8
 8000ef0:	200005c8 	.word	0x200005c8

08000ef4 <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	2201      	movs	r2, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4013      	ands	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <check_bit+0x2a>
		return 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <check_bit+0x2c>
	}else{
		return 0;
 8000f1e:	2300      	movs	r3, #0
	}
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	2201      	movs	r2, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000f48:	797b      	ldrb	r3, [r7, #5]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d104      	bne.n	8000f58 <set_bit+0x2c>
		byte |= mask;
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e008      	b.n	8000f6a <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4013      	ands	r3, r2
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <Current_Sense_Raw_to_mA>:

uint16_t Current_Sense_Raw_to_mA(uint16_t raw){
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000f82:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000f86:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	817b      	strh	r3, [r7, #10]

	//current = raw*max_mA / 4095;
	current = raw*3300 / 4095;
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <Current_Sense_Raw_to_mA+0x3c>)
 8000f98:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9c:	441a      	add	r2, r3
 8000f9e:	12d2      	asrs	r2, r2, #11
 8000fa0:	17db      	asrs	r3, r3, #31
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	817b      	strh	r3, [r7, #10]

	return current;
 8000fa6:	897b      	ldrh	r3, [r7, #10]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	80080081 	.word	0x80080081

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f001 f809 	bl	8001fd2 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000fc0:	f7ff f97e 	bl	80002c0 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc4:	f000 f870 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc8:	f000 fc9c 	bl	8001904 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fcc:	f000 f8b6 	bl	800113c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000fd0:	f000 f9b6 	bl	8001340 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000fd4:	f000 fa1c 	bl	8001410 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fd8:	f000 faca 	bl	8001570 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fb3e 	bl	800165c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe0:	f000 fb8a 	bl	80016f8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000fe4:	f000 fbfc 	bl	80017e0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fe8:	f000 fc30 	bl	800184c <MX_TIM7_Init>
  MX_TIM16_Init();
 8000fec:	f000 fc64 	bl	80018b8 <MX_TIM16_Init>
  MX_ADC2_Init();
 8000ff0:	f000 f940 	bl	8001274 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000ff4:	4824      	ldr	r0, [pc, #144]	@ (8001088 <main+0xd0>)
 8000ff6:	f004 ff23 	bl	8005e40 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000ffa:	4824      	ldr	r0, [pc, #144]	@ (800108c <main+0xd4>)
 8000ffc:	f004 ff20 	bl	8005e40 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001000:	4823      	ldr	r0, [pc, #140]	@ (8001090 <main+0xd8>)
 8001002:	f004 feb3 	bl	8005d6c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001006:	2100      	movs	r1, #0
 8001008:	481f      	ldr	r0, [pc, #124]	@ (8001088 <main+0xd0>)
 800100a:	f004 ff7b 	bl	8005f04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	481e      	ldr	r0, [pc, #120]	@ (800108c <main+0xd4>)
 8001012:	f004 ff77 	bl	8005f04 <HAL_TIM_PWM_Start>

  set_pwm_duty_cycle(&htim1);
 8001016:	481c      	ldr	r0, [pc, #112]	@ (8001088 <main+0xd0>)
 8001018:	f7ff f8fe 	bl	8000218 <set_pwm_duty_cycle>
  set_pwm_duty_cycle(&htim2);
 800101c:	481b      	ldr	r0, [pc, #108]	@ (800108c <main+0xd4>)
 800101e:	f7ff f8fb 	bl	8000218 <set_pwm_duty_cycle>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 8001022:	481c      	ldr	r0, [pc, #112]	@ (8001094 <main+0xdc>)
 8001024:	f003 f84a 	bl	80040bc <HAL_FDCAN_Start>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <main+0x7c>
 800102e:	f000 fccb 	bl	80019c8 <Error_Handler>
 8001032:	e004      	b.n	800103e <main+0x86>
 8001034:	2201      	movs	r2, #1
 8001036:	2101      	movs	r1, #1
 8001038:	4817      	ldr	r0, [pc, #92]	@ (8001098 <main+0xe0>)
 800103a:	f003 fe8d 	bl	8004d58 <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	4814      	ldr	r0, [pc, #80]	@ (8001094 <main+0xdc>)
 8001044:	f003 f9c0 	bl	80043c8 <HAL_FDCAN_ActivateNotification>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <main+0x9a>
 800104e:	f000 fcbb 	bl	80019c8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <main+0xe4>)
 8001054:	881a      	ldrh	r2, [r3, #0]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <main+0xd0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	635a      	str	r2, [r3, #52]	@ 0x34

		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PWM_speed[1]);
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <main+0xe4>)
 800105e:	885a      	ldrh	r2, [r3, #2]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <main+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
	  if(millis % 100 == 0){
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <main+0xe8>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <main+0xec>)
 800106c:	fba2 1203 	umull	r1, r2, r2, r3
 8001070:	0952      	lsrs	r2, r2, #5
 8001072:	2164      	movs	r1, #100	@ 0x64
 8001074:	fb01 f202 	mul.w	r2, r1, r2
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e8      	bne.n	8001052 <main+0x9a>
		  Current_Sense_read();
 8001080:	f7ff fcf2 	bl	8000a68 <Current_Sense_read>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8001084:	e7e5      	b.n	8001052 <main+0x9a>
 8001086:	bf00      	nop
 8001088:	20000174 	.word	0x20000174
 800108c:	200001c0 	.word	0x200001c0
 8001090:	2000020c 	.word	0x2000020c
 8001094:	20000110 	.word	0x20000110
 8001098:	48000400 	.word	0x48000400
 800109c:	2000063c 	.word	0x2000063c
 80010a0:	2000062c 	.word	0x2000062c
 80010a4:	51eb851f 	.word	0x51eb851f

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2238      	movs	r2, #56	@ 0x38
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 f95c 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010ce:	f003 fe5b 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	2303      	movs	r3, #3
 80010e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010e8:	230c      	movs	r3, #12
 80010ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80010f0:	2306      	movs	r3, #6
 80010f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fef7 	bl	8004ef0 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001108:	f000 fc5e 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2303      	movs	r3, #3
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f004 f9f5 	bl	8005514 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001130:	f000 fc4a 	bl	80019c8 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	@ 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	@ 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f006 f90d 	bl	8007374 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800115a:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <MX_ADC1_Init+0x128>)
 800115c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001162:	4b40      	ldr	r3, [pc, #256]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001164:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001168:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116a:	4b3e      	ldr	r3, [pc, #248]	@ (8001264 <MX_ADC1_Init+0x128>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001176:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <MX_ADC1_Init+0x128>)
 800117e:	2201      	movs	r2, #1
 8001180:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001184:	2204      	movs	r2, #4
 8001186:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <MX_ADC1_Init+0x128>)
 800118a:	2200      	movs	r2, #0
 800118c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118e:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001190:	2200      	movs	r2, #0
 8001192:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001196:	2203      	movs	r2, #3
 8001198:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800119a:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <MX_ADC1_Init+0x128>)
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011be:	2200      	movs	r2, #0
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	4826      	ldr	r0, [pc, #152]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011cc:	f001 f9ec 	bl	80025a8 <HAL_ADC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 fbf7 	bl	80019c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	481f      	ldr	r0, [pc, #124]	@ (8001264 <MX_ADC1_Init+0x128>)
 80011e6:	f002 fc5b 	bl	8003aa0 <HAL_ADCEx_MultiModeConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80011f0:	f000 fbea 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_ADC1_Init+0x12c>)
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f8:	2306      	movs	r3, #6
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001200:	237f      	movs	r3, #127	@ 0x7f
 8001202:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001204:	2304      	movs	r3, #4
 8001206:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4814      	ldr	r0, [pc, #80]	@ (8001264 <MX_ADC1_Init+0x128>)
 8001212:	f001 fe8d 	bl	8002f30 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800121c:	f000 fbd4 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_ADC1_Init+0x130>)
 8001222:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001224:	230c      	movs	r3, #12
 8001226:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	480d      	ldr	r0, [pc, #52]	@ (8001264 <MX_ADC1_Init+0x128>)
 800122e:	f001 fe7f 	bl	8002f30 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001238:	f000 fbc6 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_ADC1_Init+0x134>)
 800123e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001240:	2312      	movs	r3, #18
 8001242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_ADC1_Init+0x128>)
 800124e:	f001 fe6f 	bl	8002f30 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001258:	f000 fbb6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	@ 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000038 	.word	0x20000038
 8001268:	04300002 	.word	0x04300002
 800126c:	0c900008 	.word	0x0c900008
 8001270:	10c00010 	.word	0x10c00010

08001274 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2220      	movs	r2, #32
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f006 f877 	bl	8007374 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <MX_ADC2_Init+0xc0>)
 8001288:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <MX_ADC2_Init+0xc4>)
 800128a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_ADC2_Init+0xc0>)
 800128e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001292:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_ADC2_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <MX_ADC2_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012ee:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_ADC2_Init+0xc0>)
 80012f0:	f001 f95a 	bl	80025a8 <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80012fa:	f000 fb65 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_ADC2_Init+0xc8>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001302:	2306      	movs	r3, #6
 8001304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001306:	2302      	movs	r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130a:	237f      	movs	r3, #127	@ 0x7f
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130e:	2304      	movs	r3, #4
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC2_Init+0xc0>)
 800131c:	f001 fe08 	bl	8002f30 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001326:	f000 fb4f 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000a4 	.word	0x200000a4
 8001338:	50000100 	.word	0x50000100
 800133c:	0c900008 	.word	0x0c900008

08001340 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001346:	4a2f      	ldr	r2, [pc, #188]	@ (8001404 <MX_FDCAN1_Init+0xc4>)
 8001348:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001350:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800135c:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800135e:	2200      	movs	r2, #0
 8001360:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800136a:	2200      	movs	r2, #0
 800136c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001370:	2201      	movs	r2, #1
 8001372:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001376:	2201      	movs	r2, #1
 8001378:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800137c:	220d      	movs	r2, #13
 800137e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001382:	2202      	movs	r2, #2
 8001384:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001388:	2201      	movs	r2, #1
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800138c:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800138e:	2201      	movs	r2, #1
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001392:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 8001394:	2201      	movs	r2, #1
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 800139a:	2201      	movs	r2, #1
 800139c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 80013a0:	221c      	movs	r2, #28
 80013a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013b0:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_FDCAN1_Init+0xc0>)
 80013b2:	f002 fd29 	bl	8003e08 <HAL_FDCAN_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80013bc:	f000 fb04 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_FDCAN1_Init+0xc8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013c8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013d8:	2205      	movs	r2, #5
 80013da:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <MX_FDCAN1_Init+0xcc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000110 	.word	0x20000110
 8001404:	40006400 	.word	0x40006400
 8001408:	20000640 	.word	0x20000640
 800140c:	20000644 	.word	0x20000644

08001410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b09c      	sub	sp, #112	@ 0x70
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2234      	movs	r2, #52	@ 0x34
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f005 ff92 	bl	8007374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001450:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001452:	4a46      	ldr	r2, [pc, #280]	@ (800156c <MX_TIM1_Init+0x15c>)
 8001454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001456:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001458:	220f      	movs	r2, #15
 800145a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b42      	ldr	r3, [pc, #264]	@ (8001568 <MX_TIM1_Init+0x158>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001462:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001464:	2227      	movs	r2, #39	@ 0x27
 8001466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <MX_TIM1_Init+0x158>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147a:	483b      	ldr	r0, [pc, #236]	@ (8001568 <MX_TIM1_Init+0x158>)
 800147c:	f004 fc1e 	bl	8005cbc <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001486:	f000 fa9f 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001490:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001494:	4619      	mov	r1, r3
 8001496:	4834      	ldr	r0, [pc, #208]	@ (8001568 <MX_TIM1_Init+0x158>)
 8001498:	f005 f898 	bl	80065cc <HAL_TIM_ConfigClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014a2:	f000 fa91 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014a6:	4830      	ldr	r0, [pc, #192]	@ (8001568 <MX_TIM1_Init+0x158>)
 80014a8:	f004 fcca 	bl	8005e40 <HAL_TIM_PWM_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014b2:	f000 fa89 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c6:	4619      	mov	r1, r3
 80014c8:	4827      	ldr	r0, [pc, #156]	@ (8001568 <MX_TIM1_Init+0x158>)
 80014ca:	f005 fdff 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80014d4:	f000 fa78 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	@ 0x60
 80014da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e4:	2300      	movs	r3, #0
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	481a      	ldr	r0, [pc, #104]	@ (8001568 <MX_TIM1_Init+0x158>)
 80014fe:	f004 ff51 	bl	80063a4 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001508:	f000 fa5e 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001520:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001524:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	@ (8001568 <MX_TIM1_Init+0x158>)
 800154a:	f005 fe41 	bl	80071d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001554:	f000 fa38 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <MX_TIM1_Init+0x158>)
 800155a:	f000 fc19 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3770      	adds	r7, #112	@ 0x70
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000174 	.word	0x20000174
 800156c:	40012c00 	.word	0x40012c00

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	@ 0x38
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015ac:	220f      	movs	r2, #15
 80015ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80015b6:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015b8:	2227      	movs	r2, #39	@ 0x27
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c8:	4823      	ldr	r0, [pc, #140]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015ca:	f004 fb77 	bl	8005cbc <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015d4:	f000 f9f8 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e2:	4619      	mov	r1, r3
 80015e4:	481c      	ldr	r0, [pc, #112]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015e6:	f004 fff1 	bl	80065cc <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f0:	f000 f9ea 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f4:	4818      	ldr	r0, [pc, #96]	@ (8001658 <MX_TIM2_Init+0xe8>)
 80015f6:	f004 fc23 	bl	8005e40 <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001600:	f000 f9e2 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4811      	ldr	r0, [pc, #68]	@ (8001658 <MX_TIM2_Init+0xe8>)
 8001614:	f005 fd5a 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800161e:	f000 f9d3 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	@ 0x60
 8001624:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <MX_TIM2_Init+0xe8>)
 800163a:	f004 feb3 	bl	80063a4 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001644:	f000 f9c0 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MX_TIM2_Init+0xe8>)
 800164a:	f000 fba1 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	@ 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001c0 	.word	0x200001c0

0800165c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <MX_TIM3_Init+0x98>)
 800167e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001682:	223f      	movs	r2, #63	@ 0x3f
 8001684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800168e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016a2:	f004 fb0b 	bl	8005cbc <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016ac:	f000 f98c 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016be:	f004 ff85 	bl	80065cc <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 f97e 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016da:	f005 fcf7 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f970 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000020c 	.word	0x2000020c
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	@ 0x38
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172a:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800172c:	4a2b      	ldr	r2, [pc, #172]	@ (80017dc <MX_TIM4_Init+0xe4>)
 800172e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001730:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800173e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001750:	4821      	ldr	r0, [pc, #132]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 8001752:	f004 fab3 	bl	8005cbc <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800175c:	f000 f934 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800176a:	4619      	mov	r1, r3
 800176c:	481a      	ldr	r0, [pc, #104]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800176e:	f004 ff2d 	bl	80065cc <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001778:	f000 f926 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800177c:	4816      	ldr	r0, [pc, #88]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800177e:	f004 fb5f 	bl	8005e40 <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001788:	f000 f91e 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 800179c:	f005 fc96 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017a6:	f000 f90f 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	@ 0x60
 80017ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_TIM4_Init+0xe0>)
 80017c2:	f004 fdef 	bl	80063a4 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017cc:	f000 f8fc 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3738      	adds	r7, #56	@ 0x38
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000258 	.word	0x20000258
 80017dc:	40000800 	.word	0x40000800

080017e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_TIM6_Init+0x64>)
 80017f2:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <MX_TIM6_Init+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_TIM6_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_TIM6_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <MX_TIM6_Init+0x64>)
 8001804:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001808:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_TIM6_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <MX_TIM6_Init+0x64>)
 8001812:	f004 fa53 	bl	8005cbc <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800181c:	f000 f8d4 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM6_Init+0x64>)
 800182e:	f005 fc4d 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001838:	f000 f8c6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200002a4 	.word	0x200002a4
 8001848:	40001000 	.word	0x40001000

0800184c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <MX_TIM7_Init+0x64>)
 800185e:	4a15      	ldr	r2, [pc, #84]	@ (80018b4 <MX_TIM7_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <MX_TIM7_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_TIM7_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_TIM7_Init+0x64>)
 8001870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_TIM7_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <MX_TIM7_Init+0x64>)
 800187e:	f004 fa1d 	bl	8005cbc <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001888:	f000 f89e 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_TIM7_Init+0x64>)
 800189a:	f005 fc17 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f000 f890 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200002f0 	.word	0x200002f0
 80018b4:	40001400 	.word	0x40001400

080018b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <MX_TIM16_Init+0x48>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_TIM16_Init+0x44>)
 80018ea:	f004 f9e7 	bl	8005cbc <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018f4:	f000 f868 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000033c 	.word	0x2000033c
 8001900:	40014400 	.word	0x40014400

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001926:	4b26      	ldr	r3, [pc, #152]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <MX_GPIO_Init+0xbc>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 8001962:	2200      	movs	r2, #0
 8001964:	f248 6192 	movw	r1, #34450	@ 0x8692
 8001968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196c:	f003 f9f4 	bl	8004d58 <HAL_GPIO_WritePin>
                          |IN2_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001970:	2200      	movs	r2, #0
 8001972:	21f9      	movs	r1, #249	@ 0xf9
 8001974:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <MX_GPIO_Init+0xc0>)
 8001976:	f003 f9ef 	bl	8004d58 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_2_Pin IN0_2_Pin LED2_Pin IN3_Pin
                           IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 800197a:	f248 6392 	movw	r3, #34450	@ 0x8692
 800197e:	60fb      	str	r3, [r7, #12]
                          |IN2_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f003 f85d 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 800199a:	23f9      	movs	r3, #249	@ 0xf9
 800199c:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_GPIO_Init+0xc0>)
 80019b2:	f003 f84f 	bl	8004a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_MspInit+0x44>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019de:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_MspInit+0x44>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_MspInit+0x44>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_MspInit+0x44>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_MspInit+0x44>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_MspInit+0x44>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a0a:	f003 fa61 	bl	8004ed0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09c      	sub	sp, #112	@ 0x70
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	2244      	movs	r2, #68	@ 0x44
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 fc99 	bl	8007374 <memset>
  if(hadc->Instance==ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a4a:	d13e      	bne.n	8001aca <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a52:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a56:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 ff3d 	bl	80058dc <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a68:	f7ff ffae 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a39      	ldr	r2, [pc, #228]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001a74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a76:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d10b      	bne.n	8001a96 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a7e:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001a84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a30      	ldr	r2, [pc, #192]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001aae:	230d      	movs	r3, #13
 8001ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac4:	f002 ffc6 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ac8:	e042      	b.n	8001b50 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <HAL_ADC_MspInit+0x144>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d13d      	bne.n	8001b50 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ada:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ade:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fef9 	bl	80058dc <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001af0:	f7ff ff6a 	bl	80019c8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001afc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_ADC_MspInit+0x13c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10b      	bne.n	8001b1e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	4a0e      	ldr	r2, [pc, #56]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_ADC_MspInit+0x140>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b36:	2340      	movs	r3, #64	@ 0x40
 8001b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4c:	f002 ff82 	bl	8004a54 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	3770      	adds	r7, #112	@ 0x70
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000690 	.word	0x20000690
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	50000100 	.word	0x50000100

08001b64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09a      	sub	sp, #104	@ 0x68
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2244      	movs	r2, #68	@ 0x44
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fbf5 	bl	8007374 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_FDCAN_MspInit+0xbc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d141      	bne.n	8001c18 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fe99 	bl	80058dc <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bb0:	f7ff ff0a 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc0:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_FDCAN_MspInit+0xc0>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001be8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f002 ff26 	bl	8004a54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2015      	movs	r0, #21
 8001c0e:	f002 f8c6 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c12:	2015      	movs	r0, #21
 8001c14:	f002 f8dd 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3768      	adds	r7, #104	@ 0x68
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40006400 	.word	0x40006400
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	@ (8001d74 <HAL_TIM_Base_MspInit+0x14c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10c      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c46:	4b4c      	ldr	r3, [pc, #304]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c52:	e08a      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5c:	d114      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	4b46      	ldr	r3, [pc, #280]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a45      	ldr	r2, [pc, #276]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6a:	4b43      	ldr	r3, [pc, #268]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	201c      	movs	r0, #28
 8001c7c:	f002 f88f 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c80:	201c      	movs	r0, #28
 8001c82:	f002 f8a6 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8001c86:	e070      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d7c <HAL_TIM_Base_MspInit+0x154>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d114      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a38      	ldr	r2, [pc, #224]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201d      	movs	r0, #29
 8001cb0:	f002 f875 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cb4:	201d      	movs	r0, #29
 8001cb6:	f002 f88c 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8001cba:	e056      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <HAL_TIM_Base_MspInit+0x158>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d114      	bne.n	8001cf0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	201e      	movs	r0, #30
 8001ce4:	f002 f85b 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f002 f872 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8001cee:	e03c      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <HAL_TIM_Base_MspInit+0x15c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
}
 8001d12:	e02a      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <HAL_TIM_Base_MspInit+0x160>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a15      	ldr	r2, [pc, #84]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d24:	f043 0320 	orr.w	r3, r3, #32
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2037      	movs	r0, #55	@ 0x37
 8001d3c:	f002 f82f 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d40:	2037      	movs	r0, #55	@ 0x37
 8001d42:	f002 f846 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
}
 8001d46:	e010      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_TIM_Base_MspInit+0x164>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10b      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_TIM_Base_MspInit+0x150>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	@ 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40001000 	.word	0x40001000
 8001d88:	40001400 	.word	0x40001400
 8001d8c:	40014400 	.word	0x40014400

08001d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <HAL_TIM_MspPostInit+0xac>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11e      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f002 fe33 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dee:	e021      	b.n	8001e34 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df8:	d11c      	bne.n	8001e34 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e12:	2320      	movs	r3, #32
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e30:	f002 fe10 	bl	8004a54 <HAL_GPIO_Init>
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	@ 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40021000 	.word	0x40021000

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 f8ed 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001eaa:	f002 fb73 	bl	8004594 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000110 	.word	0x20000110

08001eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <TIM2_IRQHandler+0x10>)
 8001ebe:	f004 f921 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200001c0 	.word	0x200001c0

08001ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <TIM3_IRQHandler+0x58>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <TIM3_IRQHandler+0x58>)
 8001eda:	801a      	strh	r2, [r3, #0]
	if(millis % (CAN_interval/2) == 0){
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <TIM3_IRQHandler+0x58>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <TIM3_IRQHandler+0x5c>)
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	0852      	lsrs	r2, r2, #1
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001eec:	fb01 f202 	mul.w	r2, r1, r2
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <TIM3_IRQHandler+0x4c>
		  CAN_switch_state(can_select);
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <TIM3_IRQHandler+0x60>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fac7 	bl	8000490 <CAN_switch_state>
		  if(can_select == 0){
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <TIM3_IRQHandler+0x60>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <TIM3_IRQHandler+0x46>
			  can_select = 1;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <TIM3_IRQHandler+0x60>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e002      	b.n	8001f18 <TIM3_IRQHandler+0x4c>
		  }else{
			  can_select = 0;
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <TIM3_IRQHandler+0x60>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
		  }
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <TIM3_IRQHandler+0x64>)
 8001f1a:	f004 f8f3 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000062c 	.word	0x2000062c
 8001f28:	20000642 	.word	0x20000642
 8001f2c:	2000062e 	.word	0x2000062e
 8001f30:	2000020c 	.word	0x2000020c

08001f34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <TIM4_IRQHandler+0x10>)
 8001f3a:	f004 f8e3 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000258 	.word	0x20000258

08001f48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <TIM7_IRQHandler+0x10>)
 8001f4e:	f004 f8d9 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200002f0 	.word	0x200002f0

08001f5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f80:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <LoopForever+0xe>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8001fcc <LoopForever+0x16>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffd7 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f005 f9e9 	bl	8007384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7ff f801 	bl	8000fb8 <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   r0, =_estack
 8001fb8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fc4:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 8001fc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fcc:	20000698 	.word	0x20000698

08001fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_2_IRQHandler>

08001fd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f001 fed3 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f80e 	bl	8002004 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	e001      	b.n	8001ff8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff4:	f7ff fcee 	bl	80019d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]

}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <HAL_InitTick+0x68>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_InitTick+0x6c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_InitTick+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fede 	bl	8003dee <HAL_SYSTICK_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	d809      	bhi.n	8002052 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203e:	2200      	movs	r2, #0
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	f04f 30ff 	mov.w	r0, #4294967295
 8002046:	f001 feaa 	bl	8003d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_InitTick+0x70>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e007      	b.n	8002062 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e004      	b.n	8002062 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e001      	b.n	8002062 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000008 	.word	0x20000008
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x1c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x20>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4413      	add	r3, r2
 8002086:	4a03      	ldr	r2, [pc, #12]	@ (8002094 <HAL_IncTick+0x1c>)
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000694 	.word	0x20000694
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000694 	.word	0x20000694

080020b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3360      	adds	r3, #96	@ 0x60
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <LL_ADC_SetOffset+0x44>)
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	4313      	orrs	r3, r2
 800214c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	03fff000 	.word	0x03fff000

08002164 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3360      	adds	r3, #96	@ 0x60
 8002172:	461a      	mov	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3360      	adds	r3, #96	@ 0x60
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b087      	sub	sp, #28
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3360      	adds	r3, #96	@ 0x60
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3360      	adds	r3, #96	@ 0x60
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	431a      	orrs	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800227e:	b480      	push	{r7}
 8002280:	b087      	sub	sp, #28
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3330      	adds	r3, #48	@ 0x30
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	211f      	movs	r1, #31
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	f003 011f 	and.w	r1, r3, #31
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3314      	adds	r3, #20
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0e5b      	lsrs	r3, r3, #25
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0d1b      	lsrs	r3, r3, #20
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2107      	movs	r1, #7
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	0d1b      	lsrs	r3, r3, #20
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0318 	and.w	r3, r3, #24
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002350:	40d9      	lsrs	r1, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	400b      	ands	r3, r1
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	0007ffff 	.word	0x0007ffff

08002374 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6093      	str	r3, [r2, #8]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e4:	d101      	bne.n	80023ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800240c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002434:	d101      	bne.n	800243a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002484:	f043 0202 	orr.w	r2, r3, #2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <LL_ADC_IsEnabled+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_ADC_IsEnabled+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsDisableOngoing+0x18>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsDisableOngoing+0x1a>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002520:	f043 0210 	orr.w	r2, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d101      	bne.n	800254c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800256a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d101      	bne.n	800259a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b089      	sub	sp, #36	@ 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e167      	b.n	8002892 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fa23 	bl	8001a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fef1 	bl	80023d0 <LL_ADC_IsDeepPowerDownEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fed7 	bl	80023ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff0c 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fef0 	bl	80023f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002618:	4ba0      	ldr	r3, [pc, #640]	@ (800289c <HAL_ADC_Init+0x2f4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	4aa0      	ldr	r2, [pc, #640]	@ (80028a0 <HAL_ADC_Init+0x2f8>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800262c:	e002      	b.n	8002634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b01      	subs	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff feee 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff62 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 8100 	bne.w	8002880 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 80fc 	bne.w	8002880 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fefb 	bl	8002498 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026ac:	f7ff fef4 	bl	8002498 <LL_ADC_IsEnabled>
 80026b0:	4604      	mov	r4, r0
 80026b2:	487c      	ldr	r0, [pc, #496]	@ (80028a4 <HAL_ADC_Init+0x2fc>)
 80026b4:	f7ff fef0 	bl	8002498 <LL_ADC_IsEnabled>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4323      	orrs	r3, r4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4878      	ldr	r0, [pc, #480]	@ (80028a8 <HAL_ADC_Init+0x300>)
 80026c8:	f7ff fcf4 	bl	80020b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7f5b      	ldrb	r3, [r3, #29]
 80026d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d106      	bne.n	8002708 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	045b      	lsls	r3, r3, #17
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b60      	ldr	r3, [pc, #384]	@ (80028ac <HAL_ADC_Init+0x304>)
 800272c:	4013      	ands	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	430b      	orrs	r3, r1
 8002736:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff15 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8002758:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d16d      	bne.n	800283c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d16a      	bne.n	800283c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002772:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	430b      	orrs	r3, r1
 800278e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6911      	ldr	r1, [r2, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80027c6:	e013      	b.n	80027f0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d118      	bne.n	800282c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281c:	430a      	orrs	r2, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	e007      	b.n	800283c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10c      	bne.n	800285e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f023 010f 	bic.w	r1, r3, #15
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
 800285c:	e007      	b.n	800286e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 020f 	bic.w	r2, r2, #15
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800287e:	e007      	b.n	8002890 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	f043 0210 	orr.w	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002890:	7ffb      	ldrb	r3, [r7, #31]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000
 80028a0:	053e2d63 	.word	0x053e2d63
 80028a4:	50000100 	.word	0x50000100
 80028a8:	50000300 	.word	0x50000300
 80028ac:	fff04007 	.word	0xfff04007

080028b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	4859      	ldr	r0, [pc, #356]	@ (8002a20 <HAL_ADC_Start+0x170>)
 80028ba:	f7ff fd5b 	bl	8002374 <LL_ADC_GetMultimode>
 80028be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe35 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 809f 	bne.w	8002a10 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_Start+0x30>
 80028dc:	2302      	movs	r3, #2
 80028de:	e09a      	b.n	8002a16 <HAL_ADC_Start+0x166>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 ffcd 	bl	8003888 <ADC_Enable>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 8086 	bne.w	8002a06 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a44      	ldr	r2, [pc, #272]	@ (8002a24 <HAL_ADC_Start+0x174>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d002      	beq.n	800291e <HAL_ADC_Start+0x6e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e001      	b.n	8002922 <HAL_ADC_Start+0x72>
 800291e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	d002      	beq.n	8002930 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002948:	d106      	bne.n	8002958 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f023 0206 	bic.w	r2, r3, #6
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	661a      	str	r2, [r3, #96]	@ 0x60
 8002956:	e002      	b.n	800295e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	221c      	movs	r2, #28
 8002964:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2c      	ldr	r2, [pc, #176]	@ (8002a24 <HAL_ADC_Start+0x174>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d002      	beq.n	800297e <HAL_ADC_Start+0xce>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e001      	b.n	8002982 <HAL_ADC_Start+0xd2>
 800297e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4293      	cmp	r3, r2
 8002988:	d008      	beq.n	800299c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d002      	beq.n	800299c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d114      	bne.n	80029c6 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fd90 	bl	80024e4 <LL_ADC_REG_StartConversion>
 80029c4:	e026      	b.n	8002a14 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a13      	ldr	r2, [pc, #76]	@ (8002a24 <HAL_ADC_Start+0x174>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_Start+0x132>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e001      	b.n	80029e6 <HAL_ADC_Start+0x136>
 80029e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029e6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a04:	e006      	b.n	8002a14 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002a0e:	e001      	b.n	8002a14 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	50000300 	.word	0x50000300
 8002a24:	50000100 	.word	0x50000100

08002a28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Stop+0x16>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e023      	b.n	8002a86 <HAL_ADC_Stop+0x5e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a46:	2103      	movs	r1, #3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fe61 	bl	8003710 <ADC_ConversionStop>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 ff9b 	bl	8003994 <ADC_Disable>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a9a:	4867      	ldr	r0, [pc, #412]	@ (8002c38 <HAL_ADC_PollForConversion+0x1a8>)
 8002a9c:	f7ff fc6a 	bl	8002374 <LL_ADC_GetMultimode>
 8002aa0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d102      	bne.n	8002ab0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e02a      	b.n	8002b06 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d002      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0a6      	b.n	8002c2e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ae4:	e00f      	b.n	8002b06 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ae6:	4854      	ldr	r0, [pc, #336]	@ (8002c38 <HAL_ADC_PollForConversion+0x1a8>)
 8002ae8:	f7ff fc52 	bl	8002390 <LL_ADC_GetMultiDMATransfer>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e095      	b.n	8002c2e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b02:	2304      	movs	r3, #4
 8002b04:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b06:	f7ff fac9 	bl	800209c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b0c:	e021      	b.n	8002b52 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d01d      	beq.n	8002b52 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b16:	f7ff fac1 	bl	800209c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <HAL_ADC_PollForConversion+0x9c>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d112      	bne.n	8002b52 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06d      	b.n	8002c2e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0d6      	beq.n	8002b0e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fb71 	bl	8002258 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7f5b      	ldrb	r3, [r3, #29]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d118      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d111      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <HAL_ADC_PollForConversion+0x1ac>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d002      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x136>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e001      	b.n	8002bca <HAL_ADC_PollForConversion+0x13a>
 8002bc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d008      	beq.n	8002be4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d002      	beq.n	8002be4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	d104      	bne.n	8002bee <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e00d      	b.n	8002c0a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <HAL_ADC_PollForConversion+0x1ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d002      	beq.n	8002bfe <HAL_ADC_PollForConversion+0x16e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e001      	b.n	8002c02 <HAL_ADC_PollForConversion+0x172>
 8002bfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d104      	bne.n	8002c1a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2208      	movs	r2, #8
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e008      	b.n	8002c2c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	220c      	movs	r2, #12
 8002c2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	50000300 	.word	0x50000300
 8002c3c:	50000100 	.word	0x50000100

08002c40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c48:	4893      	ldr	r0, [pc, #588]	@ (8002e98 <HAL_ADC_Start_IT+0x258>)
 8002c4a:	f7ff fb93 	bl	8002374 <LL_ADC_GetMultimode>
 8002c4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fc6d 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 8113 	bne.w	8002e88 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_Start_IT+0x30>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e10e      	b.n	8002e8e <HAL_ADC_Start_IT+0x24e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fe05 	bl	8003888 <ADC_Enable>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 80fa 	bne.w	8002e7e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8002e9c <HAL_ADC_Start_IT+0x25c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d002      	beq.n	8002cae <HAL_ADC_Start_IT+0x6e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	e001      	b.n	8002cb2 <HAL_ADC_Start_IT+0x72>
 8002cae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f023 0206 	bic.w	r2, r3, #6
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ce4:	e002      	b.n	8002cec <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	221c      	movs	r2, #28
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 021c 	bic.w	r2, r2, #28
 8002d0a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d108      	bne.n	8002d26 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0208 	orr.w	r2, r2, #8
 8002d22:	605a      	str	r2, [r3, #4]
          break;
 8002d24:	e008      	b.n	8002d38 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	605a      	str	r2, [r3, #4]
          break;
 8002d36:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0210 	orr.w	r2, r2, #16
 8002d4e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a51      	ldr	r2, [pc, #324]	@ (8002e9c <HAL_ADC_Start_IT+0x25c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d002      	beq.n	8002d60 <HAL_ADC_Start_IT+0x120>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e001      	b.n	8002d64 <HAL_ADC_Start_IT+0x124>
 8002d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d008      	beq.n	8002d7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d002      	beq.n	8002d7e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d13a      	bne.n	8002df4 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02d      	beq.n	8002de8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d110      	bne.n	8002dc6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0220 	bic.w	r2, r2, #32
 8002db2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc2:	605a      	str	r2, [r3, #4]
              break;
 8002dc4:	e010      	b.n	8002de8 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0220 	orr.w	r2, r2, #32
 8002de4:	605a      	str	r2, [r3, #4]
              break;
 8002de6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fb79 	bl	80024e4 <LL_ADC_REG_StartConversion>
 8002df2:	e04b      	b.n	8002e8c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_ADC_Start_IT+0x25c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d002      	beq.n	8002e10 <HAL_ADC_Start_IT+0x1d0>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e001      	b.n	8002e14 <HAL_ADC_Start_IT+0x1d4>
 8002e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e14:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d034      	beq.n	8002e8c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d110      	bne.n	8002e5c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0220 	bic.w	r2, r2, #32
 8002e48:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e58:	605a      	str	r2, [r3, #4]
              break;
 8002e5a:	e017      	b.n	8002e8c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0220 	orr.w	r2, r2, #32
 8002e7a:	605a      	str	r2, [r3, #4]
              break;
 8002e7c:	e006      	b.n	8002e8c <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	50000100 	.word	0x50000100

08002ea0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Stop_IT+0x16>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e02b      	b.n	8002f0e <HAL_ADC_Stop_IT+0x6e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fc25 	bl	8003710 <ADC_ConversionStop>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d119      	bne.n	8002f04 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 021c 	bic.w	r2, r2, #28
 8002ede:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fd57 	bl	8003994 <ADC_Disable>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0b6      	sub	sp, #216	@ 0xd8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x22>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e3c8      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x7b4>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fae8 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 83ad 	bne.w	80036c6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f7ff f980 	bl	800227e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fad6 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 8002f88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff faf6 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8002f96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 81d9 	bne.w	8003356 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 81d4 	bne.w	8003356 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7ff f987 	bl	80022d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f92e 	bl	8002232 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fd6:	e00e      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f7ff f976 	bl	80022d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f91e 	bl	8002232 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d022      	beq.n	800305e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003028:	f7ff f878 	bl	800211c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6919      	ldr	r1, [r3, #16]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	461a      	mov	r2, r3
 800303a:	f7ff f8c4 	bl	80021c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x124>
 800304e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003052:	e000      	b.n	8003056 <HAL_ADC_ConfigChannel+0x126>
 8003054:	2300      	movs	r3, #0
 8003056:	461a      	mov	r2, r3
 8003058:	f7ff f8d0 	bl	80021fc <LL_ADC_SetOffsetSaturation>
 800305c:	e17b      	b.n	8003356 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff f87d 	bl	8002164 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_ADC_ConfigChannel+0x15a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f872 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	e01e      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x198>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f867 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e004      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1b0>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	e018      	b.n	8003112 <HAL_ADC_ConfigChannel+0x1e2>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003112:	429a      	cmp	r2, r3
 8003114:	d106      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f836 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f81a 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x220>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f80f 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	e01e      	b.n	800318e <HAL_ADC_ConfigChannel+0x25e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f804 	bl	8002164 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e004      	b.n	800318c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d105      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x276>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	e018      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x2a8>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031d8:	429a      	cmp	r2, r3
 80031da:	d106      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe ffd3 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2102      	movs	r1, #2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe ffb7 	bl	8002164 <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x2e6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe ffac 	bl	8002164 <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	e01e      	b.n	8003254 <HAL_ADC_ConfigChannel+0x324>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe ffa1 	bl	8002164 <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003238:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800323c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e004      	b.n	8003252 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003248:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_ConfigChannel+0x33c>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	e016      	b.n	800329a <HAL_ADC_ConfigChannel+0x36a>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800327e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	e004      	b.n	800329a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ff72 	bl	8002190 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2103      	movs	r1, #3
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe ff56 	bl	8002164 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x3a8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2103      	movs	r1, #3
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe ff4b 	bl	8002164 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	f003 021f 	and.w	r2, r3, #31
 80032d6:	e017      	b.n	8003308 <HAL_ADC_ConfigChannel+0x3d8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2103      	movs	r1, #3
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe ff40 	bl	8002164 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e003      	b.n	8003306 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x3f0>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	e011      	b.n	8003344 <HAL_ADC_ConfigChannel+0x414>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800332e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003330:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800333c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2103      	movs	r1, #3
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe ff1d 	bl	8002190 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f89c 	bl	8002498 <LL_ADC_IsEnabled>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8140 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	461a      	mov	r2, r3
 8003376:	f7fe ffd9 	bl	800232c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4a8f      	ldr	r2, [pc, #572]	@ (80035bc <HAL_ADC_ConfigChannel+0x68c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	f040 8131 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x47e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	3301      	adds	r3, #1
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b09      	cmp	r3, #9
 80033a4:	bf94      	ite	ls
 80033a6:	2301      	movls	r3, #1
 80033a8:	2300      	movhi	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e019      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x4b2>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2b09      	cmp	r3, #9
 80033da:	bf94      	ite	ls
 80033dc:	2301      	movls	r3, #1
 80033de:	2300      	movhi	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d079      	beq.n	80034da <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x4d2>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	069b      	lsls	r3, r3, #26
 80033fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003400:	e015      	b.n	800342e <HAL_ADC_ConfigChannel+0x4fe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003412:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e003      	b.n	8003426 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	3301      	adds	r3, #1
 8003428:	069b      	lsls	r3, r3, #26
 800342a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_ADC_ConfigChannel+0x51e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	3301      	adds	r3, #1
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	e017      	b.n	800347e <HAL_ADC_ConfigChannel+0x54e>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800345c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e003      	b.n	8003472 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800346a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	ea42 0103 	orr.w	r1, r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x574>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	f003 021f 	and.w	r2, r3, #31
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	051b      	lsls	r3, r3, #20
 80034a2:	e018      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x5a6>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 021f 	and.w	r2, r3, #31
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d6:	430b      	orrs	r3, r1
 80034d8:	e081      	b.n	80035de <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x5c6>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	3301      	adds	r3, #1
 80034ee:	069b      	lsls	r3, r3, #26
 80034f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f4:	e015      	b.n	8003522 <HAL_ADC_ConfigChannel+0x5f2>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e003      	b.n	800351a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	3301      	adds	r3, #1
 800351c:	069b      	lsls	r3, r3, #26
 800351e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x612>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	3301      	adds	r3, #1
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	e017      	b.n	8003572 <HAL_ADC_ConfigChannel+0x642>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	61fb      	str	r3, [r7, #28]
  return result;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	ea42 0103 	orr.w	r1, r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_ADC_ConfigChannel+0x66e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	3b1e      	subs	r3, #30
 8003596:	051b      	lsls	r3, r3, #20
 8003598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800359c:	e01e      	b.n	80035dc <HAL_ADC_ConfigChannel+0x6ac>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	613b      	str	r3, [r7, #16]
  return result;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e006      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x698>
 80035ba:	bf00      	nop
 80035bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 021f 	and.w	r2, r3, #31
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	3b1e      	subs	r3, #30
 80035d6:	051b      	lsls	r3, r3, #20
 80035d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7fe fe77 	bl	80022d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <HAL_ADC_ConfigChannel+0x7bc>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d071      	beq.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035f4:	483e      	ldr	r0, [pc, #248]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80035f6:	f7fe fd83 	bl	8002100 <LL_ADC_GetCommonPathInternalCh>
 80035fa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3c      	ldr	r2, [pc, #240]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x6e2>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3a      	ldr	r2, [pc, #232]	@ (80036f8 <HAL_ADC_ConfigChannel+0x7c8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d127      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d121      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003626:	d157      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800362c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003630:	4619      	mov	r1, r3
 8003632:	482f      	ldr	r0, [pc, #188]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003634:	f7fe fd51 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003638:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_ADC_ConfigChannel+0x7cc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	4a30      	ldr	r2, [pc, #192]	@ (8003700 <HAL_ADC_ConfigChannel+0x7d0>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003652:	e002      	b.n	800365a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f9      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003660:	e03a      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a27      	ldr	r2, [pc, #156]	@ (8003704 <HAL_ADC_ConfigChannel+0x7d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d113      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a22      	ldr	r2, [pc, #136]	@ (8003708 <HAL_ADC_ConfigChannel+0x7d8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d02a      	beq.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368a:	4619      	mov	r1, r3
 800368c:	4818      	ldr	r0, [pc, #96]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7c0>)
 800368e:	f7fe fd24 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003692:	e021      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_ADC_ConfigChannel+0x7dc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d11c      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_ADC_ConfigChannel+0x7d8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d011      	beq.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036bc:	4619      	mov	r1, r3
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036c0:	f7fe fd0b 	bl	80020da <LL_ADC_SetCommonPathInternalCh>
 80036c4:	e008      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	37d8      	adds	r7, #216	@ 0xd8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	80080000 	.word	0x80080000
 80036f0:	50000300 	.word	0x50000300
 80036f4:	c3210000 	.word	0xc3210000
 80036f8:	90c00010 	.word	0x90c00010
 80036fc:	20000000 	.word	0x20000000
 8003700:	053e2d63 	.word	0x053e2d63
 8003704:	c7520000 	.word	0xc7520000
 8003708:	50000100 	.word	0x50000100
 800370c:	cb840000 	.word	0xcb840000

08003710 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff04 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 800372c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff25 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 8003738:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8098 	beq.w	8003878 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02a      	beq.n	80037ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7f5b      	ldrb	r3, [r3, #29]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d126      	bne.n	80037ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7f1b      	ldrb	r3, [r3, #28]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d122      	bne.n	80037ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800376a:	e014      	b.n	8003796 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4a45      	ldr	r2, [pc, #276]	@ (8003884 <ADC_ConversionStop+0x174>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d90d      	bls.n	8003790 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e074      	b.n	800387a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	3301      	adds	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d1e3      	bne.n	800376c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2240      	movs	r2, #64	@ 0x40
 80037aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d014      	beq.n	80037dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe febc 	bl	8002534 <LL_ADC_REG_IsConversionOngoing>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fe79 	bl	80024be <LL_ADC_IsDisableOngoing>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fe98 	bl	800250c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d014      	beq.n	800380c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fecb 	bl	8002582 <LL_ADC_INJ_IsConversionOngoing>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fe61 	bl	80024be <LL_ADC_IsDisableOngoing>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fea7 	bl	800255a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d005      	beq.n	800381e <ADC_ConversionStop+0x10e>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d105      	bne.n	8003824 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003818:	230c      	movs	r3, #12
 800381a:	617b      	str	r3, [r7, #20]
        break;
 800381c:	e005      	b.n	800382a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800381e:	2308      	movs	r3, #8
 8003820:	617b      	str	r3, [r7, #20]
        break;
 8003822:	e002      	b.n	800382a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003824:	2304      	movs	r3, #4
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800382a:	f7fe fc37 	bl	800209c <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003830:	e01b      	b.n	800386a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003832:	f7fe fc33 	bl	800209c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b05      	cmp	r3, #5
 800383e:	d914      	bls.n	800386a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1dc      	bne.n	8003832 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	a33fffff 	.word	0xa33fffff

08003888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fdfd 	bl	8002498 <LL_ADC_IsEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d169      	bne.n	8003978 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	4b36      	ldr	r3, [pc, #216]	@ (8003984 <ADC_Enable+0xfc>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e055      	b.n	800397a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fdb8 	bl	8002448 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038d8:	482b      	ldr	r0, [pc, #172]	@ (8003988 <ADC_Enable+0x100>)
 80038da:	f7fe fc11 	bl	8002100 <LL_ADC_GetCommonPathInternalCh>
 80038de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e8:	4b28      	ldr	r3, [pc, #160]	@ (800398c <ADC_Enable+0x104>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <ADC_Enable+0x108>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003902:	e002      	b.n	800390a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003910:	f7fe fbc4 	bl	800209c <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003916:	e028      	b.n	800396a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fdbb 	bl	8002498 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fd8b 	bl	8002448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003932:	f7fe fbb3 	bl	800209c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d914      	bls.n	800396a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00d      	beq.n	800396a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d1cf      	bne.n	8003918 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	8000003f 	.word	0x8000003f
 8003988:	50000300 	.word	0x50000300
 800398c:	20000000 	.word	0x20000000
 8003990:	053e2d63 	.word	0x053e2d63

08003994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fd8c 	bl	80024be <LL_ADC_IsDisableOngoing>
 80039a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fd73 	bl	8002498 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d047      	beq.n	8003a48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d144      	bne.n	8003a48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030d 	and.w	r3, r3, #13
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fd4d 	bl	8002470 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2203      	movs	r2, #3
 80039dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039de:	f7fe fb5d 	bl	800209c <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e4:	e029      	b.n	8003a3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f043 0210 	orr.w	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e023      	b.n	8003a4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a02:	f7fe fb4b 	bl	800209c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d914      	bls.n	8003a3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1dc      	bne.n	8003a02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <LL_ADC_IsEnabled>:
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_IsEnabled+0x18>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_IsEnabled+0x1a>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d101      	bne.n	8003a90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b0a1      	sub	sp, #132	@ 0x84
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e08b      	b.n	8003bd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aca:	2300      	movs	r3, #0
 8003acc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad6:	d102      	bne.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ad8:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	e001      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e06a      	b.n	8003bd6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffb8 	bl	8003a78 <LL_ADC_REG_IsConversionOngoing>
 8003b08:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ffb2 	bl	8003a78 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d14c      	bne.n	8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d149      	bne.n	8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b20:	4b30      	ldr	r3, [pc, #192]	@ (8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d028      	beq.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b3e:	035b      	lsls	r3, r3, #13
 8003b40:	430b      	orrs	r3, r1
 8003b42:	431a      	orrs	r2, r3
 8003b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b4c:	f7ff ff81 	bl	8003a52 <LL_ADC_IsEnabled>
 8003b50:	4604      	mov	r4, r0
 8003b52:	4823      	ldr	r0, [pc, #140]	@ (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b54:	f7ff ff7d 	bl	8003a52 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d133      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b68:	f023 030f 	bic.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	6892      	ldr	r2, [r2, #8]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	431a      	orrs	r2, r3
 8003b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7c:	e024      	b.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b8a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b8e:	f7ff ff60 	bl	8003a52 <LL_ADC_IsEnabled>
 8003b92:	4604      	mov	r4, r0
 8003b94:	4812      	ldr	r0, [pc, #72]	@ (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b96:	f7ff ff5c 	bl	8003a52 <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4323      	orrs	r3, r4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d112      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003baa:	f023 030f 	bic.w	r3, r3, #15
 8003bae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003bb0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb2:	e009      	b.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003bc6:	e000      	b.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3784      	adds	r7, #132	@ 0x84
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd90      	pop	{r4, r7, pc}
 8003bde:	bf00      	nop
 8003be0:	50000100 	.word	0x50000100
 8003be4:	50000300 	.word	0x50000300

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	@ (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	@ (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	@ (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	@ 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	@ 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff8e 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff29 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dac:	f7ff ff40 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff90 	bl	8003cdc <NVIC_EncodePriority>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff5f 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff33 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa4 	bl	8003d44 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e147      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fe98 	bl	8001b64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0210 	bic.w	r2, r2, #16
 8003e42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7fe f92a 	bl	800209c <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e4a:	e012      	b.n	8003e72 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e4c:	f7fe f926 	bl	800209c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b0a      	cmp	r3, #10
 8003e58:	d90b      	bls.n	8003e72 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e11b      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d0e5      	beq.n	8003e4c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7fe f904 	bl	800209c <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e96:	e012      	b.n	8003ebe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e98:	f7fe f900 	bl	800209c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b0a      	cmp	r3, #10
 8003ea4:	d90b      	bls.n	8003ebe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0f5      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0e5      	beq.n	8003e98 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0202 	orr.w	r2, r2, #2
 8003eda:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a74      	ldr	r2, [pc, #464]	@ (80040b4 <HAL_FDCAN_Init+0x2ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ee6:	4a74      	ldr	r2, [pc, #464]	@ (80040b8 <HAL_FDCAN_Init+0x2b0>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7c1b      	ldrb	r3, [r3, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e007      	b.n	8003f18 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f16:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7c5b      	ldrb	r3, [r3, #17]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2e:	619a      	str	r2, [r3, #24]
 8003f30:	e007      	b.n	8003f42 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f40:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7c9b      	ldrb	r3, [r3, #18]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f58:	619a      	str	r2, [r3, #24]
 8003f5a:	e007      	b.n	8003f6c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f6a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003f90:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0210 	bic.w	r2, r2, #16
 8003fa0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0204 	orr.w	r2, r2, #4
 8003fb8:	619a      	str	r2, [r3, #24]
 8003fba:	e02c      	b.n	8004016 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d028      	beq.n	8004016 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d01c      	beq.n	8004006 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fda:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0210 	orr.w	r2, r2, #16
 8003fea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d110      	bne.n	8004016 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0220 	orr.w	r2, r2, #32
 8004002:	619a      	str	r2, [r3, #24]
 8004004:	e007      	b.n	8004016 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	3b01      	subs	r3, #1
 800401c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	3b01      	subs	r3, #1
 8004024:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004026:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800402e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	3b01      	subs	r3, #1
 8004038:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800403e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004040:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404a:	d115      	bne.n	8004078 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	3b01      	subs	r3, #1
 8004058:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800405a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	3b01      	subs	r3, #1
 8004062:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004064:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	3b01      	subs	r3, #1
 800406e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004074:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004076:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fc0e 	bl	80048b0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40006400 	.word	0x40006400
 80040b8:	40006500 	.word	0x40006500

080040bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d110      	bne.n	80040f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e006      	b.n	8004100 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d12c      	bne.n	800417e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800412c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e023      	b.n	800418c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fbfe 	bl	800495c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004170:	2201      	movs	r2, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e006      	b.n	800418c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f043 0208 	orr.w	r2, r3, #8
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004194:	b480      	push	{r7}
 8004196:	b08b      	sub	sp, #44	@ 0x2c
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80041ae:	7efb      	ldrb	r3, [r7, #27]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f040 80e8 	bne.w	8004386 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b40      	cmp	r3, #64	@ 0x40
 80041ba:	d137      	bne.n	800422c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0db      	b.n	8004394 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10a      	bne.n	8004204 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
 800422a:	e036      	b.n	800429a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004240:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0a3      	b.n	8004394 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10a      	bne.n	8004274 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	0c9b      	lsrs	r3, r3, #18
 80042b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e005      	b.n	80042ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	3304      	adds	r3, #4
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e1b      	lsrs	r3, r3, #24
 800431e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	0fda      	lsrs	r2, r3, #31
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	3304      	adds	r3, #4
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	e00a      	b.n	8004356 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	441a      	add	r2, r3
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	440b      	add	r3, r1
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	3301      	adds	r3, #1
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a11      	ldr	r2, [pc, #68]	@ (80043a0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	461a      	mov	r2, r3
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	4293      	cmp	r3, r2
 8004364:	d3ec      	bcc.n	8004340 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d105      	bne.n	8004378 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004376:	e004      	b.n	8004382 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e006      	b.n	8004394 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	f043 0208 	orr.w	r2, r3, #8
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	372c      	adds	r7, #44	@ 0x2c
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	080073f4 	.word	0x080073f4

080043a4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043da:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <HAL_FDCAN_ActivateNotification+0x22>
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f040 80c8 	bne.w	800457a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03b      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d031      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d027      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01d      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d13b      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d131      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d127      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11d      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0202 	orr.w	r2, r2, #2
 8004528:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	430a      	orrs	r2, r1
 8004544:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	430a      	orrs	r2, r1
 8004562:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	430a      	orrs	r2, r1
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e006      	b.n	8004588 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f043 0202 	orr.w	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	@ 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b0:	4013      	ands	r3, r2
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c8:	4013      	ands	r3, r2
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	4013      	ands	r3, r2
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ea:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80045ee:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	4013      	ands	r3, r2
 80045fa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004606:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	4013      	ands	r3, r2
 8004612:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2240      	movs	r2, #64	@ 0x40
 800463e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f916 	bl	8004872 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004662:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8d8 	bl	8004834 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004690:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8a2 	bl	80047de <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80046a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fb fe9a 	bl	80003e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80046be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f897 	bl	80047f4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00c      	beq.n	80046ea <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f890 	bl	800480a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d018      	beq.n	8004726 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004706:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2280      	movs	r2, #128	@ 0x80
 800471c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f87c 	bl	800481e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f880 	bl	800484a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004766:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f878 	bl	800485e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800478a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004790:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f876 	bl	800489a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a3a      	ldr	r2, [r7, #32]
 80047ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f858 	bl	8004886 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80047d6:	bf00      	nop
 80047d8:	3730      	adds	r7, #48	@ 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80048b8:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80048ba:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ca:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	041a      	lsls	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	061a      	lsls	r2, r3, #24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e005      	b.n	800493e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d3f3      	bcc.n	8004932 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	4000a400 	.word	0x4000a400

0800495c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800497a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004982:	4313      	orrs	r3, r2
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e00a      	b.n	800499e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004990:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004996:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004998:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800499c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80049ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80049b4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	3304      	adds	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3304      	adds	r3, #4
 80049e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e020      	b.n	8004a32 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3303      	adds	r3, #3
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	3302      	adds	r3, #2
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	440b      	add	r3, r1
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a08:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	440b      	add	r3, r1
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a16:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004a20:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	4a06      	ldr	r2, [pc, #24]	@ (8004a50 <FDCAN_CopyMessageToRAM+0xf4>)
 8004a38:	5cd3      	ldrb	r3, [r2, r3]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d3d6      	bcc.n	80049f0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3724      	adds	r7, #36	@ 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	080073f4 	.word	0x080073f4

08004a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a62:	e15a      	b.n	8004d1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	4013      	ands	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 814c 	beq.w	8004d14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d005      	beq.n	8004a94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d130      	bne.n	8004af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aca:	2201      	movs	r2, #1
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 0201 	and.w	r2, r3, #1
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d017      	beq.n	8004b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d123      	bne.n	8004b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	08da      	lsrs	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3208      	adds	r2, #8
 8004b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	08da      	lsrs	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3208      	adds	r2, #8
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2203      	movs	r2, #3
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0203 	and.w	r2, r3, #3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004bd4:	4b58      	ldr	r3, [pc, #352]	@ (8004d38 <HAL_GPIO_Init+0x2e4>)
 8004bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004be0:	4a56      	ldr	r2, [pc, #344]	@ (8004d3c <HAL_GPIO_Init+0x2e8>)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	089b      	lsrs	r3, r3, #2
 8004be6:	3302      	adds	r3, #2
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	220f      	movs	r2, #15
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c0a:	d01f      	beq.n	8004c4c <HAL_GPIO_Init+0x1f8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d40 <HAL_GPIO_Init+0x2ec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d019      	beq.n	8004c48 <HAL_GPIO_Init+0x1f4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <HAL_GPIO_Init+0x2f0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_GPIO_Init+0x1f0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_GPIO_Init+0x2f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00d      	beq.n	8004c40 <HAL_GPIO_Init+0x1ec>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a49      	ldr	r2, [pc, #292]	@ (8004d4c <HAL_GPIO_Init+0x2f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_GPIO_Init+0x1e8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a48      	ldr	r2, [pc, #288]	@ (8004d50 <HAL_GPIO_Init+0x2fc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_GPIO_Init+0x1e4>
 8004c34:	2305      	movs	r3, #5
 8004c36:	e00a      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c38:	2306      	movs	r3, #6
 8004c3a:	e008      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	e006      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c40:	2303      	movs	r3, #3
 8004c42:	e004      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e002      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_GPIO_Init+0x1fa>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f002 0203 	and.w	r2, r2, #3
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	4093      	lsls	r3, r2
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c5e:	4937      	ldr	r1, [pc, #220]	@ (8004d3c <HAL_GPIO_Init+0x2e8>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3302      	adds	r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c6c:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c90:	4a30      	ldr	r2, [pc, #192]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cba:	4a26      	ldr	r2, [pc, #152]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cc0:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cea:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d0e:	4a11      	ldr	r2, [pc, #68]	@ (8004d54 <HAL_GPIO_Init+0x300>)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f47f ae9d 	bne.w	8004a64 <HAL_GPIO_Init+0x10>
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	48000400 	.word	0x48000400
 8004d44:	48000800 	.word	0x48000800
 8004d48:	48000c00 	.word	0x48000c00
 8004d4c:	48001000 	.word	0x48001000
 8004d50:	48001400 	.word	0x48001400
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
 8004d64:	4613      	mov	r3, r2
 8004d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d68:	787b      	ldrb	r3, [r7, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d74:	e002      	b.n	8004d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d141      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d96:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da2:	d131      	bne.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004da4:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004daa:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db4:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dbc:	4a41      	ldr	r2, [pc, #260]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc4:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2232      	movs	r2, #50	@ 0x32
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c9b      	lsrs	r3, r3, #18
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dda:	e002      	b.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de2:	4b38      	ldr	r3, [pc, #224]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d102      	bne.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f2      	bne.n	8004ddc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df6:	4b33      	ldr	r3, [pc, #204]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e02:	d158      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e057      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e18:	e04d      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e20:	d141      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2e:	d131      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e40:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2232      	movs	r2, #50	@ 0x32
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	0c9b      	lsrs	r3, r3, #18
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e66:	e002      	b.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d102      	bne.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8e:	d112      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e011      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ea4:	e007      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ea6:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eae:	4a05      	ldr	r2, [pc, #20]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	20000000 	.word	0x20000000
 8004ecc:	431bde83 	.word	0x431bde83

08004ed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ede:	6093      	str	r3, [r2, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000

08004ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e2fe      	b.n	8005500 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d075      	beq.n	8004ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0e:	4b97      	ldr	r3, [pc, #604]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f18:	4b94      	ldr	r3, [pc, #592]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d102      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3e>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCC_OscConfig+0x44>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	4b8d      	ldr	r3, [pc, #564]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05b      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x108>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d157      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e2d9      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x74>
 8004f56:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a84      	ldr	r2, [pc, #528]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x98>
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7e      	ldr	r2, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f88:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b75      	ldr	r3, [pc, #468]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a74      	ldr	r2, [pc, #464]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f878 	bl	800209c <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd f874 	bl	800209c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e29e      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xc0>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd f864 	bl	800209c <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fd f860 	bl	800209c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e28a      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fea:	4b60      	ldr	r3, [pc, #384]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xe8>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d075      	beq.n	80050f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4b59      	ldr	r3, [pc, #356]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005010:	4b56      	ldr	r3, [pc, #344]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	d102      	bne.n	8005026 <HAL_RCC_OscConfig+0x136>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d002      	beq.n	800502c <HAL_RCC_OscConfig+0x13c>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d11f      	bne.n	800506c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502c:	4b4f      	ldr	r3, [pc, #316]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_OscConfig+0x154>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e25d      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	4946      	ldr	r1, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005058:	4b45      	ldr	r3, [pc, #276]	@ (8005170 <HAL_RCC_OscConfig+0x280>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fc ffd1 	bl	8002004 <HAL_InitTick>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d043      	beq.n	80050f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e249      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d023      	beq.n	80050bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005074:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3c      	ldr	r2, [pc, #240]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fd f80c 	bl	800209c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005088:	f7fd f808 	bl	800209c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e232      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509a:	4b34      	ldr	r3, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	492d      	ldr	r1, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
 80050ba:	e01a      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050bc:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc ffe8 	bl	800209c <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fc ffe4 	bl	800209c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e20e      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1e0>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d041      	beq.n	8005182 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01c      	beq.n	8005140 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b19      	ldr	r3, [pc, #100]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fc ffc1 	bl	800209c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511e:	f7fc ffbd 	bl	800209c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e1e7      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x22e>
 800513e:	e020      	b.n	8005182 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005140:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005146:	4a09      	ldr	r2, [pc, #36]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fc ffa4 	bl	800209c <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005156:	e00d      	b.n	8005174 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fc ffa0 	bl	800209c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d906      	bls.n	8005174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e1ca      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005174:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1ea      	bne.n	8005158 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80a6 	beq.w	80052dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005190:	2300      	movs	r3, #0
 8005192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005194:	4b84      	ldr	r3, [pc, #528]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2b4>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x2b6>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b7f      	ldr	r3, [pc, #508]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	4a7e      	ldr	r2, [pc, #504]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b6:	4b7c      	ldr	r3, [pc, #496]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c6:	4b79      	ldr	r3, [pc, #484]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d2:	4b76      	ldr	r3, [pc, #472]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a75      	ldr	r2, [pc, #468]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7fc ff5d 	bl	800209c <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fc ff59 	bl	800209c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e183      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f8:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <HAL_RCC_OscConfig+0x32e>
 800520c:	4b66      	ldr	r3, [pc, #408]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	4a65      	ldr	r2, [pc, #404]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800521c:	e024      	b.n	8005268 <HAL_RCC_OscConfig+0x378>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d110      	bne.n	8005248 <HAL_RCC_OscConfig+0x358>
 8005226:	4b60      	ldr	r3, [pc, #384]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522c:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800522e:	f043 0304 	orr.w	r3, r3, #4
 8005232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005236:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	4a5a      	ldr	r2, [pc, #360]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005246:	e00f      	b.n	8005268 <HAL_RCC_OscConfig+0x378>
 8005248:	4b57      	ldr	r3, [pc, #348]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005258:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a52      	ldr	r2, [pc, #328]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fc ff14 	bl	800209c <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fc ff10 	bl	800209c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e138      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	4b46      	ldr	r3, [pc, #280]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ed      	beq.n	8005278 <HAL_RCC_OscConfig+0x388>
 800529c:	e015      	b.n	80052ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fc fefd 	bl	800209c <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a4:	e00a      	b.n	80052bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fc fef9 	bl	800209c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e121      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052bc:	4b3a      	ldr	r3, [pc, #232]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ed      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d0:	4b35      	ldr	r3, [pc, #212]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d4:	4a34      	ldr	r2, [pc, #208]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03c      	beq.n	8005362 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01c      	beq.n	800532a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052f0:	4b2d      	ldr	r3, [pc, #180]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052f6:	4a2c      	ldr	r2, [pc, #176]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005300:	f7fc fecc 	bl	800209c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005308:	f7fc fec8 	bl	800209c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0f2      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800531a:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ef      	beq.n	8005308 <HAL_RCC_OscConfig+0x418>
 8005328:	e01b      	b.n	8005362 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800532a:	4b1f      	ldr	r3, [pc, #124]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005330:	4a1d      	ldr	r2, [pc, #116]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533a:	f7fc feaf 	bl	800209c <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005342:	f7fc feab 	bl	800209c <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0d5      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ef      	bne.n	8005342 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80c9 	beq.w	80054fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536c:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b0c      	cmp	r3, #12
 8005376:	f000 8083 	beq.w	8005480 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d15e      	bne.n	8005440 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005382:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fc fe85 	bl	800209c <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005394:	e00c      	b.n	80053b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fc fe81 	bl	800209c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d905      	bls.n	80053b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0ab      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b0:	4b55      	ldr	r3, [pc, #340]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ec      	bne.n	8005396 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053bc:	4b52      	ldr	r3, [pc, #328]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b52      	ldr	r3, [pc, #328]	@ (800550c <HAL_RCC_OscConfig+0x61c>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6a11      	ldr	r1, [r2, #32]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053d6:	0212      	lsls	r2, r2, #8
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053de:	0852      	lsrs	r2, r2, #1
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0552      	lsls	r2, r2, #21
 80053e4:	4311      	orrs	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0652      	lsls	r2, r2, #25
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053f6:	06d2      	lsls	r2, r2, #27
 80053f8:	430a      	orrs	r2, r1
 80053fa:	4943      	ldr	r1, [pc, #268]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a40      	ldr	r2, [pc, #256]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800540c:	4b3e      	ldr	r3, [pc, #248]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a3d      	ldr	r2, [pc, #244]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fc fe40 	bl	800209c <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fc fe3c 	bl	800209c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e066      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005432:	4b35      	ldr	r3, [pc, #212]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x530>
 800543e:	e05e      	b.n	80054fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005440:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a30      	ldr	r2, [pc, #192]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fc fe26 	bl	800209c <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005454:	f7fc fe22 	bl	800209c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e04c      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005466:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005472:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	4924      	ldr	r1, [pc, #144]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005478:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x620>)
 800547a:	4013      	ands	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
 800547e:	e03e      	b.n	80054fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e039      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800548c:	4b1e      	ldr	r3, [pc, #120]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f003 0203 	and.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	429a      	cmp	r2, r3
 800549e:	d12c      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	3b01      	subs	r3, #1
 80054ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d123      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d11b      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d113      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	3b01      	subs	r3, #1
 80054e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d109      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	3b01      	subs	r3, #1
 80054f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	019f800c 	.word	0x019f800c
 8005510:	feeefffc 	.word	0xfeeefffc

08005514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e11e      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b91      	ldr	r3, [pc, #580]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d910      	bls.n	800555c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b8e      	ldr	r3, [pc, #568]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 020f 	bic.w	r2, r3, #15
 8005542:	498c      	ldr	r1, [pc, #560]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b8a      	ldr	r3, [pc, #552]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e106      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d073      	beq.n	8005650 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d129      	bne.n	80055c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005570:	4b81      	ldr	r3, [pc, #516]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0f4      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005580:	f000 f966 	bl	8005850 <RCC_GetSysClockFreqFromPLLSource>
 8005584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a7c      	ldr	r2, [pc, #496]	@ (800577c <HAL_RCC_ClockConfig+0x268>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d93f      	bls.n	800560e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800558e:	4b7a      	ldr	r3, [pc, #488]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d033      	beq.n	800560e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12f      	bne.n	800560e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ae:	4b72      	ldr	r3, [pc, #456]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055b6:	4a70      	ldr	r2, [pc, #448]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e024      	b.n	800560e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0c6      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055dc:	4b66      	ldr	r3, [pc, #408]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0be      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055ec:	f000 f8ce 	bl	800578c <HAL_RCC_GetSysClockFreq>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4a61      	ldr	r2, [pc, #388]	@ (800577c <HAL_RCC_ClockConfig+0x268>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d909      	bls.n	800560e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	4a5d      	ldr	r2, [pc, #372]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800560e:	4b5a      	ldr	r3, [pc, #360]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4957      	ldr	r1, [pc, #348]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fc fd3c 	bl	800209c <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7fc fd38 	bl	800209c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e095      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	4b4e      	ldr	r3, [pc, #312]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 020c 	and.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d1eb      	bne.n	8005628 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d023      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005668:	4b43      	ldr	r3, [pc, #268]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a42      	ldr	r2, [pc, #264]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800566e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005672:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005680:	4b3d      	ldr	r3, [pc, #244]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005688:	4a3b      	ldr	r2, [pc, #236]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800568a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800568e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005690:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4936      	ldr	r1, [pc, #216]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056aa:	4b33      	ldr	r3, [pc, #204]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	4a32      	ldr	r2, [pc, #200]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80056b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d21d      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 020f 	bic.w	r2, r3, #15
 80056cc:	4929      	ldr	r1, [pc, #164]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056d4:	f7fc fce2 	bl	800209c <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fc fcde 	bl	800209c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e03b      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1ed      	bne.n	80056dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570c:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4917      	ldr	r1, [pc, #92]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572a:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	490f      	ldr	r1, [pc, #60]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800573e:	f000 f825 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8005742:	4602      	mov	r2, r0
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	490c      	ldr	r1, [pc, #48]	@ (8005780 <HAL_RCC_ClockConfig+0x26c>)
 8005750:	5ccb      	ldrb	r3, [r1, r3]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <HAL_RCC_ClockConfig+0x270>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800575e:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <HAL_RCC_ClockConfig+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fc fc4e 	bl	8002004 <HAL_InitTick>
 8005768:	4603      	mov	r3, r0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40022000 	.word	0x40022000
 8005778:	40021000 	.word	0x40021000
 800577c:	04c4b400 	.word	0x04c4b400
 8005780:	080073e4 	.word	0x080073e4
 8005784:	20000000 	.word	0x20000000
 8005788:	20000004 	.word	0x20000004

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005792:	4b2c      	ldr	r3, [pc, #176]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b04      	cmp	r3, #4
 800579c:	d102      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800579e:	4b2a      	ldr	r3, [pc, #168]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e047      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057a4:	4b27      	ldr	r3, [pc, #156]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d102      	bne.n	80057b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b0:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e03e      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057b6:	4b23      	ldr	r3, [pc, #140]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d136      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057c2:	4b20      	ldr	r3, [pc, #128]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3301      	adds	r3, #1
 80057d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d10c      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e0:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	4a16      	ldr	r2, [pc, #88]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ea:	68d2      	ldr	r2, [r2, #12]
 80057ec:	0a12      	lsrs	r2, r2, #8
 80057ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
      break;
 80057f8:	e00c      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057fa:	4a13      	ldr	r2, [pc, #76]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	4a10      	ldr	r2, [pc, #64]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005804:	68d2      	ldr	r2, [r2, #12]
 8005806:	0a12      	lsrs	r2, r2, #8
 8005808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
      break;
 8005812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0e5b      	lsrs	r3, r3, #25
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e001      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005834:	693b      	ldr	r3, [r7, #16]
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	00f42400 	.word	0x00f42400
 800584c:	007a1200 	.word	0x007a1200

08005850 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005856:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005860:	4b1b      	ldr	r3, [pc, #108]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b03      	cmp	r3, #3
 8005872:	d10c      	bne.n	800588e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005874:	4a17      	ldr	r2, [pc, #92]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	4a14      	ldr	r2, [pc, #80]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800587e:	68d2      	ldr	r2, [r2, #12]
 8005880:	0a12      	lsrs	r2, r2, #8
 8005882:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
    break;
 800588c:	e00c      	b.n	80058a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800588e:	4a12      	ldr	r2, [pc, #72]	@ (80058d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	4a0e      	ldr	r2, [pc, #56]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	0a12      	lsrs	r2, r2, #8
 800589c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
    break;
 80058a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058a8:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	0e5b      	lsrs	r3, r3, #25
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	3301      	adds	r3, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058c2:	687b      	ldr	r3, [r7, #4]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40021000 	.word	0x40021000
 80058d4:	007a1200 	.word	0x007a1200
 80058d8:	00f42400 	.word	0x00f42400

080058dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058e4:	2300      	movs	r3, #0
 80058e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058e8:	2300      	movs	r3, #0
 80058ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8098 	beq.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058fa:	2300      	movs	r3, #0
 80058fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058fe:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590a:	4b40      	ldr	r3, [pc, #256]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005914:	6593      	str	r3, [r2, #88]	@ 0x58
 8005916:	4b3d      	ldr	r3, [pc, #244]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005922:	2301      	movs	r3, #1
 8005924:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005926:	4b3a      	ldr	r3, [pc, #232]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a39      	ldr	r2, [pc, #228]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005932:	f7fc fbb3 	bl	800209c <HAL_GetTick>
 8005936:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005938:	e009      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7fc fbaf 	bl	800209c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d902      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	74fb      	strb	r3, [r7, #19]
        break;
 800594c:	e005      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800594e:	4b30      	ldr	r3, [pc, #192]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ef      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d159      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005960:	4b2a      	ldr	r3, [pc, #168]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01e      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	d019      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800597c:	4b23      	ldr	r3, [pc, #140]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005986:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005988:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005998:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059a8:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fc fb6f 	bl	800209c <HAL_GetTick>
 80059be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c0:	e00b      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc fb6b 	bl	800209c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d902      	bls.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	74fb      	strb	r3, [r7, #19]
            break;
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059da:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0ec      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ee:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	4903      	ldr	r1, [pc, #12]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a04:	e008      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	74bb      	strb	r3, [r7, #18]
 8005a0a:	e005      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a18:	7c7b      	ldrb	r3, [r7, #17]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4ba6      	ldr	r3, [pc, #664]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a22:	4aa5      	ldr	r2, [pc, #660]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a36:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	f023 0203 	bic.w	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	499c      	ldr	r1, [pc, #624]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a58:	4b97      	ldr	r3, [pc, #604]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5e:	f023 020c 	bic.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4994      	ldr	r1, [pc, #592]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	498b      	ldr	r1, [pc, #556]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a9c:	4b86      	ldr	r3, [pc, #536]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4983      	ldr	r1, [pc, #524]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005abe:	4b7e      	ldr	r3, [pc, #504]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	497a      	ldr	r1, [pc, #488]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae0:	4b75      	ldr	r3, [pc, #468]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4972      	ldr	r1, [pc, #456]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b02:	4b6d      	ldr	r3, [pc, #436]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	4969      	ldr	r1, [pc, #420]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b24:	4b64      	ldr	r3, [pc, #400]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4961      	ldr	r1, [pc, #388]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b46:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	4958      	ldr	r1, [pc, #352]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b68:	4b53      	ldr	r3, [pc, #332]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	4950      	ldr	r1, [pc, #320]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b86:	d105      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b88:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba0:	4b45      	ldr	r3, [pc, #276]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	4942      	ldr	r1, [pc, #264]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bd8:	4b37      	ldr	r3, [pc, #220]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	4934      	ldr	r1, [pc, #208]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bf6:	d105      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d015      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c10:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	4926      	ldr	r1, [pc, #152]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c2e:	d105      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c30:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d015      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	4918      	ldr	r1, [pc, #96]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c66:	d105      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a12      	ldr	r2, [pc, #72]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c80:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	490a      	ldr	r1, [pc, #40]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9e:	d105      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005caa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cac:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000

08005cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e049      	b.n	8005d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fb ffa0 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f000 fd92 	bl	8006824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e04a      	b.n	8005e1a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a21      	ldr	r2, [pc, #132]	@ (8005e28 <HAL_TIM_Base_Start_IT+0xbc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dae:	d013      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xc0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d115      	bne.n	8005e04 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	4b17      	ldr	r3, [pc, #92]	@ (8005e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d015      	beq.n	8005e16 <HAL_TIM_Base_Start_IT+0xaa>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df0:	d011      	beq.n	8005e16 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e02:	e008      	b.n	8005e16 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e000      	b.n	8005e18 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	00010007 	.word	0x00010007

08005e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e049      	b.n	8005ee6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f841 	bl	8005eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 fcd0 	bl	8006824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x24>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e03c      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d109      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x3e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	bf14      	ite	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	2300      	moveq	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e02f      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d109      	bne.n	8005f5c <HAL_TIM_PWM_Start+0x58>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	e022      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b0c      	cmp	r3, #12
 8005f60:	d109      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x72>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e015      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x8c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e008      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e097      	b.n	80060da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0xb6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb8:	e023      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0xc6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc8:	e01b      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Start+0xd6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd8:	e013      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Start+0xe6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fe8:	e00b      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xf6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ff8:	e003      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f838 	bl	8007080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a33      	ldr	r2, [pc, #204]	@ (80060e4 <HAL_TIM_PWM_Start+0x1e0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_TIM_PWM_Start+0x13e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a32      	ldr	r2, [pc, #200]	@ (80060e8 <HAL_TIM_PWM_Start+0x1e4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00e      	beq.n	8006042 <HAL_TIM_PWM_Start+0x13e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a30      	ldr	r2, [pc, #192]	@ (80060ec <HAL_TIM_PWM_Start+0x1e8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d009      	beq.n	8006042 <HAL_TIM_PWM_Start+0x13e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2f      	ldr	r2, [pc, #188]	@ (80060f0 <HAL_TIM_PWM_Start+0x1ec>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_TIM_PWM_Start+0x13e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2d      	ldr	r2, [pc, #180]	@ (80060f4 <HAL_TIM_PWM_Start+0x1f0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_TIM_PWM_Start+0x142>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <HAL_TIM_PWM_Start+0x144>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800605a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a20      	ldr	r2, [pc, #128]	@ (80060e4 <HAL_TIM_PWM_Start+0x1e0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_PWM_Start+0x194>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d013      	beq.n	8006098 <HAL_TIM_PWM_Start+0x194>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a20      	ldr	r2, [pc, #128]	@ (80060f8 <HAL_TIM_PWM_Start+0x1f4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_PWM_Start+0x194>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1f      	ldr	r2, [pc, #124]	@ (80060fc <HAL_TIM_PWM_Start+0x1f8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_PWM_Start+0x194>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <HAL_TIM_PWM_Start+0x1e4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_PWM_Start+0x194>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <HAL_TIM_PWM_Start+0x1e8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d115      	bne.n	80060c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b18      	ldr	r3, [pc, #96]	@ (8006100 <HAL_TIM_PWM_Start+0x1fc>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d015      	beq.n	80060d6 <HAL_TIM_PWM_Start+0x1d2>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d011      	beq.n	80060d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	e008      	b.n	80060d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	00010007 	.word	0x00010007

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0202 	mvn.w	r2, #2
 8006138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb4a 	bl	80067e8 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fb3c 	bl	80067d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fb4d 	bl	80067fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb24 	bl	80067e8 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fb16 	bl	80067d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb27 	bl	80067fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fafe 	bl	80067e8 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 faf0 	bl	80067d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb01 	bl	80067fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d020      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01b      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0210 	mvn.w	r2, #16
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2208      	movs	r2, #8
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fad8 	bl	80067e8 <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 faca 	bl	80067d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fadb 	bl	80067fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0201 	mvn.w	r2, #1
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 faa8 	bl	80067c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00c      	beq.n	800629e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f82f 	bl	80072fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00c      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f827 	bl	8007310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00c      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa95 	bl	8006810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0220 	mvn.w	r2, #32
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 ffef 	bl	80072e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fffb 	bl	8007324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800634a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fff3 	bl	8007338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ffeb 	bl	800734c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 ffe3 	bl	8007360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063be:	2302      	movs	r3, #2
 80063c0:	e0ff      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b14      	cmp	r3, #20
 80063ce:	f200 80f0 	bhi.w	80065b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	080065b3 	.word	0x080065b3
 80063e0:	080065b3 	.word	0x080065b3
 80063e4:	080065b3 	.word	0x080065b3
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	080065b3 	.word	0x080065b3
 80063f0:	080065b3 	.word	0x080065b3
 80063f4:	080065b3 	.word	0x080065b3
 80063f8:	080064af 	.word	0x080064af
 80063fc:	080065b3 	.word	0x080065b3
 8006400:	080065b3 	.word	0x080065b3
 8006404:	080065b3 	.word	0x080065b3
 8006408:	080064ef 	.word	0x080064ef
 800640c:	080065b3 	.word	0x080065b3
 8006410:	080065b3 	.word	0x080065b3
 8006414:	080065b3 	.word	0x080065b3
 8006418:	08006531 	.word	0x08006531
 800641c:	080065b3 	.word	0x080065b3
 8006420:	080065b3 	.word	0x080065b3
 8006424:	080065b3 	.word	0x080065b3
 8006428:	08006571 	.word	0x08006571
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fa92 	bl	800695c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0204 	bic.w	r2, r2, #4
 8006456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6999      	ldr	r1, [r3, #24]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	619a      	str	r2, [r3, #24]
      break;
 800646a:	e0a5      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fb02 	bl	8006a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6999      	ldr	r1, [r3, #24]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	021a      	lsls	r2, r3, #8
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]
      break;
 80064ac:	e084      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb6b 	bl	8006b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0208 	orr.w	r2, r2, #8
 80064c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0204 	bic.w	r2, r2, #4
 80064d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69d9      	ldr	r1, [r3, #28]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	61da      	str	r2, [r3, #28]
      break;
 80064ec:	e064      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fbd3 	bl	8006ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69d9      	ldr	r1, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	021a      	lsls	r2, r3, #8
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	61da      	str	r2, [r3, #28]
      break;
 800652e:	e043      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fc3c 	bl	8006db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0208 	orr.w	r2, r2, #8
 800654a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0204 	bic.w	r2, r2, #4
 800655a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800656e:	e023      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fc80 	bl	8006e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800658a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800659a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	021a      	lsls	r2, r3, #8
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80065b0:	e002      	b.n	80065b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
      break;
 80065b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIM_ConfigClockSource+0x1c>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e0de      	b.n	80067a6 <HAL_TIM_ConfigClockSource+0x1da>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006606:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800660a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a63      	ldr	r2, [pc, #396]	@ (80067b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f000 80a9 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 8006628:	4a61      	ldr	r2, [pc, #388]	@ (80067b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	f200 80ae 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006630:	4a60      	ldr	r2, [pc, #384]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f000 80a1 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 8006638:	4a5e      	ldr	r2, [pc, #376]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f200 80a6 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006640:	4a5d      	ldr	r2, [pc, #372]	@ (80067b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f000 8099 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 8006648:	4a5b      	ldr	r2, [pc, #364]	@ (80067b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f200 809e 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006650:	4a5a      	ldr	r2, [pc, #360]	@ (80067bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f000 8091 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 8006658:	4a58      	ldr	r2, [pc, #352]	@ (80067bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	f200 8096 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006664:	f000 8089 	beq.w	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 8006668:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800666c:	f200 808e 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006674:	d03e      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x128>
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800667a:	f200 8087 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	f000 8086 	beq.w	8006792 <HAL_TIM_ConfigClockSource+0x1c6>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668a:	d87f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 800668c:	2b70      	cmp	r3, #112	@ 0x70
 800668e:	d01a      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xfa>
 8006690:	2b70      	cmp	r3, #112	@ 0x70
 8006692:	d87b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 8006694:	2b60      	cmp	r3, #96	@ 0x60
 8006696:	d050      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x16e>
 8006698:	2b60      	cmp	r3, #96	@ 0x60
 800669a:	d877      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 800669c:	2b50      	cmp	r3, #80	@ 0x50
 800669e:	d03c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x14e>
 80066a0:	2b50      	cmp	r3, #80	@ 0x50
 80066a2:	d873      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 80066a4:	2b40      	cmp	r3, #64	@ 0x40
 80066a6:	d058      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x18e>
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d86f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 80066ac:	2b30      	cmp	r3, #48	@ 0x30
 80066ae:	d064      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 80066b0:	2b30      	cmp	r3, #48	@ 0x30
 80066b2:	d86b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d060      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d867      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d05a      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x1ae>
 80066c4:	e062      	b.n	800678c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d6:	f000 fcb3 	bl	8007040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	609a      	str	r2, [r3, #8]
      break;
 80066f2:	e04f      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006704:	f000 fc9c 	bl	8007040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006716:	609a      	str	r2, [r3, #8]
      break;
 8006718:	e03c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	461a      	mov	r2, r3
 8006728:	f000 fc0e 	bl	8006f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2150      	movs	r1, #80	@ 0x50
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fc67 	bl	8007006 <TIM_ITRx_SetConfig>
      break;
 8006738:	e02c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006746:	461a      	mov	r2, r3
 8006748:	f000 fc2d 	bl	8006fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2160      	movs	r1, #96	@ 0x60
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fc57 	bl	8007006 <TIM_ITRx_SetConfig>
      break;
 8006758:	e01c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fbee 	bl	8006f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2140      	movs	r1, #64	@ 0x40
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fc47 	bl	8007006 <TIM_ITRx_SetConfig>
      break;
 8006778:	e00c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 fc3e 	bl	8007006 <TIM_ITRx_SetConfig>
      break;
 800678a:	e003      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e000      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	00100070 	.word	0x00100070
 80067b4:	00100040 	.word	0x00100040
 80067b8:	00100030 	.word	0x00100030
 80067bc:	00100020 	.word	0x00100020

080067c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a42      	ldr	r2, [pc, #264]	@ (8006940 <TIM_Base_SetConfig+0x11c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00f      	beq.n	800685c <TIM_Base_SetConfig+0x38>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006842:	d00b      	beq.n	800685c <TIM_Base_SetConfig+0x38>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a3f      	ldr	r2, [pc, #252]	@ (8006944 <TIM_Base_SetConfig+0x120>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_Base_SetConfig+0x38>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a3e      	ldr	r2, [pc, #248]	@ (8006948 <TIM_Base_SetConfig+0x124>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_Base_SetConfig+0x38>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a3d      	ldr	r2, [pc, #244]	@ (800694c <TIM_Base_SetConfig+0x128>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d108      	bne.n	800686e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a33      	ldr	r2, [pc, #204]	@ (8006940 <TIM_Base_SetConfig+0x11c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01b      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687c:	d017      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a30      	ldr	r2, [pc, #192]	@ (8006944 <TIM_Base_SetConfig+0x120>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2f      	ldr	r2, [pc, #188]	@ (8006948 <TIM_Base_SetConfig+0x124>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2e      	ldr	r2, [pc, #184]	@ (800694c <TIM_Base_SetConfig+0x128>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2d      	ldr	r2, [pc, #180]	@ (8006950 <TIM_Base_SetConfig+0x12c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006954 <TIM_Base_SetConfig+0x130>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_Base_SetConfig+0x8a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006958 <TIM_Base_SetConfig+0x134>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d108      	bne.n	80068c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <TIM_Base_SetConfig+0x11c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0xe8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	@ (800694c <TIM_Base_SetConfig+0x128>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0xe8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <TIM_Base_SetConfig+0x12c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0xe8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <TIM_Base_SetConfig+0x130>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0xe8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a14      	ldr	r2, [pc, #80]	@ (8006958 <TIM_Base_SetConfig+0x134>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d103      	bne.n	8006914 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d105      	bne.n	8006932 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f023 0201 	bic.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]
  }
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40013400 	.word	0x40013400
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0201 	bic.w	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 0302 	bic.w	r3, r3, #2
 80069a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <TIM_OC1_SetConfig+0x10c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00f      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a2b      	ldr	r2, [pc, #172]	@ (8006a6c <TIM_OC1_SetConfig+0x110>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a70 <TIM_OC1_SetConfig+0x114>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a29      	ldr	r2, [pc, #164]	@ (8006a74 <TIM_OC1_SetConfig+0x118>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a28      	ldr	r2, [pc, #160]	@ (8006a78 <TIM_OC1_SetConfig+0x11c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d10c      	bne.n	80069f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0308 	bic.w	r3, r3, #8
 80069e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 0304 	bic.w	r3, r3, #4
 80069f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a68 <TIM_OC1_SetConfig+0x10c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <TIM_OC1_SetConfig+0x110>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a19      	ldr	r2, [pc, #100]	@ (8006a70 <TIM_OC1_SetConfig+0x114>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <TIM_OC1_SetConfig+0x118>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC1_SetConfig+0x11c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d111      	bne.n	8006a42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	40012c00 	.word	0x40012c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800

08006a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f023 0210 	bic.w	r2, r3, #16
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0320 	bic.w	r3, r3, #32
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a28      	ldr	r2, [pc, #160]	@ (8006b7c <TIM_OC2_SetConfig+0x100>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC2_SetConfig+0x6c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <TIM_OC2_SetConfig+0x104>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10d      	bne.n	8006b04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <TIM_OC2_SetConfig+0x100>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <TIM_OC2_SetConfig+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <TIM_OC2_SetConfig+0x108>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <TIM_OC2_SetConfig+0x10c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <TIM_OC2_SetConfig+0x110>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d113      	bne.n	8006b54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a27      	ldr	r2, [pc, #156]	@ (8006c8c <TIM_OC3_SetConfig+0xfc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC3_SetConfig+0x6a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <TIM_OC3_SetConfig+0x100>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <TIM_OC3_SetConfig+0xfc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <TIM_OC3_SetConfig+0x100>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	@ (8006c94 <TIM_OC3_SetConfig+0x104>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a19      	ldr	r2, [pc, #100]	@ (8006c98 <TIM_OC3_SetConfig+0x108>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <TIM_OC3_SetConfig+0x10c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	bf00      	nop
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a28      	ldr	r2, [pc, #160]	@ (8006da0 <TIM_OC4_SetConfig+0x100>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC4_SetConfig+0x6c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a27      	ldr	r2, [pc, #156]	@ (8006da4 <TIM_OC4_SetConfig+0x104>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d10d      	bne.n	8006d28 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	031b      	lsls	r3, r3, #12
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006da0 <TIM_OC4_SetConfig+0x100>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00f      	beq.n	8006d50 <TIM_OC4_SetConfig+0xb0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1c      	ldr	r2, [pc, #112]	@ (8006da4 <TIM_OC4_SetConfig+0x104>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00b      	beq.n	8006d50 <TIM_OC4_SetConfig+0xb0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006da8 <TIM_OC4_SetConfig+0x108>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d007      	beq.n	8006d50 <TIM_OC4_SetConfig+0xb0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1a      	ldr	r2, [pc, #104]	@ (8006dac <TIM_OC4_SetConfig+0x10c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC4_SetConfig+0xb0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a19      	ldr	r2, [pc, #100]	@ (8006db0 <TIM_OC4_SetConfig+0x110>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d113      	bne.n	8006d78 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	019b      	lsls	r3, r3, #6
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	019b      	lsls	r3, r3, #6
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40013400 	.word	0x40013400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800

08006db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <TIM_OC5_SetConfig+0xb4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00f      	beq.n	8006e2e <TIM_OC5_SetConfig+0x7a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <TIM_OC5_SetConfig+0xb8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00b      	beq.n	8006e2e <TIM_OC5_SetConfig+0x7a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a15      	ldr	r2, [pc, #84]	@ (8006e70 <TIM_OC5_SetConfig+0xbc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d007      	beq.n	8006e2e <TIM_OC5_SetConfig+0x7a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a14      	ldr	r2, [pc, #80]	@ (8006e74 <TIM_OC5_SetConfig+0xc0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d003      	beq.n	8006e2e <TIM_OC5_SetConfig+0x7a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a13      	ldr	r2, [pc, #76]	@ (8006e78 <TIM_OC5_SetConfig+0xc4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d109      	bne.n	8006e42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800

08006e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	051b      	lsls	r3, r3, #20
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <TIM_OC6_SetConfig+0xb8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_OC6_SetConfig+0x7c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a17      	ldr	r2, [pc, #92]	@ (8006f38 <TIM_OC6_SetConfig+0xbc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_OC6_SetConfig+0x7c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a16      	ldr	r2, [pc, #88]	@ (8006f3c <TIM_OC6_SetConfig+0xc0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_OC6_SetConfig+0x7c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <TIM_OC6_SetConfig+0xc4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC6_SetConfig+0x7c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a14      	ldr	r2, [pc, #80]	@ (8006f44 <TIM_OC6_SetConfig+0xc8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d109      	bne.n	8006f0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	40014400 	.word	0x40014400
 8006f44:	40014800 	.word	0x40014800

08006f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 030a 	bic.w	r3, r3, #10
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	f023 0210 	bic.w	r2, r3, #16
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	031b      	lsls	r3, r3, #12
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800701c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	f043 0307 	orr.w	r3, r3, #7
 800702c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	609a      	str	r2, [r3, #8]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800705a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	021a      	lsls	r2, r3, #8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	431a      	orrs	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4313      	orrs	r3, r2
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	609a      	str	r2, [r3, #8]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2201      	movs	r2, #1
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	401a      	ands	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	fa01 f303 	lsl.w	r3, r1, r3
 80070b8:	431a      	orrs	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e065      	b.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2c      	ldr	r2, [pc, #176]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2b      	ldr	r2, [pc, #172]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800711e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715a:	d013      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a17      	ldr	r2, [pc, #92]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a13      	ldr	r2, [pc, #76]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10c      	bne.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40014000 	.word	0x40014000

080071d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e073      	b.n	80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a19      	ldr	r2, [pc, #100]	@ (80072e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a18      	ldr	r2, [pc, #96]	@ (80072e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d11c      	bne.n	80072c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	051b      	lsls	r3, r3, #20
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40013400 	.word	0x40013400

080072e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <memset>:
 8007374:	4402      	add	r2, r0
 8007376:	4603      	mov	r3, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <__libc_init_array>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4d0d      	ldr	r5, [pc, #52]	@ (80073bc <__libc_init_array+0x38>)
 8007388:	4c0d      	ldr	r4, [pc, #52]	@ (80073c0 <__libc_init_array+0x3c>)
 800738a:	1b64      	subs	r4, r4, r5
 800738c:	10a4      	asrs	r4, r4, #2
 800738e:	2600      	movs	r6, #0
 8007390:	42a6      	cmp	r6, r4
 8007392:	d109      	bne.n	80073a8 <__libc_init_array+0x24>
 8007394:	4d0b      	ldr	r5, [pc, #44]	@ (80073c4 <__libc_init_array+0x40>)
 8007396:	4c0c      	ldr	r4, [pc, #48]	@ (80073c8 <__libc_init_array+0x44>)
 8007398:	f000 f818 	bl	80073cc <_init>
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	2600      	movs	r6, #0
 80073a2:	42a6      	cmp	r6, r4
 80073a4:	d105      	bne.n	80073b2 <__libc_init_array+0x2e>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ac:	4798      	blx	r3
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7ee      	b.n	8007390 <__libc_init_array+0xc>
 80073b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b6:	4798      	blx	r3
 80073b8:	3601      	adds	r6, #1
 80073ba:	e7f2      	b.n	80073a2 <__libc_init_array+0x1e>
 80073bc:	08007404 	.word	0x08007404
 80073c0:	08007404 	.word	0x08007404
 80073c4:	08007404 	.word	0x08007404
 80073c8:	08007408 	.word	0x08007408

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
