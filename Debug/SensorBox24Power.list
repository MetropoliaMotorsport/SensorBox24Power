
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080094c0  080094c0  000194c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009790  08009790  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009798  08009798  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080097a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  20000060  08009800  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  08009800  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6d9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031dc  00000000  00000000  0003b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125b  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  0004137b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001afe4  00000000  00000000  00062c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0ce2  00000000  00000000  0007dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bf4  00000000  00000000  0015e95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00165550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080094a8 	.word	0x080094a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080094a8 	.word	0x080094a8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <decode_uart>:
#include "functions.h"
#include "string.h"



void decode_uart(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
	uint8_t str1[7];
	uint8_t str2[5];
	uint8_t str3[3];
	str1[6] = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	75bb      	strb	r3, [r7, #22]
	str2[4] = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	733b      	strb	r3, [r7, #12]
	str3[2] = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	71bb      	strb	r3, [r7, #6]
	uint8_t number;
	uint8_t string_counter = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	77fb      	strb	r3, [r7, #31]
	uint8_t string_determine = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	77bb      	strb	r3, [r7, #30]
	for(int i = 0; i <30; i++){
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	e068      	b.n	80006de <decode_uart+0xf2>
		if(string_determine == 1){
 800060c:	7fbb      	ldrb	r3, [r7, #30]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d11e      	bne.n	8000650 <decode_uart+0x64>
			if(uart_rx_buffer[i] != 32){
 8000612:	4a66      	ldr	r2, [pc, #408]	; (80007ac <decode_uart+0x1c0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b20      	cmp	r3, #32
 800061c:	d012      	beq.n	8000644 <decode_uart+0x58>
				if(uart_rx_buffer[i] != 0){
 800061e:	4a63      	ldr	r2, [pc, #396]	; (80007ac <decode_uart+0x1c0>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d051      	beq.n	80006ce <decode_uart+0xe2>
					str1[string_counter] = uart_rx_buffer[i];
 800062a:	7ffb      	ldrb	r3, [r7, #31]
 800062c:	495f      	ldr	r1, [pc, #380]	; (80007ac <decode_uart+0x1c0>)
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	440a      	add	r2, r1
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	3320      	adds	r3, #32
 8000636:	443b      	add	r3, r7
 8000638:	f803 2c10 	strb.w	r2, [r3, #-16]
					string_counter++;
 800063c:	7ffb      	ldrb	r3, [r7, #31]
 800063e:	3301      	adds	r3, #1
 8000640:	77fb      	strb	r3, [r7, #31]
 8000642:	e044      	b.n	80006ce <decode_uart+0xe2>
				}
			}else{
				string_determine++;
 8000644:	7fbb      	ldrb	r3, [r7, #30]
 8000646:	3301      	adds	r3, #1
 8000648:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	77fb      	strb	r3, [r7, #31]
 800064e:	e03e      	b.n	80006ce <decode_uart+0xe2>
			}
		}else if(string_determine == 2){
 8000650:	7fbb      	ldrb	r3, [r7, #30]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d11e      	bne.n	8000694 <decode_uart+0xa8>
			if(uart_rx_buffer[i] != 32){
 8000656:	4a55      	ldr	r2, [pc, #340]	; (80007ac <decode_uart+0x1c0>)
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b20      	cmp	r3, #32
 8000660:	d012      	beq.n	8000688 <decode_uart+0x9c>
				if(uart_rx_buffer[i] != 0){
 8000662:	4a52      	ldr	r2, [pc, #328]	; (80007ac <decode_uart+0x1c0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d02f      	beq.n	80006ce <decode_uart+0xe2>
					str2[string_counter] = uart_rx_buffer[i];
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	494e      	ldr	r1, [pc, #312]	; (80007ac <decode_uart+0x1c0>)
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	440a      	add	r2, r1
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	3320      	adds	r3, #32
 800067a:	443b      	add	r3, r7
 800067c:	f803 2c18 	strb.w	r2, [r3, #-24]
					string_counter++;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	3301      	adds	r3, #1
 8000684:	77fb      	strb	r3, [r7, #31]
 8000686:	e022      	b.n	80006ce <decode_uart+0xe2>
				}
			}else{
				string_determine++;
 8000688:	7fbb      	ldrb	r3, [r7, #30]
 800068a:	3301      	adds	r3, #1
 800068c:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	77fb      	strb	r3, [r7, #31]
 8000692:	e01c      	b.n	80006ce <decode_uart+0xe2>
			}
		}else{
			if(uart_rx_buffer[i] != 32){
 8000694:	4a45      	ldr	r2, [pc, #276]	; (80007ac <decode_uart+0x1c0>)
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b20      	cmp	r3, #32
 800069e:	d012      	beq.n	80006c6 <decode_uart+0xda>
				if(uart_rx_buffer[i] != 0){
 80006a0:	4a42      	ldr	r2, [pc, #264]	; (80007ac <decode_uart+0x1c0>)
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <decode_uart+0xe2>
					str3[string_counter] = uart_rx_buffer[i];
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	493f      	ldr	r1, [pc, #252]	; (80007ac <decode_uart+0x1c0>)
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	440a      	add	r2, r1
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	3320      	adds	r3, #32
 80006b8:	443b      	add	r3, r7
 80006ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
					string_counter++;
 80006be:	7ffb      	ldrb	r3, [r7, #31]
 80006c0:	3301      	adds	r3, #1
 80006c2:	77fb      	strb	r3, [r7, #31]
 80006c4:	e003      	b.n	80006ce <decode_uart+0xe2>
				}
			}else{
				string_determine = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77fb      	strb	r3, [r7, #31]
			}
		}
		uart_rx_buffer[i] = 0;
 80006ce:	4a37      	ldr	r2, [pc, #220]	; (80007ac <decode_uart+0x1c0>)
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	4413      	add	r3, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <30; i++){
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	3301      	adds	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b1d      	cmp	r3, #29
 80006e2:	dd93      	ble.n	800060c <decode_uart+0x20>
	}

	number = atoi(str3);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 f9a2 	bl	8008a30 <atoi>
 80006ec:	4603      	mov	r3, r0
 80006ee:	75fb      	strb	r3, [r7, #23]

	if(strcmp(str1,"PWM") == 0){
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	492e      	ldr	r1, [pc, #184]	; (80007b0 <decode_uart+0x1c4>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd92 	bl	8000220 <strcmp>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d120      	bne.n	8000744 <decode_uart+0x158>
		if(strcmp(str2,"READ") == 0){
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	492b      	ldr	r1, [pc, #172]	; (80007b4 <decode_uart+0x1c8>)
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fd89 	bl	8000220 <strcmp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <decode_uart+0x12e>
			PWM();
 8000714:	f000 f85e 	bl	80007d4 <PWM>
 8000718:	e041      	b.n	800079e <decode_uart+0x1b2>
		}else if(strcmp(str2,"SET") == 0){
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4926      	ldr	r1, [pc, #152]	; (80007b8 <decode_uart+0x1cc>)
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd7d 	bl	8000220 <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <decode_uart+0x14a>
			PWM_set(number);
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f8d0 	bl	80008d4 <PWM_set>
 8000734:	e033      	b.n	800079e <decode_uart+0x1b2>
		}else{
			print_out("\r\nERR", data_output_switch);
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <decode_uart+0x1d0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4820      	ldr	r0, [pc, #128]	; (80007c0 <decode_uart+0x1d4>)
 800073e:	f000 fc63 	bl	8001008 <print_out>
 8000742:	e02c      	b.n	800079e <decode_uart+0x1b2>
		}
	}else if(strcmp(str1, "OUTPUT") == 0){
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	491e      	ldr	r1, [pc, #120]	; (80007c4 <decode_uart+0x1d8>)
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd68 	bl	8000220 <strcmp>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d11d      	bne.n	8000792 <decode_uart+0x1a6>
		if(strcmp(str2,"READ") == 0){
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4916      	ldr	r1, [pc, #88]	; (80007b4 <decode_uart+0x1c8>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd5f 	bl	8000220 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <decode_uart+0x186>
			OUT_READ(number);
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f888 	bl	8000880 <OUT_READ>
 8000770:	e015      	b.n	800079e <decode_uart+0x1b2>
		}else if(strcmp(str2,"SET/0") == 0){
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4914      	ldr	r1, [pc, #80]	; (80007c8 <decode_uart+0x1dc>)
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd51 	bl	8000220 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00c      	beq.n	800079e <decode_uart+0x1b2>
			//TODO bit set
		}else{
			print_out("\r\nERR", data_output_switch);
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <decode_uart+0x1d0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <decode_uart+0x1d4>)
 800078c:	f000 fc3c 	bl	8001008 <print_out>
 8000790:	e005      	b.n	800079e <decode_uart+0x1b2>
		}
	}else{
		print_out("ERR", data_output_switch);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <decode_uart+0x1d0>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <decode_uart+0x1e0>)
 800079a:	f000 fc35 	bl	8001008 <print_out>
		PWM_set();
	}else{
		print_out(-1, "!!WRONG COMMAND!!", data_output_switch);
	}*/

	command_received_flag = 0;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <decode_uart+0x1e4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000075c 	.word	0x2000075c
 80007b0:	080094c0 	.word	0x080094c0
 80007b4:	080094c4 	.word	0x080094c4
 80007b8:	080094cc 	.word	0x080094cc
 80007bc:	20000000 	.word	0x20000000
 80007c0:	080094d0 	.word	0x080094d0
 80007c4:	080094d8 	.word	0x080094d8
 80007c8:	080094e0 	.word	0x080094e0
 80007cc:	080094e8 	.word	0x080094e8
 80007d0:	2000077a 	.word	0x2000077a

080007d4 <PWM>:

void PWM(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
	char msg1[20];
	char msg2[20];
	char msg3[20];
	char msg4[20];
	sprintf(msg1,"PWM_1 PULSE WIDTH %d",PWM_width[0]);
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <PWM+0x94>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007e4:	4921      	ldr	r1, [pc, #132]	; (800086c <PWM+0x98>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f008 f9b2 	bl	8008b50 <siprintf>
	sprintf(msg2,"PWM_1 frequency %d",PWM_width[0]);
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <PWM+0x94>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	491e      	ldr	r1, [pc, #120]	; (8000870 <PWM+0x9c>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f008 f9a9 	bl	8008b50 <siprintf>
	sprintf(msg3,"PWM_2 PULSE WIDTH %d",PWM_width[0]);
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <PWM+0x94>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	491a      	ldr	r1, [pc, #104]	; (8000874 <PWM+0xa0>)
 800080a:	4618      	mov	r0, r3
 800080c:	f008 f9a0 	bl	8008b50 <siprintf>
	sprintf(msg4,"PWM_2 frequency %d",PWM_width[0]);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <PWM+0x94>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	463b      	mov	r3, r7
 8000818:	4917      	ldr	r1, [pc, #92]	; (8000878 <PWM+0xa4>)
 800081a:	4618      	mov	r0, r3
 800081c:	f008 f998 	bl	8008b50 <siprintf>
	print_out(msg1,data_output_switch);
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <PWM+0xa8>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fbec 	bl	8001008 <print_out>
	print_out(msg2,data_output_switch);
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <PWM+0xa8>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fbe4 	bl	8001008 <print_out>
	print_out(msg3,data_output_switch);
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <PWM+0xa8>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fbdc 	bl	8001008 <print_out>
	print_out(msg4,data_output_switch);
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <PWM+0xa8>)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	463b      	mov	r3, r7
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fbd5 	bl	8001008 <print_out>
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000788 	.word	0x20000788
 800086c:	080094ec 	.word	0x080094ec
 8000870:	08009504 	.word	0x08009504
 8000874:	08009518 	.word	0x08009518
 8000878:	08009530 	.word	0x08009530
 800087c:	20000000 	.word	0x20000000

08000880 <OUT_READ>:

void OUT_READ(uint8_t value){
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t status_bit;
	char msg[8];
		status_bit = check_bit(Default_Switch_State, value+1);
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <OUT_READ+0x48>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4619      	mov	r1, r3
 8000896:	4610      	mov	r0, r2
 8000898:	f000 fc50 	bl	800113c <check_bit>
 800089c:	4603      	mov	r3, r0
 800089e:	75fb      	strb	r3, [r7, #23]
		sprintf(msg,"OUTPUT %d %d", value+1, status_bit);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	f107 000c 	add.w	r0, r7, #12
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <OUT_READ+0x4c>)
 80008ac:	f008 f950 	bl	8008b50 <siprintf>
		print_out(msg, data_output_switch);
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <OUT_READ+0x50>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fba4 	bl	8001008 <print_out>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000077f 	.word	0x2000077f
 80008cc:	08009544 	.word	0x08009544
 80008d0:	20000000 	.word	0x20000000

080008d4 <PWM_set>:

//TODO implement separating numbers from command
void PWM_set(uint8_t value){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	//set_pwm(htim1, value);
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80008ee:	f000 f803 	bl	80008f8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Config_1>:

void Config_1(void){
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 80008fc:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <Config_1+0x17c>)
 80008fe:	f240 726c 	movw	r2, #1900	; 0x76c
 8000902:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 8000904:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <Config_1+0x180>)
 8000906:	f640 0202 	movw	r2, #2050	; 0x802
 800090a:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 800090c:	4b5b      	ldr	r3, [pc, #364]	; (8000a7c <Config_1+0x184>)
 800090e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000912:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 8000914:	4b5a      	ldr	r3, [pc, #360]	; (8000a80 <Config_1+0x188>)
 8000916:	f240 726c 	movw	r2, #1900	; 0x76c
 800091a:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 800091c:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <Config_1+0x18c>)
 800091e:	f640 0202 	movw	r2, #2050	; 0x802
 8000922:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 8000924:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <Config_1+0x190>)
 8000926:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800092a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <Config_1+0x194>)
 800092e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000932:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <Config_1+0x198>)
 8000936:	f640 0202 	movw	r2, #2050	; 0x802
 800093a:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <Config_1+0x19c>)
 800093e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000942:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <Config_1+0x1a0>)
 8000946:	f240 726c 	movw	r2, #1900	; 0x76c
 800094a:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 800094c:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <Config_1+0x1a4>)
 800094e:	f640 0202 	movw	r2, #2050	; 0x802
 8000952:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <Config_1+0x1a8>)
 8000956:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800095a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 800095c:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <Config_1+0x1ac>)
 800095e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000962:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000964:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <Config_1+0x1b0>)
 8000966:	f640 0202 	movw	r2, #2050	; 0x802
 800096a:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 800096c:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <Config_1+0x1b4>)
 800096e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000972:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000974:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <Config_1+0x1b8>)
 8000976:	f240 726c 	movw	r2, #1900	; 0x76c
 800097a:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <Config_1+0x1bc>)
 800097e:	f640 0202 	movw	r2, #2050	; 0x802
 8000982:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 8000984:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <Config_1+0x1c0>)
 8000986:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800098a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <Config_1+0x1c4>)
 800098e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000992:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 8000994:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <Config_1+0x1c8>)
 8000996:	f640 0202 	movw	r2, #2050	; 0x802
 800099a:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 800099c:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <Config_1+0x1cc>)
 800099e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80009a2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 80009a4:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <Config_1+0x1d0>)
 80009a6:	f240 726c 	movw	r2, #1900	; 0x76c
 80009aa:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 80009ac:	4b47      	ldr	r3, [pc, #284]	; (8000acc <Config_1+0x1d4>)
 80009ae:	f640 0202 	movw	r2, #2050	; 0x802
 80009b2:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 80009b4:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <Config_1+0x1d8>)
 80009b6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80009ba:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b00011011; //each bit represent one output [8,7,6,5,4,3,2,1]
 80009bc:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <Config_1+0x1dc>)
 80009be:	221b      	movs	r2, #27
 80009c0:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <Config_1+0x1e0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 80009c8:	4b44      	ldr	r3, [pc, #272]	; (8000adc <Config_1+0x1e4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <Config_1+0x1e4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 80009d4:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <Config_1+0x1e0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00c      	beq.n	80009fa <Config_1+0x102>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <Config_1+0x1e4>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	2364      	movs	r3, #100	; 0x64
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <Config_1+0x1e8>)
 80009ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <Config_1+0x1ec>)
 80009f6:	801a      	strh	r2, [r3, #0]
 80009f8:	e002      	b.n	8000a00 <Config_1+0x108>
	}else{
		PWM_speed[0] = 0;
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <Config_1+0x1ec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 8000a00:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <Config_1+0x1e0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00c      	beq.n	8000a26 <Config_1+0x12e>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <Config_1+0x1e4>)
 8000a0e:	885b      	ldrh	r3, [r3, #2]
 8000a10:	461a      	mov	r2, r3
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <Config_1+0x1e8>)
 8000a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <Config_1+0x1ec>)
 8000a22:	805a      	strh	r2, [r3, #2]
 8000a24:	e002      	b.n	8000a2c <Config_1+0x134>
	}else{
		PWM_speed[1] = 0;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <Config_1+0x1ec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <Config_1+0x1f0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 8000a32:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <Config_1+0x1f0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	805a      	strh	r2, [r3, #2]

	CAN_id[0] = 0x01; //CAN ID for output 1
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <Config_1+0x1f4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
	CAN_id[1] = 0x02; //CAN ID for output 2
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <Config_1+0x1f4>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	705a      	strb	r2, [r3, #1]
	CAN_id[2] = 0x03; //CAN ID for output 3
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <Config_1+0x1f4>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	709a      	strb	r2, [r3, #2]
	CAN_id[3] = 0x04; //CAN ID for output 4
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <Config_1+0x1f4>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	70da      	strb	r2, [r3, #3]
	CAN_id[4] = 0x05; //CAN ID for output 5
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <Config_1+0x1f4>)
 8000a52:	2205      	movs	r2, #5
 8000a54:	711a      	strb	r2, [r3, #4]
	CAN_id[5] = 0x06; //CAN ID for output 6
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <Config_1+0x1f4>)
 8000a58:	2206      	movs	r2, #6
 8000a5a:	715a      	strb	r2, [r3, #5]
	CAN_id[6] = 0x07; //CAN ID for output 7
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <Config_1+0x1f4>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	719a      	strb	r2, [r3, #6]
	CAN_id[7] = 0x08; //CAN ID for output 8
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <Config_1+0x1f4>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	71da      	strb	r2, [r3, #7]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000072c 	.word	0x2000072c
 8000a78:	2000072e 	.word	0x2000072e
 8000a7c:	20000730 	.word	0x20000730
 8000a80:	20000732 	.word	0x20000732
 8000a84:	20000734 	.word	0x20000734
 8000a88:	20000736 	.word	0x20000736
 8000a8c:	20000738 	.word	0x20000738
 8000a90:	2000073a 	.word	0x2000073a
 8000a94:	2000073c 	.word	0x2000073c
 8000a98:	2000073e 	.word	0x2000073e
 8000a9c:	20000740 	.word	0x20000740
 8000aa0:	20000742 	.word	0x20000742
 8000aa4:	20000744 	.word	0x20000744
 8000aa8:	20000746 	.word	0x20000746
 8000aac:	20000748 	.word	0x20000748
 8000ab0:	2000074a 	.word	0x2000074a
 8000ab4:	2000074c 	.word	0x2000074c
 8000ab8:	2000074e 	.word	0x2000074e
 8000abc:	20000750 	.word	0x20000750
 8000ac0:	20000752 	.word	0x20000752
 8000ac4:	20000754 	.word	0x20000754
 8000ac8:	20000756 	.word	0x20000756
 8000acc:	20000758 	.word	0x20000758
 8000ad0:	2000075a 	.word	0x2000075a
 8000ad4:	2000077f 	.word	0x2000077f
 8000ad8:	20000780 	.word	0x20000780
 8000adc:	20000784 	.word	0x20000784
 8000ae0:	08f0d180 	.word	0x08f0d180
 8000ae4:	2000078c 	.word	0x2000078c
 8000ae8:	20000788 	.word	0x20000788
 8000aec:	20000790 	.word	0x20000790

08000af0 <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <CS_process+0x148>)
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <CS_process+0x14c>)
 8000afc:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 8000afe:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <CS_process+0x150>)
 8000b00:	881a      	ldrh	r2, [r3, #0]
 8000b02:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <CS_process+0x154>)
 8000b04:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 8000b06:	4b50      	ldr	r3, [pc, #320]	; (8000c48 <CS_process+0x158>)
 8000b08:	881a      	ldrh	r2, [r3, #0]
 8000b0a:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <CS_process+0x15c>)
 8000b0c:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 8000b0e:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <CS_process+0x160>)
 8000b10:	881a      	ldrh	r2, [r3, #0]
 8000b12:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <CS_process+0x164>)
 8000b14:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 8000b16:	4b50      	ldr	r3, [pc, #320]	; (8000c58 <CS_process+0x168>)
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <CS_process+0x16c>)
 8000b1c:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <CS_process+0x170>)
 8000b20:	881a      	ldrh	r2, [r3, #0]
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <CS_process+0x174>)
 8000b24:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <CS_process+0x178>)
 8000b28:	881a      	ldrh	r2, [r3, #0]
 8000b2a:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <CS_process+0x17c>)
 8000b2c:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <CS_process+0x180>)
 8000b30:	881a      	ldrh	r2, [r3, #0]
 8000b32:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <CS_process+0x184>)
 8000b34:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000b36:	2301      	movs	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	e072      	b.n	8000c22 <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <CS_process+0x14c>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <CS_process+0x148>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	0fda      	lsrs	r2, r3, #31
 8000b4e:	4413      	add	r3, r2
 8000b50:	105b      	asrs	r3, r3, #1
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <CS_process+0x14c>)
 8000b56:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <CS_process+0x154>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4a38      	ldr	r2, [pc, #224]	; (8000c40 <CS_process+0x150>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b66:	440b      	add	r3, r1
 8000b68:	0fda      	lsrs	r2, r3, #31
 8000b6a:	4413      	add	r3, r2
 8000b6c:	105b      	asrs	r3, r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <CS_process+0x154>)
 8000b72:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <CS_process+0x15c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <CS_process+0x158>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b82:	440b      	add	r3, r1
 8000b84:	0fda      	lsrs	r2, r3, #31
 8000b86:	4413      	add	r3, r2
 8000b88:	105b      	asrs	r3, r3, #1
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <CS_process+0x15c>)
 8000b8e:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <CS_process+0x164>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <CS_process+0x160>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9e:	440b      	add	r3, r1
 8000ba0:	0fda      	lsrs	r2, r3, #31
 8000ba2:	4413      	add	r3, r2
 8000ba4:	105b      	asrs	r3, r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <CS_process+0x164>)
 8000baa:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <CS_process+0x16c>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4a29      	ldr	r2, [pc, #164]	; (8000c58 <CS_process+0x168>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bba:	440b      	add	r3, r1
 8000bbc:	0fda      	lsrs	r2, r3, #31
 8000bbe:	4413      	add	r3, r2
 8000bc0:	105b      	asrs	r3, r3, #1
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <CS_process+0x16c>)
 8000bc6:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <CS_process+0x174>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <CS_process+0x170>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	440b      	add	r3, r1
 8000bd8:	0fda      	lsrs	r2, r3, #31
 8000bda:	4413      	add	r3, r2
 8000bdc:	105b      	asrs	r3, r3, #1
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <CS_process+0x174>)
 8000be2:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <CS_process+0x17c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <CS_process+0x178>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf2:	440b      	add	r3, r1
 8000bf4:	0fda      	lsrs	r2, r3, #31
 8000bf6:	4413      	add	r3, r2
 8000bf8:	105b      	asrs	r3, r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <CS_process+0x17c>)
 8000bfe:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <CS_process+0x184>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <CS_process+0x180>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	440b      	add	r3, r1
 8000c10:	0fda      	lsrs	r2, r3, #31
 8000c12:	4413      	add	r3, r2
 8000c14:	105b      	asrs	r3, r3, #1
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <CS_process+0x184>)
 8000c1a:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	dd89      	ble.n	8000b3c <CS_process+0x4c>
	}

}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000051c 	.word	0x2000051c
 8000c3c:	2000071c 	.word	0x2000071c
 8000c40:	2000055c 	.word	0x2000055c
 8000c44:	2000071e 	.word	0x2000071e
 8000c48:	2000059c 	.word	0x2000059c
 8000c4c:	20000720 	.word	0x20000720
 8000c50:	200005dc 	.word	0x200005dc
 8000c54:	20000722 	.word	0x20000722
 8000c58:	2000061c 	.word	0x2000061c
 8000c5c:	20000724 	.word	0x20000724
 8000c60:	2000065c 	.word	0x2000065c
 8000c64:	20000726 	.word	0x20000726
 8000c68:	2000069c 	.word	0x2000069c
 8000c6c:	20000728 	.word	0x20000728
 8000c70:	200006dc 	.word	0x200006dc
 8000c74:	2000072a 	.word	0x2000072a

08000c78 <CS_read>:
	if(IN4_2_PROC <= UC_4_2){
		print_out("8_UC",data_output_switch);
	}
}

void CS_read(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e1af      	b.n	8000fe4 <CS_read+0x36c>
		switch(x){
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	f200 81a9 	bhi.w	8000fde <CS_read+0x366>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <CS_read+0x1c>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000d69 	.word	0x08000d69
 8000c9c:	08000e2d 	.word	0x08000e2d
 8000ca0:	08000ef1 	.word	0x08000ef1
		case 0:
			CS_SEL[0] = 0;
 8000ca4:	4b9e      	ldr	r3, [pc, #632]	; (8000f20 <CS_read+0x2a8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000caa:	4b9d      	ldr	r3, [pc, #628]	; (8000f20 <CS_read+0x2a8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000cb0:	4b9b      	ldr	r3, [pc, #620]	; (8000f20 <CS_read+0x2a8>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	489a      	ldr	r0, [pc, #616]	; (8000f24 <CS_read+0x2ac>)
 8000cba:	f003 ffc5 	bl	8004c48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000cbe:	4b98      	ldr	r3, [pc, #608]	; (8000f20 <CS_read+0x2a8>)
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4897      	ldr	r0, [pc, #604]	; (8000f24 <CS_read+0x2ac>)
 8000cc8:	f003 ffbe 	bl	8004c48 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e046      	b.n	8000d60 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000cd2:	4895      	ldr	r0, [pc, #596]	; (8000f28 <CS_read+0x2b0>)
 8000cd4:	f002 f894 	bl	8002e00 <HAL_ADC_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <CS_read+0x6a>
 8000cde:	f000 ff6d 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ce2:	4892      	ldr	r0, [pc, #584]	; (8000f2c <CS_read+0x2b4>)
 8000ce4:	f002 f88c 	bl	8002e00 <HAL_ADC_Start_IT>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <CS_read+0x7a>
 8000cee:	f000 ff65 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000cf2:	210a      	movs	r1, #10
 8000cf4:	488c      	ldr	r0, [pc, #560]	; (8000f28 <CS_read+0x2b0>)
 8000cf6:	f001 ffab 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CS_read+0x8c>
 8000d00:	f000 ff5c 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000d04:	210a      	movs	r1, #10
 8000d06:	4889      	ldr	r0, [pc, #548]	; (8000f2c <CS_read+0x2b4>)
 8000d08:	f001 ffa2 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <CS_read+0x9e>
 8000d12:	f000 ff53 	bl	8001bbc <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000d16:	4884      	ldr	r0, [pc, #528]	; (8000f28 <CS_read+0x2b0>)
 8000d18:	f002 f9dd 	bl	80030d6 <HAL_ADC_GetValue>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b299      	uxth	r1, r3
 8000d20:	4a83      	ldr	r2, [pc, #524]	; (8000f30 <CS_read+0x2b8>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000d28:	4880      	ldr	r0, [pc, #512]	; (8000f2c <CS_read+0x2b4>)
 8000d2a:	f002 f9d4 	bl	80030d6 <HAL_ADC_GetValue>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b299      	uxth	r1, r3
 8000d32:	4a80      	ldr	r2, [pc, #512]	; (8000f34 <CS_read+0x2bc>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d3a:	487b      	ldr	r0, [pc, #492]	; (8000f28 <CS_read+0x2b0>)
 8000d3c:	f002 f990 	bl	8003060 <HAL_ADC_Stop_IT>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <CS_read+0xd2>
 8000d46:	f000 ff39 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d4a:	4878      	ldr	r0, [pc, #480]	; (8000f2c <CS_read+0x2b4>)
 8000d4c:	f002 f988 	bl	8003060 <HAL_ADC_Stop_IT>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <CS_read+0xe2>
 8000d56:	f000 ff31 	bl	8001bbc <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b1f      	cmp	r3, #31
 8000d64:	ddb5      	ble.n	8000cd2 <CS_read+0x5a>
			}
			break;
 8000d66:	e13a      	b.n	8000fde <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000d68:	4b6d      	ldr	r3, [pc, #436]	; (8000f20 <CS_read+0x2a8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <CS_read+0x2a8>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <CS_read+0x2a8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4869      	ldr	r0, [pc, #420]	; (8000f24 <CS_read+0x2ac>)
 8000d7e:	f003 ff63 	bl	8004c48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d82:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <CS_read+0x2a8>)
 8000d84:	785b      	ldrb	r3, [r3, #1]
 8000d86:	461a      	mov	r2, r3
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4866      	ldr	r0, [pc, #408]	; (8000f24 <CS_read+0x2ac>)
 8000d8c:	f003 ff5c 	bl	8004c48 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e046      	b.n	8000e24 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d96:	4864      	ldr	r0, [pc, #400]	; (8000f28 <CS_read+0x2b0>)
 8000d98:	f002 f832 	bl	8002e00 <HAL_ADC_Start_IT>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <CS_read+0x12e>
 8000da2:	f000 ff0b 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000da6:	4861      	ldr	r0, [pc, #388]	; (8000f2c <CS_read+0x2b4>)
 8000da8:	f002 f82a 	bl	8002e00 <HAL_ADC_Start_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <CS_read+0x13e>
 8000db2:	f000 ff03 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000db6:	210a      	movs	r1, #10
 8000db8:	485b      	ldr	r0, [pc, #364]	; (8000f28 <CS_read+0x2b0>)
 8000dba:	f001 ff49 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <CS_read+0x150>
 8000dc4:	f000 fefa 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000dc8:	210a      	movs	r1, #10
 8000dca:	4858      	ldr	r0, [pc, #352]	; (8000f2c <CS_read+0x2b4>)
 8000dcc:	f001 ff40 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <CS_read+0x162>
 8000dd6:	f000 fef1 	bl	8001bbc <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000dda:	4853      	ldr	r0, [pc, #332]	; (8000f28 <CS_read+0x2b0>)
 8000ddc:	f002 f97b 	bl	80030d6 <HAL_ADC_GetValue>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b299      	uxth	r1, r3
 8000de4:	4a54      	ldr	r2, [pc, #336]	; (8000f38 <CS_read+0x2c0>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000dec:	484f      	ldr	r0, [pc, #316]	; (8000f2c <CS_read+0x2b4>)
 8000dee:	f002 f972 	bl	80030d6 <HAL_ADC_GetValue>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b299      	uxth	r1, r3
 8000df6:	4a51      	ldr	r2, [pc, #324]	; (8000f3c <CS_read+0x2c4>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000dfe:	484a      	ldr	r0, [pc, #296]	; (8000f28 <CS_read+0x2b0>)
 8000e00:	f002 f92e 	bl	8003060 <HAL_ADC_Stop_IT>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <CS_read+0x196>
 8000e0a:	f000 fed7 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e0e:	4847      	ldr	r0, [pc, #284]	; (8000f2c <CS_read+0x2b4>)
 8000e10:	f002 f926 	bl	8003060 <HAL_ADC_Stop_IT>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <CS_read+0x1a6>
 8000e1a:	f000 fecf 	bl	8001bbc <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b1f      	cmp	r3, #31
 8000e28:	ddb5      	ble.n	8000d96 <CS_read+0x11e>
			}
			break;
 8000e2a:	e0d8      	b.n	8000fde <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <CS_read+0x2a8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <CS_read+0x2a8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <CS_read+0x2a8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	4838      	ldr	r0, [pc, #224]	; (8000f24 <CS_read+0x2ac>)
 8000e42:	f003 ff01 	bl	8004c48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <CS_read+0x2a8>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	4835      	ldr	r0, [pc, #212]	; (8000f24 <CS_read+0x2ac>)
 8000e50:	f003 fefa 	bl	8004c48 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e046      	b.n	8000ee8 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000e5a:	4833      	ldr	r0, [pc, #204]	; (8000f28 <CS_read+0x2b0>)
 8000e5c:	f001 ffd0 	bl	8002e00 <HAL_ADC_Start_IT>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <CS_read+0x1f2>
 8000e66:	f000 fea9 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e6a:	4830      	ldr	r0, [pc, #192]	; (8000f2c <CS_read+0x2b4>)
 8000e6c:	f001 ffc8 	bl	8002e00 <HAL_ADC_Start_IT>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <CS_read+0x202>
 8000e76:	f000 fea1 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000e7a:	210a      	movs	r1, #10
 8000e7c:	482a      	ldr	r0, [pc, #168]	; (8000f28 <CS_read+0x2b0>)
 8000e7e:	f001 fee7 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <CS_read+0x214>
 8000e88:	f000 fe98 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000e8c:	210a      	movs	r1, #10
 8000e8e:	4827      	ldr	r0, [pc, #156]	; (8000f2c <CS_read+0x2b4>)
 8000e90:	f001 fede 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <CS_read+0x226>
 8000e9a:	f000 fe8f 	bl	8001bbc <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000e9e:	4822      	ldr	r0, [pc, #136]	; (8000f28 <CS_read+0x2b0>)
 8000ea0:	f002 f919 	bl	80030d6 <HAL_ADC_GetValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <CS_read+0x2c8>)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <CS_read+0x2b4>)
 8000eb2:	f002 f910 	bl	80030d6 <HAL_ADC_GetValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <CS_read+0x2cc>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <CS_read+0x2b0>)
 8000ec4:	f002 f8cc 	bl	8003060 <HAL_ADC_Stop_IT>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <CS_read+0x25a>
 8000ece:	f000 fe75 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ed2:	4816      	ldr	r0, [pc, #88]	; (8000f2c <CS_read+0x2b4>)
 8000ed4:	f002 f8c4 	bl	8003060 <HAL_ADC_Stop_IT>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <CS_read+0x26a>
 8000ede:	f000 fe6d 	bl	8001bbc <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b1f      	cmp	r3, #31
 8000eec:	ddb5      	ble.n	8000e5a <CS_read+0x1e2>
			}
			break;
 8000eee:	e076      	b.n	8000fde <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <CS_read+0x2a8>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <CS_read+0x2a8>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <CS_read+0x2a8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <CS_read+0x2ac>)
 8000f06:	f003 fe9f 	bl	8004c48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <CS_read+0x2a8>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2120      	movs	r1, #32
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <CS_read+0x2ac>)
 8000f14:	f003 fe98 	bl	8004c48 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	e05b      	b.n	8000fd6 <CS_read+0x35e>
 8000f1e:	bf00      	nop
 8000f20:	2000077c 	.word	0x2000077c
 8000f24:	48000400 	.word	0x48000400
 8000f28:	2000007c 	.word	0x2000007c
 8000f2c:	200000e8 	.word	0x200000e8
 8000f30:	2000051c 	.word	0x2000051c
 8000f34:	2000061c 	.word	0x2000061c
 8000f38:	2000055c 	.word	0x2000055c
 8000f3c:	2000065c 	.word	0x2000065c
 8000f40:	2000059c 	.word	0x2000059c
 8000f44:	2000069c 	.word	0x2000069c
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000f48:	482b      	ldr	r0, [pc, #172]	; (8000ff8 <CS_read+0x380>)
 8000f4a:	f001 ff59 	bl	8002e00 <HAL_ADC_Start_IT>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <CS_read+0x2e0>
 8000f54:	f000 fe32 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000f58:	4828      	ldr	r0, [pc, #160]	; (8000ffc <CS_read+0x384>)
 8000f5a:	f001 ff51 	bl	8002e00 <HAL_ADC_Start_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <CS_read+0x2f0>
 8000f64:	f000 fe2a 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000f68:	210a      	movs	r1, #10
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <CS_read+0x380>)
 8000f6c:	f001 fe70 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <CS_read+0x302>
 8000f76:	f000 fe21 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000f7a:	210a      	movs	r1, #10
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <CS_read+0x384>)
 8000f7e:	f001 fe67 	bl	8002c50 <HAL_ADC_PollForConversion>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <CS_read+0x314>
 8000f88:	f000 fe18 	bl	8001bbc <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000f8c:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <CS_read+0x380>)
 8000f8e:	f002 f8a2 	bl	80030d6 <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b299      	uxth	r1, r3
 8000f96:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <CS_read+0x388>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <CS_read+0x384>)
 8000fa0:	f002 f899 	bl	80030d6 <HAL_ADC_GetValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <CS_read+0x38c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <CS_read+0x380>)
 8000fb2:	f002 f855 	bl	8003060 <HAL_ADC_Stop_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <CS_read+0x348>
 8000fbc:	f000 fdfe 	bl	8001bbc <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000fc0:	480e      	ldr	r0, [pc, #56]	; (8000ffc <CS_read+0x384>)
 8000fc2:	f002 f84d 	bl	8003060 <HAL_ADC_Stop_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <CS_read+0x358>
 8000fcc:	f000 fdf6 	bl	8001bbc <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b1f      	cmp	r3, #31
 8000fda:	ddb5      	ble.n	8000f48 <CS_read+0x2d0>
			}
			break;
 8000fdc:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	f77f ae4c 	ble.w	8000c84 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000fec:	f7ff fd80 	bl	8000af0 <CS_process>
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000007c 	.word	0x2000007c
 8000ffc:	200000e8 	.word	0x200000e8
 8001000:	200005dc 	.word	0x200005dc
 8001004:	200006dc 	.word	0x200006dc

08001008 <print_out>:

void print_out(const char *text, uint8_t out_mode){
 8001008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	70fb      	strb	r3, [r7, #3]
 8001016:	466b      	mov	r3, sp
 8001018:	461e      	mov	r6, r3

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	char buffer[strlen(text)+1];
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff f90a 	bl	8000234 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	1c59      	adds	r1, r3, #1
 8001024:	460b      	mov	r3, r1
 8001026:	3b01      	subs	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	2300      	movs	r3, #0
 800102c:	4688      	mov	r8, r1
 800102e:	4699      	mov	r9, r3
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001044:	2300      	movs	r3, #0
 8001046:	460c      	mov	r4, r1
 8001048:	461d      	mov	r5, r3
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00eb      	lsls	r3, r5, #3
 8001054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001058:	00e2      	lsls	r2, r4, #3
 800105a:	1dcb      	adds	r3, r1, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3300      	adds	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
	strcpy(buffer, text);
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	68b8      	ldr	r0, [r7, #8]
 800106e:	f007 fdc3 	bl	8008bf8 <strcpy>
	switch(out_mode){
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d00d      	beq.n	8001094 <print_out+0x8c>
 8001078:	2b03      	cmp	r3, #3
 800107a:	dc13      	bgt.n	80010a4 <print_out+0x9c>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d001      	beq.n	8001084 <print_out+0x7c>
 8001080:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit_DMA(&huart2, buffer, sizeof(text));
			  text = "";
			  break;
		  case 2: //output only through CAN
			  //TODO implement CAN
			  break;
 8001082:	e00f      	b.n	80010a4 <print_out+0x9c>
			  HAL_UART_Transmit_DMA(&huart2, buffer, sizeof(text));
 8001084:	2204      	movs	r2, #4
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <print_out+0xa8>)
 800108a:	f006 f81f 	bl	80070cc <HAL_UART_Transmit_DMA>
			  text = "";
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <print_out+0xac>)
 8001090:	607b      	str	r3, [r7, #4]
			  break;
 8001092:	e007      	b.n	80010a4 <print_out+0x9c>
		  case 3://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit_DMA(&huart2, buffer, sizeof(text));
 8001094:	2204      	movs	r2, #4
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <print_out+0xa8>)
 800109a:	f006 f817 	bl	80070cc <HAL_UART_Transmit_DMA>
			  text = "";
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <print_out+0xac>)
 80010a0:	607b      	str	r3, [r7, #4]
			  //TODO implement CAN
			  break;
 80010a2:	bf00      	nop
 80010a4:	46b5      	mov	sp, r6
		  }
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010b0:	200003cc 	.word	0x200003cc
 80010b4:	08009614 	.word	0x08009614

080010b8 <HAL_UART_RxCpltCallback>:
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(uart_receive == 13){
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_UART_RxCpltCallback+0x74>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	d10d      	bne.n	80010e4 <HAL_UART_RxCpltCallback+0x2c>
		const char *newline = "\r\n";
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_UART_RxCpltCallback+0x78>)
 80010ca:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit_DMA(huart, (uint8_t*)newline,2);
 80010cc:	2202      	movs	r2, #2
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f005 fffb 	bl	80070cc <HAL_UART_Transmit_DMA>
		uart_rx_buffer[29] = 0;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_UART_RxCpltCallback+0x7c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	775a      	strb	r2, [r3, #29]
		command_received_flag = 1;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_UART_RxCpltCallback+0x80>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e01a      	b.n	800111a <HAL_UART_RxCpltCallback+0x62>
	}else{
		for(int i = 0; i < 28; i++){
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e00b      	b.n	8001102 <HAL_UART_RxCpltCallback+0x4a>
			uart_rx_buffer[i] = uart_rx_buffer[i+1];
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_UART_RxCpltCallback+0x7c>)
 80010f0:	5cd1      	ldrb	r1, [r2, r3]
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_UART_RxCpltCallback+0x7c>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	460a      	mov	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 28; i++){
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b1b      	cmp	r3, #27
 8001106:	ddf0      	ble.n	80010ea <HAL_UART_RxCpltCallback+0x32>
		}
		HAL_UART_Transmit_DMA(huart, &uart_receive,1);
 8001108:	2201      	movs	r2, #1
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <HAL_UART_RxCpltCallback+0x74>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f005 ffdd 	bl	80070cc <HAL_UART_Transmit_DMA>
		uart_rx_buffer[28] = uart_receive;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_UART_RxCpltCallback+0x74>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_UART_RxCpltCallback+0x7c>)
 8001118:	771a      	strb	r2, [r3, #28]
	}
	HAL_UART_Receive_DMA(huart, &uart_receive,1);
 800111a:	2201      	movs	r2, #1
 800111c:	4903      	ldr	r1, [pc, #12]	; (800112c <HAL_UART_RxCpltCallback+0x74>)
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f006 f866 	bl	80071f0 <HAL_UART_Receive_DMA>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000077e 	.word	0x2000077e
 8001130:	08009618 	.word	0x08009618
 8001134:	2000075c 	.word	0x2000075c
 8001138:	2000077a 	.word	0x2000077a

0800113c <check_bit>:

uint8_t check_bit(uint8_t byte, uint8_t bitn){
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2201      	movs	r2, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4013      	ands	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <check_bit+0x2a>
		return 1;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <check_bit+0x2c>
	}else{
		return 0;
 8001166:	2300      	movs	r3, #0
	}
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f001 f8f1 	bl	800235e <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 800117c:	f7ff fbb5 	bl	80008ea <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f838 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 fca2 	bl	8001acc <MX_GPIO_Init>
  MX_DMA_Init();
 8001188:	f000 fc6e 	bl	8001a68 <MX_DMA_Init>
  MX_ADC1_Init();
 800118c:	f000 f87e 	bl	800128c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001190:	f000 f95e 	bl	8001450 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001194:	f000 f9a2 	bl	80014dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001198:	f000 fa50 	bl	800163c <MX_TIM2_Init>
  MX_TIM3_Init();
 800119c:	f000 fac4 	bl	8001728 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011a0:	f000 fb10 	bl	80017c4 <MX_TIM4_Init>
  MX_TIM6_Init();
 80011a4:	f000 fb82 	bl	80018ac <MX_TIM6_Init>
  MX_TIM7_Init();
 80011a8:	f000 fbb6 	bl	8001918 <MX_TIM7_Init>
  MX_TIM16_Init();
 80011ac:	f000 fbea 	bl	8001984 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80011b0:	f000 fc0e 	bl	80019d0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80011b4:	f000 f8e4 	bl	8001380 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <main+0x6c>)
 80011ba:	f004 fd8c 	bl	8005cd6 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 80011be:	4809      	ldr	r0, [pc, #36]	; (80011e4 <main+0x70>)
 80011c0:	f004 fd89 	bl	8005cd6 <HAL_TIM_PWM_Init>

  HAL_UART_Receive_DMA(&huart2, &uart_receive, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <main+0x74>)
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <main+0x78>)
 80011ca:	f006 f811 	bl	80071f0 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CS_read();
 80011ce:	f7ff fd53 	bl	8000c78 <CS_read>
	  if(command_received_flag == 1){
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <main+0x7c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1f9      	bne.n	80011ce <main+0x5a>
		  decode_uart();
 80011da:	f7ff fa07 	bl	80005ec <decode_uart>
	  CS_read();
 80011de:	e7f6      	b.n	80011ce <main+0x5a>
 80011e0:	200001b8 	.word	0x200001b8
 80011e4:	20000204 	.word	0x20000204
 80011e8:	2000077e 	.word	0x2000077e
 80011ec:	200003cc 	.word	0x200003cc
 80011f0:	2000077a 	.word	0x2000077a

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2238      	movs	r2, #56	; 0x38
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f007 fcc4 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121a:	f003 fd2d 	bl	8004c78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001234:	2304      	movs	r3, #4
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001238:	234b      	movs	r3, #75	; 0x4b
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123c:	2302      	movs	r3, #2
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fdc7 	bl	8004de0 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001258:	f000 fcb0 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2303      	movs	r3, #3
 8001262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2104      	movs	r1, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f8cb 	bl	8005410 <HAL_RCC_ClockConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001280:	f000 fc9c 	bl	8001bbc <Error_Handler>
  }
}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	; 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 fc73 	bl	8008b90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012d4:	2204      	movs	r2, #4
 80012d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_ADC1_Init+0xe8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_ADC1_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_ADC1_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <MX_ADC1_Init+0xe8>)
 8001316:	f001 fb11 	bl	800293c <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001320:	f000 fc4c 	bl	8001bbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_ADC1_Init+0xe8>)
 8001330:	f002 fc72 	bl	8003c18 <HAL_ADCEx_MultiModeConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800133a:	f000 fc3f 	bl	8001bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_ADC1_Init+0xec>)
 8001340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	2306      	movs	r3, #6
 8001344:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_ADC1_Init+0xf0>)
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134e:	2304      	movs	r3, #4
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_ADC1_Init+0xe8>)
 800135c:	f001 fec8 	bl	80030f0 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001366:	f000 fc29 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000007c 	.word	0x2000007c
 8001378:	04300002 	.word	0x04300002
 800137c:	407f0000 	.word	0x407f0000

08001380 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f007 fbff 	bl	8008b90 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <MX_ADC2_Init+0xc0>)
 8001394:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <MX_ADC2_Init+0xc4>)
 8001396:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_ADC2_Init+0xc0>)
 800139a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800139e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013fa:	4811      	ldr	r0, [pc, #68]	; (8001440 <MX_ADC2_Init+0xc0>)
 80013fc:	f001 fa9e 	bl	800293c <HAL_ADC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001406:	f000 fbd9 	bl	8001bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_ADC2_Init+0xc8>)
 800140c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140e:	2306      	movs	r3, #6
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_ADC2_Init+0xcc>)
 8001418:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800141a:	2304      	movs	r3, #4
 800141c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC2_Init+0xc0>)
 8001428:	f001 fe62 	bl	80030f0 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001432:	f000 fbc3 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000e8 	.word	0x200000e8
 8001444:	50000100 	.word	0x50000100
 8001448:	0c900008 	.word	0x0c900008
 800144c:	407f0000 	.word	0x407f0000

08001450 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001456:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <MX_FDCAN1_Init+0x88>)
 8001458:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 800146e:	2200      	movs	r2, #0
 8001470:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001474:	2200      	movs	r2, #0
 8001476:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 800147a:	2200      	movs	r2, #0
 800147c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001480:	2210      	movs	r2, #16
 8001482:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001486:	2201      	movs	r2, #1
 8001488:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 800148c:	2202      	movs	r2, #2
 800148e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001492:	2202      	movs	r2, #2
 8001494:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 8001498:	2201      	movs	r2, #1
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 800149e:	2201      	movs	r2, #1
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014bc:	2200      	movs	r2, #0
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_FDCAN1_Init+0x84>)
 80014c2:	f003 f88f 	bl	80045e4 <HAL_FDCAN_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80014cc:	f000 fb76 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000154 	.word	0x20000154
 80014d8:	40006400 	.word	0x40006400

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09c      	sub	sp, #112	; 0x70
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 fb3a 	bl	8008b90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151c:	4b45      	ldr	r3, [pc, #276]	; (8001634 <MX_TIM1_Init+0x158>)
 800151e:	4a46      	ldr	r2, [pc, #280]	; (8001638 <MX_TIM1_Init+0x15c>)
 8001520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <MX_TIM1_Init+0x158>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <MX_TIM1_Init+0x158>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <MX_TIM1_Init+0x158>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <MX_TIM1_Init+0x158>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <MX_TIM1_Init+0x158>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <MX_TIM1_Init+0x158>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001548:	483a      	ldr	r0, [pc, #232]	; (8001634 <MX_TIM1_Init+0x158>)
 800154a:	f004 fb6d 	bl	8005c28 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fb32 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001562:	4619      	mov	r1, r3
 8001564:	4833      	ldr	r0, [pc, #204]	; (8001634 <MX_TIM1_Init+0x158>)
 8001566:	f004 feab 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fb24 	bl	8001bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001574:	482f      	ldr	r0, [pc, #188]	; (8001634 <MX_TIM1_Init+0x158>)
 8001576:	f004 fbae 	bl	8005cd6 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fb1c 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001594:	4619      	mov	r1, r3
 8001596:	4827      	ldr	r0, [pc, #156]	; (8001634 <MX_TIM1_Init+0x158>)
 8001598:	f005 fbe0 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fb0b 	bl	8001bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <MX_TIM1_Init+0x158>)
 80015cc:	f004 fd64 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015d6:	f000 faf1 	bl	8001bbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_TIM1_Init+0x158>)
 8001618:	f005 fc22 	bl	8006e60 <HAL_TIMEx_ConfigBreakDeadTime>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001622:	f000 facb 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_TIM1_Init+0x158>)
 8001628:	f000 fca4 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3770      	adds	r7, #112	; 0x70
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200001b8 	.word	0x200001b8
 8001638:	40012c00 	.word	0x40012c00

0800163c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001678:	2295      	movs	r2, #149	; 0x95
 800167a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_TIM2_Init+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967294E9;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001684:	f06f 0201 	mvn.w	r2, #1
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM2_Init+0xe8>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001698:	f004 fac6 	bl	8005c28 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016a2:	f000 fa8b 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_TIM2_Init+0xe8>)
 80016b4:	f004 fe04 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016be:	f000 fa7d 	bl	8001bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM2_Init+0xe8>)
 80016c4:	f004 fb07 	bl	8005cd6 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016ce:	f000 fa75 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <MX_TIM2_Init+0xe8>)
 80016e2:	f005 fb3b 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016ec:	f000 fa66 	bl	8001bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001708:	f004 fcc6 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001712:	f000 fa53 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0xe8>)
 8001718:	f000 fc2c 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000204 	.word	0x20000204

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM3_Init+0x94>)
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <MX_TIM3_Init+0x98>)
 800174a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM3_Init+0x94>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM3_Init+0x94>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_TIM3_Init+0x94>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_TIM3_Init+0x94>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM3_Init+0x94>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_TIM3_Init+0x94>)
 800176e:	f004 fa5b 	bl	8005c28 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001778:	f000 fa20 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_TIM3_Init+0x94>)
 800178a:	f004 fd99 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001794:	f000 fa12 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM3_Init+0x94>)
 80017a6:	f005 fad9 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017b0:	f000 fa04 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000250 	.word	0x20000250
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <MX_TIM4_Init+0xe0>)
 80017f8:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <MX_TIM4_Init+0xe4>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <MX_TIM4_Init+0xe0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_TIM4_Init+0xe0>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <MX_TIM4_Init+0xe0>)
 800180a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MX_TIM4_Init+0xe0>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <MX_TIM4_Init+0xe0>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800181c:	4821      	ldr	r0, [pc, #132]	; (80018a4 <MX_TIM4_Init+0xe0>)
 800181e:	f004 fa03 	bl	8005c28 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001828:	f000 f9c8 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001836:	4619      	mov	r1, r3
 8001838:	481a      	ldr	r0, [pc, #104]	; (80018a4 <MX_TIM4_Init+0xe0>)
 800183a:	f004 fd41 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001844:	f000 f9ba 	bl	8001bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <MX_TIM4_Init+0xe0>)
 800184a:	f004 fa44 	bl	8005cd6 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001854:	f000 f9b2 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <MX_TIM4_Init+0xe0>)
 8001868:	f005 fa78 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001872:	f000 f9a3 	bl	8001bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	; 0x60
 8001878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_TIM4_Init+0xe0>)
 800188e:	f004 fc03 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001898:	f000 f990 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3738      	adds	r7, #56	; 0x38
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000029c 	.word	0x2000029c
 80018a8:	40000800 	.word	0x40000800

080018ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_TIM6_Init+0x64>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_TIM6_Init+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_TIM6_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_TIM6_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_TIM6_Init+0x64>)
 80018d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM6_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM6_Init+0x64>)
 80018de:	f004 f9a3 	bl	8005c28 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018e8:	f000 f968 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_TIM6_Init+0x64>)
 80018fa:	f005 fa2f 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001904:	f000 f95a 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002e8 	.word	0x200002e8
 8001914:	40001000 	.word	0x40001000

08001918 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_TIM7_Init+0x64>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_TIM7_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_TIM7_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_TIM7_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_TIM7_Init+0x64>)
 800193c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001940:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_TIM7_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM7_Init+0x64>)
 800194a:	f004 f96d 	bl	8005c28 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001954:	f000 f932 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM7_Init+0x64>)
 8001966:	f005 f9f9 	bl	8006d5c <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001970:	f000 f924 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000334 	.word	0x20000334
 8001980:	40001400 	.word	0x40001400

08001984 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_TIM16_Init+0x44>)
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <MX_TIM16_Init+0x48>)
 800198c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_TIM16_Init+0x44>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_TIM16_Init+0x44>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_TIM16_Init+0x44>)
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_TIM16_Init+0x44>)
 80019b6:	f004 f937 	bl	8005c28 <HAL_TIM_Base_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80019c0:	f000 f8fc 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000380 	.word	0x20000380
 80019cc:	40014400 	.word	0x40014400

080019d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <MX_USART2_UART_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a1a:	f005 fb07 	bl	800702c <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 f8ca 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a2c:	f006 ff35 	bl	800889a <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a36:	f000 f8c1 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a3e:	f006 ff6a 	bl	8008916 <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f000 f8b8 	bl	8001bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_USART2_UART_Init+0x90>)
 8001a4e:	f006 feeb 	bl	8008828 <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 f8b0 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200003cc 	.word	0x200003cc
 8001a64:	40004400 	.word	0x40004400

08001a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6493      	str	r3, [r2, #72]	; 0x48
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6493      	str	r3, [r2, #72]	; 0x48
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MX_DMA_Init+0x60>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200b      	movs	r0, #11
 8001aa4:	f002 fa37 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa8:	200b      	movs	r0, #11
 8001aaa:	f002 fa4e 	bl	8003f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200c      	movs	r0, #12
 8001ab4:	f002 fa2f 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ab8:	200c      	movs	r0, #12
 8001aba:	f002 fa46 	bl	8003f4a <HAL_NVIC_EnableIRQ>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <MX_GPIO_Init+0xe4>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b30:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <MX_GPIO_Init+0xe8>)
 8001b32:	f003 f889 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f248 6110 	movw	r1, #34320	; 0x8610
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f003 f882 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b44:	2200      	movs	r2, #0
 8001b46:	21f9      	movs	r1, #249	; 0xf9
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0xec>)
 8001b4a:	f003 f87d 	bl	8004c48 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <MX_GPIO_Init+0xe8>)
 8001b68:	f002 feec 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001b6c:	f248 6310 	movw	r3, #34320	; 0x8610
 8001b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f002 fedc 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b8c:	23f9      	movs	r3, #249	; 0xf9
 8001b8e:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_GPIO_Init+0xec>)
 8001ba4:	f002 fece 	bl	8004944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48001800 	.word	0x48001800
 8001bb8:	48000400 	.word	0x48000400

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x44>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_MspInit+0x44>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_MspInit+0x44>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_MspInit+0x44>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bfe:	f003 f8df 	bl	8004dc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b09c      	sub	sp, #112	; 0x70
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2244      	movs	r2, #68	; 0x44
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 ffad 	bl	8008b90 <memset>
  if(hadc->Instance==ADC1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3e:	d13e      	bne.n	8001cbe <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c4a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fdf9 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c5c:	f7ff ffae 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001c68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10b      	bne.n	8001c8a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a36      	ldr	r2, [pc, #216]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f002 fe44 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cbc:	e042      	b.n	8001d44 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_ADC_MspInit+0x144>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d13d      	bne.n	8001d44 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cd2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fdb5 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001ce4:	f7ff ff6a 	bl	8001bbc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001cf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_ADC_MspInit+0x13c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10b      	bne.n	8001d12 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_ADC_MspInit+0x140>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f002 fe00 	bl	8004944 <HAL_GPIO_Init>
}
 8001d44:	bf00      	nop
 8001d46:	3770      	adds	r7, #112	; 0x70
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000798 	.word	0x20000798
 8001d50:	40021000 	.word	0x40021000
 8001d54:	50000100 	.word	0x50000100

08001d58 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b09a      	sub	sp, #104	; 0x68
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2244      	movs	r2, #68	; 0x44
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 ff09 	bl	8008b90 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_FDCAN_MspInit+0xac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d139      	bne.n	8001dfc <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fd55 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001da4:	f7ff ff0a 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_FDCAN_MspInit+0xb0>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ddc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dea:	2309      	movs	r3, #9
 8001dec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f002 fda4 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3768      	adds	r7, #104	; 0x68
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40006400 	.word	0x40006400
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_TIM_Base_MspInit+0x14c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10c      	bne.n	8001e38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e28:	6613      	str	r3, [r2, #96]	; 0x60
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e36:	e08a      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d114      	bne.n	8001e6c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a45      	ldr	r2, [pc, #276]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	201c      	movs	r0, #28
 8001e60:	f002 f859 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e64:	201c      	movs	r0, #28
 8001e66:	f002 f870 	bl	8003f4a <HAL_NVIC_EnableIRQ>
}
 8001e6a:	e070      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <HAL_TIM_Base_MspInit+0x154>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d114      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	201d      	movs	r0, #29
 8001e94:	f002 f83f 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e98:	201d      	movs	r0, #29
 8001e9a:	f002 f856 	bl	8003f4a <HAL_NVIC_EnableIRQ>
}
 8001e9e:	e056      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2f      	ldr	r2, [pc, #188]	; (8001f64 <HAL_TIM_Base_MspInit+0x158>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d114      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a2b      	ldr	r2, [pc, #172]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	201e      	movs	r0, #30
 8001ec8:	f002 f825 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ecc:	201e      	movs	r0, #30
 8001ece:	f002 f83c 	bl	8003f4a <HAL_NVIC_EnableIRQ>
}
 8001ed2:	e03c      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_TIM_Base_MspInit+0x15c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10c      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
}
 8001ef6:	e02a      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_TIM_Base_MspInit+0x160>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d114      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2037      	movs	r0, #55	; 0x37
 8001f20:	f001 fff9 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f24:	2037      	movs	r0, #55	; 0x37
 8001f26:	f002 f810 	bl	8003f4a <HAL_NVIC_EnableIRQ>
}
 8001f2a:	e010      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_Base_MspInit+0x164>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10b      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	6613      	str	r3, [r2, #96]	; 0x60
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_TIM_Base_MspInit+0x150>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40001000 	.word	0x40001000
 8001f6c:	40001400 	.word	0x40001400
 8001f70:	40014400 	.word	0x40014400

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_TIM_MspPostInit+0xac>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11e      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f002 fcb9 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fd2:	e021      	b.n	8002018 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d11c      	bne.n	8002018 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_TIM_MspPostInit+0xb0>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002006:	2301      	movs	r3, #1
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f002 fc96 	bl	8004944 <HAL_GPIO_Init>
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09a      	sub	sp, #104	; 0x68
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2244      	movs	r2, #68	; 0x44
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f006 fda1 	bl	8008b90 <memset>
  if(huart->Instance==USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_UART_MspInit+0x15c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	f040 8091 	bne.w	800217c <HAL_UART_MspInit+0x154>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205a:	2302      	movs	r3, #2
 800205c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fbee 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002072:	f7ff fda3 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_UART_MspInit+0x160>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_UART_MspInit+0x160>)
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	6593      	str	r3, [r2, #88]	; 0x58
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_UART_MspInit+0x160>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_UART_MspInit+0x160>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a3d      	ldr	r2, [pc, #244]	; (8002188 <HAL_UART_MspInit+0x160>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_UART_MspInit+0x160>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a6:	230c      	movs	r3, #12
 80020a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b6:	2307      	movs	r3, #7
 80020b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f002 fc3e 	bl	8004944 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_UART_MspInit+0x164>)
 80020ca:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_UART_MspInit+0x168>)
 80020cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_UART_MspInit+0x164>)
 80020d0:	221a      	movs	r2, #26
 80020d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_UART_MspInit+0x164>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_UART_MspInit+0x164>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_UART_MspInit+0x164>)
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_UART_MspInit+0x164>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_UART_MspInit+0x164>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_UART_MspInit+0x164>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_UART_MspInit+0x164>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020fe:	4823      	ldr	r0, [pc, #140]	; (800218c <HAL_UART_MspInit+0x164>)
 8002100:	f001 ff3e 	bl	8003f80 <HAL_DMA_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800210a:	f7ff fd57 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_UART_MspInit+0x164>)
 8002112:	67da      	str	r2, [r3, #124]	; 0x7c
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_UART_MspInit+0x164>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_UART_MspInit+0x16c>)
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_UART_MspInit+0x170>)
 800211e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002122:	221b      	movs	r2, #27
 8002124:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002128:	2210      	movs	r2, #16
 800212a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_UART_MspInit+0x16c>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_UART_MspInit+0x16c>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_UART_MspInit+0x16c>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002150:	4810      	ldr	r0, [pc, #64]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002152:	f001 ff15 	bl	8003f80 <HAL_DMA_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800215c:	f7ff fd2e 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002164:	679a      	str	r2, [r3, #120]	; 0x78
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_UART_MspInit+0x16c>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2026      	movs	r0, #38	; 0x26
 8002172:	f001 fed0 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002176:	2026      	movs	r0, #38	; 0x26
 8002178:	f001 fee7 	bl	8003f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3768      	adds	r7, #104	; 0x68
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40004400 	.word	0x40004400
 8002188:	40021000 	.word	0x40021000
 800218c:	2000045c 	.word	0x2000045c
 8002190:	40020008 	.word	0x40020008
 8002194:	200004bc 	.word	0x200004bc
 8002198:	4002001c 	.word	0x4002001c

0800219c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <NMI_Handler+0x4>

080021a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <HardFault_Handler+0x4>

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <MemManage_Handler+0x4>

080021ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <BusFault_Handler+0x4>

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <UsageFault_Handler+0x4>

080021ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e8:	f000 f90c 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <DMA1_Channel1_IRQHandler+0x10>)
 80021f6:	f002 f8a6 	bl	8004346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000045c 	.word	0x2000045c

08002204 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA1_Channel2_IRQHandler+0x10>)
 800220a:	f002 f89c 	bl	8004346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200004bc 	.word	0x200004bc

08002218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <TIM2_IRQHandler+0x10>)
 800221e:	f003 fdbb 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000204 	.word	0x20000204

0800222c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM3_IRQHandler+0x10>)
 8002232:	f003 fdb1 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000250 	.word	0x20000250

08002240 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM4_IRQHandler+0x10>)
 8002246:	f003 fda7 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000029c 	.word	0x2000029c

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f005 f81f 	bl	800729c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200003cc 	.word	0x200003cc

08002268 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM7_IRQHandler+0x10>)
 800226e:	f003 fd93 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000334 	.word	0x20000334

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f006 fc78 	bl	8008ba0 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20008000 	.word	0x20008000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	2000079c 	.word	0x2000079c
 80022e4:	200008f0 	.word	0x200008f0

080022e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopForever+0x6>)
  ldr r1, =_edata
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <LoopForever+0xe>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002328:	4c0b      	ldr	r4, [pc, #44]	; (8002358 <LoopForever+0x16>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002336:	f7ff ffd7 	bl	80022e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233a:	f006 fc37 	bl	8008bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233e:	f7fe ff19 	bl	8001174 <main>

08002342 <LoopForever>:

LoopForever:
    b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   r0, =_estack
 8002344:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002350:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8002354:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002358:	200008ec 	.word	0x200008ec

0800235c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC1_2_IRQHandler>

0800235e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f001 fdc9 	bl	8003f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f80e 	bl	8002390 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	e001      	b.n	8002384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002380:	f7ff fc22 	bl	8001bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002384:	79fb      	ldrb	r3, [r7, #7]

}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_InitTick+0x68>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d022      	beq.n	80023ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_InitTick+0x6c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_InitTick+0x68>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f001 fdd4 	bl	8003f66 <HAL_SYSTICK_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d809      	bhi.n	80023de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ca:	2200      	movs	r2, #0
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	f04f 30ff 	mov.w	r0, #4294967295
 80023d2:	f001 fda0 	bl	8003f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_InitTick+0x70>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e007      	b.n	80023ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e004      	b.n	80023ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e001      	b.n	80023ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	20000004 	.word	0x20000004
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_IncTick+0x1c>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_IncTick+0x20>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	4a03      	ldr	r2, [pc, #12]	; (8002420 <HAL_IncTick+0x1c>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200007a0 	.word	0x200007a0
 8002424:	2000000c 	.word	0x2000000c

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200007a0 	.word	0x200007a0

08002440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <LL_ADC_SetOffset+0x44>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	03fff000 	.word	0x03fff000

080024f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3360      	adds	r3, #96	; 0x60
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3360      	adds	r3, #96	; 0x60
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3360      	adds	r3, #96	; 0x60
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	615a      	str	r2, [r3, #20]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800260a:	b480      	push	{r7}
 800260c:	b087      	sub	sp, #28
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3330      	adds	r3, #48	; 0x30
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	211f      	movs	r1, #31
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 011f 	and.w	r1, r3, #31
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002662:	b480      	push	{r7}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3314      	adds	r3, #20
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	0e5b      	lsrs	r3, r3, #25
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	4413      	add	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	0d1b      	lsrs	r3, r3, #20
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2107      	movs	r1, #7
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	0d1b      	lsrs	r3, r3, #20
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	431a      	orrs	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10a      	bne.n	80026e2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80026e0:	e00a      	b.n	80026f8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	43db      	mvns	r3, r3
 80026f0:	401a      	ands	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	407f0000 	.word	0x407f0000

08002708 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 031f 	and.w	r3, r3, #31
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6093      	str	r3, [r2, #8]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002778:	d101      	bne.n	800277e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800279c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c8:	d101      	bne.n	80027ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002818:	f043 0202 	orr.w	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <LL_ADC_IsEnabled+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_ADC_IsEnabled+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d101      	bne.n	800286a <LL_ADC_IsDisableOngoing+0x18>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <LL_ADC_IsDisableOngoing+0x1a>
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288c:	f043 0204 	orr.w	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b4:	f043 0210 	orr.w	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d101      	bne.n	80028e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b08      	cmp	r3, #8
 8002928:	d101      	bne.n	800292e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e177      	b.n	8002c46 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff f953 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fef1 	bl	8002764 <LL_ADC_IsDeepPowerDownEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fed7 	bl	8002740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff0c 	bl	80027b4 <LL_ADC_IsInternalRegulatorEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d115      	bne.n	80029ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fef0 	bl	800278c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ac:	4b9c      	ldr	r3, [pc, #624]	; (8002c20 <HAL_ADC_Init+0x2e4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	4a9c      	ldr	r2, [pc, #624]	; (8002c24 <HAL_ADC_Init+0x2e8>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f9      	bne.n	80029c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff feee 	bl	80027b4 <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff62 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8110 	bne.w	8002c34 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 810c 	bne.w	8002c34 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a24:	f043 0202 	orr.w	r2, r3, #2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fefb 	bl	800282c <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d111      	bne.n	8002a60 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a40:	f7ff fef4 	bl	800282c <LL_ADC_IsEnabled>
 8002a44:	4604      	mov	r4, r0
 8002a46:	4878      	ldr	r0, [pc, #480]	; (8002c28 <HAL_ADC_Init+0x2ec>)
 8002a48:	f7ff fef0 	bl	800282c <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4874      	ldr	r0, [pc, #464]	; (8002c2c <HAL_ADC_Init+0x2f0>)
 8002a5c:	f7ff fcf0 	bl	8002440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7f5b      	ldrb	r3, [r3, #29]
 8002a64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	045b      	lsls	r3, r3, #17
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_ADC_Init+0x2f4>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff feee 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 8002aec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff0f 	bl	8002916 <LL_ADC_INJ_IsConversionOngoing>
 8002af8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d16d      	bne.n	8002bdc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d16a      	bne.n	8002bdc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b12:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6911      	ldr	r1, [r2, #16]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b66:	e013      	b.n	8002b90 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d118      	bne.n	8002bcc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10c      	bne.n	8002bfe <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f023 010f 	bic.w	r1, r3, #15
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020f 	bic.w	r2, r2, #15
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c1e:	e011      	b.n	8002c44 <HAL_ADC_Init+0x308>
 8002c20:	20000004 	.word	0x20000004
 8002c24:	053e2d63 	.word	0x053e2d63
 8002c28:	50000100 	.word	0x50000100
 8002c2c:	50000300 	.word	0x50000300
 8002c30:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f043 0210 	orr.w	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop

08002c50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5a:	4867      	ldr	r0, [pc, #412]	; (8002df8 <HAL_ADC_PollForConversion+0x1a8>)
 8002c5c:	f7ff fd54 	bl	8002708 <LL_ADC_GetMultimode>
 8002c60:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d102      	bne.n	8002c70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e02a      	b.n	8002cc6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0a6      	b.n	8002dee <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ca6:	4854      	ldr	r0, [pc, #336]	; (8002df8 <HAL_ADC_PollForConversion+0x1a8>)
 8002ca8:	f7ff fd3c 	bl	8002724 <LL_ADC_GetMultiDMATransfer>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e095      	b.n	8002dee <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cc6:	f7ff fbaf 	bl	8002428 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ccc:	e021      	b.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d01d      	beq.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cd6:	f7ff fba7 	bl	8002428 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <HAL_ADC_PollForConversion+0x9c>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d112      	bne.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e06d      	b.n	8002dee <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0d6      	beq.n	8002cce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fc57 	bl	80025e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7f5b      	ldrb	r3, [r3, #29]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_ADC_PollForConversion+0x1ac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d002      	beq.n	8002d86 <HAL_ADC_PollForConversion+0x136>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e001      	b.n	8002d8a <HAL_ADC_PollForConversion+0x13a>
 8002d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d008      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d002      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d104      	bne.n	8002dae <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e00d      	b.n	8002dca <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <HAL_ADC_PollForConversion+0x1ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d002      	beq.n	8002dbe <HAL_ADC_PollForConversion+0x16e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	e001      	b.n	8002dc2 <HAL_ADC_PollForConversion+0x172>
 8002dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d104      	bne.n	8002dda <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e008      	b.n	8002dec <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	220c      	movs	r2, #12
 8002dea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	50000300 	.word	0x50000300
 8002dfc:	50000100 	.word	0x50000100

08002e00 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e08:	4893      	ldr	r0, [pc, #588]	; (8003058 <HAL_ADC_Start_IT+0x258>)
 8002e0a:	f7ff fc7d 	bl	8002708 <LL_ADC_GetMultimode>
 8002e0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fd57 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8113 	bne.w	8003048 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_Start_IT+0x30>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e10e      	b.n	800304e <HAL_ADC_Start_IT+0x24e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fe05 	bl	8003a48 <ADC_Enable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 80fa 	bne.w	800303e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_ADC_Start_IT+0x25c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d002      	beq.n	8002e6e <HAL_ADC_Start_IT+0x6e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e001      	b.n	8002e72 <HAL_ADC_Start_IT+0x72>
 8002e6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d002      	beq.n	8002e80 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	f023 0206 	bic.w	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	661a      	str	r2, [r3, #96]	; 0x60
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	221c      	movs	r2, #28
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 021c 	bic.w	r2, r2, #28
 8002eca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d108      	bne.n	8002ee6 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	605a      	str	r2, [r3, #4]
          break;
 8002ee4:	e008      	b.n	8002ef8 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0204 	orr.w	r2, r2, #4
 8002ef4:	605a      	str	r2, [r3, #4]
          break;
 8002ef6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0210 	orr.w	r2, r2, #16
 8002f0e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a51      	ldr	r2, [pc, #324]	; (800305c <HAL_ADC_Start_IT+0x25c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d002      	beq.n	8002f20 <HAL_ADC_Start_IT+0x120>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e001      	b.n	8002f24 <HAL_ADC_Start_IT+0x124>
 8002f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d008      	beq.n	8002f3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	d13a      	bne.n	8002fb4 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02d      	beq.n	8002fa8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d110      	bne.n	8002f86 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0220 	bic.w	r2, r2, #32
 8002f72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f82:	605a      	str	r2, [r3, #4]
              break;
 8002f84:	e010      	b.n	8002fa8 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f94:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	605a      	str	r2, [r3, #4]
              break;
 8002fa6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fc63 	bl	8002878 <LL_ADC_REG_StartConversion>
 8002fb2:	e04b      	b.n	800304c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_ADC_Start_IT+0x25c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d002      	beq.n	8002fd0 <HAL_ADC_Start_IT+0x1d0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e001      	b.n	8002fd4 <HAL_ADC_Start_IT+0x1d4>
 8002fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d034      	beq.n	800304c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d110      	bne.n	800301c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0220 	bic.w	r2, r2, #32
 8003008:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	605a      	str	r2, [r3, #4]
              break;
 800301a:	e017      	b.n	800304c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	605a      	str	r2, [r3, #4]
              break;
 800303c:	e006      	b.n	800304c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003046:	e001      	b.n	800304c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	50000300 	.word	0x50000300
 800305c:	50000100 	.word	0x50000100

08003060 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_ADC_Stop_IT+0x16>
 8003072:	2302      	movs	r3, #2
 8003074:	e02b      	b.n	80030ce <HAL_ADC_Stop_IT+0x6e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800307e:	2103      	movs	r1, #3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fc25 	bl	80038d0 <ADC_ConversionStop>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d119      	bne.n	80030c4 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 021c 	bic.w	r2, r2, #28
 800309e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fd33 	bl	8003b0c <ADC_Disable>
 80030a6:	4603      	mov	r3, r0
 80030a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0b6      	sub	sp, #216	; 0xd8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x22>
 800310e:	2302      	movs	r3, #2
 8003110:	e3c8      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x7b4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fbd2 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 83ad 	bne.w	8003886 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff fa66 	bl	800260a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fbc0 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 8003148:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fbe0 	bl	8002916 <LL_ADC_INJ_IsConversionOngoing>
 8003156:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 81d9 	bne.w	8003516 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 81d4 	bne.w	8003516 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003176:	d10f      	bne.n	8003198 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	4619      	mov	r1, r3
 8003184:	f7ff fa6d 	bl	8002662 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fa14 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>
 8003196:	e00e      	b.n	80031b6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff fa5c 	bl	8002662 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fa04 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d022      	beq.n	800321e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6919      	ldr	r1, [r3, #16]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031e8:	f7ff f95e 	bl	80024a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6919      	ldr	r1, [r3, #16]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f7ff f9aa 	bl	8002552 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6919      	ldr	r1, [r3, #16]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7f1b      	ldrb	r3, [r3, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x124>
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	e000      	b.n	8003216 <HAL_ADC_ConfigChannel+0x126>
 8003214:	2300      	movs	r3, #0
 8003216:	461a      	mov	r2, r3
 8003218:	f7ff f9b6 	bl	8002588 <LL_ADC_SetOffsetSaturation>
 800321c:	e17b      	b.n	8003516 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f963 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x15a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f958 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	e01e      	b.n	8003288 <HAL_ADC_ConfigChannel+0x198>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f94d 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e004      	b.n	8003286 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800327c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1b0>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	e018      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1e2>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e004      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80032c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f91c 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f900 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x220>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f8f5 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	f003 021f 	and.w	r2, r3, #31
 800330e:	e01e      	b.n	800334e <HAL_ADC_ConfigChannel+0x25e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff f8ea 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800332e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800333e:	2320      	movs	r3, #32
 8003340:	e004      	b.n	800334c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x276>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	e018      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2a8>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800337a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800337e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e004      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800338e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003398:	429a      	cmp	r2, r3
 800339a:	d106      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f8b9 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2102      	movs	r1, #2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f89d 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x2e6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f892 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	e01e      	b.n	8003414 <HAL_ADC_ConfigChannel+0x324>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f887 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e004      	b.n	8003412 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_ADC_ConfigChannel+0x33c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	e016      	b.n	800345a <HAL_ADC_ConfigChannel+0x36a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800343e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e004      	b.n	800345a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345a:	429a      	cmp	r2, r3
 800345c:	d106      	bne.n	800346c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f858 	bl	800251c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2103      	movs	r1, #3
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f83c 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 8003478:	4603      	mov	r3, r0
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x3a8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2103      	movs	r1, #3
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f831 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	f003 021f 	and.w	r2, r3, #31
 8003496:	e017      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x3d8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f826 	bl	80024f0 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80034be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x3f0>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	e011      	b.n	8003504 <HAL_ADC_ConfigChannel+0x414>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003504:	429a      	cmp	r2, r3
 8003506:	d106      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	2103      	movs	r1, #3
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff f803 	bl	800251c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f986 	bl	800282c <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8140 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	461a      	mov	r2, r3
 8003536:	f7ff f8bf 	bl	80026b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4a8f      	ldr	r2, [pc, #572]	; (800377c <HAL_ADC_ConfigChannel+0x68c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	f040 8131 	bne.w	80037a8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x47e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0e9b      	lsrs	r3, r3, #26
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b09      	cmp	r3, #9
 8003564:	bf94      	ite	ls
 8003566:	2301      	movls	r3, #1
 8003568:	2300      	movhi	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e019      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x4b2>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800358a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2b09      	cmp	r3, #9
 800359a:	bf94      	ite	ls
 800359c:	2301      	movls	r3, #1
 800359e:	2300      	movhi	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d079      	beq.n	800369a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x4d2>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	3301      	adds	r3, #1
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c0:	e015      	b.n	80035ee <HAL_ADC_ConfigChannel+0x4fe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e003      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	069b      	lsls	r3, r3, #26
 80035ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_ADC_ConfigChannel+0x51e>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	3301      	adds	r3, #1
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	e017      	b.n	800363e <HAL_ADC_ConfigChannel+0x54e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800361c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	ea42 0103 	orr.w	r1, r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x574>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	3301      	adds	r3, #1
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	e018      	b.n	8003696 <HAL_ADC_ConfigChannel+0x5a6>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e003      	b.n	8003688 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003696:	430b      	orrs	r3, r1
 8003698:	e081      	b.n	800379e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d107      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x5c6>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	3301      	adds	r3, #1
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b4:	e015      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x5f2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x612>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	e017      	b.n	8003732 <HAL_ADC_ConfigChannel+0x642>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	61fb      	str	r3, [r7, #28]
  return result;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e003      	b.n	8003726 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	ea42 0103 	orr.w	r1, r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_ADC_ConfigChannel+0x66e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	3301      	adds	r3, #1
 800374a:	f003 021f 	and.w	r2, r3, #31
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	3b1e      	subs	r3, #30
 8003756:	051b      	lsls	r3, r3, #20
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375c:	e01e      	b.n	800379c <HAL_ADC_ConfigChannel+0x6ac>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	613b      	str	r3, [r7, #16]
  return result;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e006      	b.n	8003788 <HAL_ADC_ConfigChannel+0x698>
 800377a:	bf00      	nop
 800377c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f003 021f 	and.w	r2, r3, #31
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1e      	subs	r3, #30
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379c:	430b      	orrs	r3, r1
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	6892      	ldr	r2, [r2, #8]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f7fe ff5d 	bl	8002662 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <HAL_ADC_ConfigChannel+0x7bc>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d071      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b4:	483e      	ldr	r0, [pc, #248]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80037b6:	f7fe fe69 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 80037ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x6e2>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d127      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e6:	d157      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f0:	4619      	mov	r1, r3
 80037f2:	482f      	ldr	r0, [pc, #188]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80037f4:	f7fe fe37 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037f8:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_ADC_ConfigChannel+0x7cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	4613      	mov	r3, r2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003812:	e002      	b.n	800381a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b01      	subs	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f9      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	e03a      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d113      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x764>
 800382c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02a      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	4619      	mov	r1, r3
 800384c:	4818      	ldr	r0, [pc, #96]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800384e:	f7fe fe0a 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003852:	e021      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_ADC_ConfigChannel+0x7dc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d11c      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800385e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d116      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d011      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800387c:	4619      	mov	r1, r3
 800387e:	480c      	ldr	r0, [pc, #48]	; (80038b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003880:	f7fe fdf1 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
 8003884:	e008      	b.n	8003898 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	37d8      	adds	r7, #216	; 0xd8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	80080000 	.word	0x80080000
 80038b0:	50000300 	.word	0x50000300
 80038b4:	c3210000 	.word	0xc3210000
 80038b8:	90c00010 	.word	0x90c00010
 80038bc:	20000004 	.word	0x20000004
 80038c0:	053e2d63 	.word	0x053e2d63
 80038c4:	c7520000 	.word	0xc7520000
 80038c8:	50000100 	.word	0x50000100
 80038cc:	cb840000 	.word	0xcb840000

080038d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe ffee 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 80038ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff f80f 	bl	8002916 <LL_ADC_INJ_IsConversionOngoing>
 80038f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8098 	beq.w	8003a38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02a      	beq.n	800396c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7f5b      	ldrb	r3, [r3, #29]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d126      	bne.n	800396c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7f1b      	ldrb	r3, [r3, #28]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d122      	bne.n	800396c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800392a:	e014      	b.n	8003956 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <ADC_ConversionStop+0x174>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d90d      	bls.n	8003950 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e074      	b.n	8003a3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d1e3      	bne.n	800392c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2240      	movs	r2, #64	; 0x40
 800396a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d014      	beq.n	800399c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe ffa6 	bl	80028c8 <LL_ADC_REG_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ff63 	bl	8002852 <LL_ADC_IsDisableOngoing>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe ff82 	bl	80028a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d014      	beq.n	80039cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe ffb5 	bl	8002916 <LL_ADC_INJ_IsConversionOngoing>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ff4b 	bl	8002852 <LL_ADC_IsDisableOngoing>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe ff91 	bl	80028ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d005      	beq.n	80039de <ADC_ConversionStop+0x10e>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d105      	bne.n	80039e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80039d8:	230c      	movs	r3, #12
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e005      	b.n	80039ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039de:	2308      	movs	r3, #8
 80039e0:	617b      	str	r3, [r7, #20]
        break;
 80039e2:	e002      	b.n	80039ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039e4:	2304      	movs	r3, #4
 80039e6:	617b      	str	r3, [r7, #20]
        break;
 80039e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039ea:	f7fe fd1d 	bl	8002428 <HAL_GetTick>
 80039ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039f0:	e01b      	b.n	8003a2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039f2:	f7fe fd19 	bl	8002428 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d914      	bls.n	8003a2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e007      	b.n	8003a3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1dc      	bne.n	80039f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	a33fffff 	.word	0xa33fffff

08003a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fee9 	bl	800282c <LL_ADC_IsEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d14d      	bne.n	8003afc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <ADC_Enable+0xc0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f043 0210 	orr.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e039      	b.n	8003afe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fea4 	bl	80027dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a94:	f7fe fcc8 	bl	8002428 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a9a:	e028      	b.n	8003aee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fec3 	bl	800282c <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fe93 	bl	80027dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ab6:	f7fe fcb7 	bl	8002428 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d914      	bls.n	8003aee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d00d      	beq.n	8003aee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d1cf      	bne.n	8003a9c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	8000003f 	.word	0x8000003f

08003b0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe fe9a 	bl	8002852 <LL_ADC_IsDisableOngoing>
 8003b1e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fe81 	bl	800282c <LL_ADC_IsEnabled>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d047      	beq.n	8003bc0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d144      	bne.n	8003bc0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030d 	and.w	r3, r3, #13
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10c      	bne.n	8003b5e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fe5b 	bl	8002804 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2203      	movs	r2, #3
 8003b54:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b56:	f7fe fc67 	bl	8002428 <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5c:	e029      	b.n	8003bb2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	f043 0210 	orr.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e023      	b.n	8003bc2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b7a:	f7fe fc55 	bl	8002428 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d914      	bls.n	8003bb2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	f043 0210 	orr.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1dc      	bne.n	8003b7a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <LL_ADC_IsEnabled>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <LL_ADC_IsEnabled+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_ADC_IsEnabled+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d101      	bne.n	8003c08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b0a1      	sub	sp, #132	; 0x84
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e08b      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c42:	2300      	movs	r3, #0
 8003c44:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4e:	d102      	bne.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	e001      	b.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e06a      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ffb8 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8003c80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffb2 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d14c      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d149      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d028      	beq.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb6:	035b      	lsls	r3, r3, #13
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cc4:	f7ff ff81 	bl	8003bca <LL_ADC_IsEnabled>
 8003cc8:	4604      	mov	r4, r0
 8003cca:	4823      	ldr	r0, [pc, #140]	; (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ccc:	f7ff ff7d 	bl	8003bca <LL_ADC_IsEnabled>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4323      	orrs	r3, r4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d133      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ce0:	f023 030f 	bic.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	6811      	ldr	r1, [r2, #0]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	6892      	ldr	r2, [r2, #8]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf4:	e024      	b.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d06:	f7ff ff60 	bl	8003bca <LL_ADC_IsEnabled>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4812      	ldr	r0, [pc, #72]	; (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d0e:	f7ff ff5c 	bl	8003bca <LL_ADC_IsEnabled>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4323      	orrs	r3, r4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d112      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d22:	f023 030f 	bic.w	r3, r3, #15
 8003d26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d2a:	e009      	b.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d3e:	e000      	b.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3784      	adds	r7, #132	; 0x84
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	50000100 	.word	0x50000100
 8003d5c:	50000300 	.word	0x50000300

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db0b      	blt.n	8003dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	4907      	ldr	r1, [pc, #28]	; (8003dfc <__NVIC_EnableIRQ+0x38>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2001      	movs	r0, #1
 8003de6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	db0a      	blt.n	8003e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	490c      	ldr	r1, [pc, #48]	; (8003e4c <__NVIC_SetPriority+0x4c>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	440b      	add	r3, r1
 8003e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e28:	e00a      	b.n	8003e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4908      	ldr	r1, [pc, #32]	; (8003e50 <__NVIC_SetPriority+0x50>)
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	3b04      	subs	r3, #4
 8003e38:	0112      	lsls	r2, r2, #4
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	761a      	strb	r2, [r3, #24]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000e100 	.word	0xe000e100
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f1c3 0307 	rsb	r3, r3, #7
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf28      	it	cs
 8003e72:	2304      	movcs	r3, #4
 8003e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d902      	bls.n	8003e84 <NVIC_EncodePriority+0x30>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3b03      	subs	r3, #3
 8003e82:	e000      	b.n	8003e86 <NVIC_EncodePriority+0x32>
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	401a      	ands	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	43d9      	mvns	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	4313      	orrs	r3, r2
         );
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ecc:	d301      	bcc.n	8003ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <SysTick_Config+0x40>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eda:	210f      	movs	r1, #15
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f7ff ff8e 	bl	8003e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <SysTick_Config+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <SysTick_Config+0x40>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff29 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f24:	f7ff ff40 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6978      	ldr	r0, [r7, #20]
 8003f30:	f7ff ff90 	bl	8003e54 <NVIC_EncodePriority>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff5f 	bl	8003e00 <__NVIC_SetPriority>
}
 8003f42:	bf00      	nop
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	4603      	mov	r3, r0
 8003f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff33 	bl	8003dc4 <__NVIC_EnableIRQ>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffa4 	bl	8003ebc <SysTick_Config>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e08d      	b.n	80040ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b47      	ldr	r3, [pc, #284]	; (80040b8 <HAL_DMA_Init+0x138>)
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d80f      	bhi.n	8003fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_DMA_Init+0x13c>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a45      	ldr	r2, [pc, #276]	; (80040c0 <HAL_DMA_Init+0x140>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	; (80040c4 <HAL_DMA_Init+0x144>)
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
 8003fbc:	e00e      	b.n	8003fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_DMA_Init+0x148>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <HAL_DMA_Init+0x140>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	; (80040cc <HAL_DMA_Init+0x14c>)
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa76 	bl	8004520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403c:	d102      	bne.n	8004044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_DMA_Init+0x104>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d80c      	bhi.n	8004084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa96 	bl	800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e008      	b.n	8004096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40020407 	.word	0x40020407
 80040bc:	bffdfff8 	.word	0xbffdfff8
 80040c0:	cccccccd 	.word	0xcccccccd
 80040c4:	40020000 	.word	0x40020000
 80040c8:	bffdfbf8 	.word	0xbffdfbf8
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Start_IT+0x20>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e066      	b.n	80041be <HAL_DMA_Start_IT+0xee>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d155      	bne.n	80041b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f9bb 	bl	80044a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 020e 	orr.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e00f      	b.n	8004168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020a 	orr.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e005      	b.n	80041bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
 80041ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d005      	beq.n	80041ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e037      	b.n	800425a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 020e 	bic.w	r2, r2, #14
 80041f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004208:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f003 021f 	and.w	r2, r3, #31
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004236:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004258:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2204      	movs	r2, #4
 8004294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e047      	b.n	800433c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800431a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
    }
  }
  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2204      	movs	r2, #4
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d026      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7a>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d021      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0204 	bic.w	r2, r2, #4
 8004398:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2104      	movs	r1, #4
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d071      	beq.n	800449a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043be:	e06c      	b.n	800449a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2202      	movs	r2, #2
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02e      	beq.n	8004432 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d029      	beq.n	8004432 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020a 	bic.w	r2, r2, #10
 80043fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2102      	movs	r1, #2
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d038      	beq.n	800449a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004430:	e033      	b.n	800449a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2208      	movs	r2, #8
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d025      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020e 	bic.w	r2, r2, #14
 800445e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800449a:	bf00      	nop
 800449c:	bf00      	nop
}
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f003 021f 	and.w	r2, r3, #31
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d108      	bne.n	8004504 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004502:	e007      	b.n	8004514 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d802      	bhi.n	800453a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e001      	b.n	800453e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800453c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3b08      	subs	r3, #8
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a0b      	ldr	r2, [pc, #44]	; (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800456a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2201      	movs	r2, #1
 8004574:	409a      	lsls	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40020407 	.word	0x40020407
 800458c:	40020800 	.word	0x40020800
 8004590:	40020820 	.word	0x40020820
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	40020880 	.word	0x40020880

0800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045be:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	1000823f 	.word	0x1000823f
 80045e0:	40020940 	.word	0x40020940

080045e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e147      	b.n	8004886 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fba4 	bl	8001d58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0210 	bic.w	r2, r2, #16
 800461e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004620:	f7fd ff02 	bl	8002428 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004626:	e012      	b.n	800464e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004628:	f7fd fefe 	bl	8002428 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b0a      	cmp	r3, #10
 8004634:	d90b      	bls.n	800464e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2203      	movs	r2, #3
 8004646:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e11b      	b.n	8004886 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b08      	cmp	r3, #8
 800465a:	d0e5      	beq.n	8004628 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800466c:	f7fd fedc 	bl	8002428 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004672:	e012      	b.n	800469a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004674:	f7fd fed8 	bl	8002428 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b0a      	cmp	r3, #10
 8004680:	d90b      	bls.n	800469a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0f5      	b.n	8004886 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0e5      	beq.n	8004674 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0202 	orr.w	r2, r2, #2
 80046b6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a74      	ldr	r2, [pc, #464]	; (8004890 <HAL_FDCAN_Init+0x2ac>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d103      	bne.n	80046ca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80046c2:	4a74      	ldr	r2, [pc, #464]	; (8004894 <HAL_FDCAN_Init+0x2b0>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7c1b      	ldrb	r3, [r3, #16]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d108      	bne.n	80046e4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e0:	619a      	str	r2, [r3, #24]
 80046e2:	e007      	b.n	80046f4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7c5b      	ldrb	r3, [r3, #17]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d108      	bne.n	800470e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470a:	619a      	str	r2, [r3, #24]
 800470c:	e007      	b.n	800471e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800471c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7c9b      	ldrb	r3, [r3, #18]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d108      	bne.n	8004738 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004734:	619a      	str	r2, [r3, #24]
 8004736:	e007      	b.n	8004748 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004746:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800476c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0204 	orr.w	r2, r2, #4
 8004794:	619a      	str	r2, [r3, #24]
 8004796:	e02c      	b.n	80047f2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d028      	beq.n	80047f2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d01c      	beq.n	80047e2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047b6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0210 	orr.w	r2, r2, #16
 80047c6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d110      	bne.n	80047f2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0220 	orr.w	r2, r2, #32
 80047de:	619a      	str	r2, [r3, #24]
 80047e0:	e007      	b.n	80047f2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0220 	orr.w	r2, r2, #32
 80047f0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	3b01      	subs	r3, #1
 8004800:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004802:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800480a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	3b01      	subs	r3, #1
 8004814:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800481a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800481c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d115      	bne.n	8004854 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	3b01      	subs	r3, #1
 8004834:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004836:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	3b01      	subs	r3, #1
 800483e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004840:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	3b01      	subs	r3, #1
 800484a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004850:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004852:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f814 	bl	8004898 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40006400 	.word	0x40006400
 8004894:	40006500 	.word	0x40006500

08004898 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80048a2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	041a      	lsls	r2, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	061a      	lsls	r2, r3, #24
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e005      	b.n	8004926 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3304      	adds	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3f3      	bcc.n	800491a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	4000a400 	.word	0x4000a400

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004952:	e15a      	b.n	8004c0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 814c 	beq.w	8004c04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d005      	beq.n	8004984 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004980:	2b02      	cmp	r3, #2
 8004982:	d130      	bne.n	80049e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2203      	movs	r2, #3
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ba:	2201      	movs	r2, #1
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0201 	and.w	r2, r3, #1
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d017      	beq.n	8004a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d123      	bne.n	8004a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	220f      	movs	r2, #15
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	6939      	ldr	r1, [r7, #16]
 8004a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0203 	and.w	r2, r3, #3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80a6 	beq.w	8004c04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abc:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ac4:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad0:	4a56      	ldr	r2, [pc, #344]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004afa:	d01f      	beq.n	8004b3c <HAL_GPIO_Init+0x1f8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d019      	beq.n	8004b38 <HAL_GPIO_Init+0x1f4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <HAL_GPIO_Init+0x2f0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_GPIO_Init+0x2f4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00d      	beq.n	8004b30 <HAL_GPIO_Init+0x1ec>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <HAL_GPIO_Init+0x2f8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0x1e8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a48      	ldr	r2, [pc, #288]	; (8004c40 <HAL_GPIO_Init+0x2fc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_GPIO_Init+0x1e4>
 8004b24:	2305      	movs	r3, #5
 8004b26:	e00a      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b28:	2306      	movs	r3, #6
 8004b2a:	e008      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e006      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b30:	2303      	movs	r3, #3
 8004b32:	e004      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e002      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	f002 0203 	and.w	r2, r2, #3
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	4093      	lsls	r3, r2
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b4e:	4937      	ldr	r1, [pc, #220]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	3302      	adds	r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b80:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004baa:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bfe:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3301      	adds	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f47f ae9d 	bne.w	8004954 <HAL_GPIO_Init+0x10>
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	48000400 	.word	0x48000400
 8004c34:	48000800 	.word	0x48000800
 8004c38:	48000c00 	.word	0x48000c00
 8004c3c:	48001000 	.word	0x48001000
 8004c40:	48001400 	.word	0x48001400
 8004c44:	40010400 	.word	0x40010400

08004c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
 8004c54:	4613      	mov	r3, r2
 8004c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c64:	e002      	b.n	8004c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d141      	bne.n	8004d0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c86:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c92:	d131      	bne.n	8004cf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c94:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9a:	4a46      	ldr	r2, [pc, #280]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ca4:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cac:	4a41      	ldr	r2, [pc, #260]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cb4:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2232      	movs	r2, #50	; 0x32
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	4a3f      	ldr	r2, [pc, #252]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	0c9b      	lsrs	r3, r3, #18
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cca:	e002      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cde:	d102      	bne.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f2      	bne.n	8004ccc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ce6:	4b33      	ldr	r3, [pc, #204]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf2:	d158      	bne.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e057      	b.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf8:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfe:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d08:	e04d      	b.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d141      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	d131      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d20:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d26:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d30:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2232      	movs	r2, #50	; 0x32
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0c9b      	lsrs	r3, r3, #18
 8004d52:	3301      	adds	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d56:	e002      	b.n	8004d5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6a:	d102      	bne.n	8004d72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f2      	bne.n	8004d58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d112      	bne.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e011      	b.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d94:	e007      	b.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40007000 	.word	0x40007000
 8004db8:	20000004 	.word	0x20000004
 8004dbc:	431bde83 	.word	0x431bde83

08004dc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dce:	6093      	str	r3, [r2, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40007000 	.word	0x40007000

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e306      	b.n	8005400 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfe:	4b97      	ldr	r3, [pc, #604]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e08:	4b94      	ldr	r3, [pc, #592]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3e>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_OscConfig+0x44>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b8d      	ldr	r3, [pc, #564]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d157      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e2e1      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x74>
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a84      	ldr	r2, [pc, #528]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x98>
 8004e5e:	4b7f      	ldr	r3, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7e      	ldr	r2, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b7c      	ldr	r3, [pc, #496]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7b      	ldr	r2, [pc, #492]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e78:	4b78      	ldr	r3, [pc, #480]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a77      	ldr	r2, [pc, #476]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b75      	ldr	r3, [pc, #468]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a74      	ldr	r2, [pc, #464]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd fac6 	bl	8002428 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fd fac2 	bl	8002428 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e2a6      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fab2 	bl	8002428 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd faae 	bl	8002428 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e292      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eda:	4b60      	ldr	r3, [pc, #384]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d075      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f00:	4b56      	ldr	r3, [pc, #344]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_OscConfig+0x136>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_OscConfig+0x13c>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d11f      	bne.n	8004f5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f1c:	4b4f      	ldr	r3, [pc, #316]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_OscConfig+0x154>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e265      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	061b      	lsls	r3, r3, #24
 8004f42:	4946      	ldr	r1, [pc, #280]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f48:	4b45      	ldr	r3, [pc, #276]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd fa1f 	bl	8002390 <HAL_InitTick>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d043      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e251      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d023      	beq.n	8004fac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f64:	4b3d      	ldr	r3, [pc, #244]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3c      	ldr	r2, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fd fa5a 	bl	8002428 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f78:	f7fd fa56 	bl	8002428 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e23a      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f8a:	4b34      	ldr	r3, [pc, #208]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f96:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	061b      	lsls	r3, r3, #24
 8004fa4:	492d      	ldr	r1, [pc, #180]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
 8004faa:	e01a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fd fa36 	bl	8002428 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc0:	f7fd fa32 	bl	8002428 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e216      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x1e0>
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d041      	beq.n	8005072 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01c      	beq.n	8005030 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffc:	4a17      	ldr	r2, [pc, #92]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fd fa0f 	bl	8002428 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500e:	f7fd fa0b 	bl	8002428 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1ef      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ef      	beq.n	800500e <HAL_RCC_OscConfig+0x22e>
 800502e:	e020      	b.n	8005072 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8005032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fd f9f2 	bl	8002428 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005046:	e00d      	b.n	8005064 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005048:	f7fd f9ee 	bl	8002428 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d906      	bls.n	8005064 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1d2      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005064:	4b8c      	ldr	r3, [pc, #560]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ea      	bne.n	8005048 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a6 	beq.w	80051cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005084:	4b84      	ldr	r3, [pc, #528]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_OscConfig+0x2b4>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x2b6>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	4a7e      	ldr	r2, [pc, #504]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
 80050a6:	4b7c      	ldr	r3, [pc, #496]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b6:	4b79      	ldr	r3, [pc, #484]	; (800529c <HAL_RCC_OscConfig+0x4bc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d118      	bne.n	80050f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050c2:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_RCC_OscConfig+0x4bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a75      	ldr	r2, [pc, #468]	; (800529c <HAL_RCC_OscConfig+0x4bc>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fd f9ab 	bl	8002428 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fd f9a7 	bl	8002428 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e18b      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e8:	4b6c      	ldr	r3, [pc, #432]	; (800529c <HAL_RCC_OscConfig+0x4bc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d108      	bne.n	800510e <HAL_RCC_OscConfig+0x32e>
 80050fc:	4b66      	ldr	r3, [pc, #408]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a65      	ldr	r2, [pc, #404]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800510c:	e024      	b.n	8005158 <HAL_RCC_OscConfig+0x378>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b05      	cmp	r3, #5
 8005114:	d110      	bne.n	8005138 <HAL_RCC_OscConfig+0x358>
 8005116:	4b60      	ldr	r3, [pc, #384]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	4a5e      	ldr	r2, [pc, #376]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005126:	4b5c      	ldr	r3, [pc, #368]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	4a5a      	ldr	r2, [pc, #360]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005136:	e00f      	b.n	8005158 <HAL_RCC_OscConfig+0x378>
 8005138:	4b57      	ldr	r3, [pc, #348]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	4a56      	ldr	r2, [pc, #344]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005148:	4b53      	ldr	r3, [pc, #332]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	4a52      	ldr	r2, [pc, #328]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d016      	beq.n	800518e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd f962 	bl	8002428 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fd f95e 	bl	8002428 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e140      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b46      	ldr	r3, [pc, #280]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ed      	beq.n	8005168 <HAL_RCC_OscConfig+0x388>
 800518c:	e015      	b.n	80051ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fd f94b 	bl	8002428 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fd f947 	bl	8002428 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e129      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1ed      	bne.n	8005196 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b35      	ldr	r3, [pc, #212]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	4a34      	ldr	r2, [pc, #208]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80051c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d03c      	beq.n	8005252 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01c      	beq.n	800521a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051e0:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80051e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fd f91a 	bl	8002428 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f8:	f7fd f916 	bl	8002428 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0fa      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800520a:	4b23      	ldr	r3, [pc, #140]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800520c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ef      	beq.n	80051f8 <HAL_RCC_OscConfig+0x418>
 8005218:	e01b      	b.n	8005252 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800521a:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800521c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fd f8fd 	bl	8002428 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005232:	f7fd f8f9 	bl	8002428 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0dd      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1ef      	bne.n	8005232 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80d1 	beq.w	80053fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	f000 808b 	beq.w	8005380 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d15e      	bne.n	8005330 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <HAL_RCC_OscConfig+0x4b8>)
 8005278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fd f8d3 	bl	8002428 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005284:	e00c      	b.n	80052a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fd f8cf 	bl	8002428 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d905      	bls.n	80052a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0b3      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
 8005298:	40021000 	.word	0x40021000
 800529c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ec      	bne.n	8005286 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ac:	4b56      	ldr	r3, [pc, #344]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x62c>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6a11      	ldr	r1, [r2, #32]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052bc:	3a01      	subs	r2, #1
 80052be:	0112      	lsls	r2, r2, #4
 80052c0:	4311      	orrs	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052c6:	0212      	lsls	r2, r2, #8
 80052c8:	4311      	orrs	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ce:	0852      	lsrs	r2, r2, #1
 80052d0:	3a01      	subs	r2, #1
 80052d2:	0552      	lsls	r2, r2, #21
 80052d4:	4311      	orrs	r1, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052da:	0852      	lsrs	r2, r2, #1
 80052dc:	3a01      	subs	r2, #1
 80052de:	0652      	lsls	r2, r2, #25
 80052e0:	4311      	orrs	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052e6:	06d2      	lsls	r2, r2, #27
 80052e8:	430a      	orrs	r2, r1
 80052ea:	4947      	ldr	r1, [pc, #284]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b45      	ldr	r3, [pc, #276]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a44      	ldr	r2, [pc, #272]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052fc:	4b42      	ldr	r3, [pc, #264]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a41      	ldr	r2, [pc, #260]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005306:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd f88e 	bl	8002428 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fd f88a 	bl	8002428 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e06e      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005322:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x530>
 800532e:	e066      	b.n	80053fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b35      	ldr	r3, [pc, #212]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a34      	ldr	r2, [pc, #208]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a31      	ldr	r2, [pc, #196]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005348:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 800534e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd f866 	bl	8002428 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fd f862 	bl	8002428 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e046      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005372:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x580>
 800537e:	e03e      	b.n	80053fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e039      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <HAL_RCC_OscConfig+0x628>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0203 	and.w	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	429a      	cmp	r2, r3
 800539e:	d12c      	bne.n	80053fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	3b01      	subs	r3, #1
 80053ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d123      	bne.n	80053fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d11b      	bne.n	80053fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d113      	bne.n	80053fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	019f800c 	.word	0x019f800c

08005410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e11e      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b91      	ldr	r3, [pc, #580]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d910      	bls.n	8005458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b8e      	ldr	r3, [pc, #568]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 020f 	bic.w	r2, r3, #15
 800543e:	498c      	ldr	r1, [pc, #560]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b8a      	ldr	r3, [pc, #552]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e106      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d073      	beq.n	800554c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d129      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546c:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0f4      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800547c:	f000 f99e 	bl	80057bc <RCC_GetSysClockFreqFromPLLSource>
 8005480:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4a7c      	ldr	r2, [pc, #496]	; (8005678 <HAL_RCC_ClockConfig+0x268>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d93f      	bls.n	800550a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800548a:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d033      	beq.n	800550a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d12f      	bne.n	800550a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054aa:	4b72      	ldr	r3, [pc, #456]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b2:	4a70      	ldr	r2, [pc, #448]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80054b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e024      	b.n	800550a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c8:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0c6      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d8:	4b66      	ldr	r3, [pc, #408]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0be      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054e8:	f000 f8ce 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4a61      	ldr	r2, [pc, #388]	; (8005678 <HAL_RCC_ClockConfig+0x268>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d909      	bls.n	800550a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fe:	4a5d      	ldr	r2, [pc, #372]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800550a:	4b5a      	ldr	r3, [pc, #360]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4957      	ldr	r1, [pc, #348]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551c:	f7fc ff84 	bl	8002428 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	e00a      	b.n	800553a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fc ff80 	bl	8002428 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e095      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	4b4e      	ldr	r3, [pc, #312]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 020c 	and.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d1eb      	bne.n	8005524 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d023      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005564:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4a42      	ldr	r2, [pc, #264]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800556a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800556e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800557c:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005584:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800558a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558c:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4936      	ldr	r1, [pc, #216]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
 800559e:	e008      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d105      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055a6:	4b33      	ldr	r3, [pc, #204]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	4a32      	ldr	r2, [pc, #200]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d21d      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 020f 	bic.w	r2, r3, #15
 80055c8:	4929      	ldr	r1, [pc, #164]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055d0:	f7fc ff2a 	bl	8002428 <HAL_GetTick>
 80055d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d8:	f7fc ff26 	bl	8002428 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e03b      	b.n	8005666 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d1ed      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4917      	ldr	r1, [pc, #92]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	490f      	ldr	r1, [pc, #60]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800563a:	f000 f825 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 800563e:	4602      	mov	r2, r0
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_RCC_ClockConfig+0x264>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	490c      	ldr	r1, [pc, #48]	; (800567c <HAL_RCC_ClockConfig+0x26c>)
 800564c:	5ccb      	ldrb	r3, [r1, r3]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	fa22 f303 	lsr.w	r3, r2, r3
 8005656:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <HAL_RCC_ClockConfig+0x270>)
 8005658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_RCC_ClockConfig+0x274>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc fe96 	bl	8002390 <HAL_InitTick>
 8005664:	4603      	mov	r3, r0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40022000 	.word	0x40022000
 8005674:	40021000 	.word	0x40021000
 8005678:	04c4b400 	.word	0x04c4b400
 800567c:	0800961c 	.word	0x0800961c
 8005680:	20000004 	.word	0x20000004
 8005684:	20000008 	.word	0x20000008

08005688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800568e:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d102      	bne.n	80056a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800569a:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <HAL_RCC_GetSysClockFreq+0xbc>)
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e047      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d102      	bne.n	80056b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056ac:	4b26      	ldr	r3, [pc, #152]	; (8005748 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	e03e      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	d136      	bne.n	800572c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	3301      	adds	r3, #1
 80056d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d10c      	bne.n	80056f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e6:	68d2      	ldr	r2, [r2, #12]
 80056e8:	0a12      	lsrs	r2, r2, #8
 80056ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	617b      	str	r3, [r7, #20]
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	4a10      	ldr	r2, [pc, #64]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005700:	68d2      	ldr	r2, [r2, #12]
 8005702:	0a12      	lsrs	r2, r2, #8
 8005704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
      break;
 800570e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0e5b      	lsrs	r3, r3, #25
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	3301      	adds	r3, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	e001      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005730:	693b      	ldr	r3, [r7, #16]
}
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	00f42400 	.word	0x00f42400
 8005748:	007a1200 	.word	0x007a1200

0800574c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <HAL_RCC_GetHCLKFreq+0x14>)
 8005752:	681b      	ldr	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000004 	.word	0x20000004

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005768:	f7ff fff0 	bl	800574c <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4904      	ldr	r1, [pc, #16]	; (800578c <HAL_RCC_GetPCLK1Freq+0x28>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	0800962c 	.word	0x0800962c

08005790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005794:	f7ff ffda 	bl	800574c <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0adb      	lsrs	r3, r3, #11
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4904      	ldr	r1, [pc, #16]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40021000 	.word	0x40021000
 80057b8:	0800962c 	.word	0x0800962c

080057bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057c2:	4b1e      	ldr	r3, [pc, #120]	; (800583c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d10c      	bne.n	80057fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e0:	4a17      	ldr	r2, [pc, #92]	; (8005840 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ea:	68d2      	ldr	r2, [r2, #12]
 80057ec:	0a12      	lsrs	r2, r2, #8
 80057ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
    break;
 80057f8:	e00c      	b.n	8005814 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057fa:	4a12      	ldr	r2, [pc, #72]	; (8005844 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005804:	68d2      	ldr	r2, [r2, #12]
 8005806:	0a12      	lsrs	r2, r2, #8
 8005808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
    break;
 8005812:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0e5b      	lsrs	r3, r3, #25
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800582e:	687b      	ldr	r3, [r7, #4]
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	40021000 	.word	0x40021000
 8005840:	007a1200 	.word	0x007a1200
 8005844:	00f42400 	.word	0x00f42400

08005848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005850:	2300      	movs	r3, #0
 8005852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005854:	2300      	movs	r3, #0
 8005856:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8098 	beq.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005866:	2300      	movs	r3, #0
 8005868:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800586a:	4b43      	ldr	r3, [pc, #268]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005876:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
 8005882:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588e:	2301      	movs	r3, #1
 8005890:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005892:	4b3a      	ldr	r3, [pc, #232]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a39      	ldr	r2, [pc, #228]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589e:	f7fc fdc3 	bl	8002428 <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a4:	e009      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fc fdbf 	bl	8002428 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d902      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	74fb      	strb	r3, [r7, #19]
        break;
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0ef      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d159      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058cc:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01e      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d019      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058e8:	4b23      	ldr	r3, [pc, #140]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f4:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fc fd7f 	bl	8002428 <HAL_GetTick>
 800592a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592c:	e00b      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fc fd7b 	bl	8002428 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d902      	bls.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	74fb      	strb	r3, [r7, #19]
            break;
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ec      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	4903      	ldr	r1, [pc, #12]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005970:	e008      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	74bb      	strb	r3, [r7, #18]
 8005976:	e005      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005978:	40021000 	.word	0x40021000
 800597c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005984:	7c7b      	ldrb	r3, [r7, #17]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d105      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598a:	4ba6      	ldr	r3, [pc, #664]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	4aa5      	ldr	r2, [pc, #660]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a2:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f023 0203 	bic.w	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	499c      	ldr	r1, [pc, #624]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059c4:	4b97      	ldr	r3, [pc, #604]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 020c 	bic.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4994      	ldr	r1, [pc, #592]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059e6:	4b8f      	ldr	r3, [pc, #572]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	498b      	ldr	r1, [pc, #556]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a08:	4b86      	ldr	r3, [pc, #536]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	4983      	ldr	r1, [pc, #524]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a2a:	4b7e      	ldr	r3, [pc, #504]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	497a      	ldr	r1, [pc, #488]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a4c:	4b75      	ldr	r3, [pc, #468]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	4972      	ldr	r1, [pc, #456]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	4969      	ldr	r1, [pc, #420]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a90:	4b64      	ldr	r3, [pc, #400]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	4961      	ldr	r1, [pc, #388]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab2:	4b5c      	ldr	r3, [pc, #368]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	4958      	ldr	r1, [pc, #352]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d015      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ad4:	4b53      	ldr	r3, [pc, #332]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	4950      	ldr	r1, [pc, #320]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b0c:	4b45      	ldr	r3, [pc, #276]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4942      	ldr	r1, [pc, #264]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2a:	d105      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d015      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b44:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	4934      	ldr	r1, [pc, #208]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b62:	d105      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b64:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4a2e      	ldr	r2, [pc, #184]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d015      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b7c:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	4926      	ldr	r1, [pc, #152]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b9c:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ba6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d015      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	4918      	ldr	r1, [pc, #96]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4a12      	ldr	r2, [pc, #72]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	490a      	ldr	r1, [pc, #40]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e049      	b.n	8005cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc f8dc 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f000 fc56 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e049      	b.n	8005d7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f841 	bl	8005d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f000 fbff 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d122      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11b      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0202 	mvn.w	r2, #2
 8005dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fb7e 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fb70 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb81 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0204 	mvn.w	r2, #4
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fb54 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fb46 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb57 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0208 	mvn.w	r2, #8
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fb2a 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb1c 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fb2d 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0210 	mvn.w	r2, #16
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb00 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 faf2 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb03 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0201 	mvn.w	r2, #1
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 facc 	bl	80064b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 f836 	bl	8006fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 f829 	bl	8006fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fab1 	bl	8006504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d10e      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d107      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0220 	mvn.w	r2, #32
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 ffe9 	bl	8006fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fdc:	d10f      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fec:	d107      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 ffef 	bl	8006fdc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600c:	d10f      	bne.n	800602e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 ffe1 	bl	8006ff0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603c:	d10f      	bne.n	800605e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800604c:	d107      	bne.n	800605e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 ffd3 	bl	8007004 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606c:	d10f      	bne.n	800608e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800607c:	d107      	bne.n	800608e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 ffc5 	bl	8007018 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0ff      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b14      	cmp	r3, #20
 80060c2:	f200 80f0 	bhi.w	80062a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	08006121 	.word	0x08006121
 80060d0:	080062a7 	.word	0x080062a7
 80060d4:	080062a7 	.word	0x080062a7
 80060d8:	080062a7 	.word	0x080062a7
 80060dc:	08006161 	.word	0x08006161
 80060e0:	080062a7 	.word	0x080062a7
 80060e4:	080062a7 	.word	0x080062a7
 80060e8:	080062a7 	.word	0x080062a7
 80060ec:	080061a3 	.word	0x080061a3
 80060f0:	080062a7 	.word	0x080062a7
 80060f4:	080062a7 	.word	0x080062a7
 80060f8:	080062a7 	.word	0x080062a7
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	080062a7 	.word	0x080062a7
 8006104:	080062a7 	.word	0x080062a7
 8006108:	080062a7 	.word	0x080062a7
 800610c:	08006225 	.word	0x08006225
 8006110:	080062a7 	.word	0x080062a7
 8006114:	080062a7 	.word	0x080062a7
 8006118:	080062a7 	.word	0x080062a7
 800611c:	08006265 	.word	0x08006265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fa86 	bl	8006638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
      break;
 800615e:	e0a5      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 faf6 	bl	8006758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
      break;
 80061a0:	e084      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fb5f 	bl	800686c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0208 	orr.w	r2, r2, #8
 80061bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0204 	bic.w	r2, r2, #4
 80061cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69d9      	ldr	r1, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	61da      	str	r2, [r3, #28]
      break;
 80061e0:	e064      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fbc7 	bl	800697c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	61da      	str	r2, [r3, #28]
      break;
 8006222:	e043      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fc30 	bl	8006a90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006262:	e023      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fc74 	bl	8006b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062a4:	e002      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
      break;
 80062aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0de      	b.n	800649a <HAL_TIM_ConfigClockSource+0x1da>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a63      	ldr	r2, [pc, #396]	; (80064a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f000 80a9 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 800631c:	4a61      	ldr	r2, [pc, #388]	; (80064a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f200 80ae 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006324:	4a60      	ldr	r2, [pc, #384]	; (80064a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f000 80a1 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f200 80a6 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006334:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8006336:	4293      	cmp	r3, r2
 8006338:	f000 8099 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 800633c:	4a5b      	ldr	r2, [pc, #364]	; (80064ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f200 809e 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	4a5a      	ldr	r2, [pc, #360]	; (80064b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	f000 8091 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 800634c:	4a58      	ldr	r2, [pc, #352]	; (80064b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	f200 8096 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006358:	f000 8089 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 800635c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006360:	f200 808e 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006368:	d03e      	beq.n	80063e8 <HAL_TIM_ConfigClockSource+0x128>
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636e:	f200 8087 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	f000 8086 	beq.w	8006486 <HAL_TIM_ConfigClockSource+0x1c6>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	d87f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006380:	2b70      	cmp	r3, #112	; 0x70
 8006382:	d01a      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xfa>
 8006384:	2b70      	cmp	r3, #112	; 0x70
 8006386:	d87b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d050      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x16e>
 800638c:	2b60      	cmp	r3, #96	; 0x60
 800638e:	d877      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d03c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x14e>
 8006394:	2b50      	cmp	r3, #80	; 0x50
 8006396:	d873      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d058      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x18e>
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d86f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d064      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 80063a4:	2b30      	cmp	r3, #48	; 0x30
 80063a6:	d86b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d060      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d867      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05c      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d05a      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x1ae>
 80063b8:	e062      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6899      	ldr	r1, [r3, #8]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f000 fca7 	bl	8006d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	609a      	str	r2, [r3, #8]
      break;
 80063e6:	e04f      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f000 fc90 	bl	8006d1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800640a:	609a      	str	r2, [r3, #8]
      break;
 800640c:	e03c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 fc02 	bl	8006c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2150      	movs	r1, #80	; 0x50
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fc5b 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 800642c:	e02c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fc21 	bl	8006c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2160      	movs	r1, #96	; 0x60
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fc4b 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 800644c:	e01c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fbe2 	bl	8006c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fc3b 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 800646c:	e00c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f000 fc32 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 800647e:	e003      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e000      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	00100070 	.word	0x00100070
 80064a8:	00100040 	.word	0x00100040
 80064ac:	00100030 	.word	0x00100030
 80064b0:	00100020 	.word	0x00100020

080064b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a3c      	ldr	r2, [pc, #240]	; (800661c <TIM_Base_SetConfig+0x104>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00f      	beq.n	8006550 <TIM_Base_SetConfig+0x38>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d00b      	beq.n	8006550 <TIM_Base_SetConfig+0x38>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a39      	ldr	r2, [pc, #228]	; (8006620 <TIM_Base_SetConfig+0x108>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_Base_SetConfig+0x38>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a38      	ldr	r2, [pc, #224]	; (8006624 <TIM_Base_SetConfig+0x10c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_Base_SetConfig+0x38>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a37      	ldr	r2, [pc, #220]	; (8006628 <TIM_Base_SetConfig+0x110>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <TIM_Base_SetConfig+0x104>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01b      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d017      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <TIM_Base_SetConfig+0x108>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a29      	ldr	r2, [pc, #164]	; (8006624 <TIM_Base_SetConfig+0x10c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a28      	ldr	r2, [pc, #160]	; (8006628 <TIM_Base_SetConfig+0x110>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a27      	ldr	r2, [pc, #156]	; (800662c <TIM_Base_SetConfig+0x114>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a26      	ldr	r2, [pc, #152]	; (8006630 <TIM_Base_SetConfig+0x118>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0x8a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a25      	ldr	r2, [pc, #148]	; (8006634 <TIM_Base_SetConfig+0x11c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a10      	ldr	r2, [pc, #64]	; (800661c <TIM_Base_SetConfig+0x104>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00f      	beq.n	8006600 <TIM_Base_SetConfig+0xe8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <TIM_Base_SetConfig+0x110>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_Base_SetConfig+0xe8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a10      	ldr	r2, [pc, #64]	; (800662c <TIM_Base_SetConfig+0x114>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_Base_SetConfig+0xe8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a0f      	ldr	r2, [pc, #60]	; (8006630 <TIM_Base_SetConfig+0x118>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_Base_SetConfig+0xe8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <TIM_Base_SetConfig+0x11c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d103      	bne.n	8006608 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	615a      	str	r2, [r3, #20]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800

08006638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 0302 	bic.w	r3, r3, #2
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a2c      	ldr	r2, [pc, #176]	; (8006744 <TIM_OC1_SetConfig+0x10c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00f      	beq.n	80066b8 <TIM_OC1_SetConfig+0x80>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2b      	ldr	r2, [pc, #172]	; (8006748 <TIM_OC1_SetConfig+0x110>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00b      	beq.n	80066b8 <TIM_OC1_SetConfig+0x80>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a2a      	ldr	r2, [pc, #168]	; (800674c <TIM_OC1_SetConfig+0x114>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_OC1_SetConfig+0x80>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a29      	ldr	r2, [pc, #164]	; (8006750 <TIM_OC1_SetConfig+0x118>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC1_SetConfig+0x80>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a28      	ldr	r2, [pc, #160]	; (8006754 <TIM_OC1_SetConfig+0x11c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d10c      	bne.n	80066d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0308 	bic.w	r3, r3, #8
 80066be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1b      	ldr	r2, [pc, #108]	; (8006744 <TIM_OC1_SetConfig+0x10c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_OC1_SetConfig+0xc2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <TIM_OC1_SetConfig+0x110>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_OC1_SetConfig+0xc2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <TIM_OC1_SetConfig+0x114>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_OC1_SetConfig+0xc2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a18      	ldr	r2, [pc, #96]	; (8006750 <TIM_OC1_SetConfig+0x118>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_OC1_SetConfig+0xc2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a17      	ldr	r2, [pc, #92]	; (8006754 <TIM_OC1_SetConfig+0x11c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d111      	bne.n	800671e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40012c00 	.word	0x40012c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800

08006758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f023 0210 	bic.w	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a28      	ldr	r2, [pc, #160]	; (8006858 <TIM_OC2_SetConfig+0x100>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC2_SetConfig+0x6c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a27      	ldr	r2, [pc, #156]	; (800685c <TIM_OC2_SetConfig+0x104>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10d      	bne.n	80067e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <TIM_OC2_SetConfig+0x100>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00f      	beq.n	8006808 <TIM_OC2_SetConfig+0xb0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a1c      	ldr	r2, [pc, #112]	; (800685c <TIM_OC2_SetConfig+0x104>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_OC2_SetConfig+0xb0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <TIM_OC2_SetConfig+0x108>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_OC2_SetConfig+0xb0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <TIM_OC2_SetConfig+0x10c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC2_SetConfig+0xb0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a19      	ldr	r2, [pc, #100]	; (8006868 <TIM_OC2_SetConfig+0x110>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d113      	bne.n	8006830 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800680e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40012c00 	.word	0x40012c00
 800685c:	40013400 	.word	0x40013400
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a27      	ldr	r2, [pc, #156]	; (8006968 <TIM_OC3_SetConfig+0xfc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_OC3_SetConfig+0x6a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <TIM_OC3_SetConfig+0x100>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10d      	bne.n	80068f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <TIM_OC3_SetConfig+0xfc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00f      	beq.n	800691a <TIM_OC3_SetConfig+0xae>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1b      	ldr	r2, [pc, #108]	; (800696c <TIM_OC3_SetConfig+0x100>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00b      	beq.n	800691a <TIM_OC3_SetConfig+0xae>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <TIM_OC3_SetConfig+0x104>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d007      	beq.n	800691a <TIM_OC3_SetConfig+0xae>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <TIM_OC3_SetConfig+0x108>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d003      	beq.n	800691a <TIM_OC3_SetConfig+0xae>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <TIM_OC3_SetConfig+0x10c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d113      	bne.n	8006942 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40012c00 	.word	0x40012c00
 800696c:	40013400 	.word	0x40013400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	031b      	lsls	r3, r3, #12
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a28      	ldr	r2, [pc, #160]	; (8006a7c <TIM_OC4_SetConfig+0x100>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC4_SetConfig+0x6c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a27      	ldr	r2, [pc, #156]	; (8006a80 <TIM_OC4_SetConfig+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10d      	bne.n	8006a04 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <TIM_OC4_SetConfig+0x100>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <TIM_OC4_SetConfig+0xb0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <TIM_OC4_SetConfig+0x104>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_OC4_SetConfig+0xb0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1b      	ldr	r2, [pc, #108]	; (8006a84 <TIM_OC4_SetConfig+0x108>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_OC4_SetConfig+0xb0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a1a      	ldr	r2, [pc, #104]	; (8006a88 <TIM_OC4_SetConfig+0x10c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC4_SetConfig+0xb0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <TIM_OC4_SetConfig+0x110>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d113      	bne.n	8006a54 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	019b      	lsls	r3, r3, #6
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40013400 	.word	0x40013400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800

08006a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <TIM_OC5_SetConfig+0xb4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_OC5_SetConfig+0x7a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <TIM_OC5_SetConfig+0xb8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_OC5_SetConfig+0x7a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a15      	ldr	r2, [pc, #84]	; (8006b4c <TIM_OC5_SetConfig+0xbc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_OC5_SetConfig+0x7a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <TIM_OC5_SetConfig+0xc0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_OC5_SetConfig+0x7a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <TIM_OC5_SetConfig+0xc4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d109      	bne.n	8006b1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	621a      	str	r2, [r3, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40012c00 	.word	0x40012c00
 8006b48:	40013400 	.word	0x40013400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800

08006b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <TIM_OC6_SetConfig+0xb8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_OC6_SetConfig+0x7c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <TIM_OC6_SetConfig+0xbc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_OC6_SetConfig+0x7c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <TIM_OC6_SetConfig+0xc0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_OC6_SetConfig+0x7c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <TIM_OC6_SetConfig+0xc4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC6_SetConfig+0x7c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a14      	ldr	r2, [pc, #80]	; (8006c20 <TIM_OC6_SetConfig+0xc8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40013400 	.word	0x40013400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 030a 	bic.w	r3, r3, #10
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0210 	bic.w	r2, r3, #16
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	031b      	lsls	r3, r3, #12
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f043 0307 	orr.w	r3, r3, #7
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e065      	b.n	8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d108      	bne.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d013      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a12      	ldr	r2, [pc, #72]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10c      	bne.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40013400 	.word	0x40013400
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40014000 	.word	0x40014000

08006e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e087      	b.n	8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	041b      	lsls	r3, r3, #16
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a27      	ldr	r2, [pc, #156]	; (8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a25      	ldr	r2, [pc, #148]	; (8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d106      	bne.n	8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d126      	bne.n	8006f7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a0e      	ldr	r2, [pc, #56]	; (8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d106      	bne.n	8006f7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40013400 	.word	0x40013400

08006fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e042      	b.n	80070c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fa ffe9 	bl	8002028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2224      	movs	r2, #36	; 0x24
 800705a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fc60 	bl	8007934 <UART_SetConfig>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e022      	b.n	80070c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 ff20 	bl	8007ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800709a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 ffa7 	bl	8008010 <UART_CheckIdleState>
 80070c2:	4603      	mov	r3, r0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d17a      	bne.n	80071da <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Transmit_DMA+0x24>
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e073      	b.n	80071dc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Transmit_DMA+0x36>
 80070fe:	2302      	movs	r3, #2
 8007100:	e06c      	b.n	80071dc <HAL_UART_Transmit_DMA+0x110>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2221      	movs	r2, #33	; 0x21
 800712c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02c      	beq.n	8007192 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800713c:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <HAL_UART_Transmit_DMA+0x118>)
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <HAL_UART_Transmit_DMA+0x11c>)
 8007146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_UART_Transmit_DMA+0x120>)
 800714e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007154:	2200      	movs	r2, #0
 8007156:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	4619      	mov	r1, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3328      	adds	r3, #40	; 0x28
 8007168:	461a      	mov	r2, r3
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	f7fc ffb0 	bl	80040d0 <HAL_DMA_Start_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00d      	beq.n	8007192 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2210      	movs	r2, #16
 800717a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e024      	b.n	80071dc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	613b      	str	r3, [r7, #16]
   return(result);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	623a      	str	r2, [r7, #32]
 80071c4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	69f9      	ldr	r1, [r7, #28]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80071da:	2302      	movs	r3, #2
  }
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3728      	adds	r7, #40	; 0x28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	080084d7 	.word	0x080084d7
 80071e8:	08008571 	.word	0x08008571
 80071ec:	080086eb 	.word	0x080086eb

080071f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007204:	2b20      	cmp	r3, #32
 8007206:	d142      	bne.n	800728e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_UART_Receive_DMA+0x24>
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e03b      	b.n	8007290 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_UART_Receive_DMA+0x36>
 8007222:	2302      	movs	r3, #2
 8007224:	e034      	b.n	8007290 <HAL_UART_Receive_DMA+0xa0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_UART_Receive_DMA+0xa8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01f      	beq.n	800727e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d018      	beq.n	800727e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	613b      	str	r3, [r7, #16]
   return(result);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	623b      	str	r3, [r7, #32]
 800726c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	69f9      	ldr	r1, [r7, #28]
 8007270:	6a3a      	ldr	r2, [r7, #32]
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	61bb      	str	r3, [r7, #24]
   return(result);
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	461a      	mov	r2, r3
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 ffd7 	bl	8008238 <UART_Start_Receive_DMA>
 800728a:	4603      	mov	r3, r0
 800728c:	e000      	b.n	8007290 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800728e:	2302      	movs	r3, #2
  }
}
 8007290:	4618      	mov	r0, r3
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40008000 	.word	0x40008000

0800729c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b0ba      	sub	sp, #232	; 0xe8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80072ca:	4013      	ands	r3, r2
 80072cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11b      	bne.n	8007310 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d015      	beq.n	8007310 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d105      	bne.n	80072fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 82d6 	beq.w	80078b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
      }
      return;
 800730e:	e2d0      	b.n	80078b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 811f 	beq.w	8007558 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800731a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800731e:	4b8b      	ldr	r3, [pc, #556]	; (800754c <HAL_UART_IRQHandler+0x2b0>)
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800732a:	4b89      	ldr	r3, [pc, #548]	; (8007550 <HAL_UART_IRQHandler+0x2b4>)
 800732c:	4013      	ands	r3, r2
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8112 	beq.w	8007558 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d011      	beq.n	8007364 <HAL_UART_IRQHandler+0xc8>
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2201      	movs	r2, #1
 8007352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d011      	beq.n	8007394 <HAL_UART_IRQHandler+0xf8>
 8007370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2202      	movs	r2, #2
 8007382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738a:	f043 0204 	orr.w	r2, r3, #4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d011      	beq.n	80073c4 <HAL_UART_IRQHandler+0x128>
 80073a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2204      	movs	r2, #4
 80073b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d017      	beq.n	8007400 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073e0:	4b5a      	ldr	r3, [pc, #360]	; (800754c <HAL_UART_IRQHandler+0x2b0>)
 80073e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2208      	movs	r2, #8
 80073ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f6:	f043 0208 	orr.w	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <HAL_UART_IRQHandler+0x196>
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	f043 0220 	orr.w	r2, r3, #32
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 823c 	beq.w	80078b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800743e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b00      	cmp	r3, #0
 8007448:	d013      	beq.n	8007472 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800744a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800745a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d005      	beq.n	8007496 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800748a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800748e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007492:	2b00      	cmp	r3, #0
 8007494:	d04f      	beq.n	8007536 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 ffb7 	bl	800840a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d141      	bne.n	800752e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1d9      	bne.n	80074aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d013      	beq.n	8007526 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007502:	4a14      	ldr	r2, [pc, #80]	; (8007554 <HAL_UART_IRQHandler+0x2b8>)
 8007504:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750a:	4618      	mov	r0, r3
 800750c:	f7fc feb4 	bl	8004278 <HAL_DMA_Abort_IT>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d017      	beq.n	8007546 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	e00f      	b.n	8007546 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9ee 	bl	8007908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e00b      	b.n	8007546 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9ea 	bl	8007908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e007      	b.n	8007546 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9e6 	bl	8007908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007544:	e1b7      	b.n	80078b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007546:	bf00      	nop
    return;
 8007548:	e1b5      	b.n	80078b6 <HAL_UART_IRQHandler+0x61a>
 800754a:	bf00      	nop
 800754c:	10000001 	.word	0x10000001
 8007550:	04000120 	.word	0x04000120
 8007554:	0800876b 	.word	0x0800876b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755c:	2b01      	cmp	r3, #1
 800755e:	f040 814a 	bne.w	80077f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8143 	beq.w	80077f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 813c 	beq.w	80077f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2210      	movs	r2, #16
 8007584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	f040 80b5 	bne.w	8007700 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8187 	beq.w	80078ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f080 817f 	bcs.w	80078ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 8086 	bne.w	80076e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007606:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800760e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800761a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1da      	bne.n	80075d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007646:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800764a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800764e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e1      	bne.n	8007622 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800766e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007684:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e3      	bne.n	800765e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e4      	bne.n	80076a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fc fd71 	bl	80041c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f90f 	bl	800791c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076fe:	e0dc      	b.n	80078ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80ce 	beq.w	80078be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80c9 	beq.w	80078be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	623b      	str	r3, [r7, #32]
   return(result);
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800778a:	633a      	str	r2, [r7, #48]	; 0x30
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e1      	bne.n	8007762 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f894 	bl	800791c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f4:	e063      	b.n	80078be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00e      	beq.n	8007820 <HAL_UART_IRQHandler+0x584>
 8007802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007816:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ffe7 	bl	80087ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800781e:	e051      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007828:	2b00      	cmp	r3, #0
 800782a:	d014      	beq.n	8007856 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007848:	2b00      	cmp	r3, #0
 800784a:	d03a      	beq.n	80078c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
    return;
 8007854:	e035      	b.n	80078c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_UART_IRQHandler+0x5da>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ff91 	bl	8008796 <UART_EndTransmit_IT>
    return;
 8007874:	e026      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <HAL_UART_IRQHandler+0x5fa>
 8007882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 ffc0 	bl	8008814 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007894:	e016      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_UART_IRQHandler+0x628>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da0c      	bge.n	80078c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 ffa8 	bl	8008800 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b0:	e008      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
      return;
 80078b2:	bf00      	nop
 80078b4:	e006      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
    return;
 80078b6:	bf00      	nop
 80078b8:	e004      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
      return;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
      return;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_UART_IRQHandler+0x628>
    return;
 80078c2:	bf00      	nop
  }
}
 80078c4:	37e8      	adds	r7, #232	; 0xe8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007938:	b08c      	sub	sp, #48	; 0x30
 800793a:	af00      	add	r7, sp, #0
 800793c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	431a      	orrs	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	431a      	orrs	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4313      	orrs	r3, r2
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4bab      	ldr	r3, [pc, #684]	; (8007c10 <UART_SetConfig+0x2dc>)
 8007964:	4013      	ands	r3, r2
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796c:	430b      	orrs	r3, r1
 800796e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4aa0      	ldr	r2, [pc, #640]	; (8007c14 <UART_SetConfig+0x2e0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799c:	4313      	orrs	r3, r2
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f023 010f 	bic.w	r1, r3, #15
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a91      	ldr	r2, [pc, #580]	; (8007c18 <UART_SetConfig+0x2e4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d125      	bne.n	8007a24 <UART_SetConfig+0xf0>
 80079d8:	4b90      	ldr	r3, [pc, #576]	; (8007c1c <UART_SetConfig+0x2e8>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d81a      	bhi.n	8007a1c <UART_SetConfig+0xe8>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0xb8>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a0d 	.word	0x08007a0d
 80079f4:	08007a05 	.word	0x08007a05
 80079f8:	08007a15 	.word	0x08007a15
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a02:	e0d6      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a04:	2302      	movs	r3, #2
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0a:	e0d2      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a12:	e0ce      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a14:	2308      	movs	r3, #8
 8007a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1a:	e0ca      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a22:	e0c6      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a7d      	ldr	r2, [pc, #500]	; (8007c20 <UART_SetConfig+0x2ec>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d138      	bne.n	8007aa0 <UART_SetConfig+0x16c>
 8007a2e:	4b7b      	ldr	r3, [pc, #492]	; (8007c1c <UART_SetConfig+0x2e8>)
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a34:	f003 030c 	and.w	r3, r3, #12
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	d82d      	bhi.n	8007a98 <UART_SetConfig+0x164>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0x110>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a79 	.word	0x08007a79
 8007a48:	08007a99 	.word	0x08007a99
 8007a4c:	08007a99 	.word	0x08007a99
 8007a50:	08007a99 	.word	0x08007a99
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007a99 	.word	0x08007a99
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007a81 	.word	0x08007a81
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	08007a99 	.word	0x08007a99
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7e:	e098      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a80:	2302      	movs	r3, #2
 8007a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a86:	e094      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8e:	e090      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a96:	e08c      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9e:	e088      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5f      	ldr	r2, [pc, #380]	; (8007c24 <UART_SetConfig+0x2f0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d125      	bne.n	8007af6 <UART_SetConfig+0x1c2>
 8007aaa:	4b5c      	ldr	r3, [pc, #368]	; (8007c1c <UART_SetConfig+0x2e8>)
 8007aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ab4:	2b30      	cmp	r3, #48	; 0x30
 8007ab6:	d016      	beq.n	8007ae6 <UART_SetConfig+0x1b2>
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	d818      	bhi.n	8007aee <UART_SetConfig+0x1ba>
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d00a      	beq.n	8007ad6 <UART_SetConfig+0x1a2>
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d814      	bhi.n	8007aee <UART_SetConfig+0x1ba>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <UART_SetConfig+0x19a>
 8007ac8:	2b10      	cmp	r3, #16
 8007aca:	d008      	beq.n	8007ade <UART_SetConfig+0x1aa>
 8007acc:	e00f      	b.n	8007aee <UART_SetConfig+0x1ba>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad4:	e06d      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007adc:	e069      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007ade:	2304      	movs	r3, #4
 8007ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae4:	e065      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aec:	e061      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007aee:	2310      	movs	r3, #16
 8007af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af4:	e05d      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a4b      	ldr	r2, [pc, #300]	; (8007c28 <UART_SetConfig+0x2f4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d125      	bne.n	8007b4c <UART_SetConfig+0x218>
 8007b00:	4b46      	ldr	r3, [pc, #280]	; (8007c1c <UART_SetConfig+0x2e8>)
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b0c:	d016      	beq.n	8007b3c <UART_SetConfig+0x208>
 8007b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b10:	d818      	bhi.n	8007b44 <UART_SetConfig+0x210>
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d00a      	beq.n	8007b2c <UART_SetConfig+0x1f8>
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d814      	bhi.n	8007b44 <UART_SetConfig+0x210>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <UART_SetConfig+0x1f0>
 8007b1e:	2b40      	cmp	r3, #64	; 0x40
 8007b20:	d008      	beq.n	8007b34 <UART_SetConfig+0x200>
 8007b22:	e00f      	b.n	8007b44 <UART_SetConfig+0x210>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2a:	e042      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b32:	e03e      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b3a:	e03a      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b42:	e036      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4a:	e032      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a30      	ldr	r2, [pc, #192]	; (8007c14 <UART_SetConfig+0x2e0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d12a      	bne.n	8007bac <UART_SetConfig+0x278>
 8007b56:	4b31      	ldr	r3, [pc, #196]	; (8007c1c <UART_SetConfig+0x2e8>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b64:	d01a      	beq.n	8007b9c <UART_SetConfig+0x268>
 8007b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b6a:	d81b      	bhi.n	8007ba4 <UART_SetConfig+0x270>
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b70:	d00c      	beq.n	8007b8c <UART_SetConfig+0x258>
 8007b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b76:	d815      	bhi.n	8007ba4 <UART_SetConfig+0x270>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <UART_SetConfig+0x250>
 8007b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b80:	d008      	beq.n	8007b94 <UART_SetConfig+0x260>
 8007b82:	e00f      	b.n	8007ba4 <UART_SetConfig+0x270>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8a:	e012      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b92:	e00e      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b94:	2304      	movs	r3, #4
 8007b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9a:	e00a      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba2:	e006      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007ba4:	2310      	movs	r3, #16
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007baa:	e002      	b.n	8007bb2 <UART_SetConfig+0x27e>
 8007bac:	2310      	movs	r3, #16
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a17      	ldr	r2, [pc, #92]	; (8007c14 <UART_SetConfig+0x2e0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	f040 80a8 	bne.w	8007d0e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d834      	bhi.n	8007c30 <UART_SetConfig+0x2fc>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0x298>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007c31 	.word	0x08007c31
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c31 	.word	0x08007c31
 8007bdc:	08007bff 	.word	0x08007bff
 8007be0:	08007c31 	.word	0x08007c31
 8007be4:	08007c31 	.word	0x08007c31
 8007be8:	08007c31 	.word	0x08007c31
 8007bec:	08007c07 	.word	0x08007c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf0:	f7fd fdb8 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8007bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bf6:	e021      	b.n	8007c3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <UART_SetConfig+0x2f8>)
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bfc:	e01e      	b.n	8007c3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bfe:	f7fd fd43 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c04:	e01a      	b.n	8007c3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c0c:	e016      	b.n	8007c3c <UART_SetConfig+0x308>
 8007c0e:	bf00      	nop
 8007c10:	cfff69f3 	.word	0xcfff69f3
 8007c14:	40008000 	.word	0x40008000
 8007c18:	40013800 	.word	0x40013800
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	40004400 	.word	0x40004400
 8007c24:	40004800 	.word	0x40004800
 8007c28:	40004c00 	.word	0x40004c00
 8007c2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 812a 	beq.w	8007e98 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	4a9e      	ldr	r2, [pc, #632]	; (8007ec4 <UART_SetConfig+0x590>)
 8007c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d305      	bcc.n	8007c74 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d903      	bls.n	8007c7c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c7a:	e10d      	b.n	8007e98 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	60fa      	str	r2, [r7, #12]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	4a8e      	ldr	r2, [pc, #568]	; (8007ec4 <UART_SetConfig+0x590>)
 8007c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2200      	movs	r2, #0
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c9e:	f7f8 fb27 	bl	80002f0 <__aeabi_uldivmod>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	020b      	lsls	r3, r1, #8
 8007cb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cb8:	0202      	lsls	r2, r0, #8
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	6849      	ldr	r1, [r1, #4]
 8007cbe:	0849      	lsrs	r1, r1, #1
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	eb12 0804 	adds.w	r8, r2, r4
 8007cca:	eb43 0905 	adc.w	r9, r3, r5
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	469a      	mov	sl, r3
 8007cd6:	4693      	mov	fp, r2
 8007cd8:	4652      	mov	r2, sl
 8007cda:	465b      	mov	r3, fp
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f8 fb06 	bl	80002f0 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4613      	mov	r3, r2
 8007cea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf2:	d308      	bcc.n	8007d06 <UART_SetConfig+0x3d2>
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cfa:	d204      	bcs.n	8007d06 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a3a      	ldr	r2, [r7, #32]
 8007d02:	60da      	str	r2, [r3, #12]
 8007d04:	e0c8      	b.n	8007e98 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d0c:	e0c4      	b.n	8007e98 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d16:	d167      	bne.n	8007de8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d828      	bhi.n	8007d72 <UART_SetConfig+0x43e>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x3f4>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d55 	.word	0x08007d55
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d73 	.word	0x08007d73
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d73 	.word	0x08007d73
 8007d40:	08007d73 	.word	0x08007d73
 8007d44:	08007d73 	.word	0x08007d73
 8007d48:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d4c:	f7fd fd0a 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8007d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d52:	e014      	b.n	8007d7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd fd1c 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5a:	e010      	b.n	8007d7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b5a      	ldr	r3, [pc, #360]	; (8007ec8 <UART_SetConfig+0x594>)
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d60:	e00d      	b.n	8007d7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fd fc91 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d68:	e009      	b.n	8007d7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d70:	e005      	b.n	8007d7e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8089 	beq.w	8007e98 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	; (8007ec4 <UART_SetConfig+0x590>)
 8007d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d98:	005a      	lsls	r2, r3, #1
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	441a      	add	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d916      	bls.n	8007de0 <UART_SetConfig+0x4ac>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db8:	d212      	bcs.n	8007de0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f023 030f 	bic.w	r3, r3, #15
 8007dc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	8bfb      	ldrh	r3, [r7, #30]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	8bfa      	ldrh	r2, [r7, #30]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	e05b      	b.n	8007e98 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007de6:	e057      	b.n	8007e98 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007de8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d828      	bhi.n	8007e42 <UART_SetConfig+0x50e>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x4c4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e43 	.word	0x08007e43
 8007e08:	08007e33 	.word	0x08007e33
 8007e0c:	08007e43 	.word	0x08007e43
 8007e10:	08007e43 	.word	0x08007e43
 8007e14:	08007e43 	.word	0x08007e43
 8007e18:	08007e3b 	.word	0x08007e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fd fca2 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e22:	e014      	b.n	8007e4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e24:	f7fd fcb4 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e2a:	e010      	b.n	8007e4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	4b26      	ldr	r3, [pc, #152]	; (8007ec8 <UART_SetConfig+0x594>)
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e30:	e00d      	b.n	8007e4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e32:	f7fd fc29 	bl	8005688 <HAL_RCC_GetSysClockFreq>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e38:	e009      	b.n	8007e4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e40:	e005      	b.n	8007e4e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e4c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d021      	beq.n	8007e98 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <UART_SetConfig+0x590>)
 8007e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	441a      	add	r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d909      	bls.n	8007e92 <UART_SetConfig+0x55e>
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e84:	d205      	bcs.n	8007e92 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60da      	str	r2, [r3, #12]
 8007e90:	e002      	b.n	8007e98 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007eb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3730      	adds	r7, #48	; 0x30
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08009634 	.word	0x08009634
 8007ec8:	00f42400 	.word	0x00f42400

08007ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fca:	d10a      	bne.n	8007fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
  }
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008020:	f7fa fa02 	bl	8002428 <HAL_GetTick>
 8008024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d10e      	bne.n	8008052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f82f 	bl	80080a6 <UART_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e025      	b.n	800809e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b04      	cmp	r3, #4
 800805e:	d10e      	bne.n	800807e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f819 	bl	80080a6 <UART_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e00f      	b.n	800809e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b09c      	sub	sp, #112	; 0x70
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	4613      	mov	r3, r2
 80080b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b6:	e0a9      	b.n	800820c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	f000 80a5 	beq.w	800820c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c2:	f7fa f9b1 	bl	8002428 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80080d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d140      	bne.n	800815a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ec:	667b      	str	r3, [r7, #100]	; 0x64
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e6      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	663b      	str	r3, [r7, #96]	; 0x60
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800812a:	64ba      	str	r2, [r7, #72]	; 0x48
 800812c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e069      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d051      	beq.n	800820c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d149      	bne.n	800820c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
 80081a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	613b      	str	r3, [r7, #16]
   return(result);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081d4:	623a      	str	r2, [r7, #32]
 80081d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	6a3a      	ldr	r2, [r7, #32]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e5      	bne.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e010      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69da      	ldr	r2, [r3, #28]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4013      	ands	r3, r2
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	bf0c      	ite	eq
 800821c:	2301      	moveq	r3, #1
 800821e:	2300      	movne	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	429a      	cmp	r2, r3
 8008228:	f43f af46 	beq.w	80080b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3770      	adds	r7, #112	; 0x70
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b096      	sub	sp, #88	; 0x58
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2222      	movs	r2, #34	; 0x22
 8008260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02c      	beq.n	80082c6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008270:	4a42      	ldr	r2, [pc, #264]	; (800837c <UART_Start_Receive_DMA+0x144>)
 8008272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008278:	4a41      	ldr	r2, [pc, #260]	; (8008380 <UART_Start_Receive_DMA+0x148>)
 800827a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008280:	4a40      	ldr	r2, [pc, #256]	; (8008384 <UART_Start_Receive_DMA+0x14c>)
 8008282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008288:	2200      	movs	r2, #0
 800828a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3324      	adds	r3, #36	; 0x24
 8008296:	4619      	mov	r1, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829c:	461a      	mov	r2, r3
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f7fb ff16 	bl	80040d0 <HAL_DMA_Start_IT>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2210      	movs	r2, #16
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e055      	b.n	8008372 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ea:	657b      	str	r3, [r7, #84]	; 0x54
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	653b      	str	r3, [r7, #80]	; 0x50
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008328:	637a      	str	r2, [r7, #52]	; 0x34
 800832a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800832e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	613b      	str	r3, [r7, #16]
   return(result);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800835c:	623a      	str	r2, [r7, #32]
 800835e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	69f9      	ldr	r1, [r7, #28]
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	61bb      	str	r3, [r7, #24]
   return(result);
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3758      	adds	r7, #88	; 0x58
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	0800858d 	.word	0x0800858d
 8008380:	080086b3 	.word	0x080086b3
 8008384:	080086eb 	.word	0x080086eb

08008388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b08f      	sub	sp, #60	; 0x3c
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	61fb      	str	r3, [r7, #28]
   return(result);
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e6      	bne.n	8008390 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e2:	61ba      	str	r2, [r7, #24]
 80083e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6979      	ldr	r1, [r7, #20]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e5      	bne.n	80083c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80083fe:	bf00      	nop
 8008400:	373c      	adds	r7, #60	; 0x3c
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800840a:	b480      	push	{r7}
 800840c:	b095      	sub	sp, #84	; 0x54
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	61fb      	str	r3, [r7, #28]
   return(result);
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3308      	adds	r3, #8
 8008466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800846e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e3      	bne.n	8008444 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008480:	2b01      	cmp	r3, #1
 8008482:	d118      	bne.n	80084b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	60bb      	str	r3, [r7, #8]
   return(result);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	647b      	str	r3, [r7, #68]	; 0x44
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6979      	ldr	r1, [r7, #20]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	613b      	str	r3, [r7, #16]
   return(result);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e6      	bne.n	8008484 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084ca:	bf00      	nop
 80084cc:	3754      	adds	r7, #84	; 0x54
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b090      	sub	sp, #64	; 0x40
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d137      	bne.n	8008562 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	623b      	str	r3, [r7, #32]
   return(result);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008510:	63bb      	str	r3, [r7, #56]	; 0x38
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851a:	633a      	str	r2, [r7, #48]	; 0x30
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800852e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	60fb      	str	r3, [r7, #12]
   return(result);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008542:	637b      	str	r3, [r7, #52]	; 0x34
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	69b9      	ldr	r1, [r7, #24]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	617b      	str	r3, [r7, #20]
   return(result);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e6      	bne.n	800852e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008560:	e002      	b.n	8008568 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008564:	f7ff f9b2 	bl	80078cc <HAL_UART_TxCpltCallback>
}
 8008568:	bf00      	nop
 800856a:	3740      	adds	r7, #64	; 0x40
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff f9ae 	bl	80078e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b09c      	sub	sp, #112	; 0x70
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d171      	bne.n	800868c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80085a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80085d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	667b      	str	r3, [r7, #100]	; 0x64
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008602:	647a      	str	r2, [r7, #68]	; 0x44
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	623b      	str	r3, [r7, #32]
   return(result);
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008636:	633a      	str	r2, [r7, #48]	; 0x30
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800863c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d118      	bne.n	800868c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	60fb      	str	r3, [r7, #12]
   return(result);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0310 	bic.w	r3, r3, #16
 800866e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	617b      	str	r3, [r7, #20]
   return(result);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d107      	bne.n	80086a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800869a:	4619      	mov	r1, r3
 800869c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800869e:	f7ff f93d 	bl	800791c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a2:	e002      	b.n	80086aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80086a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086a6:	f7f8 fd07 	bl	80010b8 <HAL_UART_RxCpltCallback>
}
 80086aa:	bf00      	nop
 80086ac:	3770      	adds	r7, #112	; 0x70
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d109      	bne.n	80086dc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086ce:	085b      	lsrs	r3, r3, #1
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f7ff f921 	bl	800791c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086da:	e002      	b.n	80086e2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7ff f909 	bl	80078f4 <HAL_UART_RxHalfCpltCallback>
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d109      	bne.n	800872a <UART_DMAError+0x40>
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b21      	cmp	r3, #33	; 0x21
 800871a:	d106      	bne.n	800872a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008724:	6978      	ldr	r0, [r7, #20]
 8008726:	f7ff fe2f 	bl	8008388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d109      	bne.n	800874c <UART_DMAError+0x62>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b22      	cmp	r3, #34	; 0x22
 800873c:	d106      	bne.n	800874c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008746:	6978      	ldr	r0, [r7, #20]
 8008748:	f7ff fe5f 	bl	800840a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008752:	f043 0210 	orr.w	r2, r3, #16
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f7ff f8d3 	bl	8007908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	bf00      	nop
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff f8bd 	bl	8007908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff f874 	bl	80078cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e4:	bf00      	nop
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <HAL_UARTEx_DisableFifoMode+0x16>
 800883a:	2302      	movs	r3, #2
 800883c:	e027      	b.n	800888e <HAL_UARTEx_DisableFifoMode+0x66>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2224      	movs	r2, #36	; 0x24
 800884a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0201 	bic.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800886c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e02d      	b.n	800890e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2224      	movs	r2, #36	; 0x24
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f850 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800892a:	2302      	movs	r3, #2
 800892c:	e02d      	b.n	800898a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2224      	movs	r2, #36	; 0x24
 800893a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0201 	bic.w	r2, r2, #1
 8008954:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f812 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d108      	bne.n	80089b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089b4:	e031      	b.n	8008a1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089b6:	2308      	movs	r3, #8
 80089b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089ba:	2308      	movs	r3, #8
 80089bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	0e5b      	lsrs	r3, r3, #25
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	0f5b      	lsrs	r3, r3, #29
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	7b3a      	ldrb	r2, [r7, #12]
 80089e2:	4911      	ldr	r1, [pc, #68]	; (8008a28 <UARTEx_SetNbDataToProcess+0x94>)
 80089e4:	5c8a      	ldrb	r2, [r1, r2]
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ea:	7b3a      	ldrb	r2, [r7, #12]
 80089ec:	490f      	ldr	r1, [pc, #60]	; (8008a2c <UARTEx_SetNbDataToProcess+0x98>)
 80089ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	7b7a      	ldrb	r2, [r7, #13]
 8008a00:	4909      	ldr	r1, [pc, #36]	; (8008a28 <UARTEx_SetNbDataToProcess+0x94>)
 8008a02:	5c8a      	ldrb	r2, [r1, r2]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a08:	7b7a      	ldrb	r2, [r7, #13]
 8008a0a:	4908      	ldr	r1, [pc, #32]	; (8008a2c <UARTEx_SetNbDataToProcess+0x98>)
 8008a0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	0800964c 	.word	0x0800964c
 8008a2c:	08009654 	.word	0x08009654

08008a30 <atoi>:
 8008a30:	220a      	movs	r2, #10
 8008a32:	2100      	movs	r1, #0
 8008a34:	f000 b882 	b.w	8008b3c <strtol>

08008a38 <_strtol_l.constprop.0>:
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3e:	d001      	beq.n	8008a44 <_strtol_l.constprop.0+0xc>
 8008a40:	2b24      	cmp	r3, #36	; 0x24
 8008a42:	d906      	bls.n	8008a52 <_strtol_l.constprop.0+0x1a>
 8008a44:	f000 f8ac 	bl	8008ba0 <__errno>
 8008a48:	2316      	movs	r3, #22
 8008a4a:	6003      	str	r3, [r0, #0]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b38 <_strtol_l.constprop.0+0x100>
 8008a56:	460d      	mov	r5, r1
 8008a58:	462e      	mov	r6, r5
 8008a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008a62:	f017 0708 	ands.w	r7, r7, #8
 8008a66:	d1f7      	bne.n	8008a58 <_strtol_l.constprop.0+0x20>
 8008a68:	2c2d      	cmp	r4, #45	; 0x2d
 8008a6a:	d132      	bne.n	8008ad2 <_strtol_l.constprop.0+0x9a>
 8008a6c:	782c      	ldrb	r4, [r5, #0]
 8008a6e:	2701      	movs	r7, #1
 8008a70:	1cb5      	adds	r5, r6, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d05b      	beq.n	8008b2e <_strtol_l.constprop.0+0xf6>
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d109      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008a7a:	2c30      	cmp	r4, #48	; 0x30
 8008a7c:	d107      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008a7e:	782c      	ldrb	r4, [r5, #0]
 8008a80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a84:	2c58      	cmp	r4, #88	; 0x58
 8008a86:	d14d      	bne.n	8008b24 <_strtol_l.constprop.0+0xec>
 8008a88:	786c      	ldrb	r4, [r5, #1]
 8008a8a:	2310      	movs	r3, #16
 8008a8c:	3502      	adds	r5, #2
 8008a8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a92:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a96:	f04f 0e00 	mov.w	lr, #0
 8008a9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a9e:	4676      	mov	r6, lr
 8008aa0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008aa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008aa8:	f1bc 0f09 	cmp.w	ip, #9
 8008aac:	d816      	bhi.n	8008adc <_strtol_l.constprop.0+0xa4>
 8008aae:	4664      	mov	r4, ip
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	dd24      	ble.n	8008afe <_strtol_l.constprop.0+0xc6>
 8008ab4:	f1be 3fff 	cmp.w	lr, #4294967295
 8008ab8:	d008      	beq.n	8008acc <_strtol_l.constprop.0+0x94>
 8008aba:	45b1      	cmp	r9, r6
 8008abc:	d31c      	bcc.n	8008af8 <_strtol_l.constprop.0+0xc0>
 8008abe:	d101      	bne.n	8008ac4 <_strtol_l.constprop.0+0x8c>
 8008ac0:	45a2      	cmp	sl, r4
 8008ac2:	db19      	blt.n	8008af8 <_strtol_l.constprop.0+0xc0>
 8008ac4:	fb06 4603 	mla	r6, r6, r3, r4
 8008ac8:	f04f 0e01 	mov.w	lr, #1
 8008acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ad0:	e7e8      	b.n	8008aa4 <_strtol_l.constprop.0+0x6c>
 8008ad2:	2c2b      	cmp	r4, #43	; 0x2b
 8008ad4:	bf04      	itt	eq
 8008ad6:	782c      	ldrbeq	r4, [r5, #0]
 8008ad8:	1cb5      	addeq	r5, r6, #2
 8008ada:	e7ca      	b.n	8008a72 <_strtol_l.constprop.0+0x3a>
 8008adc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ae0:	f1bc 0f19 	cmp.w	ip, #25
 8008ae4:	d801      	bhi.n	8008aea <_strtol_l.constprop.0+0xb2>
 8008ae6:	3c37      	subs	r4, #55	; 0x37
 8008ae8:	e7e2      	b.n	8008ab0 <_strtol_l.constprop.0+0x78>
 8008aea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008aee:	f1bc 0f19 	cmp.w	ip, #25
 8008af2:	d804      	bhi.n	8008afe <_strtol_l.constprop.0+0xc6>
 8008af4:	3c57      	subs	r4, #87	; 0x57
 8008af6:	e7db      	b.n	8008ab0 <_strtol_l.constprop.0+0x78>
 8008af8:	f04f 3eff 	mov.w	lr, #4294967295
 8008afc:	e7e6      	b.n	8008acc <_strtol_l.constprop.0+0x94>
 8008afe:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b02:	d105      	bne.n	8008b10 <_strtol_l.constprop.0+0xd8>
 8008b04:	2322      	movs	r3, #34	; 0x22
 8008b06:	6003      	str	r3, [r0, #0]
 8008b08:	4646      	mov	r6, r8
 8008b0a:	b942      	cbnz	r2, 8008b1e <_strtol_l.constprop.0+0xe6>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	e79e      	b.n	8008a4e <_strtol_l.constprop.0+0x16>
 8008b10:	b107      	cbz	r7, 8008b14 <_strtol_l.constprop.0+0xdc>
 8008b12:	4276      	negs	r6, r6
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	d0f9      	beq.n	8008b0c <_strtol_l.constprop.0+0xd4>
 8008b18:	f1be 0f00 	cmp.w	lr, #0
 8008b1c:	d000      	beq.n	8008b20 <_strtol_l.constprop.0+0xe8>
 8008b1e:	1e69      	subs	r1, r5, #1
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	e7f3      	b.n	8008b0c <_strtol_l.constprop.0+0xd4>
 8008b24:	2430      	movs	r4, #48	; 0x30
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1b1      	bne.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	e7af      	b.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b2e:	2c30      	cmp	r4, #48	; 0x30
 8008b30:	d0a5      	beq.n	8008a7e <_strtol_l.constprop.0+0x46>
 8008b32:	230a      	movs	r3, #10
 8008b34:	e7ab      	b.n	8008a8e <_strtol_l.constprop.0+0x56>
 8008b36:	bf00      	nop
 8008b38:	0800965d 	.word	0x0800965d

08008b3c <strtol>:
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	460a      	mov	r2, r1
 8008b40:	4601      	mov	r1, r0
 8008b42:	4802      	ldr	r0, [pc, #8]	; (8008b4c <strtol+0x10>)
 8008b44:	6800      	ldr	r0, [r0, #0]
 8008b46:	f7ff bf77 	b.w	8008a38 <_strtol_l.constprop.0>
 8008b4a:	bf00      	nop
 8008b4c:	2000005c 	.word	0x2000005c

08008b50 <siprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	b500      	push	{lr}
 8008b54:	b09c      	sub	sp, #112	; 0x70
 8008b56:	ab1d      	add	r3, sp, #116	; 0x74
 8008b58:	9002      	str	r0, [sp, #8]
 8008b5a:	9006      	str	r0, [sp, #24]
 8008b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b60:	4809      	ldr	r0, [pc, #36]	; (8008b88 <siprintf+0x38>)
 8008b62:	9107      	str	r1, [sp, #28]
 8008b64:	9104      	str	r1, [sp, #16]
 8008b66:	4909      	ldr	r1, [pc, #36]	; (8008b8c <siprintf+0x3c>)
 8008b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6c:	9105      	str	r1, [sp, #20]
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	a902      	add	r1, sp, #8
 8008b74:	f000 f99a 	bl	8008eac <_svfiprintf_r>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	b01c      	add	sp, #112	; 0x70
 8008b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b84:	b003      	add	sp, #12
 8008b86:	4770      	bx	lr
 8008b88:	2000005c 	.word	0x2000005c
 8008b8c:	ffff0208 	.word	0xffff0208

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <__errno>:
 8008ba0:	4b01      	ldr	r3, [pc, #4]	; (8008ba8 <__errno+0x8>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	2000005c 	.word	0x2000005c

08008bac <__libc_init_array>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4d0d      	ldr	r5, [pc, #52]	; (8008be4 <__libc_init_array+0x38>)
 8008bb0:	4c0d      	ldr	r4, [pc, #52]	; (8008be8 <__libc_init_array+0x3c>)
 8008bb2:	1b64      	subs	r4, r4, r5
 8008bb4:	10a4      	asrs	r4, r4, #2
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	42a6      	cmp	r6, r4
 8008bba:	d109      	bne.n	8008bd0 <__libc_init_array+0x24>
 8008bbc:	4d0b      	ldr	r5, [pc, #44]	; (8008bec <__libc_init_array+0x40>)
 8008bbe:	4c0c      	ldr	r4, [pc, #48]	; (8008bf0 <__libc_init_array+0x44>)
 8008bc0:	f000 fc72 	bl	80094a8 <_init>
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	2600      	movs	r6, #0
 8008bca:	42a6      	cmp	r6, r4
 8008bcc:	d105      	bne.n	8008bda <__libc_init_array+0x2e>
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd4:	4798      	blx	r3
 8008bd6:	3601      	adds	r6, #1
 8008bd8:	e7ee      	b.n	8008bb8 <__libc_init_array+0xc>
 8008bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bde:	4798      	blx	r3
 8008be0:	3601      	adds	r6, #1
 8008be2:	e7f2      	b.n	8008bca <__libc_init_array+0x1e>
 8008be4:	08009798 	.word	0x08009798
 8008be8:	08009798 	.word	0x08009798
 8008bec:	08009798 	.word	0x08009798
 8008bf0:	0800979c 	.word	0x0800979c

08008bf4 <__retarget_lock_acquire_recursive>:
 8008bf4:	4770      	bx	lr

08008bf6 <__retarget_lock_release_recursive>:
 8008bf6:	4770      	bx	lr

08008bf8 <strcpy>:
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bfe:	f803 2b01 	strb.w	r2, [r3], #1
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	d1f9      	bne.n	8008bfa <strcpy+0x2>
 8008c06:	4770      	bx	lr

08008c08 <_free_r>:
 8008c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d044      	beq.n	8008c98 <_free_r+0x90>
 8008c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c12:	9001      	str	r0, [sp, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f1a1 0404 	sub.w	r4, r1, #4
 8008c1a:	bfb8      	it	lt
 8008c1c:	18e4      	addlt	r4, r4, r3
 8008c1e:	f000 f8df 	bl	8008de0 <__malloc_lock>
 8008c22:	4a1e      	ldr	r2, [pc, #120]	; (8008c9c <_free_r+0x94>)
 8008c24:	9801      	ldr	r0, [sp, #4]
 8008c26:	6813      	ldr	r3, [r2, #0]
 8008c28:	b933      	cbnz	r3, 8008c38 <_free_r+0x30>
 8008c2a:	6063      	str	r3, [r4, #4]
 8008c2c:	6014      	str	r4, [r2, #0]
 8008c2e:	b003      	add	sp, #12
 8008c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c34:	f000 b8da 	b.w	8008dec <__malloc_unlock>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d908      	bls.n	8008c4e <_free_r+0x46>
 8008c3c:	6825      	ldr	r5, [r4, #0]
 8008c3e:	1961      	adds	r1, r4, r5
 8008c40:	428b      	cmp	r3, r1
 8008c42:	bf01      	itttt	eq
 8008c44:	6819      	ldreq	r1, [r3, #0]
 8008c46:	685b      	ldreq	r3, [r3, #4]
 8008c48:	1949      	addeq	r1, r1, r5
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	e7ed      	b.n	8008c2a <_free_r+0x22>
 8008c4e:	461a      	mov	r2, r3
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	b10b      	cbz	r3, 8008c58 <_free_r+0x50>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d9fa      	bls.n	8008c4e <_free_r+0x46>
 8008c58:	6811      	ldr	r1, [r2, #0]
 8008c5a:	1855      	adds	r5, r2, r1
 8008c5c:	42a5      	cmp	r5, r4
 8008c5e:	d10b      	bne.n	8008c78 <_free_r+0x70>
 8008c60:	6824      	ldr	r4, [r4, #0]
 8008c62:	4421      	add	r1, r4
 8008c64:	1854      	adds	r4, r2, r1
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	6011      	str	r1, [r2, #0]
 8008c6a:	d1e0      	bne.n	8008c2e <_free_r+0x26>
 8008c6c:	681c      	ldr	r4, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	6053      	str	r3, [r2, #4]
 8008c72:	440c      	add	r4, r1
 8008c74:	6014      	str	r4, [r2, #0]
 8008c76:	e7da      	b.n	8008c2e <_free_r+0x26>
 8008c78:	d902      	bls.n	8008c80 <_free_r+0x78>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	6003      	str	r3, [r0, #0]
 8008c7e:	e7d6      	b.n	8008c2e <_free_r+0x26>
 8008c80:	6825      	ldr	r5, [r4, #0]
 8008c82:	1961      	adds	r1, r4, r5
 8008c84:	428b      	cmp	r3, r1
 8008c86:	bf04      	itt	eq
 8008c88:	6819      	ldreq	r1, [r3, #0]
 8008c8a:	685b      	ldreq	r3, [r3, #4]
 8008c8c:	6063      	str	r3, [r4, #4]
 8008c8e:	bf04      	itt	eq
 8008c90:	1949      	addeq	r1, r1, r5
 8008c92:	6021      	streq	r1, [r4, #0]
 8008c94:	6054      	str	r4, [r2, #4]
 8008c96:	e7ca      	b.n	8008c2e <_free_r+0x26>
 8008c98:	b003      	add	sp, #12
 8008c9a:	bd30      	pop	{r4, r5, pc}
 8008c9c:	200008e4 	.word	0x200008e4

08008ca0 <sbrk_aligned>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4e0e      	ldr	r6, [pc, #56]	; (8008cdc <sbrk_aligned+0x3c>)
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	6831      	ldr	r1, [r6, #0]
 8008ca8:	4605      	mov	r5, r0
 8008caa:	b911      	cbnz	r1, 8008cb2 <sbrk_aligned+0x12>
 8008cac:	f000 fba6 	bl	80093fc <_sbrk_r>
 8008cb0:	6030      	str	r0, [r6, #0]
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 fba1 	bl	80093fc <_sbrk_r>
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	d00a      	beq.n	8008cd4 <sbrk_aligned+0x34>
 8008cbe:	1cc4      	adds	r4, r0, #3
 8008cc0:	f024 0403 	bic.w	r4, r4, #3
 8008cc4:	42a0      	cmp	r0, r4
 8008cc6:	d007      	beq.n	8008cd8 <sbrk_aligned+0x38>
 8008cc8:	1a21      	subs	r1, r4, r0
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 fb96 	bl	80093fc <_sbrk_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d101      	bne.n	8008cd8 <sbrk_aligned+0x38>
 8008cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8008cd8:	4620      	mov	r0, r4
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	200008e8 	.word	0x200008e8

08008ce0 <_malloc_r>:
 8008ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	1ccd      	adds	r5, r1, #3
 8008ce6:	f025 0503 	bic.w	r5, r5, #3
 8008cea:	3508      	adds	r5, #8
 8008cec:	2d0c      	cmp	r5, #12
 8008cee:	bf38      	it	cc
 8008cf0:	250c      	movcc	r5, #12
 8008cf2:	2d00      	cmp	r5, #0
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	db01      	blt.n	8008cfc <_malloc_r+0x1c>
 8008cf8:	42a9      	cmp	r1, r5
 8008cfa:	d905      	bls.n	8008d08 <_malloc_r+0x28>
 8008cfc:	230c      	movs	r3, #12
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	2600      	movs	r6, #0
 8008d02:	4630      	mov	r0, r6
 8008d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ddc <_malloc_r+0xfc>
 8008d0c:	f000 f868 	bl	8008de0 <__malloc_lock>
 8008d10:	f8d8 3000 	ldr.w	r3, [r8]
 8008d14:	461c      	mov	r4, r3
 8008d16:	bb5c      	cbnz	r4, 8008d70 <_malloc_r+0x90>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ffc0 	bl	8008ca0 <sbrk_aligned>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	4604      	mov	r4, r0
 8008d24:	d155      	bne.n	8008dd2 <_malloc_r+0xf2>
 8008d26:	f8d8 4000 	ldr.w	r4, [r8]
 8008d2a:	4626      	mov	r6, r4
 8008d2c:	2e00      	cmp	r6, #0
 8008d2e:	d145      	bne.n	8008dbc <_malloc_r+0xdc>
 8008d30:	2c00      	cmp	r4, #0
 8008d32:	d048      	beq.n	8008dc6 <_malloc_r+0xe6>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	4631      	mov	r1, r6
 8008d38:	4638      	mov	r0, r7
 8008d3a:	eb04 0903 	add.w	r9, r4, r3
 8008d3e:	f000 fb5d 	bl	80093fc <_sbrk_r>
 8008d42:	4581      	cmp	r9, r0
 8008d44:	d13f      	bne.n	8008dc6 <_malloc_r+0xe6>
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	1a6d      	subs	r5, r5, r1
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ffa7 	bl	8008ca0 <sbrk_aligned>
 8008d52:	3001      	adds	r0, #1
 8008d54:	d037      	beq.n	8008dc6 <_malloc_r+0xe6>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	442b      	add	r3, r5
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d038      	beq.n	8008dd6 <_malloc_r+0xf6>
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	42a2      	cmp	r2, r4
 8008d68:	d12b      	bne.n	8008dc2 <_malloc_r+0xe2>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	605a      	str	r2, [r3, #4]
 8008d6e:	e00f      	b.n	8008d90 <_malloc_r+0xb0>
 8008d70:	6822      	ldr	r2, [r4, #0]
 8008d72:	1b52      	subs	r2, r2, r5
 8008d74:	d41f      	bmi.n	8008db6 <_malloc_r+0xd6>
 8008d76:	2a0b      	cmp	r2, #11
 8008d78:	d917      	bls.n	8008daa <_malloc_r+0xca>
 8008d7a:	1961      	adds	r1, r4, r5
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	6025      	str	r5, [r4, #0]
 8008d80:	bf18      	it	ne
 8008d82:	6059      	strne	r1, [r3, #4]
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	bf08      	it	eq
 8008d88:	f8c8 1000 	streq.w	r1, [r8]
 8008d8c:	5162      	str	r2, [r4, r5]
 8008d8e:	604b      	str	r3, [r1, #4]
 8008d90:	4638      	mov	r0, r7
 8008d92:	f104 060b 	add.w	r6, r4, #11
 8008d96:	f000 f829 	bl	8008dec <__malloc_unlock>
 8008d9a:	f026 0607 	bic.w	r6, r6, #7
 8008d9e:	1d23      	adds	r3, r4, #4
 8008da0:	1af2      	subs	r2, r6, r3
 8008da2:	d0ae      	beq.n	8008d02 <_malloc_r+0x22>
 8008da4:	1b9b      	subs	r3, r3, r6
 8008da6:	50a3      	str	r3, [r4, r2]
 8008da8:	e7ab      	b.n	8008d02 <_malloc_r+0x22>
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	d1dd      	bne.n	8008d6c <_malloc_r+0x8c>
 8008db0:	f8c8 2000 	str.w	r2, [r8]
 8008db4:	e7ec      	b.n	8008d90 <_malloc_r+0xb0>
 8008db6:	4623      	mov	r3, r4
 8008db8:	6864      	ldr	r4, [r4, #4]
 8008dba:	e7ac      	b.n	8008d16 <_malloc_r+0x36>
 8008dbc:	4634      	mov	r4, r6
 8008dbe:	6876      	ldr	r6, [r6, #4]
 8008dc0:	e7b4      	b.n	8008d2c <_malloc_r+0x4c>
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	e7cc      	b.n	8008d60 <_malloc_r+0x80>
 8008dc6:	230c      	movs	r3, #12
 8008dc8:	603b      	str	r3, [r7, #0]
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f000 f80e 	bl	8008dec <__malloc_unlock>
 8008dd0:	e797      	b.n	8008d02 <_malloc_r+0x22>
 8008dd2:	6025      	str	r5, [r4, #0]
 8008dd4:	e7dc      	b.n	8008d90 <_malloc_r+0xb0>
 8008dd6:	605b      	str	r3, [r3, #4]
 8008dd8:	deff      	udf	#255	; 0xff
 8008dda:	bf00      	nop
 8008ddc:	200008e4 	.word	0x200008e4

08008de0 <__malloc_lock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__malloc_lock+0x8>)
 8008de2:	f7ff bf07 	b.w	8008bf4 <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	200008e0 	.word	0x200008e0

08008dec <__malloc_unlock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__malloc_unlock+0x8>)
 8008dee:	f7ff bf02 	b.w	8008bf6 <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	200008e0 	.word	0x200008e0

08008df8 <__ssputs_r>:
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	688e      	ldr	r6, [r1, #8]
 8008dfe:	461f      	mov	r7, r3
 8008e00:	42be      	cmp	r6, r7
 8008e02:	680b      	ldr	r3, [r1, #0]
 8008e04:	4682      	mov	sl, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	4690      	mov	r8, r2
 8008e0a:	d82c      	bhi.n	8008e66 <__ssputs_r+0x6e>
 8008e0c:	898a      	ldrh	r2, [r1, #12]
 8008e0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e12:	d026      	beq.n	8008e62 <__ssputs_r+0x6a>
 8008e14:	6965      	ldr	r5, [r4, #20]
 8008e16:	6909      	ldr	r1, [r1, #16]
 8008e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e1c:	eba3 0901 	sub.w	r9, r3, r1
 8008e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e24:	1c7b      	adds	r3, r7, #1
 8008e26:	444b      	add	r3, r9
 8008e28:	106d      	asrs	r5, r5, #1
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	bf38      	it	cc
 8008e2e:	461d      	movcc	r5, r3
 8008e30:	0553      	lsls	r3, r2, #21
 8008e32:	d527      	bpl.n	8008e84 <__ssputs_r+0x8c>
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7ff ff53 	bl	8008ce0 <_malloc_r>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	b360      	cbz	r0, 8008e98 <__ssputs_r+0xa0>
 8008e3e:	6921      	ldr	r1, [r4, #16]
 8008e40:	464a      	mov	r2, r9
 8008e42:	f000 faeb 	bl	800941c <memcpy>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	6126      	str	r6, [r4, #16]
 8008e54:	6165      	str	r5, [r4, #20]
 8008e56:	444e      	add	r6, r9
 8008e58:	eba5 0509 	sub.w	r5, r5, r9
 8008e5c:	6026      	str	r6, [r4, #0]
 8008e5e:	60a5      	str	r5, [r4, #8]
 8008e60:	463e      	mov	r6, r7
 8008e62:	42be      	cmp	r6, r7
 8008e64:	d900      	bls.n	8008e68 <__ssputs_r+0x70>
 8008e66:	463e      	mov	r6, r7
 8008e68:	6820      	ldr	r0, [r4, #0]
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	f000 faab 	bl	80093c8 <memmove>
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	1b9b      	subs	r3, r3, r6
 8008e76:	60a3      	str	r3, [r4, #8]
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	4433      	add	r3, r6
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e84:	462a      	mov	r2, r5
 8008e86:	f000 fad7 	bl	8009438 <_realloc_r>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1e0      	bne.n	8008e52 <__ssputs_r+0x5a>
 8008e90:	6921      	ldr	r1, [r4, #16]
 8008e92:	4650      	mov	r0, sl
 8008e94:	f7ff feb8 	bl	8008c08 <_free_r>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	f8ca 3000 	str.w	r3, [sl]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	e7e9      	b.n	8008e80 <__ssputs_r+0x88>

08008eac <_svfiprintf_r>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	898b      	ldrh	r3, [r1, #12]
 8008eb4:	061b      	lsls	r3, r3, #24
 8008eb6:	b09d      	sub	sp, #116	; 0x74
 8008eb8:	4607      	mov	r7, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	d50e      	bpl.n	8008ede <_svfiprintf_r+0x32>
 8008ec0:	690b      	ldr	r3, [r1, #16]
 8008ec2:	b963      	cbnz	r3, 8008ede <_svfiprintf_r+0x32>
 8008ec4:	2140      	movs	r1, #64	; 0x40
 8008ec6:	f7ff ff0b 	bl	8008ce0 <_malloc_r>
 8008eca:	6028      	str	r0, [r5, #0]
 8008ecc:	6128      	str	r0, [r5, #16]
 8008ece:	b920      	cbnz	r0, 8008eda <_svfiprintf_r+0x2e>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e0d0      	b.n	800907c <_svfiprintf_r+0x1d0>
 8008eda:	2340      	movs	r3, #64	; 0x40
 8008edc:	616b      	str	r3, [r5, #20]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee2:	2320      	movs	r3, #32
 8008ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eec:	2330      	movs	r3, #48	; 0x30
 8008eee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009094 <_svfiprintf_r+0x1e8>
 8008ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ef6:	f04f 0901 	mov.w	r9, #1
 8008efa:	4623      	mov	r3, r4
 8008efc:	469a      	mov	sl, r3
 8008efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f02:	b10a      	cbz	r2, 8008f08 <_svfiprintf_r+0x5c>
 8008f04:	2a25      	cmp	r2, #37	; 0x25
 8008f06:	d1f9      	bne.n	8008efc <_svfiprintf_r+0x50>
 8008f08:	ebba 0b04 	subs.w	fp, sl, r4
 8008f0c:	d00b      	beq.n	8008f26 <_svfiprintf_r+0x7a>
 8008f0e:	465b      	mov	r3, fp
 8008f10:	4622      	mov	r2, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ff6f 	bl	8008df8 <__ssputs_r>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	f000 80a9 	beq.w	8009072 <_svfiprintf_r+0x1c6>
 8008f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f22:	445a      	add	r2, fp
 8008f24:	9209      	str	r2, [sp, #36]	; 0x24
 8008f26:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80a1 	beq.w	8009072 <_svfiprintf_r+0x1c6>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295
 8008f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f3a:	f10a 0a01 	add.w	sl, sl, #1
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f46:	931a      	str	r3, [sp, #104]	; 0x68
 8008f48:	4654      	mov	r4, sl
 8008f4a:	2205      	movs	r2, #5
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	4850      	ldr	r0, [pc, #320]	; (8009094 <_svfiprintf_r+0x1e8>)
 8008f52:	f7f7 f97d 	bl	8000250 <memchr>
 8008f56:	9a04      	ldr	r2, [sp, #16]
 8008f58:	b9d8      	cbnz	r0, 8008f92 <_svfiprintf_r+0xe6>
 8008f5a:	06d0      	lsls	r0, r2, #27
 8008f5c:	bf44      	itt	mi
 8008f5e:	2320      	movmi	r3, #32
 8008f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f64:	0711      	lsls	r1, r2, #28
 8008f66:	bf44      	itt	mi
 8008f68:	232b      	movmi	r3, #43	; 0x2b
 8008f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f72:	2b2a      	cmp	r3, #42	; 0x2a
 8008f74:	d015      	beq.n	8008fa2 <_svfiprintf_r+0xf6>
 8008f76:	9a07      	ldr	r2, [sp, #28]
 8008f78:	4654      	mov	r4, sl
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	f04f 0c0a 	mov.w	ip, #10
 8008f80:	4621      	mov	r1, r4
 8008f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f86:	3b30      	subs	r3, #48	; 0x30
 8008f88:	2b09      	cmp	r3, #9
 8008f8a:	d94d      	bls.n	8009028 <_svfiprintf_r+0x17c>
 8008f8c:	b1b0      	cbz	r0, 8008fbc <_svfiprintf_r+0x110>
 8008f8e:	9207      	str	r2, [sp, #28]
 8008f90:	e014      	b.n	8008fbc <_svfiprintf_r+0x110>
 8008f92:	eba0 0308 	sub.w	r3, r0, r8
 8008f96:	fa09 f303 	lsl.w	r3, r9, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	46a2      	mov	sl, r4
 8008fa0:	e7d2      	b.n	8008f48 <_svfiprintf_r+0x9c>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	1d19      	adds	r1, r3, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	9103      	str	r1, [sp, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfbb      	ittet	lt
 8008fae:	425b      	neglt	r3, r3
 8008fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb4:	9307      	strge	r3, [sp, #28]
 8008fb6:	9307      	strlt	r3, [sp, #28]
 8008fb8:	bfb8      	it	lt
 8008fba:	9204      	strlt	r2, [sp, #16]
 8008fbc:	7823      	ldrb	r3, [r4, #0]
 8008fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008fc0:	d10c      	bne.n	8008fdc <_svfiprintf_r+0x130>
 8008fc2:	7863      	ldrb	r3, [r4, #1]
 8008fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc6:	d134      	bne.n	8009032 <_svfiprintf_r+0x186>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	1d1a      	adds	r2, r3, #4
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	9203      	str	r2, [sp, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bfb8      	it	lt
 8008fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fd8:	3402      	adds	r4, #2
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090a4 <_svfiprintf_r+0x1f8>
 8008fe0:	7821      	ldrb	r1, [r4, #0]
 8008fe2:	2203      	movs	r2, #3
 8008fe4:	4650      	mov	r0, sl
 8008fe6:	f7f7 f933 	bl	8000250 <memchr>
 8008fea:	b138      	cbz	r0, 8008ffc <_svfiprintf_r+0x150>
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	eba0 000a 	sub.w	r0, r0, sl
 8008ff2:	2240      	movs	r2, #64	; 0x40
 8008ff4:	4082      	lsls	r2, r0
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	4825      	ldr	r0, [pc, #148]	; (8009098 <_svfiprintf_r+0x1ec>)
 8009002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009006:	2206      	movs	r2, #6
 8009008:	f7f7 f922 	bl	8000250 <memchr>
 800900c:	2800      	cmp	r0, #0
 800900e:	d038      	beq.n	8009082 <_svfiprintf_r+0x1d6>
 8009010:	4b22      	ldr	r3, [pc, #136]	; (800909c <_svfiprintf_r+0x1f0>)
 8009012:	bb1b      	cbnz	r3, 800905c <_svfiprintf_r+0x1b0>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	3308      	adds	r3, #8
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	4433      	add	r3, r6
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	e768      	b.n	8008efa <_svfiprintf_r+0x4e>
 8009028:	fb0c 3202 	mla	r2, ip, r2, r3
 800902c:	460c      	mov	r4, r1
 800902e:	2001      	movs	r0, #1
 8009030:	e7a6      	b.n	8008f80 <_svfiprintf_r+0xd4>
 8009032:	2300      	movs	r3, #0
 8009034:	3401      	adds	r4, #1
 8009036:	9305      	str	r3, [sp, #20]
 8009038:	4619      	mov	r1, r3
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4620      	mov	r0, r4
 8009040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009044:	3a30      	subs	r2, #48	; 0x30
 8009046:	2a09      	cmp	r2, #9
 8009048:	d903      	bls.n	8009052 <_svfiprintf_r+0x1a6>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c6      	beq.n	8008fdc <_svfiprintf_r+0x130>
 800904e:	9105      	str	r1, [sp, #20]
 8009050:	e7c4      	b.n	8008fdc <_svfiprintf_r+0x130>
 8009052:	fb0c 2101 	mla	r1, ip, r1, r2
 8009056:	4604      	mov	r4, r0
 8009058:	2301      	movs	r3, #1
 800905a:	e7f0      	b.n	800903e <_svfiprintf_r+0x192>
 800905c:	ab03      	add	r3, sp, #12
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	462a      	mov	r2, r5
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <_svfiprintf_r+0x1f4>)
 8009064:	a904      	add	r1, sp, #16
 8009066:	4638      	mov	r0, r7
 8009068:	f3af 8000 	nop.w
 800906c:	1c42      	adds	r2, r0, #1
 800906e:	4606      	mov	r6, r0
 8009070:	d1d6      	bne.n	8009020 <_svfiprintf_r+0x174>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	065b      	lsls	r3, r3, #25
 8009076:	f53f af2d 	bmi.w	8008ed4 <_svfiprintf_r+0x28>
 800907a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907c:	b01d      	add	sp, #116	; 0x74
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <_svfiprintf_r+0x1f4>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4638      	mov	r0, r7
 800908e:	f000 f879 	bl	8009184 <_printf_i>
 8009092:	e7eb      	b.n	800906c <_svfiprintf_r+0x1c0>
 8009094:	0800975d 	.word	0x0800975d
 8009098:	08009767 	.word	0x08009767
 800909c:	00000000 	.word	0x00000000
 80090a0:	08008df9 	.word	0x08008df9
 80090a4:	08009763 	.word	0x08009763

080090a8 <_printf_common>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	4616      	mov	r6, r2
 80090ae:	4699      	mov	r9, r3
 80090b0:	688a      	ldr	r2, [r1, #8]
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bfb8      	it	lt
 80090bc:	4613      	movlt	r3, r2
 80090be:	6033      	str	r3, [r6, #0]
 80090c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090c4:	4607      	mov	r7, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	b10a      	cbz	r2, 80090ce <_printf_common+0x26>
 80090ca:	3301      	adds	r3, #1
 80090cc:	6033      	str	r3, [r6, #0]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	0699      	lsls	r1, r3, #26
 80090d2:	bf42      	ittt	mi
 80090d4:	6833      	ldrmi	r3, [r6, #0]
 80090d6:	3302      	addmi	r3, #2
 80090d8:	6033      	strmi	r3, [r6, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	f015 0506 	ands.w	r5, r5, #6
 80090e0:	d106      	bne.n	80090f0 <_printf_common+0x48>
 80090e2:	f104 0a19 	add.w	sl, r4, #25
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	6832      	ldr	r2, [r6, #0]
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dc26      	bgt.n	800913e <_printf_common+0x96>
 80090f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090f4:	1e13      	subs	r3, r2, #0
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	bf18      	it	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	0692      	lsls	r2, r2, #26
 80090fe:	d42b      	bmi.n	8009158 <_printf_common+0xb0>
 8009100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d01e      	beq.n	800914c <_printf_common+0xa4>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	2b04      	cmp	r3, #4
 8009118:	bf02      	ittt	eq
 800911a:	68e5      	ldreq	r5, [r4, #12]
 800911c:	6833      	ldreq	r3, [r6, #0]
 800911e:	1aed      	subeq	r5, r5, r3
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	bf0c      	ite	eq
 8009124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009128:	2500      	movne	r5, #0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfc4      	itt	gt
 800912e:	1a9b      	subgt	r3, r3, r2
 8009130:	18ed      	addgt	r5, r5, r3
 8009132:	2600      	movs	r6, #0
 8009134:	341a      	adds	r4, #26
 8009136:	42b5      	cmp	r5, r6
 8009138:	d11a      	bne.n	8009170 <_printf_common+0xc8>
 800913a:	2000      	movs	r0, #0
 800913c:	e008      	b.n	8009150 <_printf_common+0xa8>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4649      	mov	r1, r9
 8009144:	4638      	mov	r0, r7
 8009146:	47c0      	blx	r8
 8009148:	3001      	adds	r0, #1
 800914a:	d103      	bne.n	8009154 <_printf_common+0xac>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	3501      	adds	r5, #1
 8009156:	e7c6      	b.n	80090e6 <_printf_common+0x3e>
 8009158:	18e1      	adds	r1, r4, r3
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	2030      	movs	r0, #48	; 0x30
 800915e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009162:	4422      	add	r2, r4
 8009164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800916c:	3302      	adds	r3, #2
 800916e:	e7c7      	b.n	8009100 <_printf_common+0x58>
 8009170:	2301      	movs	r3, #1
 8009172:	4622      	mov	r2, r4
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d0e6      	beq.n	800914c <_printf_common+0xa4>
 800917e:	3601      	adds	r6, #1
 8009180:	e7d9      	b.n	8009136 <_printf_common+0x8e>
	...

08009184 <_printf_i>:
 8009184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	7e0f      	ldrb	r7, [r1, #24]
 800918a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800918c:	2f78      	cmp	r7, #120	; 0x78
 800918e:	4691      	mov	r9, r2
 8009190:	4680      	mov	r8, r0
 8009192:	460c      	mov	r4, r1
 8009194:	469a      	mov	sl, r3
 8009196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800919a:	d807      	bhi.n	80091ac <_printf_i+0x28>
 800919c:	2f62      	cmp	r7, #98	; 0x62
 800919e:	d80a      	bhi.n	80091b6 <_printf_i+0x32>
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f000 80d4 	beq.w	800934e <_printf_i+0x1ca>
 80091a6:	2f58      	cmp	r7, #88	; 0x58
 80091a8:	f000 80c0 	beq.w	800932c <_printf_i+0x1a8>
 80091ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091b4:	e03a      	b.n	800922c <_printf_i+0xa8>
 80091b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ba:	2b15      	cmp	r3, #21
 80091bc:	d8f6      	bhi.n	80091ac <_printf_i+0x28>
 80091be:	a101      	add	r1, pc, #4	; (adr r1, 80091c4 <_printf_i+0x40>)
 80091c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	08009231 	.word	0x08009231
 80091cc:	080091ad 	.word	0x080091ad
 80091d0:	080091ad 	.word	0x080091ad
 80091d4:	080091ad 	.word	0x080091ad
 80091d8:	080091ad 	.word	0x080091ad
 80091dc:	08009231 	.word	0x08009231
 80091e0:	080091ad 	.word	0x080091ad
 80091e4:	080091ad 	.word	0x080091ad
 80091e8:	080091ad 	.word	0x080091ad
 80091ec:	080091ad 	.word	0x080091ad
 80091f0:	08009335 	.word	0x08009335
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	080092ef 	.word	0x080092ef
 80091fc:	080091ad 	.word	0x080091ad
 8009200:	080091ad 	.word	0x080091ad
 8009204:	08009357 	.word	0x08009357
 8009208:	080091ad 	.word	0x080091ad
 800920c:	0800925d 	.word	0x0800925d
 8009210:	080091ad 	.word	0x080091ad
 8009214:	080091ad 	.word	0x080091ad
 8009218:	080092f7 	.word	0x080092f7
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	602a      	str	r2, [r5, #0]
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800922c:	2301      	movs	r3, #1
 800922e:	e09f      	b.n	8009370 <_printf_i+0x1ec>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	0607      	lsls	r7, r0, #24
 8009236:	f103 0104 	add.w	r1, r3, #4
 800923a:	6029      	str	r1, [r5, #0]
 800923c:	d501      	bpl.n	8009242 <_printf_i+0xbe>
 800923e:	681e      	ldr	r6, [r3, #0]
 8009240:	e003      	b.n	800924a <_printf_i+0xc6>
 8009242:	0646      	lsls	r6, r0, #25
 8009244:	d5fb      	bpl.n	800923e <_printf_i+0xba>
 8009246:	f9b3 6000 	ldrsh.w	r6, [r3]
 800924a:	2e00      	cmp	r6, #0
 800924c:	da03      	bge.n	8009256 <_printf_i+0xd2>
 800924e:	232d      	movs	r3, #45	; 0x2d
 8009250:	4276      	negs	r6, r6
 8009252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009256:	485a      	ldr	r0, [pc, #360]	; (80093c0 <_printf_i+0x23c>)
 8009258:	230a      	movs	r3, #10
 800925a:	e012      	b.n	8009282 <_printf_i+0xfe>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1d19      	adds	r1, r3, #4
 8009262:	6029      	str	r1, [r5, #0]
 8009264:	0605      	lsls	r5, r0, #24
 8009266:	d501      	bpl.n	800926c <_printf_i+0xe8>
 8009268:	681e      	ldr	r6, [r3, #0]
 800926a:	e002      	b.n	8009272 <_printf_i+0xee>
 800926c:	0641      	lsls	r1, r0, #25
 800926e:	d5fb      	bpl.n	8009268 <_printf_i+0xe4>
 8009270:	881e      	ldrh	r6, [r3, #0]
 8009272:	4853      	ldr	r0, [pc, #332]	; (80093c0 <_printf_i+0x23c>)
 8009274:	2f6f      	cmp	r7, #111	; 0x6f
 8009276:	bf0c      	ite	eq
 8009278:	2308      	moveq	r3, #8
 800927a:	230a      	movne	r3, #10
 800927c:	2100      	movs	r1, #0
 800927e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009282:	6865      	ldr	r5, [r4, #4]
 8009284:	60a5      	str	r5, [r4, #8]
 8009286:	2d00      	cmp	r5, #0
 8009288:	bfa2      	ittt	ge
 800928a:	6821      	ldrge	r1, [r4, #0]
 800928c:	f021 0104 	bicge.w	r1, r1, #4
 8009290:	6021      	strge	r1, [r4, #0]
 8009292:	b90e      	cbnz	r6, 8009298 <_printf_i+0x114>
 8009294:	2d00      	cmp	r5, #0
 8009296:	d04b      	beq.n	8009330 <_printf_i+0x1ac>
 8009298:	4615      	mov	r5, r2
 800929a:	fbb6 f1f3 	udiv	r1, r6, r3
 800929e:	fb03 6711 	mls	r7, r3, r1, r6
 80092a2:	5dc7      	ldrb	r7, [r0, r7]
 80092a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092a8:	4637      	mov	r7, r6
 80092aa:	42bb      	cmp	r3, r7
 80092ac:	460e      	mov	r6, r1
 80092ae:	d9f4      	bls.n	800929a <_printf_i+0x116>
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d10b      	bne.n	80092cc <_printf_i+0x148>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	07de      	lsls	r6, r3, #31
 80092b8:	d508      	bpl.n	80092cc <_printf_i+0x148>
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	4299      	cmp	r1, r3
 80092c0:	bfde      	ittt	le
 80092c2:	2330      	movle	r3, #48	; 0x30
 80092c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092cc:	1b52      	subs	r2, r2, r5
 80092ce:	6122      	str	r2, [r4, #16]
 80092d0:	f8cd a000 	str.w	sl, [sp]
 80092d4:	464b      	mov	r3, r9
 80092d6:	aa03      	add	r2, sp, #12
 80092d8:	4621      	mov	r1, r4
 80092da:	4640      	mov	r0, r8
 80092dc:	f7ff fee4 	bl	80090a8 <_printf_common>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d14a      	bne.n	800937a <_printf_i+0x1f6>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	b004      	add	sp, #16
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	f043 0320 	orr.w	r3, r3, #32
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	4833      	ldr	r0, [pc, #204]	; (80093c4 <_printf_i+0x240>)
 80092f8:	2778      	movs	r7, #120	; 0x78
 80092fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	6829      	ldr	r1, [r5, #0]
 8009302:	061f      	lsls	r7, r3, #24
 8009304:	f851 6b04 	ldr.w	r6, [r1], #4
 8009308:	d402      	bmi.n	8009310 <_printf_i+0x18c>
 800930a:	065f      	lsls	r7, r3, #25
 800930c:	bf48      	it	mi
 800930e:	b2b6      	uxthmi	r6, r6
 8009310:	07df      	lsls	r7, r3, #31
 8009312:	bf48      	it	mi
 8009314:	f043 0320 	orrmi.w	r3, r3, #32
 8009318:	6029      	str	r1, [r5, #0]
 800931a:	bf48      	it	mi
 800931c:	6023      	strmi	r3, [r4, #0]
 800931e:	b91e      	cbnz	r6, 8009328 <_printf_i+0x1a4>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	f023 0320 	bic.w	r3, r3, #32
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	2310      	movs	r3, #16
 800932a:	e7a7      	b.n	800927c <_printf_i+0xf8>
 800932c:	4824      	ldr	r0, [pc, #144]	; (80093c0 <_printf_i+0x23c>)
 800932e:	e7e4      	b.n	80092fa <_printf_i+0x176>
 8009330:	4615      	mov	r5, r2
 8009332:	e7bd      	b.n	80092b0 <_printf_i+0x12c>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	6826      	ldr	r6, [r4, #0]
 8009338:	6961      	ldr	r1, [r4, #20]
 800933a:	1d18      	adds	r0, r3, #4
 800933c:	6028      	str	r0, [r5, #0]
 800933e:	0635      	lsls	r5, r6, #24
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	d501      	bpl.n	8009348 <_printf_i+0x1c4>
 8009344:	6019      	str	r1, [r3, #0]
 8009346:	e002      	b.n	800934e <_printf_i+0x1ca>
 8009348:	0670      	lsls	r0, r6, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0x1c0>
 800934c:	8019      	strh	r1, [r3, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	6123      	str	r3, [r4, #16]
 8009352:	4615      	mov	r5, r2
 8009354:	e7bc      	b.n	80092d0 <_printf_i+0x14c>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	602a      	str	r2, [r5, #0]
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	6862      	ldr	r2, [r4, #4]
 8009360:	2100      	movs	r1, #0
 8009362:	4628      	mov	r0, r5
 8009364:	f7f6 ff74 	bl	8000250 <memchr>
 8009368:	b108      	cbz	r0, 800936e <_printf_i+0x1ea>
 800936a:	1b40      	subs	r0, r0, r5
 800936c:	6060      	str	r0, [r4, #4]
 800936e:	6863      	ldr	r3, [r4, #4]
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	2300      	movs	r3, #0
 8009374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009378:	e7aa      	b.n	80092d0 <_printf_i+0x14c>
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	462a      	mov	r2, r5
 800937e:	4649      	mov	r1, r9
 8009380:	4640      	mov	r0, r8
 8009382:	47d0      	blx	sl
 8009384:	3001      	adds	r0, #1
 8009386:	d0ad      	beq.n	80092e4 <_printf_i+0x160>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	079b      	lsls	r3, r3, #30
 800938c:	d413      	bmi.n	80093b6 <_printf_i+0x232>
 800938e:	68e0      	ldr	r0, [r4, #12]
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	4298      	cmp	r0, r3
 8009394:	bfb8      	it	lt
 8009396:	4618      	movlt	r0, r3
 8009398:	e7a6      	b.n	80092e8 <_printf_i+0x164>
 800939a:	2301      	movs	r3, #1
 800939c:	4632      	mov	r2, r6
 800939e:	4649      	mov	r1, r9
 80093a0:	4640      	mov	r0, r8
 80093a2:	47d0      	blx	sl
 80093a4:	3001      	adds	r0, #1
 80093a6:	d09d      	beq.n	80092e4 <_printf_i+0x160>
 80093a8:	3501      	adds	r5, #1
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	9903      	ldr	r1, [sp, #12]
 80093ae:	1a5b      	subs	r3, r3, r1
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dcf2      	bgt.n	800939a <_printf_i+0x216>
 80093b4:	e7eb      	b.n	800938e <_printf_i+0x20a>
 80093b6:	2500      	movs	r5, #0
 80093b8:	f104 0619 	add.w	r6, r4, #25
 80093bc:	e7f5      	b.n	80093aa <_printf_i+0x226>
 80093be:	bf00      	nop
 80093c0:	0800976e 	.word	0x0800976e
 80093c4:	0800977f 	.word	0x0800977f

080093c8 <memmove>:
 80093c8:	4288      	cmp	r0, r1
 80093ca:	b510      	push	{r4, lr}
 80093cc:	eb01 0402 	add.w	r4, r1, r2
 80093d0:	d902      	bls.n	80093d8 <memmove+0x10>
 80093d2:	4284      	cmp	r4, r0
 80093d4:	4623      	mov	r3, r4
 80093d6:	d807      	bhi.n	80093e8 <memmove+0x20>
 80093d8:	1e43      	subs	r3, r0, #1
 80093da:	42a1      	cmp	r1, r4
 80093dc:	d008      	beq.n	80093f0 <memmove+0x28>
 80093de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093e6:	e7f8      	b.n	80093da <memmove+0x12>
 80093e8:	4402      	add	r2, r0
 80093ea:	4601      	mov	r1, r0
 80093ec:	428a      	cmp	r2, r1
 80093ee:	d100      	bne.n	80093f2 <memmove+0x2a>
 80093f0:	bd10      	pop	{r4, pc}
 80093f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093fa:	e7f7      	b.n	80093ec <memmove+0x24>

080093fc <_sbrk_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4d06      	ldr	r5, [pc, #24]	; (8009418 <_sbrk_r+0x1c>)
 8009400:	2300      	movs	r3, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	f7f8 ff38 	bl	800227c <_sbrk>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_sbrk_r+0x1a>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	b103      	cbz	r3, 8009416 <_sbrk_r+0x1a>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	200008dc 	.word	0x200008dc

0800941c <memcpy>:
 800941c:	440a      	add	r2, r1
 800941e:	4291      	cmp	r1, r2
 8009420:	f100 33ff 	add.w	r3, r0, #4294967295
 8009424:	d100      	bne.n	8009428 <memcpy+0xc>
 8009426:	4770      	bx	lr
 8009428:	b510      	push	{r4, lr}
 800942a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009432:	4291      	cmp	r1, r2
 8009434:	d1f9      	bne.n	800942a <memcpy+0xe>
 8009436:	bd10      	pop	{r4, pc}

08009438 <_realloc_r>:
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	4680      	mov	r8, r0
 800943e:	4614      	mov	r4, r2
 8009440:	460e      	mov	r6, r1
 8009442:	b921      	cbnz	r1, 800944e <_realloc_r+0x16>
 8009444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	4611      	mov	r1, r2
 800944a:	f7ff bc49 	b.w	8008ce0 <_malloc_r>
 800944e:	b92a      	cbnz	r2, 800945c <_realloc_r+0x24>
 8009450:	f7ff fbda 	bl	8008c08 <_free_r>
 8009454:	4625      	mov	r5, r4
 8009456:	4628      	mov	r0, r5
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	f000 f81b 	bl	8009496 <_malloc_usable_size_r>
 8009460:	4284      	cmp	r4, r0
 8009462:	4607      	mov	r7, r0
 8009464:	d802      	bhi.n	800946c <_realloc_r+0x34>
 8009466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800946a:	d812      	bhi.n	8009492 <_realloc_r+0x5a>
 800946c:	4621      	mov	r1, r4
 800946e:	4640      	mov	r0, r8
 8009470:	f7ff fc36 	bl	8008ce0 <_malloc_r>
 8009474:	4605      	mov	r5, r0
 8009476:	2800      	cmp	r0, #0
 8009478:	d0ed      	beq.n	8009456 <_realloc_r+0x1e>
 800947a:	42bc      	cmp	r4, r7
 800947c:	4622      	mov	r2, r4
 800947e:	4631      	mov	r1, r6
 8009480:	bf28      	it	cs
 8009482:	463a      	movcs	r2, r7
 8009484:	f7ff ffca 	bl	800941c <memcpy>
 8009488:	4631      	mov	r1, r6
 800948a:	4640      	mov	r0, r8
 800948c:	f7ff fbbc 	bl	8008c08 <_free_r>
 8009490:	e7e1      	b.n	8009456 <_realloc_r+0x1e>
 8009492:	4635      	mov	r5, r6
 8009494:	e7df      	b.n	8009456 <_realloc_r+0x1e>

08009496 <_malloc_usable_size_r>:
 8009496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800949a:	1f18      	subs	r0, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfbc      	itt	lt
 80094a0:	580b      	ldrlt	r3, [r1, r0]
 80094a2:	18c0      	addlt	r0, r0, r3
 80094a4:	4770      	bx	lr
	...

080094a8 <_init>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr

080094b4 <_fini>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr
