
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bdc  08007bdc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007be4  08007be4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000060  08007c4c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08007c4c  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019668  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c71  00000000  00000000  0003973b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  0003da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021383  00000000  00000000  0003eb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193a6  00000000  00000000  0005fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0841  00000000  00000000  000792a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006670  00000000  00000000  00159ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00160158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a78 	.word	0x08007a78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007a78 	.word	0x08007a78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80005c0:	f000 f802 	bl	80005c8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Config_1>:

void Config_1(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <Config_1+0x10c>)
 80005ce:	f240 726c 	movw	r2, #1900	; 0x76c
 80005d2:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 80005d4:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <Config_1+0x110>)
 80005d6:	f640 0202 	movw	r2, #2050	; 0x802
 80005da:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <Config_1+0x114>)
 80005de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005e2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 80005e4:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <Config_1+0x118>)
 80005e6:	f240 726c 	movw	r2, #1900	; 0x76c
 80005ea:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <Config_1+0x11c>)
 80005ee:	f640 0202 	movw	r2, #2050	; 0x802
 80005f2:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <Config_1+0x120>)
 80005f6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005fa:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <Config_1+0x124>)
 80005fe:	f240 726c 	movw	r2, #1900	; 0x76c
 8000602:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <Config_1+0x128>)
 8000606:	f640 0202 	movw	r2, #2050	; 0x802
 800060a:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <Config_1+0x12c>)
 800060e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000612:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <Config_1+0x130>)
 8000616:	f240 726c 	movw	r2, #1900	; 0x76c
 800061a:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 800061c:	4b37      	ldr	r3, [pc, #220]	; (80006fc <Config_1+0x134>)
 800061e:	f640 0202 	movw	r2, #2050	; 0x802
 8000622:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <Config_1+0x138>)
 8000626:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800062a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <Config_1+0x13c>)
 800062e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000632:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <Config_1+0x140>)
 8000636:	f640 0202 	movw	r2, #2050	; 0x802
 800063a:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <Config_1+0x144>)
 800063e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000642:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <Config_1+0x148>)
 8000646:	f240 726c 	movw	r2, #1900	; 0x76c
 800064a:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <Config_1+0x14c>)
 800064e:	f640 0202 	movw	r2, #2050	; 0x802
 8000652:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <Config_1+0x150>)
 8000656:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800065a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <Config_1+0x154>)
 800065e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000662:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <Config_1+0x158>)
 8000666:	f640 0202 	movw	r2, #2050	; 0x802
 800066a:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <Config_1+0x15c>)
 800066e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000672:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <Config_1+0x160>)
 8000676:	f240 726c 	movw	r2, #1900	; 0x76c
 800067a:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <Config_1+0x164>)
 800067e:	f640 0202 	movw	r2, #2050	; 0x802
 8000682:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <Config_1+0x168>)
 8000686:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800068a:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b11111111; //each bit represent one output [1,2,3,4,5,6,7,8]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <Config_1+0x16c>)
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00000000;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <Config_1+0x170>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

	PWM_Prescalers[0] = 0 ;PWM_Prescalers[1] = 0 ;PWM_Prescalers[2] = 0 ;PWM_Prescalers[3] = 0 ;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <Config_1+0x174>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <Config_1+0x174>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	805a      	strh	r2, [r3, #2]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <Config_1+0x174>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	809a      	strh	r2, [r3, #4]
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <Config_1+0x174>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[4] = 0 ;PWM_Prescalers[5] = 0 ;PWM_Prescalers[6] = 0 ;PWM_Prescalers[7] = 0 ;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <Config_1+0x174>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	811a      	strh	r2, [r3, #8]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <Config_1+0x174>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	815a      	strh	r2, [r3, #10]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <Config_1+0x174>)
 80006be:	2200      	movs	r2, #0
 80006c0:	819a      	strh	r2, [r3, #12]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <Config_1+0x174>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	81da      	strh	r2, [r3, #14]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000066c 	.word	0x2000066c
 80006d8:	2000066e 	.word	0x2000066e
 80006dc:	20000670 	.word	0x20000670
 80006e0:	20000672 	.word	0x20000672
 80006e4:	20000674 	.word	0x20000674
 80006e8:	20000676 	.word	0x20000676
 80006ec:	20000678 	.word	0x20000678
 80006f0:	2000067a 	.word	0x2000067a
 80006f4:	2000067c 	.word	0x2000067c
 80006f8:	2000067e 	.word	0x2000067e
 80006fc:	20000680 	.word	0x20000680
 8000700:	20000682 	.word	0x20000682
 8000704:	20000684 	.word	0x20000684
 8000708:	20000686 	.word	0x20000686
 800070c:	20000688 	.word	0x20000688
 8000710:	2000068a 	.word	0x2000068a
 8000714:	2000068c 	.word	0x2000068c
 8000718:	2000068e 	.word	0x2000068e
 800071c:	20000690 	.word	0x20000690
 8000720:	20000692 	.word	0x20000692
 8000724:	20000694 	.word	0x20000694
 8000728:	20000696 	.word	0x20000696
 800072c:	20000698 	.word	0x20000698
 8000730:	2000069a 	.word	0x2000069a
 8000734:	200006a2 	.word	0x200006a2
 8000738:	200006a3 	.word	0x200006a3
 800073c:	200006a4 	.word	0x200006a4

08000740 <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 8000746:	4b50      	ldr	r3, [pc, #320]	; (8000888 <CS_process+0x148>)
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <CS_process+0x14c>)
 800074c:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 800074e:	4b50      	ldr	r3, [pc, #320]	; (8000890 <CS_process+0x150>)
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	4b50      	ldr	r3, [pc, #320]	; (8000894 <CS_process+0x154>)
 8000754:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 8000756:	4b50      	ldr	r3, [pc, #320]	; (8000898 <CS_process+0x158>)
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	4b50      	ldr	r3, [pc, #320]	; (800089c <CS_process+0x15c>)
 800075c:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <CS_process+0x160>)
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <CS_process+0x164>)
 8000764:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 8000766:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <CS_process+0x168>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <CS_process+0x16c>)
 800076c:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 800076e:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <CS_process+0x170>)
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <CS_process+0x174>)
 8000774:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <CS_process+0x178>)
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	4b50      	ldr	r3, [pc, #320]	; (80008bc <CS_process+0x17c>)
 800077c:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 800077e:	4b50      	ldr	r3, [pc, #320]	; (80008c0 <CS_process+0x180>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <CS_process+0x184>)
 8000784:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e072      	b.n	8000872 <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <CS_process+0x14c>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4a3d      	ldr	r2, [pc, #244]	; (8000888 <CS_process+0x148>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079a:	440b      	add	r3, r1
 800079c:	0fda      	lsrs	r2, r3, #31
 800079e:	4413      	add	r3, r2
 80007a0:	105b      	asrs	r3, r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <CS_process+0x14c>)
 80007a6:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 80007a8:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <CS_process+0x154>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <CS_process+0x150>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b6:	440b      	add	r3, r1
 80007b8:	0fda      	lsrs	r2, r3, #31
 80007ba:	4413      	add	r3, r2
 80007bc:	105b      	asrs	r3, r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <CS_process+0x154>)
 80007c2:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <CS_process+0x15c>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <CS_process+0x158>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d2:	440b      	add	r3, r1
 80007d4:	0fda      	lsrs	r2, r3, #31
 80007d6:	4413      	add	r3, r2
 80007d8:	105b      	asrs	r3, r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <CS_process+0x15c>)
 80007de:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <CS_process+0x164>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <CS_process+0x160>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ee:	440b      	add	r3, r1
 80007f0:	0fda      	lsrs	r2, r3, #31
 80007f2:	4413      	add	r3, r2
 80007f4:	105b      	asrs	r3, r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <CS_process+0x164>)
 80007fa:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <CS_process+0x16c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <CS_process+0x168>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080a:	440b      	add	r3, r1
 800080c:	0fda      	lsrs	r2, r3, #31
 800080e:	4413      	add	r3, r2
 8000810:	105b      	asrs	r3, r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <CS_process+0x16c>)
 8000816:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <CS_process+0x174>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <CS_process+0x170>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000826:	440b      	add	r3, r1
 8000828:	0fda      	lsrs	r2, r3, #31
 800082a:	4413      	add	r3, r2
 800082c:	105b      	asrs	r3, r3, #1
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <CS_process+0x174>)
 8000832:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <CS_process+0x17c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <CS_process+0x178>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000842:	440b      	add	r3, r1
 8000844:	0fda      	lsrs	r2, r3, #31
 8000846:	4413      	add	r3, r2
 8000848:	105b      	asrs	r3, r3, #1
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <CS_process+0x17c>)
 800084e:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <CS_process+0x184>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <CS_process+0x180>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	440b      	add	r3, r1
 8000860:	0fda      	lsrs	r2, r3, #31
 8000862:	4413      	add	r3, r2
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <CS_process+0x184>)
 800086a:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b1f      	cmp	r3, #31
 8000876:	dd89      	ble.n	800078c <CS_process+0x4c>
	}

}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	2000045c 	.word	0x2000045c
 800088c:	2000065c 	.word	0x2000065c
 8000890:	2000049c 	.word	0x2000049c
 8000894:	2000065e 	.word	0x2000065e
 8000898:	200004dc 	.word	0x200004dc
 800089c:	20000660 	.word	0x20000660
 80008a0:	2000051c 	.word	0x2000051c
 80008a4:	20000662 	.word	0x20000662
 80008a8:	2000055c 	.word	0x2000055c
 80008ac:	20000664 	.word	0x20000664
 80008b0:	2000059c 	.word	0x2000059c
 80008b4:	20000666 	.word	0x20000666
 80008b8:	200005dc 	.word	0x200005dc
 80008bc:	20000668 	.word	0x20000668
 80008c0:	2000061c 	.word	0x2000061c
 80008c4:	2000066a 	.word	0x2000066a

080008c8 <check_warnings>:

void check_warnings(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if(IN1_1_PROC >= WC_1_1){
 80008cc:	4b89      	ldr	r3, [pc, #548]	; (8000af4 <check_warnings+0x22c>)
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <check_warnings+0x230>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d31c      	bcc.n	8000912 <check_warnings+0x4a>
		if(IN1_1_PROC >= OC_1_1){
 80008d8:	4b86      	ldr	r3, [pc, #536]	; (8000af4 <check_warnings+0x22c>)
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	4b87      	ldr	r3, [pc, #540]	; (8000afc <check_warnings+0x234>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d30e      	bcc.n	8000902 <check_warnings+0x3a>
			HAL_GPIO_WritePin(GPIOA,IN0_Pin,0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2108      	movs	r1, #8
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f003 fd50 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"1_OC",data_output_switch);
 80008f0:	4b83      	ldr	r3, [pc, #524]	; (8000b00 <check_warnings+0x238>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4983      	ldr	r1, [pc, #524]	; (8000b04 <check_warnings+0x23c>)
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 fbb4 	bl	8001068 <print_out>
 8000900:	e007      	b.n	8000912 <check_warnings+0x4a>
		}else{
			print_out(-1,"1_WC",data_output_switch);
 8000902:	4b7f      	ldr	r3, [pc, #508]	; (8000b00 <check_warnings+0x238>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	497f      	ldr	r1, [pc, #508]	; (8000b08 <check_warnings+0x240>)
 800090a:	f04f 30ff 	mov.w	r0, #4294967295
 800090e:	f000 fbab 	bl	8001068 <print_out>
		}
	}
	if(IN1_1_PROC <= UC_1_1){
 8000912:	4b78      	ldr	r3, [pc, #480]	; (8000af4 <check_warnings+0x22c>)
 8000914:	881a      	ldrh	r2, [r3, #0]
 8000916:	4b7d      	ldr	r3, [pc, #500]	; (8000b0c <check_warnings+0x244>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d807      	bhi.n	800092e <check_warnings+0x66>
		print_out(-1,"1_UC",data_output_switch);
 800091e:	4b78      	ldr	r3, [pc, #480]	; (8000b00 <check_warnings+0x238>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	497a      	ldr	r1, [pc, #488]	; (8000b10 <check_warnings+0x248>)
 8000926:	f04f 30ff 	mov.w	r0, #4294967295
 800092a:	f000 fb9d 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN2_1_PROC >= WC_2_1){
 800092e:	4b79      	ldr	r3, [pc, #484]	; (8000b14 <check_warnings+0x24c>)
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	4b79      	ldr	r3, [pc, #484]	; (8000b18 <check_warnings+0x250>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d31d      	bcc.n	8000976 <check_warnings+0xae>
		if(IN2_1_PROC >= OC_2_1){
 800093a:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <check_warnings+0x24c>)
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <check_warnings+0x254>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d30f      	bcc.n	8000966 <check_warnings+0x9e>
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,0);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f003 fd1e 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"2_OC",data_output_switch);
 8000954:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <check_warnings+0x238>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4971      	ldr	r1, [pc, #452]	; (8000b20 <check_warnings+0x258>)
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 fb82 	bl	8001068 <print_out>
 8000964:	e007      	b.n	8000976 <check_warnings+0xae>
		}else{
			print_out(-1,"2_WC",data_output_switch);
 8000966:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <check_warnings+0x238>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	496d      	ldr	r1, [pc, #436]	; (8000b24 <check_warnings+0x25c>)
 800096e:	f04f 30ff 	mov.w	r0, #4294967295
 8000972:	f000 fb79 	bl	8001068 <print_out>
		}
	}
	if(IN2_1_PROC <= UC_2_1){
 8000976:	4b67      	ldr	r3, [pc, #412]	; (8000b14 <check_warnings+0x24c>)
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	4b6b      	ldr	r3, [pc, #428]	; (8000b28 <check_warnings+0x260>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	d807      	bhi.n	8000992 <check_warnings+0xca>
		print_out(-1,"2_UC",data_output_switch);
 8000982:	4b5f      	ldr	r3, [pc, #380]	; (8000b00 <check_warnings+0x238>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4968      	ldr	r1, [pc, #416]	; (8000b2c <check_warnings+0x264>)
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f000 fb6b 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN3_1_PROC >= WC_3_1){
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <check_warnings+0x268>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <check_warnings+0x26c>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	d31d      	bcc.n	80009da <check_warnings+0x112>
		if(IN3_1_PROC >= OC_3_1){
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <check_warnings+0x268>)
 80009a0:	881a      	ldrh	r2, [r3, #0]
 80009a2:	4b65      	ldr	r3, [pc, #404]	; (8000b38 <check_warnings+0x270>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d30f      	bcc.n	80009ca <check_warnings+0x102>
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f003 fcec 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"3_OC",data_output_switch);
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <check_warnings+0x238>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	495f      	ldr	r1, [pc, #380]	; (8000b3c <check_warnings+0x274>)
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 fb50 	bl	8001068 <print_out>
 80009c8:	e007      	b.n	80009da <check_warnings+0x112>
		}else{
			print_out(-1,"3_WC",data_output_switch);
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <check_warnings+0x238>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	495b      	ldr	r1, [pc, #364]	; (8000b40 <check_warnings+0x278>)
 80009d2:	f04f 30ff 	mov.w	r0, #4294967295
 80009d6:	f000 fb47 	bl	8001068 <print_out>
		}
	}
	if(IN3_1_PROC <= UC_3_1){
 80009da:	4b55      	ldr	r3, [pc, #340]	; (8000b30 <check_warnings+0x268>)
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <check_warnings+0x27c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d807      	bhi.n	80009f6 <check_warnings+0x12e>
		print_out(-1,"3_UC",data_output_switch);
 80009e6:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <check_warnings+0x238>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4956      	ldr	r1, [pc, #344]	; (8000b48 <check_warnings+0x280>)
 80009ee:	f04f 30ff 	mov.w	r0, #4294967295
 80009f2:	f000 fb39 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN4_1_PROC >= WC_4_1){
 80009f6:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <check_warnings+0x284>)
 80009f8:	881a      	ldrh	r2, [r3, #0]
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <check_warnings+0x288>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d31d      	bcc.n	8000a3e <check_warnings+0x176>
		if(IN4_1_PROC >= OC_4_1){
 8000a02:	4b52      	ldr	r3, [pc, #328]	; (8000b4c <check_warnings+0x284>)
 8000a04:	881a      	ldrh	r2, [r3, #0]
 8000a06:	4b53      	ldr	r3, [pc, #332]	; (8000b54 <check_warnings+0x28c>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d30f      	bcc.n	8000a2e <check_warnings+0x166>
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f003 fcba 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"4_OC",data_output_switch);
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <check_warnings+0x238>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	494d      	ldr	r1, [pc, #308]	; (8000b58 <check_warnings+0x290>)
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 fb1e 	bl	8001068 <print_out>
 8000a2c:	e007      	b.n	8000a3e <check_warnings+0x176>
		}else{
			print_out(-1,"4_WC",data_output_switch);
 8000a2e:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <check_warnings+0x238>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4949      	ldr	r1, [pc, #292]	; (8000b5c <check_warnings+0x294>)
 8000a36:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3a:	f000 fb15 	bl	8001068 <print_out>
		}
	}
	if(IN4_1_PROC <= UC_4_1){
 8000a3e:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <check_warnings+0x284>)
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <check_warnings+0x298>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d807      	bhi.n	8000a5a <check_warnings+0x192>
		print_out(-1,"4_UC",data_output_switch);
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <check_warnings+0x238>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4944      	ldr	r1, [pc, #272]	; (8000b64 <check_warnings+0x29c>)
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	f000 fb07 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN1_2_PROC >= WC_1_2){
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <check_warnings+0x2a0>)
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <check_warnings+0x2a4>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d31c      	bcc.n	8000aa0 <check_warnings+0x1d8>
		if(IN1_2_PROC >= OC_1_2){
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <check_warnings+0x2a0>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <check_warnings+0x2a8>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d30e      	bcc.n	8000a90 <check_warnings+0x1c8>
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2110      	movs	r1, #16
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f003 fc89 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"5_OC",data_output_switch);
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <check_warnings+0x238>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	493b      	ldr	r1, [pc, #236]	; (8000b74 <check_warnings+0x2ac>)
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f000 faed 	bl	8001068 <print_out>
 8000a8e:	e007      	b.n	8000aa0 <check_warnings+0x1d8>
		}else{
			print_out(-1,"5_WC",data_output_switch);
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <check_warnings+0x238>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4938      	ldr	r1, [pc, #224]	; (8000b78 <check_warnings+0x2b0>)
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 fae4 	bl	8001068 <print_out>
		}
	}
	if(IN1_2_PROC <= UC_1_2){
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <check_warnings+0x2a0>)
 8000aa2:	881a      	ldrh	r2, [r3, #0]
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <check_warnings+0x2b4>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d807      	bhi.n	8000abc <check_warnings+0x1f4>
		print_out(-1,"5_UC",data_output_switch);
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <check_warnings+0x238>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4933      	ldr	r1, [pc, #204]	; (8000b80 <check_warnings+0x2b8>)
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 fad6 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN2_2_PROC >= WC_2_2){
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <check_warnings+0x2bc>)
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <check_warnings+0x2c0>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d36d      	bcc.n	8000ba4 <check_warnings+0x2dc>
		if(IN2_2_PROC >= OC_2_2){
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <check_warnings+0x2bc>)
 8000aca:	881a      	ldrh	r2, [r3, #0]
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <check_warnings+0x2c4>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d35f      	bcc.n	8000b94 <check_warnings+0x2cc>
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f003 fc57 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"6_OC",data_output_switch);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <check_warnings+0x238>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4929      	ldr	r1, [pc, #164]	; (8000b90 <check_warnings+0x2c8>)
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295
 8000aee:	f000 fabb 	bl	8001068 <print_out>
 8000af2:	e057      	b.n	8000ba4 <check_warnings+0x2dc>
 8000af4:	2000065c 	.word	0x2000065c
 8000af8:	2000066c 	.word	0x2000066c
 8000afc:	2000066e 	.word	0x2000066e
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08007a90 	.word	0x08007a90
 8000b08:	08007a98 	.word	0x08007a98
 8000b0c:	20000670 	.word	0x20000670
 8000b10:	08007aa0 	.word	0x08007aa0
 8000b14:	2000065e 	.word	0x2000065e
 8000b18:	20000672 	.word	0x20000672
 8000b1c:	20000674 	.word	0x20000674
 8000b20:	08007aa8 	.word	0x08007aa8
 8000b24:	08007ab0 	.word	0x08007ab0
 8000b28:	20000676 	.word	0x20000676
 8000b2c:	08007ab8 	.word	0x08007ab8
 8000b30:	20000660 	.word	0x20000660
 8000b34:	20000678 	.word	0x20000678
 8000b38:	2000067a 	.word	0x2000067a
 8000b3c:	08007ac0 	.word	0x08007ac0
 8000b40:	08007ac8 	.word	0x08007ac8
 8000b44:	2000067c 	.word	0x2000067c
 8000b48:	08007ad0 	.word	0x08007ad0
 8000b4c:	20000662 	.word	0x20000662
 8000b50:	2000067e 	.word	0x2000067e
 8000b54:	20000680 	.word	0x20000680
 8000b58:	08007ad8 	.word	0x08007ad8
 8000b5c:	08007ae0 	.word	0x08007ae0
 8000b60:	20000682 	.word	0x20000682
 8000b64:	08007ae8 	.word	0x08007ae8
 8000b68:	20000664 	.word	0x20000664
 8000b6c:	20000684 	.word	0x20000684
 8000b70:	20000686 	.word	0x20000686
 8000b74:	08007af0 	.word	0x08007af0
 8000b78:	08007af8 	.word	0x08007af8
 8000b7c:	20000688 	.word	0x20000688
 8000b80:	08007b00 	.word	0x08007b00
 8000b84:	20000666 	.word	0x20000666
 8000b88:	2000068a 	.word	0x2000068a
 8000b8c:	2000068c 	.word	0x2000068c
 8000b90:	08007b08 	.word	0x08007b08
		}else{
			print_out(-1,"6_WC",data_output_switch);
 8000b94:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <check_warnings+0x3c4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	493d      	ldr	r1, [pc, #244]	; (8000c90 <check_warnings+0x3c8>)
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 fa62 	bl	8001068 <print_out>
		}
	}
	if(IN2_2_PROC <= UC_2_2){
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <check_warnings+0x3cc>)
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <check_warnings+0x3d0>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d807      	bhi.n	8000bc0 <check_warnings+0x2f8>
		print_out(-1,"6_UC",data_output_switch);
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <check_warnings+0x3c4>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4939      	ldr	r1, [pc, #228]	; (8000c9c <check_warnings+0x3d4>)
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 fa54 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN3_2_PROC >= WC_3_2){
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <check_warnings+0x3d8>)
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <check_warnings+0x3dc>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d31d      	bcc.n	8000c08 <check_warnings+0x340>
		if(IN3_2_PROC >= OC_3_2){
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <check_warnings+0x3d8>)
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <check_warnings+0x3e0>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d30f      	bcc.n	8000bf8 <check_warnings+0x330>
			HAL_GPIO_WritePin(GPIOA,IN2_2_Pin,0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f003 fbd5 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"7_OC",data_output_switch);
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <check_warnings+0x3c4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	492f      	ldr	r1, [pc, #188]	; (8000cac <check_warnings+0x3e4>)
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf2:	f000 fa39 	bl	8001068 <print_out>
 8000bf6:	e007      	b.n	8000c08 <check_warnings+0x340>
		}else{
			print_out(-1,"7_WC",data_output_switch);
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <check_warnings+0x3c4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	492c      	ldr	r1, [pc, #176]	; (8000cb0 <check_warnings+0x3e8>)
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 fa30 	bl	8001068 <print_out>
		}
	}
	if(IN3_2_PROC <= UC_3_2){
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <check_warnings+0x3d8>)
 8000c0a:	881a      	ldrh	r2, [r3, #0]
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <check_warnings+0x3ec>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d807      	bhi.n	8000c24 <check_warnings+0x35c>
		print_out(-1,"7_UC",data_output_switch);
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <check_warnings+0x3c4>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4927      	ldr	r1, [pc, #156]	; (8000cb8 <check_warnings+0x3f0>)
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 fa22 	bl	8001068 <print_out>
	}
//------------------------------------------------------
	if(IN4_2_PROC >= WC_4_2){
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <check_warnings+0x3f4>)
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <check_warnings+0x3f8>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d31c      	bcc.n	8000c6a <check_warnings+0x3a2>
		if(IN4_2_PROC >= OC_4_2){
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <check_warnings+0x3f4>)
 8000c32:	881a      	ldrh	r2, [r3, #0]
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <check_warnings+0x3fc>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d30e      	bcc.n	8000c5a <check_warnings+0x392>
			HAL_GPIO_WritePin(GPIOA,IN3_2_Pin,0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2110      	movs	r1, #16
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f003 fba4 	bl	8004390 <HAL_GPIO_WritePin>
			print_out(-1,"8_OC",data_output_switch);
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <check_warnings+0x3c4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <check_warnings+0x400>)
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 fa08 	bl	8001068 <print_out>
 8000c58:	e007      	b.n	8000c6a <check_warnings+0x3a2>
		}else{
			print_out(-1,"8_WC",data_output_switch);
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <check_warnings+0x3c4>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	491a      	ldr	r1, [pc, #104]	; (8000ccc <check_warnings+0x404>)
 8000c62:	f04f 30ff 	mov.w	r0, #4294967295
 8000c66:	f000 f9ff 	bl	8001068 <print_out>
		}
	}
	if(IN4_2_PROC <= UC_4_2){
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <check_warnings+0x3f4>)
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <check_warnings+0x408>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d807      	bhi.n	8000c86 <check_warnings+0x3be>
		print_out(-1,"8_UC",data_output_switch);
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <check_warnings+0x3c4>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <check_warnings+0x40c>)
 8000c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c82:	f000 f9f1 	bl	8001068 <print_out>
	}
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	08007b10 	.word	0x08007b10
 8000c94:	20000666 	.word	0x20000666
 8000c98:	2000068e 	.word	0x2000068e
 8000c9c:	08007b18 	.word	0x08007b18
 8000ca0:	20000668 	.word	0x20000668
 8000ca4:	20000690 	.word	0x20000690
 8000ca8:	20000692 	.word	0x20000692
 8000cac:	08007b20 	.word	0x08007b20
 8000cb0:	08007b28 	.word	0x08007b28
 8000cb4:	20000694 	.word	0x20000694
 8000cb8:	08007b30 	.word	0x08007b30
 8000cbc:	2000066a 	.word	0x2000066a
 8000cc0:	20000696 	.word	0x20000696
 8000cc4:	20000698 	.word	0x20000698
 8000cc8:	08007b38 	.word	0x08007b38
 8000ccc:	08007b40 	.word	0x08007b40
 8000cd0:	2000069a 	.word	0x2000069a
 8000cd4:	08007b48 	.word	0x08007b48

08000cd8 <CS_read>:

void CS_read(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e1af      	b.n	8001044 <CS_read+0x36c>
		switch(x){
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	f200 81a9 	bhi.w	800103e <CS_read+0x366>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <CS_read+0x1c>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d05 	.word	0x08000d05
 8000cf8:	08000dc9 	.word	0x08000dc9
 8000cfc:	08000e8d 	.word	0x08000e8d
 8000d00:	08000f51 	.word	0x08000f51
		case 0:
			CS_SEL[0] = 0;
 8000d04:	4b9e      	ldr	r3, [pc, #632]	; (8000f80 <CS_read+0x2a8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000d0a:	4b9d      	ldr	r3, [pc, #628]	; (8000f80 <CS_read+0x2a8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d10:	4b9b      	ldr	r3, [pc, #620]	; (8000f80 <CS_read+0x2a8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	489a      	ldr	r0, [pc, #616]	; (8000f84 <CS_read+0x2ac>)
 8000d1a:	f003 fb39 	bl	8004390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d1e:	4b98      	ldr	r3, [pc, #608]	; (8000f80 <CS_read+0x2a8>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	461a      	mov	r2, r3
 8000d24:	2120      	movs	r1, #32
 8000d26:	4897      	ldr	r0, [pc, #604]	; (8000f84 <CS_read+0x2ac>)
 8000d28:	f003 fb32 	bl	8004390 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	e046      	b.n	8000dc0 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d32:	4895      	ldr	r0, [pc, #596]	; (8000f88 <CS_read+0x2b0>)
 8000d34:	f001 ff66 	bl	8002c04 <HAL_ADC_Start_IT>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <CS_read+0x6a>
 8000d3e:	f000 ff35 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d42:	4892      	ldr	r0, [pc, #584]	; (8000f8c <CS_read+0x2b4>)
 8000d44:	f001 ff5e 	bl	8002c04 <HAL_ADC_Start_IT>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <CS_read+0x7a>
 8000d4e:	f000 ff2d 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000d52:	210a      	movs	r1, #10
 8000d54:	488c      	ldr	r0, [pc, #560]	; (8000f88 <CS_read+0x2b0>)
 8000d56:	f001 fe7d 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <CS_read+0x8c>
 8000d60:	f000 ff24 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000d64:	210a      	movs	r1, #10
 8000d66:	4889      	ldr	r0, [pc, #548]	; (8000f8c <CS_read+0x2b4>)
 8000d68:	f001 fe74 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <CS_read+0x9e>
 8000d72:	f000 ff1b 	bl	8001bac <Error_Handler>
				IN1_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000d76:	4884      	ldr	r0, [pc, #528]	; (8000f88 <CS_read+0x2b0>)
 8000d78:	f002 f8af 	bl	8002eda <HAL_ADC_GetValue>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	4a83      	ldr	r2, [pc, #524]	; (8000f90 <CS_read+0x2b8>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000d88:	4880      	ldr	r0, [pc, #512]	; (8000f8c <CS_read+0x2b4>)
 8000d8a:	f002 f8a6 	bl	8002eda <HAL_ADC_GetValue>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b299      	uxth	r1, r3
 8000d92:	4a80      	ldr	r2, [pc, #512]	; (8000f94 <CS_read+0x2bc>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d9a:	487b      	ldr	r0, [pc, #492]	; (8000f88 <CS_read+0x2b0>)
 8000d9c:	f002 f862 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <CS_read+0xd2>
 8000da6:	f000 ff01 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000daa:	4878      	ldr	r0, [pc, #480]	; (8000f8c <CS_read+0x2b4>)
 8000dac:	f002 f85a 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <CS_read+0xe2>
 8000db6:	f000 fef9 	bl	8001bac <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b1f      	cmp	r3, #31
 8000dc4:	ddb5      	ble.n	8000d32 <CS_read+0x5a>
			}
			break;
 8000dc6:	e13a      	b.n	800103e <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <CS_read+0x2a8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000dce:	4b6c      	ldr	r3, [pc, #432]	; (8000f80 <CS_read+0x2a8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <CS_read+0x2a8>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4869      	ldr	r0, [pc, #420]	; (8000f84 <CS_read+0x2ac>)
 8000dde:	f003 fad7 	bl	8004390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000de2:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <CS_read+0x2a8>)
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2120      	movs	r1, #32
 8000dea:	4866      	ldr	r0, [pc, #408]	; (8000f84 <CS_read+0x2ac>)
 8000dec:	f003 fad0 	bl	8004390 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e046      	b.n	8000e84 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000df6:	4864      	ldr	r0, [pc, #400]	; (8000f88 <CS_read+0x2b0>)
 8000df8:	f001 ff04 	bl	8002c04 <HAL_ADC_Start_IT>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <CS_read+0x12e>
 8000e02:	f000 fed3 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e06:	4861      	ldr	r0, [pc, #388]	; (8000f8c <CS_read+0x2b4>)
 8000e08:	f001 fefc 	bl	8002c04 <HAL_ADC_Start_IT>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <CS_read+0x13e>
 8000e12:	f000 fecb 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000e16:	210a      	movs	r1, #10
 8000e18:	485b      	ldr	r0, [pc, #364]	; (8000f88 <CS_read+0x2b0>)
 8000e1a:	f001 fe1b 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <CS_read+0x150>
 8000e24:	f000 fec2 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000e28:	210a      	movs	r1, #10
 8000e2a:	4858      	ldr	r0, [pc, #352]	; (8000f8c <CS_read+0x2b4>)
 8000e2c:	f001 fe12 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <CS_read+0x162>
 8000e36:	f000 feb9 	bl	8001bac <Error_Handler>
				IN2_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000e3a:	4853      	ldr	r0, [pc, #332]	; (8000f88 <CS_read+0x2b0>)
 8000e3c:	f002 f84d 	bl	8002eda <HAL_ADC_GetValue>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b299      	uxth	r1, r3
 8000e44:	4a54      	ldr	r2, [pc, #336]	; (8000f98 <CS_read+0x2c0>)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000e4c:	484f      	ldr	r0, [pc, #316]	; (8000f8c <CS_read+0x2b4>)
 8000e4e:	f002 f844 	bl	8002eda <HAL_ADC_GetValue>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b299      	uxth	r1, r3
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <CS_read+0x2c4>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <CS_read+0x2b0>)
 8000e60:	f002 f800 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <CS_read+0x196>
 8000e6a:	f000 fe9f 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e6e:	4847      	ldr	r0, [pc, #284]	; (8000f8c <CS_read+0x2b4>)
 8000e70:	f001 fff8 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <CS_read+0x1a6>
 8000e7a:	f000 fe97 	bl	8001bac <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b1f      	cmp	r3, #31
 8000e88:	ddb5      	ble.n	8000df6 <CS_read+0x11e>
			}
			break;
 8000e8a:	e0d8      	b.n	800103e <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <CS_read+0x2a8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <CS_read+0x2a8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <CS_read+0x2a8>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	4838      	ldr	r0, [pc, #224]	; (8000f84 <CS_read+0x2ac>)
 8000ea2:	f003 fa75 	bl	8004390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <CS_read+0x2a8>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2120      	movs	r1, #32
 8000eae:	4835      	ldr	r0, [pc, #212]	; (8000f84 <CS_read+0x2ac>)
 8000eb0:	f003 fa6e 	bl	8004390 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	e046      	b.n	8000f48 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000eba:	4833      	ldr	r0, [pc, #204]	; (8000f88 <CS_read+0x2b0>)
 8000ebc:	f001 fea2 	bl	8002c04 <HAL_ADC_Start_IT>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <CS_read+0x1f2>
 8000ec6:	f000 fe71 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000eca:	4830      	ldr	r0, [pc, #192]	; (8000f8c <CS_read+0x2b4>)
 8000ecc:	f001 fe9a 	bl	8002c04 <HAL_ADC_Start_IT>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <CS_read+0x202>
 8000ed6:	f000 fe69 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000eda:	210a      	movs	r1, #10
 8000edc:	482a      	ldr	r0, [pc, #168]	; (8000f88 <CS_read+0x2b0>)
 8000ede:	f001 fdb9 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <CS_read+0x214>
 8000ee8:	f000 fe60 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000eec:	210a      	movs	r1, #10
 8000eee:	4827      	ldr	r0, [pc, #156]	; (8000f8c <CS_read+0x2b4>)
 8000ef0:	f001 fdb0 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <CS_read+0x226>
 8000efa:	f000 fe57 	bl	8001bac <Error_Handler>
				IN3_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <CS_read+0x2b0>)
 8000f00:	f001 ffeb 	bl	8002eda <HAL_ADC_GetValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b299      	uxth	r1, r3
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <CS_read+0x2c8>)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <CS_read+0x2b4>)
 8000f12:	f001 ffe2 	bl	8002eda <HAL_ADC_GetValue>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b299      	uxth	r1, r3
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <CS_read+0x2cc>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <CS_read+0x2b0>)
 8000f24:	f001 ff9e 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <CS_read+0x25a>
 8000f2e:	f000 fe3d 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <CS_read+0x2b4>)
 8000f34:	f001 ff96 	bl	8002e64 <HAL_ADC_Stop_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <CS_read+0x26a>
 8000f3e:	f000 fe35 	bl	8001bac <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b1f      	cmp	r3, #31
 8000f4c:	ddb5      	ble.n	8000eba <CS_read+0x1e2>
			}
			break;
 8000f4e:	e076      	b.n	800103e <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <CS_read+0x2a8>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <CS_read+0x2a8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <CS_read+0x2a8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <CS_read+0x2ac>)
 8000f66:	f003 fa13 	bl	8004390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <CS_read+0x2a8>)
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2120      	movs	r1, #32
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <CS_read+0x2ac>)
 8000f74:	f003 fa0c 	bl	8004390 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	e05b      	b.n	8001036 <CS_read+0x35e>
 8000f7e:	bf00      	nop
 8000f80:	200006a0 	.word	0x200006a0
 8000f84:	48000400 	.word	0x48000400
 8000f88:	2000007c 	.word	0x2000007c
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	2000045c 	.word	0x2000045c
 8000f94:	2000055c 	.word	0x2000055c
 8000f98:	2000049c 	.word	0x2000049c
 8000f9c:	2000059c 	.word	0x2000059c
 8000fa0:	200004dc 	.word	0x200004dc
 8000fa4:	200005dc 	.word	0x200005dc
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000fa8:	482b      	ldr	r0, [pc, #172]	; (8001058 <CS_read+0x380>)
 8000faa:	f001 fe2b 	bl	8002c04 <HAL_ADC_Start_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <CS_read+0x2e0>
 8000fb4:	f000 fdfa 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000fb8:	4828      	ldr	r0, [pc, #160]	; (800105c <CS_read+0x384>)
 8000fba:	f001 fe23 	bl	8002c04 <HAL_ADC_Start_IT>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <CS_read+0x2f0>
 8000fc4:	f000 fdf2 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000fc8:	210a      	movs	r1, #10
 8000fca:	4823      	ldr	r0, [pc, #140]	; (8001058 <CS_read+0x380>)
 8000fcc:	f001 fd42 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CS_read+0x302>
 8000fd6:	f000 fde9 	bl	8001bac <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000fda:	210a      	movs	r1, #10
 8000fdc:	481f      	ldr	r0, [pc, #124]	; (800105c <CS_read+0x384>)
 8000fde:	f001 fd39 	bl	8002a54 <HAL_ADC_PollForConversion>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <CS_read+0x314>
 8000fe8:	f000 fde0 	bl	8001bac <Error_Handler>
				IN4_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <CS_read+0x380>)
 8000fee:	f001 ff74 	bl	8002eda <HAL_ADC_GetValue>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <CS_read+0x388>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000ffe:	4817      	ldr	r0, [pc, #92]	; (800105c <CS_read+0x384>)
 8001000:	f001 ff6b 	bl	8002eda <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	b299      	uxth	r1, r3
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <CS_read+0x38c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <CS_read+0x380>)
 8001012:	f001 ff27 	bl	8002e64 <HAL_ADC_Stop_IT>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <CS_read+0x348>
 800101c:	f000 fdc6 	bl	8001bac <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <CS_read+0x384>)
 8001022:	f001 ff1f 	bl	8002e64 <HAL_ADC_Stop_IT>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <CS_read+0x358>
 800102c:	f000 fdbe 	bl	8001bac <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b1f      	cmp	r3, #31
 800103a:	ddb5      	ble.n	8000fa8 <CS_read+0x2d0>
			}
			break;
 800103c:	bf00      	nop
	for(int x = 0; x < 4; x++){
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b03      	cmp	r3, #3
 8001048:	f77f ae4c 	ble.w	8000ce4 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000007c 	.word	0x2000007c
 800105c:	200000e8 	.word	0x200000e8
 8001060:	2000051c 	.word	0x2000051c
 8001064:	2000061c 	.word	0x2000061c

08001068 <print_out>:

void print_out(uint32_t data, const char *text, uint8_t out_mode){
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)+sizeof(data_buffer)+4+2+4] = "";
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	821a      	strh	r2, [r3, #16]
	if(data == -1){
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d107      	bne.n	80010ae <print_out+0x46>
		sprintf(msg, "\r\n%s \r\n", buffer);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	4916      	ldr	r1, [pc, #88]	; (8001100 <print_out+0x98>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f006 f842 	bl	8007130 <siprintf>
 80010ac:	e006      	b.n	80010bc <print_out+0x54>
	}else{
		sprintf(msg, "\r\n%s %lu\r\n", buffer, data_buffer);
 80010ae:	f107 0010 	add.w	r0, r7, #16
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b6:	4913      	ldr	r1, [pc, #76]	; (8001104 <print_out+0x9c>)
 80010b8:	f006 f83a 	bl	8007130 <siprintf>
	}

	switch(out_mode){
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d00f      	beq.n	80010e2 <print_out+0x7a>
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	dc17      	bgt.n	80010f6 <print_out+0x8e>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <print_out+0x66>
 80010ca:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
			  text = "";
			  break;
		  case 0b10: //output only through CAN
			  //TODO implement CAN
			  break;
 80010cc:	e013      	b.n	80010f6 <print_out+0x8e>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 80010ce:	f107 0110 	add.w	r1, r7, #16
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	2216      	movs	r2, #22
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <print_out+0xa0>)
 80010d8:	f005 fa10 	bl	80064fc <HAL_UART_Transmit>
			  text = "";
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <print_out+0xa4>)
 80010de:	60bb      	str	r3, [r7, #8]
			  break;
 80010e0:	e009      	b.n	80010f6 <print_out+0x8e>
		  case 0b11://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 80010e2:	f107 0110 	add.w	r1, r7, #16
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	2216      	movs	r2, #22
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <print_out+0xa0>)
 80010ec:	f005 fa06 	bl	80064fc <HAL_UART_Transmit>
			  text = "";
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <print_out+0xa4>)
 80010f2:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 80010f4:	bf00      	nop
		  }
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	; 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08007b50 	.word	0x08007b50
 8001104:	08007b58 	.word	0x08007b58
 8001108:	200003cc 	.word	0x200003cc
 800110c:	08007b64 	.word	0x08007b64

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f001 f803 	bl	800211e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f864 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fcb2 	bl	8001a84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001120:	f000 f8a0 	bl	8001264 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001124:	f000 f980 	bl	8001428 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001128:	f000 f9c4 	bl	80014b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800112c:	f000 fa70 	bl	8001610 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001130:	f000 fae2 	bl	80016f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001134:	f000 fb54 	bl	80017e0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001138:	f000 fbc6 	bl	80018c8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800113c:	f000 fbfa 	bl	8001934 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001140:	f000 fc2e 	bl	80019a0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001144:	f000 fc52 	bl	80019ec <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001148:	f000 f906 	bl	8001358 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <main+0xb0>)
 800114e:	f004 f9d1 	bl	80054f4 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim1); //PWM
 8001152:	481b      	ldr	r0, [pc, #108]	; (80011c0 <main+0xb0>)
 8001154:	f004 f964 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //PWM
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <main+0xb4>)
 800115a:	f004 f961 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //PWM
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <main+0xb8>)
 8001160:	f004 f95e 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); //PWM
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <main+0xbc>)
 8001166:	f004 f95b 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800116a:	4819      	ldr	r0, [pc, #100]	; (80011d0 <main+0xc0>)
 800116c:	f004 f958 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <main+0xc4>)
 8001172:	f004 f955 	bl	8005420 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <main+0xc8>)
 8001178:	f004 f952 	bl	8005420 <HAL_TIM_Base_Start_IT>

  Config_Setup();
 800117c:	f7ff fa1e 	bl	80005bc <Config_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  print_out(-1,us,data_output_switch);
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <main+0xcc>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <main+0xd0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff6a 	bl	8001068 <print_out>
	  CS_read();
 8001194:	f7ff fda0 	bl	8000cd8 <CS_read>
	  CS_process();
 8001198:	f7ff fad2 	bl	8000740 <CS_process>
	  check_warnings();
 800119c:	f7ff fb94 	bl	80008c8 <check_warnings>
	  print_out(-1,us,data_output_switch);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <main+0xcc>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <main+0xd0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff5a 	bl	8001068 <print_out>
	  HAL_Delay(1000);
 80011b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b8:	f001 f822 	bl	8002200 <HAL_Delay>
  {
 80011bc:	e7e0      	b.n	8001180 <main+0x70>
 80011be:	bf00      	nop
 80011c0:	200001b8 	.word	0x200001b8
 80011c4:	20000204 	.word	0x20000204
 80011c8:	20000250 	.word	0x20000250
 80011cc:	2000029c 	.word	0x2000029c
 80011d0:	200002e8 	.word	0x200002e8
 80011d4:	20000334 	.word	0x20000334
 80011d8:	20000380 	.word	0x20000380
 80011dc:	2000069c 	.word	0x2000069c
 80011e0:	20000000 	.word	0x20000000

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2238      	movs	r2, #56	; 0x38
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 ffbc 	bl	8007170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001206:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120a:	f003 f8d9 	bl	80043c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f97f 	bl	8004528 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001230:	f000 fcbc 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001238:	2301      	movs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fc83 	bl	8004b58 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001258:	f000 fca8 	bl	8001bac <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	; 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2220      	movs	r2, #32
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f005 ff77 	bl	8007170 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_ADC1_Init+0xe8>)
 8001284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_ADC1_Init+0xe8>)
 800128c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_ADC1_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_ADC1_Init+0xe8>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_ADC1_Init+0xe8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC1_Init+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_ADC1_Init+0xe8>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_ADC1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_ADC1_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC1_Init+0xe8>)
 80012be:	2201      	movs	r2, #1
 80012c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_ADC1_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_ADC1_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC1_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC1_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_ADC1_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC1_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_ADC1_Init+0xe8>)
 80012ee:	f001 fa27 	bl	8002740 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012f8:	f000 fc58 	bl	8001bac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_ADC1_Init+0xe8>)
 8001308:	f002 fb88 	bl	8003a1c <HAL_ADCEx_MultiModeConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001312:	f000 fc4b 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_ADC1_Init+0xec>)
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_ADC1_Init+0xf0>)
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2304      	movs	r3, #4
 8001328:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_ADC1_Init+0xe8>)
 8001334:	f001 fdde 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800133e:	f000 fc35 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000007c 	.word	0x2000007c
 8001350:	04300002 	.word	0x04300002
 8001354:	407f0000 	.word	0x407f0000

08001358 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2220      	movs	r2, #32
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f005 ff03 	bl	8007170 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_ADC2_Init+0xc0>)
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <MX_ADC2_Init+0xc4>)
 800136e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001376:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_ADC2_Init+0xc0>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_ADC2_Init+0xc0>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001392:	2204      	movs	r2, #4
 8001394:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_ADC2_Init+0xc0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <MX_ADC2_Init+0xc0>)
 80013d4:	f001 f9b4 	bl	8002740 <HAL_ADC_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80013de:	f000 fbe5 	bl	8001bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_ADC2_Init+0xc8>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e6:	2306      	movs	r3, #6
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_ADC2_Init+0xcc>)
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f2:	2304      	movs	r3, #4
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001400:	f001 fd78 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800140a:	f000 fbcf 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000e8 	.word	0x200000e8
 800141c:	50000100 	.word	0x50000100
 8001420:	0c900008 	.word	0x0c900008
 8001424:	407f0000 	.word	0x407f0000

08001428 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800142e:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <MX_FDCAN1_Init+0x88>)
 8001430:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001446:	2200      	movs	r2, #0
 8001448:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800144c:	2200      	movs	r2, #0
 800144e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001452:	2200      	movs	r2, #0
 8001454:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001458:	2210      	movs	r2, #16
 800145a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800145e:	2201      	movs	r2, #1
 8001460:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001464:	2202      	movs	r2, #2
 8001466:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800146a:	2202      	movs	r2, #2
 800146c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001470:	2201      	movs	r2, #1
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001476:	2201      	movs	r2, #1
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800147c:	2201      	movs	r2, #1
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001482:	2201      	movs	r2, #1
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_FDCAN1_Init+0x84>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_FDCAN1_Init+0x84>)
 800149a:	f002 fc47 	bl	8003d2c <HAL_FDCAN_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80014a4:	f000 fb82 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000154 	.word	0x20000154
 80014b0:	40006400 	.word	0x40006400

080014b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	; 0x70
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fe3e 	bl	8007170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f4:	4b44      	ldr	r3, [pc, #272]	; (8001608 <MX_TIM1_Init+0x154>)
 80014f6:	4a45      	ldr	r2, [pc, #276]	; (800160c <MX_TIM1_Init+0x158>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <MX_TIM1_Init+0x154>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b41      	ldr	r3, [pc, #260]	; (8001608 <MX_TIM1_Init+0x154>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001506:	4b40      	ldr	r3, [pc, #256]	; (8001608 <MX_TIM1_Init+0x154>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <MX_TIM1_Init+0x154>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <MX_TIM1_Init+0x154>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <MX_TIM1_Init+0x154>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001520:	4839      	ldr	r0, [pc, #228]	; (8001608 <MX_TIM1_Init+0x154>)
 8001522:	f003 ff25 	bl	8005370 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800152c:	f000 fb3e 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800153a:	4619      	mov	r1, r3
 800153c:	4832      	ldr	r0, [pc, #200]	; (8001608 <MX_TIM1_Init+0x154>)
 800153e:	f004 f94f 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001548:	f000 fb30 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <MX_TIM1_Init+0x154>)
 800154e:	f003 ffd1 	bl	80054f4 <HAL_TIM_PWM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001558:	f000 fb28 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800156c:	4619      	mov	r1, r3
 800156e:	4826      	ldr	r0, [pc, #152]	; (8001608 <MX_TIM1_Init+0x154>)
 8001570:	f004 fe52 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800157a:	f000 fb17 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4819      	ldr	r0, [pc, #100]	; (8001608 <MX_TIM1_Init+0x154>)
 80015a4:	f004 f808 	bl	80055b8 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015ae:	f000 fafd 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_TIM1_Init+0x154>)
 80015f0:	f004 fe94 	bl	800631c <HAL_TIMEx_ConfigBreakDeadTime>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80015fa:	f000 fad7 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3770      	adds	r7, #112	; 0x70
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200001b8 	.word	0x200001b8
 800160c:	40012c00 	.word	0x40012c00

08001610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_TIM2_Init+0xe4>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166a:	4822      	ldr	r0, [pc, #136]	; (80016f4 <MX_TIM2_Init+0xe4>)
 800166c:	f003 fe80 	bl	8005370 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 fa99 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	481b      	ldr	r0, [pc, #108]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001688:	f004 f8aa 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001692:	f000 fa8b 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <MX_TIM2_Init+0xe4>)
 8001698:	f003 ff2c 	bl	80054f4 <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016a2:	f000 fa83 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <MX_TIM2_Init+0xe4>)
 80016b6:	f004 fdaf 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016c0:	f000 fa74 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM2_Init+0xe4>)
 80016dc:	f003 ff6c 	bl	80055b8 <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016e6:	f000 fa61 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3738      	adds	r7, #56	; 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000204 	.word	0x20000204

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	; 0x38
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800172c:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <MX_TIM3_Init+0xe4>)
 800172e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_TIM3_Init+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_TIM3_Init+0xe0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <MX_TIM3_Init+0xe0>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_TIM3_Init+0xe0>)
 8001752:	f003 fe0d 	bl	8005370 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800175c:	f000 fa26 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	4619      	mov	r1, r3
 800176c:	481a      	ldr	r0, [pc, #104]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800176e:	f004 f837 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001778:	f000 fa18 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177c:	4816      	ldr	r0, [pc, #88]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800177e:	f003 feb9 	bl	80054f4 <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001788:	f000 fa10 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	480f      	ldr	r0, [pc, #60]	; (80017d8 <MX_TIM3_Init+0xe0>)
 800179c:	f004 fd3c 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017a6:	f000 fa01 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM3_Init+0xe0>)
 80017c2:	f003 fef9 	bl	80055b8 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017cc:	f000 f9ee 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3738      	adds	r7, #56	; 0x38
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000250 	.word	0x20000250
 80017dc:	40000400 	.word	0x40000400

080017e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <MX_TIM4_Init+0xe4>)
 8001816:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_TIM4_Init+0xe0>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_TIM4_Init+0xe0>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MX_TIM4_Init+0xe0>)
 800183a:	f003 fd99 	bl	8005370 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001844:	f000 f9b2 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001852:	4619      	mov	r1, r3
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001856:	f003 ffc3 	bl	80057e0 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001860:	f000 f9a4 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001866:	f003 fe45 	bl	80054f4 <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001870:	f000 f99c 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	480f      	ldr	r0, [pc, #60]	; (80018c0 <MX_TIM4_Init+0xe0>)
 8001884:	f004 fcc8 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800188e:	f000 f98d 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM4_Init+0xe0>)
 80018aa:	f003 fe85 	bl	80055b8 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80018b4:	f000 f97a 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3738      	adds	r7, #56	; 0x38
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000029c 	.word	0x2000029c
 80018c4:	40000800 	.word	0x40000800

080018c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_TIM6_Init+0x64>)
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_TIM6_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_TIM6_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_TIM6_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_TIM6_Init+0x64>)
 80018ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_TIM6_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <MX_TIM6_Init+0x64>)
 80018fa:	f003 fd39 	bl	8005370 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001904:	f000 f952 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_TIM6_Init+0x64>)
 8001916:	f004 fc7f 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 f944 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002e8 	.word	0x200002e8
 8001930:	40001000 	.word	0x40001000

08001934 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_TIM7_Init+0x64>)
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <MX_TIM7_Init+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_TIM7_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_TIM7_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_TIM7_Init+0x64>)
 8001958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_TIM7_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_TIM7_Init+0x64>)
 8001966:	f003 fd03 	bl	8005370 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001970:	f000 f91c 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_TIM7_Init+0x64>)
 8001982:	f004 fc49 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800198c:	f000 f90e 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000334 	.word	0x20000334
 800199c:	40001400 	.word	0x40001400

080019a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <MX_TIM16_Init+0x48>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_TIM16_Init+0x44>)
 80019d2:	f003 fccd 	bl	8005370 <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80019dc:	f000 f8e6 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000380 	.word	0x20000380
 80019e8:	40014400 	.word	0x40014400

080019ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <MX_USART2_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a36:	f004 fd11 	bl	800645c <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f000 f8b4 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a48:	f005 faa8 	bl	8006f9c <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f000 f8ab 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a5a:	f005 fadd 	bl	8007018 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f000 f8a2 	bl	8001bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_USART2_UART_Init+0x90>)
 8001a6a:	f005 fa5e 	bl	8006f2a <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f000 f89a 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200003cc 	.word	0x200003cc
 8001a80:	40004400 	.word	0x40004400

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a3a      	ldr	r2, [pc, #232]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <MX_GPIO_Init+0x11c>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae8:	482e      	ldr	r0, [pc, #184]	; (8001ba4 <MX_GPIO_Init+0x120>)
 8001aea:	f002 fc51 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f248 6110 	movw	r1, #34320	; 0x8610
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f002 fc4a 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001b02:	4829      	ldr	r0, [pc, #164]	; (8001ba8 <MX_GPIO_Init+0x124>)
 8001b04:	f002 fc44 	bl	8004390 <HAL_GPIO_WritePin>
                          |IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 8001b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4820      	ldr	r0, [pc, #128]	; (8001ba4 <MX_GPIO_Init+0x120>)
 8001b22:	f002 fab3 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001b26:	f248 6310 	movw	r3, #34320	; 0x8610
 8001b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f002 faa3 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL1_READ_Pin */
  GPIO_InitStruct.Pin = SEL1_READ_Pin;
 8001b46:	2320      	movs	r3, #32
 8001b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL1_READ_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f002 fa96 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL0_READ_Pin */
  GPIO_InitStruct.Pin = SEL0_READ_Pin;
 8001b60:	2301      	movs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL0_READ_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <MX_GPIO_Init+0x124>)
 8001b74:	f002 fa8a 	bl	800408c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN3_2_Pin SEL1_Pin SEL0_Pin
                           IN2_2_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 8001b78:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8001b7c:	60fb      	str	r3, [r7, #12]
                          |IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_GPIO_Init+0x124>)
 8001b92:	f002 fa7b 	bl	800408c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b96:	bf00      	nop
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48001800 	.word	0x48001800
 8001ba8:	48000400 	.word	0x48000400

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_MspInit+0x44>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_MspInit+0x44>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_MspInit+0x44>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_MspInit+0x44>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_MspInit+0x44>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_MspInit+0x44>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bee:	f002 fc8b 	bl	8004508 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b09c      	sub	sp, #112	; 0x70
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	2244      	movs	r2, #68	; 0x44
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 faa5 	bl	8007170 <memset>
  if(hadc->Instance==ADC1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d13e      	bne.n	8001cae <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c3a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f9a5 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c4c:	f7ff ffae 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a39      	ldr	r2, [pc, #228]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001c58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10b      	bne.n	8001c7a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001c92:	2303      	movs	r3, #3
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f002 f9f0 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cac:	e042      	b.n	8001d34 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <HAL_ADC_MspInit+0x144>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d13d      	bne.n	8001d34 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 f961 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001cd4:	f7ff ff6a 	bl	8001bac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001ce0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_ADC_MspInit+0x13c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_ADC_MspInit+0x140>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f002 f9ac 	bl	800408c <HAL_GPIO_Init>
}
 8001d34:	bf00      	nop
 8001d36:	3770      	adds	r7, #112	; 0x70
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200006b4 	.word	0x200006b4
 8001d40:	40021000 	.word	0x40021000
 8001d44:	50000100 	.word	0x50000100

08001d48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b09a      	sub	sp, #104	; 0x68
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	2244      	movs	r2, #68	; 0x44
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f005 fa01 	bl	8007170 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_FDCAN_MspInit+0xac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d139      	bne.n	8001dec <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 f901 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d94:	f7ff ff0a 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da2:	6593      	str	r3, [r2, #88]	; 0x58
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_FDCAN_MspInit+0xb0>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dcc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dda:	2309      	movs	r3, #9
 8001ddc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f002 f950 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3768      	adds	r7, #104	; 0x68
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40006400 	.word	0x40006400
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a40      	ldr	r2, [pc, #256]	; (8001f0c <HAL_TIM_Base_MspInit+0x110>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10c      	bne.n	8001e28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e18:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e26:	e06a      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d10c      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	6a3b      	ldr	r3, [r7, #32]
}
 8001e4a:	e058      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <HAL_TIM_Base_MspInit+0x118>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10c      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
}
 8001e6e:	e046      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <HAL_TIM_Base_MspInit+0x11c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10c      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
}
 8001e92:	e034      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <HAL_TIM_Base_MspInit+0x120>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
}
 8001eb6:	e022      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_TIM_Base_MspInit+0x124>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10c      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	e010      	b.n	8001efe <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM16)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_TIM_Base_MspInit+0x128>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10b      	bne.n	8001efe <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_TIM_Base_MspInit+0x114>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	; 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40001000 	.word	0x40001000
 8001f20:	40001400 	.word	0x40001400
 8001f24:	40014400 	.word	0x40014400

08001f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b09a      	sub	sp, #104	; 0x68
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	2244      	movs	r2, #68	; 0x44
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 f911 	bl	8007170 <memset>
  if(huart->Instance==USART2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_UART_MspInit+0xa8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d136      	bne.n	8001fc6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 f813 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f70:	f7ff fe1c 	bl	8001bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_UART_MspInit+0xac>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc2:	f002 f863 	bl	800408c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3768      	adds	r7, #104	; 0x68
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	us+=1;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Handler+0x18>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <SysTick_Handler+0x18>)
 800202e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002030:	f000 f8c8 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000069c 	.word	0x2000069c

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f005 f888 	bl	8007180 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20008000 	.word	0x20008000
 800209c:	00000400 	.word	0x00000400
 80020a0:	200006b8 	.word	0x200006b8
 80020a4:	20000808 	.word	0x20000808

080020a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490e      	ldr	r1, [pc, #56]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0b      	ldr	r4, [pc, #44]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020f6:	f7ff ffd7 	bl	80020a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fa:	f005 f847 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fe:	f7ff f807 	bl	8001110 <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   r0, =_estack
 8002104:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002110:	08007bec 	.word	0x08007bec
  ldr r2, =_sbss
 8002114:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002118:	20000808 	.word	0x20000808

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>

0800211e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f001 fdcd 	bl	8003cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f80e 	bl	8002150 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	e001      	b.n	8002144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002140:	f7ff fd3a 	bl	8001bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002144:	79fb      	ldrb	r3, [r7, #7]

}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_InitTick+0x68>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d022      	beq.n	80021aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_InitTick+0x6c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_InitTick+0x68>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002170:	fbb1 f3f3 	udiv	r3, r1, r3
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	4618      	mov	r0, r3
 800217a:	f001 fdca 	bl	8003d12 <HAL_SYSTICK_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	d809      	bhi.n	800219e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218a:	2200      	movs	r2, #0
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	f04f 30ff 	mov.w	r0, #4294967295
 8002192:	f001 fda4 	bl	8003cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_InitTick+0x70>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e007      	b.n	80021ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
 80021a2:	e004      	b.n	80021ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	e001      	b.n	80021ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	20000004 	.word	0x20000004
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_IncTick+0x1c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x20>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a03      	ldr	r2, [pc, #12]	; (80021e0 <HAL_IncTick+0x1c>)
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	200006bc 	.word	0x200006bc
 80021e4:	2000000c 	.word	0x2000000c

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200006bc 	.word	0x200006bc

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d004      	beq.n	8002224 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_Delay+0x40>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002224:	bf00      	nop
 8002226:	f7ff ffdf 	bl	80021e8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	429a      	cmp	r2, r3
 8002234:	d8f7      	bhi.n	8002226 <HAL_Delay+0x26>
  {
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000000c 	.word	0x2000000c

08002244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <LL_ADC_SetOffset+0x44>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	4313      	orrs	r3, r2
 80022dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	03fff000 	.word	0x03fff000

080022f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002356:	b480      	push	{r7}
 8002358:	b087      	sub	sp, #28
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3360      	adds	r3, #96	; 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	431a      	orrs	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3330      	adds	r3, #48	; 0x30
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	4413      	add	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	211f      	movs	r1, #31
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 011f 	and.w	r1, r3, #31
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	431a      	orrs	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002466:	b480      	push	{r7}
 8002468:	b087      	sub	sp, #28
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3314      	adds	r3, #20
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0e5b      	lsrs	r3, r3, #25
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0d1b      	lsrs	r3, r3, #20
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2107      	movs	r1, #7
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0d1b      	lsrs	r3, r3, #20
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	431a      	orrs	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10a      	bne.n	80024e6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80024e4:	e00a      	b.n	80024fc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	43db      	mvns	r3, r3
 80024f4:	401a      	ands	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	407f0000 	.word	0x407f0000

0800250c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 031f 	and.w	r3, r3, #31
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6093      	str	r3, [r2, #8]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257c:	d101      	bne.n	8002582 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800261c:	f043 0202 	orr.w	r2, r3, #2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <LL_ADC_IsEnabled+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_IsEnabled+0x1a>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d101      	bne.n	800266e <LL_ADC_IsDisableOngoing+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_IsDisableOngoing+0x1a>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d101      	bne.n	80026e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002702:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b08      	cmp	r3, #8
 800272c:	d101      	bne.n	8002732 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e177      	b.n	8002a4a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fa49 	bl	8001c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fef1 	bl	8002568 <LL_ADC_IsDeepPowerDownEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fed7 	bl	8002544 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff0c 	bl	80025b8 <LL_ADC_IsInternalRegulatorEnabled>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fef0 	bl	8002590 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b0:	4b9c      	ldr	r3, [pc, #624]	; (8002a24 <HAL_ADC_Init+0x2e4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	4a9c      	ldr	r2, [pc, #624]	; (8002a28 <HAL_ADC_Init+0x2e8>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff feee 	bl	80025b8 <LL_ADC_IsInternalRegulatorEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff62 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 8002808:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 8110 	bne.w	8002a38 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 810c 	bne.w	8002a38 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fefb 	bl	8002630 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002840:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002844:	f7ff fef4 	bl	8002630 <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	4878      	ldr	r0, [pc, #480]	; (8002a2c <HAL_ADC_Init+0x2ec>)
 800284c:	f7ff fef0 	bl	8002630 <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	4323      	orrs	r3, r4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	4874      	ldr	r0, [pc, #464]	; (8002a30 <HAL_ADC_Init+0x2f0>)
 8002860:	f7ff fcf0 	bl	8002244 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7f5b      	ldrb	r3, [r3, #29]
 8002868:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800286e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002874:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800287a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002882:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	045b      	lsls	r3, r3, #17
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d009      	beq.n	80028bc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <HAL_ADC_Init+0x2f4>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff feee 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 80028f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff0f 	bl	800271a <LL_ADC_INJ_IsConversionOngoing>
 80028fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d16d      	bne.n	80029e0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d16a      	bne.n	80029e0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800290e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002916:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002926:	f023 0302 	bic.w	r3, r3, #2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	430b      	orrs	r3, r1
 8002932:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800294a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002954:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6911      	ldr	r1, [r2, #16]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800296a:	e013      	b.n	8002994 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800297a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800298c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002990:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299a:	2b01      	cmp	r3, #1
 800299c:	d118      	bne.n	80029d0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029b4:	4311      	orrs	r1, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029c0:	430a      	orrs	r2, r1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e007      	b.n	80029e0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10c      	bne.n	8002a02 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f023 010f 	bic.w	r1, r3, #15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002a00:	e007      	b.n	8002a12 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 020f 	bic.w	r2, r2, #15
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a22:	e011      	b.n	8002a48 <HAL_ADC_Init+0x308>
 8002a24:	20000004 	.word	0x20000004
 8002a28:	053e2d63 	.word	0x053e2d63
 8002a2c:	50000100 	.word	0x50000100
 8002a30:	50000300 	.word	0x50000300
 8002a34:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
 8002a52:	bf00      	nop

08002a54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5e:	4867      	ldr	r0, [pc, #412]	; (8002bfc <HAL_ADC_PollForConversion+0x1a8>)
 8002a60:	f7ff fd54 	bl	800250c <LL_ADC_GetMultimode>
 8002a64:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e02a      	b.n	8002aca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d002      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d111      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0a6      	b.n	8002bf2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002aa8:	e00f      	b.n	8002aca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002aaa:	4854      	ldr	r0, [pc, #336]	; (8002bfc <HAL_ADC_PollForConversion+0x1a8>)
 8002aac:	f7ff fd3c 	bl	8002528 <LL_ADC_GetMultiDMATransfer>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e095      	b.n	8002bf2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aca:	f7ff fb8d 	bl	80021e8 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ad0:	e021      	b.n	8002b16 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d01d      	beq.n	8002b16 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ada:	f7ff fb85 	bl	80021e8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <HAL_ADC_PollForConversion+0x9c>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e06d      	b.n	8002bf2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0d6      	beq.n	8002ad2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fc57 	bl	80023e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7f5b      	ldrb	r3, [r3, #29]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d118      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d111      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_ADC_PollForConversion+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d002      	beq.n	8002b8a <HAL_ADC_PollForConversion+0x136>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e001      	b.n	8002b8e <HAL_ADC_PollForConversion+0x13a>
 8002b8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d008      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d002      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d104      	bne.n	8002bb2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e00d      	b.n	8002bce <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_ADC_PollForConversion+0x1ac>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d002      	beq.n	8002bc2 <HAL_ADC_PollForConversion+0x16e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	e001      	b.n	8002bc6 <HAL_ADC_PollForConversion+0x172>
 8002bc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d104      	bne.n	8002bde <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e008      	b.n	8002bf0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	220c      	movs	r2, #12
 8002bee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	50000100 	.word	0x50000100

08002c04 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c0c:	4893      	ldr	r0, [pc, #588]	; (8002e5c <HAL_ADC_Start_IT+0x258>)
 8002c0e:	f7ff fc7d 	bl	800250c <LL_ADC_GetMultimode>
 8002c12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fd57 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8113 	bne.w	8002e4c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_Start_IT+0x30>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e10e      	b.n	8002e52 <HAL_ADC_Start_IT+0x24e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fe05 	bl	800384c <ADC_Enable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 80fa 	bne.w	8002e42 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_ADC_Start_IT+0x25c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d002      	beq.n	8002c72 <HAL_ADC_Start_IT+0x6e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	e001      	b.n	8002c76 <HAL_ADC_Start_IT+0x72>
 8002c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d002      	beq.n	8002c84 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	f023 0206 	bic.w	r2, r3, #6
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	661a      	str	r2, [r3, #96]	; 0x60
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	221c      	movs	r2, #28
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 021c 	bic.w	r2, r2, #28
 8002cce:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d108      	bne.n	8002cea <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0208 	orr.w	r2, r2, #8
 8002ce6:	605a      	str	r2, [r3, #4]
          break;
 8002ce8:	e008      	b.n	8002cfc <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0204 	orr.w	r2, r2, #4
 8002cf8:	605a      	str	r2, [r3, #4]
          break;
 8002cfa:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0210 	orr.w	r2, r2, #16
 8002d12:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_ADC_Start_IT+0x25c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d002      	beq.n	8002d24 <HAL_ADC_Start_IT+0x120>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	e001      	b.n	8002d28 <HAL_ADC_Start_IT+0x124>
 8002d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d008      	beq.n	8002d42 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d13a      	bne.n	8002db8 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02d      	beq.n	8002dac <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d110      	bne.n	8002d8a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0220 	bic.w	r2, r2, #32
 8002d76:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d86:	605a      	str	r2, [r3, #4]
              break;
 8002d88:	e010      	b.n	8002dac <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d98:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	605a      	str	r2, [r3, #4]
              break;
 8002daa:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc63 	bl	800267c <LL_ADC_REG_StartConversion>
 8002db6:	e04b      	b.n	8002e50 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_ADC_Start_IT+0x25c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d002      	beq.n	8002dd4 <HAL_ADC_Start_IT+0x1d0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e001      	b.n	8002dd8 <HAL_ADC_Start_IT+0x1d4>
 8002dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dd8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d034      	beq.n	8002e50 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d110      	bne.n	8002e20 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0220 	bic.w	r2, r2, #32
 8002e0c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e1c:	605a      	str	r2, [r3, #4]
              break;
 8002e1e:	e017      	b.n	8002e50 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0220 	orr.w	r2, r2, #32
 8002e3e:	605a      	str	r2, [r3, #4]
              break;
 8002e40:	e006      	b.n	8002e50 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e4a:	e001      	b.n	8002e50 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	50000300 	.word	0x50000300
 8002e60:	50000100 	.word	0x50000100

08002e64 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Stop_IT+0x16>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e02b      	b.n	8002ed2 <HAL_ADC_Stop_IT+0x6e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e82:	2103      	movs	r1, #3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fc25 	bl	80036d4 <ADC_ConversionStop>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d119      	bne.n	8002ec8 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 021c 	bic.w	r2, r2, #28
 8002ea2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fd33 	bl	8003910 <ADC_Disable>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0b6      	sub	sp, #216	; 0xd8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x22>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e3c8      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x7b4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fbd2 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 83ad 	bne.w	800368a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f7ff fa66 	bl	800240e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fbc0 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fbe0 	bl	800271a <LL_ADC_INJ_IsConversionOngoing>
 8002f5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 81d9 	bne.w	800331a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 81d4 	bne.w	800331a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7a:	d10f      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7ff fa6d 	bl	8002466 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fa14 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f9a:	e00e      	b.n	8002fba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f7ff fa5c 	bl	8002466 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fa04 	bl	80023c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d022      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6919      	ldr	r1, [r3, #16]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fec:	f7ff f95e 	bl	80022ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6919      	ldr	r1, [r3, #16]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f7ff f9aa 	bl	8002356 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6919      	ldr	r1, [r3, #16]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x124>
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	e000      	b.n	800301a <HAL_ADC_ConfigChannel+0x126>
 8003018:	2300      	movs	r3, #0
 800301a:	461a      	mov	r2, r3
 800301c:	f7ff f9b6 	bl	800238c <LL_ADC_SetOffsetSaturation>
 8003020:	e17b      	b.n	800331a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f963 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_ADC_ConfigChannel+0x15a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f958 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	0e9b      	lsrs	r3, r3, #26
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	e01e      	b.n	800308c <HAL_ADC_ConfigChannel+0x198>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff f94d 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e004      	b.n	800308a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1b0>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e9b      	lsrs	r3, r3, #26
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	e018      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x1e2>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80030cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d106      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f91c 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f900 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x220>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f8f5 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	e01e      	b.n	8003152 <HAL_ADC_ConfigChannel+0x25e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f8ea 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800313a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e004      	b.n	8003150 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_ConfigChannel+0x276>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	e018      	b.n	800319c <HAL_ADC_ConfigChannel+0x2a8>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800317e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f8b9 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f89d 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_ADC_ConfigChannel+0x2e6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f892 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	0e9b      	lsrs	r3, r3, #26
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	e01e      	b.n	8003218 <HAL_ADC_ConfigChannel+0x324>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f887 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e004      	b.n	8003216 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800320c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x33c>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	e016      	b.n	800325e <HAL_ADC_ConfigChannel+0x36a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e004      	b.n	800325e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800325e:	429a      	cmp	r2, r3
 8003260:	d106      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	2102      	movs	r1, #2
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f858 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2103      	movs	r1, #3
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f83c 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x3a8>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2103      	movs	r1, #3
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff f831 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	f003 021f 	and.w	r2, r3, #31
 800329a:	e017      	b.n	80032cc <HAL_ADC_ConfigChannel+0x3d8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2103      	movs	r1, #3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f826 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80032c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x3f0>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	e011      	b.n	8003308 <HAL_ADC_ConfigChannel+0x414>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80032fc:	2320      	movs	r3, #32
 80032fe:	e003      	b.n	8003308 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	2103      	movs	r1, #3
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f803 	bl	8002320 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f986 	bl	8002630 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 8140 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	461a      	mov	r2, r3
 800333a:	f7ff f8bf 	bl	80024bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a8f      	ldr	r2, [pc, #572]	; (8003580 <HAL_ADC_ConfigChannel+0x68c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 8131 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x47e>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	3301      	adds	r3, #1
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2b09      	cmp	r3, #9
 8003368:	bf94      	ite	ls
 800336a:	2301      	movls	r3, #1
 800336c:	2300      	movhi	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e019      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x4b2>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003382:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800338e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2b09      	cmp	r3, #9
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d079      	beq.n	800349e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x4d2>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	3301      	adds	r3, #1
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c4:	e015      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x4fe>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80033de:	2320      	movs	r3, #32
 80033e0:	e003      	b.n	80033ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80033e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	069b      	lsls	r3, r3, #26
 80033ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x51e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	3301      	adds	r3, #1
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	e017      	b.n	8003442 <HAL_ADC_ConfigChannel+0x54e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e003      	b.n	8003436 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	ea42 0103 	orr.w	r1, r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x574>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	3301      	adds	r3, #1
 800345a:	f003 021f 	and.w	r2, r3, #31
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	e018      	b.n	800349a <HAL_ADC_ConfigChannel+0x5a6>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e003      	b.n	800348c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349a:	430b      	orrs	r3, r1
 800349c:	e081      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x5c6>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	e015      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x5f2>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e003      	b.n	80034de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x612>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	e017      	b.n	8003536 <HAL_ADC_ConfigChannel+0x642>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	61fb      	str	r3, [r7, #28]
  return result;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e003      	b.n	800352a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	ea42 0103 	orr.w	r1, r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x66e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0e9b      	lsrs	r3, r3, #26
 800354c:	3301      	adds	r3, #1
 800354e:	f003 021f 	and.w	r2, r3, #31
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	3b1e      	subs	r3, #30
 800355a:	051b      	lsls	r3, r3, #20
 800355c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003560:	e01e      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x6ac>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	613b      	str	r3, [r7, #16]
  return result;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e006      	b.n	800358c <HAL_ADC_ConfigChannel+0x698>
 800357e:	bf00      	nop
 8003580:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	3b1e      	subs	r3, #30
 800359a:	051b      	lsls	r3, r3, #20
 800359c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a0:	430b      	orrs	r3, r1
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fe ff5d 	bl	8002466 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d071      	beq.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b8:	483e      	ldr	r0, [pc, #248]	; (80036b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80035ba:	f7fe fe69 	bl	8002290 <LL_ADC_GetCommonPathInternalCh>
 80035be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3c      	ldr	r2, [pc, #240]	; (80036b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_ConfigChannel+0x6e2>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <HAL_ADC_ConfigChannel+0x7c8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d127      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ea:	d157      	bne.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f4:	4619      	mov	r1, r3
 80035f6:	482f      	ldr	r0, [pc, #188]	; (80036b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80035f8:	f7fe fe37 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	4a30      	ldr	r2, [pc, #192]	; (80036c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003616:	e002      	b.n	800361e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f9      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003624:	e03a      	b.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d113      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x764>
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02a      	beq.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	4619      	mov	r1, r3
 8003650:	4818      	ldr	r0, [pc, #96]	; (80036b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003652:	f7fe fe0a 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003656:	e021      	b.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d11c      	bne.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003662:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d011      	beq.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800367c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003680:	4619      	mov	r1, r3
 8003682:	480c      	ldr	r0, [pc, #48]	; (80036b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003684:	f7fe fdf1 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
 8003688:	e008      	b.n	800369c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	37d8      	adds	r7, #216	; 0xd8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	80080000 	.word	0x80080000
 80036b4:	50000300 	.word	0x50000300
 80036b8:	c3210000 	.word	0xc3210000
 80036bc:	90c00010 	.word	0x90c00010
 80036c0:	20000004 	.word	0x20000004
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	c7520000 	.word	0xc7520000
 80036cc:	50000100 	.word	0x50000100
 80036d0:	cb840000 	.word	0xcb840000

080036d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe ffee 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 80036f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f80f 	bl	800271a <LL_ADC_INJ_IsConversionOngoing>
 80036fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8098 	beq.w	800383c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02a      	beq.n	8003770 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7f5b      	ldrb	r3, [r3, #29]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d126      	bne.n	8003770 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7f1b      	ldrb	r3, [r3, #28]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d122      	bne.n	8003770 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800372e:	e014      	b.n	800375a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4a45      	ldr	r2, [pc, #276]	; (8003848 <ADC_ConversionStop+0x174>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d90d      	bls.n	8003754 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e074      	b.n	800383e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	3301      	adds	r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d1e3      	bne.n	8003730 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d014      	beq.n	80037a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ffa6 	bl	80026cc <LL_ADC_REG_IsConversionOngoing>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff63 	bl	8002656 <LL_ADC_IsDisableOngoing>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff82 	bl	80026a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d014      	beq.n	80037d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe ffb5 	bl	800271a <LL_ADC_INJ_IsConversionOngoing>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe ff4b 	bl	8002656 <LL_ADC_IsDisableOngoing>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe ff91 	bl	80026f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d005      	beq.n	80037e2 <ADC_ConversionStop+0x10e>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d105      	bne.n	80037e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80037dc:	230c      	movs	r3, #12
 80037de:	617b      	str	r3, [r7, #20]
        break;
 80037e0:	e005      	b.n	80037ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80037e2:	2308      	movs	r3, #8
 80037e4:	617b      	str	r3, [r7, #20]
        break;
 80037e6:	e002      	b.n	80037ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80037e8:	2304      	movs	r3, #4
 80037ea:	617b      	str	r3, [r7, #20]
        break;
 80037ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80037ee:	f7fe fcfb 	bl	80021e8 <HAL_GetTick>
 80037f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037f4:	e01b      	b.n	800382e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037f6:	f7fe fcf7 	bl	80021e8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d914      	bls.n	800382e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1dc      	bne.n	80037f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	a33fffff 	.word	0xa33fffff

0800384c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fee9 	bl	8002630 <LL_ADC_IsEnabled>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d14d      	bne.n	8003900 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <ADC_Enable+0xc0>)
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	f043 0210 	orr.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e039      	b.n	8003902 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fea4 	bl	80025e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003898:	f7fe fca6 	bl	80021e8 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389e:	e028      	b.n	80038f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fec3 	bl	8002630 <LL_ADC_IsEnabled>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fe93 	bl	80025e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ba:	f7fe fc95 	bl	80021e8 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d914      	bls.n	80038f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d00d      	beq.n	80038f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e007      	b.n	8003902 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d1cf      	bne.n	80038a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	8000003f 	.word	0x8000003f

08003910 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fe9a 	bl	8002656 <LL_ADC_IsDisableOngoing>
 8003922:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fe81 	bl	8002630 <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d047      	beq.n	80039c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d144      	bne.n	80039c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030d 	and.w	r3, r3, #13
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10c      	bne.n	8003962 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fe5b 	bl	8002608 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2203      	movs	r2, #3
 8003958:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395a:	f7fe fc45 	bl	80021e8 <HAL_GetTick>
 800395e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003960:	e029      	b.n	80039b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	f043 0210 	orr.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e023      	b.n	80039c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397e:	f7fe fc33 	bl	80021e8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d914      	bls.n	80039b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1dc      	bne.n	800397e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <LL_ADC_IsEnabled>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_IsEnabled+0x18>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_IsEnabled+0x1a>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d101      	bne.n	8003a0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b0a1      	sub	sp, #132	; 0x84
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e08b      	b.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003a42:	2300      	movs	r3, #0
 8003a44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003a46:	2300      	movs	r3, #0
 8003a48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a52:	d102      	bne.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	e001      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e06a      	b.n	8003b52 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ffb8 	bl	80039f4 <LL_ADC_REG_IsConversionOngoing>
 8003a84:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ffb2 	bl	80039f4 <LL_ADC_REG_IsConversionOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d14c      	bne.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d149      	bne.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a9c:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a9e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d028      	beq.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aba:	035b      	lsls	r3, r3, #13
 8003abc:	430b      	orrs	r3, r1
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ac4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ac8:	f7ff ff81 	bl	80039ce <LL_ADC_IsEnabled>
 8003acc:	4604      	mov	r4, r0
 8003ace:	4823      	ldr	r0, [pc, #140]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ad0:	f7ff ff7d 	bl	80039ce <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d133      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ae4:	f023 030f 	bic.w	r3, r3, #15
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	6811      	ldr	r1, [r2, #0]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	431a      	orrs	r2, r3
 8003af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af8:	e024      	b.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b0a:	f7ff ff60 	bl	80039ce <LL_ADC_IsEnabled>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4812      	ldr	r0, [pc, #72]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b12:	f7ff ff5c 	bl	80039ce <LL_ADC_IsEnabled>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4323      	orrs	r3, r4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d112      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b26:	f023 030f 	bic.w	r3, r3, #15
 8003b2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b2e:	e009      	b.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b42:	e000      	b.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3784      	adds	r7, #132	; 0x84
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	50000100 	.word	0x50000100
 8003b60:	50000300 	.word	0x50000300

08003b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b96:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	60d3      	str	r3, [r2, #12]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	f003 0307 	and.w	r3, r3, #7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db0a      	blt.n	8003bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	490c      	ldr	r1, [pc, #48]	; (8003c14 <__NVIC_SetPriority+0x4c>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf0:	e00a      	b.n	8003c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <__NVIC_SetPriority+0x50>)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	440b      	add	r3, r1
 8003c06:	761a      	strb	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000e100 	.word	0xe000e100
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf28      	it	cs
 8003c3a:	2304      	movcs	r3, #4
 8003c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d902      	bls.n	8003c4c <NVIC_EncodePriority+0x30>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <NVIC_EncodePriority+0x32>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	401a      	ands	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	4313      	orrs	r3, r2
         );
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c94:	d301      	bcc.n	8003c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00f      	b.n	8003cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <SysTick_Config+0x40>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	f7ff ff8e 	bl	8003bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <SysTick_Config+0x40>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <SysTick_Config+0x40>)
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	e000e010 	.word	0xe000e010

08003cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff47 	bl	8003b64 <__NVIC_SetPriorityGrouping>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cec:	f7ff ff5e 	bl	8003bac <__NVIC_GetPriorityGrouping>
 8003cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff ff90 	bl	8003c1c <NVIC_EncodePriority>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff5f 	bl	8003bc8 <__NVIC_SetPriority>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffb2 	bl	8003c84 <SysTick_Config>
 8003d20:	4603      	mov	r3, r0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e147      	b.n	8003fce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd fff8 	bl	8001d48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0210 	bic.w	r2, r2, #16
 8003d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d68:	f7fe fa3e 	bl	80021e8 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d6e:	e012      	b.n	8003d96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d70:	f7fe fa3a 	bl	80021e8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b0a      	cmp	r3, #10
 8003d7c:	d90b      	bls.n	8003d96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e11b      	b.n	8003fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d0e5      	beq.n	8003d70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db4:	f7fe fa18 	bl	80021e8 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003dba:	e012      	b.n	8003de2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003dbc:	f7fe fa14 	bl	80021e8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d90b      	bls.n	8003de2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0f5      	b.n	8003fce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0e5      	beq.n	8003dbc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0202 	orr.w	r2, r2, #2
 8003dfe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a74      	ldr	r2, [pc, #464]	; (8003fd8 <HAL_FDCAN_Init+0x2ac>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d103      	bne.n	8003e12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003e0a:	4a74      	ldr	r2, [pc, #464]	; (8003fdc <HAL_FDCAN_Init+0x2b0>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7c1b      	ldrb	r3, [r3, #16]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d108      	bne.n	8003e2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e28:	619a      	str	r2, [r3, #24]
 8003e2a:	e007      	b.n	8003e3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7c5b      	ldrb	r3, [r3, #17]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d108      	bne.n	8003e56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e52:	619a      	str	r2, [r3, #24]
 8003e54:	e007      	b.n	8003e66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7c9b      	ldrb	r3, [r3, #18]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d108      	bne.n	8003e80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e7c:	619a      	str	r2, [r3, #24]
 8003e7e:	e007      	b.n	8003e90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003eb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0210 	bic.w	r2, r2, #16
 8003ec4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0204 	orr.w	r2, r2, #4
 8003edc:	619a      	str	r2, [r3, #24]
 8003ede:	e02c      	b.n	8003f3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d028      	beq.n	8003f3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d01c      	beq.n	8003f2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003efe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0210 	orr.w	r2, r2, #16
 8003f0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d110      	bne.n	8003f3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0220 	orr.w	r2, r2, #32
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	e007      	b.n	8003f3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6e:	d115      	bne.n	8003f9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	3b01      	subs	r3, #1
 8003f86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f814 	bl	8003fe0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40006400 	.word	0x40006400
 8003fdc:	40006500 	.word	0x40006500

08003fe0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003fea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	041a      	lsls	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004020:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	061a      	lsls	r2, r3, #24
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e005      	b.n	800406e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3304      	adds	r3, #4
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	429a      	cmp	r2, r3
 8004078:	d3f3      	bcc.n	8004062 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	4000a400 	.word	0x4000a400

0800408c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800409a:	e15a      	b.n	8004352 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	4013      	ands	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 814c 	beq.w	800434c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d005      	beq.n	80040cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d130      	bne.n	800412e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004102:	2201      	movs	r2, #1
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0201 	and.w	r2, r3, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b03      	cmp	r3, #3
 8004138:	d017      	beq.n	800416a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d123      	bne.n	80041be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	6939      	ldr	r1, [r7, #16]
 80041ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0203 	and.w	r2, r3, #3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80a6 	beq.w	800434c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004200:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_GPIO_Init+0x2e4>)
 8004202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004204:	4a5a      	ldr	r2, [pc, #360]	; (8004370 <HAL_GPIO_Init+0x2e4>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6613      	str	r3, [r2, #96]	; 0x60
 800420c:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_GPIO_Init+0x2e4>)
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004218:	4a56      	ldr	r2, [pc, #344]	; (8004374 <HAL_GPIO_Init+0x2e8>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	220f      	movs	r2, #15
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004242:	d01f      	beq.n	8004284 <HAL_GPIO_Init+0x1f8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a4c      	ldr	r2, [pc, #304]	; (8004378 <HAL_GPIO_Init+0x2ec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d019      	beq.n	8004280 <HAL_GPIO_Init+0x1f4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a4b      	ldr	r2, [pc, #300]	; (800437c <HAL_GPIO_Init+0x2f0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_GPIO_Init+0x1f0>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <HAL_GPIO_Init+0x2f4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00d      	beq.n	8004278 <HAL_GPIO_Init+0x1ec>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a49      	ldr	r2, [pc, #292]	; (8004384 <HAL_GPIO_Init+0x2f8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <HAL_GPIO_Init+0x1e8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a48      	ldr	r2, [pc, #288]	; (8004388 <HAL_GPIO_Init+0x2fc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_GPIO_Init+0x1e4>
 800426c:	2305      	movs	r3, #5
 800426e:	e00a      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 8004270:	2306      	movs	r3, #6
 8004272:	e008      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 8004274:	2304      	movs	r3, #4
 8004276:	e006      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 8004278:	2303      	movs	r3, #3
 800427a:	e004      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 800427c:	2302      	movs	r3, #2
 800427e:	e002      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_GPIO_Init+0x1fa>
 8004284:	2300      	movs	r3, #0
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	f002 0203 	and.w	r2, r2, #3
 800428c:	0092      	lsls	r2, r2, #2
 800428e:	4093      	lsls	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004296:	4937      	ldr	r1, [pc, #220]	; (8004374 <HAL_GPIO_Init+0x2e8>)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	089b      	lsrs	r3, r3, #2
 800429c:	3302      	adds	r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042a4:	4b39      	ldr	r3, [pc, #228]	; (800438c <HAL_GPIO_Init+0x300>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042c8:	4a30      	ldr	r2, [pc, #192]	; (800438c <HAL_GPIO_Init+0x300>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_GPIO_Init+0x300>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <HAL_GPIO_Init+0x300>)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_GPIO_Init+0x300>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_GPIO_Init+0x300>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_GPIO_Init+0x300>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004346:	4a11      	ldr	r2, [pc, #68]	; (800438c <HAL_GPIO_Init+0x300>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f ae9d 	bne.w	800409c <HAL_GPIO_Init+0x10>
  }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40021000 	.word	0x40021000
 8004374:	40010000 	.word	0x40010000
 8004378:	48000400 	.word	0x48000400
 800437c:	48000800 	.word	0x48000800
 8004380:	48000c00 	.word	0x48000c00
 8004384:	48001000 	.word	0x48001000
 8004388:	48001400 	.word	0x48001400
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ac:	e002      	b.n	80043b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d141      	bne.n	8004452 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ce:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043da:	d131      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043dc:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e2:	4a46      	ldr	r2, [pc, #280]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ec:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f4:	4a41      	ldr	r2, [pc, #260]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2232      	movs	r2, #50	; 0x32
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a3f      	ldr	r2, [pc, #252]	; (8004504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	0c9b      	lsrs	r3, r3, #18
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004412:	e002      	b.n	800441a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441a:	4b38      	ldr	r3, [pc, #224]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d102      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f2      	bne.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d158      	bne.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e057      	b.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004440:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004450:	e04d      	b.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004458:	d141      	bne.n	80044de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004466:	d131      	bne.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004468:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446e:	4a23      	ldr	r2, [pc, #140]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004480:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2232      	movs	r2, #50	; 0x32
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	0c9b      	lsrs	r3, r3, #18
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449e:	e002      	b.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d102      	bne.n	80044ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f2      	bne.n	80044a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d112      	bne.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e011      	b.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044dc:	e007      	b.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e6:	4a05      	ldr	r2, [pc, #20]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40007000 	.word	0x40007000
 8004500:	20000004 	.word	0x20000004
 8004504:	431bde83 	.word	0x431bde83

08004508 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	6093      	str	r3, [r2, #8]
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40007000 	.word	0x40007000

08004528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e306      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d075      	beq.n	8004632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004546:	4b97      	ldr	r3, [pc, #604]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004550:	4b94      	ldr	r3, [pc, #592]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d102      	bne.n	8004566 <HAL_RCC_OscConfig+0x3e>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d002      	beq.n	800456c <HAL_RCC_OscConfig+0x44>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b8d      	ldr	r3, [pc, #564]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05b      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d157      	bne.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e2e1      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x74>
 800458e:	4b85      	ldr	r3, [pc, #532]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a84      	ldr	r2, [pc, #528]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x98>
 80045a6:	4b7f      	ldr	r3, [pc, #508]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7e      	ldr	r2, [pc, #504]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b7c      	ldr	r3, [pc, #496]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7b      	ldr	r2, [pc, #492]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 80045c0:	4b78      	ldr	r3, [pc, #480]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a77      	ldr	r2, [pc, #476]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b75      	ldr	r3, [pc, #468]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd fe02 	bl	80021e8 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd fdfe 	bl	80021e8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e2a6      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fdee 	bl	80021e8 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd fdea 	bl	80021e8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e292      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004622:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d075      	beq.n	800472a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463e:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004648:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d102      	bne.n	800465e <HAL_RCC_OscConfig+0x136>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d002      	beq.n	8004664 <HAL_RCC_OscConfig+0x13c>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d11f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004664:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x154>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e265      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4946      	ldr	r1, [pc, #280]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004690:	4b45      	ldr	r3, [pc, #276]	; (80047a8 <HAL_RCC_OscConfig+0x280>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fd fd5b 	bl	8002150 <HAL_InitTick>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d043      	beq.n	8004728 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e251      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d023      	beq.n	80046f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ac:	4b3d      	ldr	r3, [pc, #244]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fd96 	bl	80021e8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fd fd92 	bl	80021e8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e23a      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	492d      	ldr	r1, [pc, #180]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]
 80046f2:	e01a      	b.n	800472a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fd72 	bl	80021e8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fd fd6e 	bl	80021e8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e216      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1e0>
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d041      	beq.n	80047ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01c      	beq.n	8004778 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd fd4b 	bl	80021e8 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004756:	f7fd fd47 	bl	80021e8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1ef      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ef      	beq.n	8004756 <HAL_RCC_OscConfig+0x22e>
 8004776:	e020      	b.n	80047ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_OscConfig+0x27c>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fd2e 	bl	80021e8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478e:	e00d      	b.n	80047ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004790:	f7fd fd2a 	bl	80021e8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d906      	bls.n	80047ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e1d2      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ac:	4b8c      	ldr	r3, [pc, #560]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ea      	bne.n	8004790 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a6 	beq.w	8004914 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047cc:	4b84      	ldr	r3, [pc, #528]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_OscConfig+0x2b4>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x2b6>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e2:	4b7f      	ldr	r3, [pc, #508]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	4a7e      	ldr	r2, [pc, #504]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80047e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	; 0x58
 80047ee:	4b7c      	ldr	r3, [pc, #496]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047fa:	2301      	movs	r3, #1
 80047fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCC_OscConfig+0x4bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d118      	bne.n	800483c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480a:	4b76      	ldr	r3, [pc, #472]	; (80049e4 <HAL_RCC_OscConfig+0x4bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a75      	ldr	r2, [pc, #468]	; (80049e4 <HAL_RCC_OscConfig+0x4bc>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004816:	f7fd fce7 	bl	80021e8 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481e:	f7fd fce3 	bl	80021e8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e18b      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004830:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCC_OscConfig+0x4bc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d108      	bne.n	8004856 <HAL_RCC_OscConfig+0x32e>
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a65      	ldr	r2, [pc, #404]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004854:	e024      	b.n	80048a0 <HAL_RCC_OscConfig+0x378>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d110      	bne.n	8004880 <HAL_RCC_OscConfig+0x358>
 800485e:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486e:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	4a5a      	ldr	r2, [pc, #360]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487e:	e00f      	b.n	80048a0 <HAL_RCC_OscConfig+0x378>
 8004880:	4b57      	ldr	r3, [pc, #348]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d016      	beq.n	80048d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd fc9e 	bl	80021e8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd fc9a 	bl	80021e8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e140      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ed      	beq.n	80048b0 <HAL_RCC_OscConfig+0x388>
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fd fc87 	bl	80021e8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fc83 	bl	80021e8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e129      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ed      	bne.n	80048de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004902:	7ffb      	ldrb	r3, [r7, #31]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d03c      	beq.n	800499a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01c      	beq.n	8004962 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800492a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd fc56 	bl	80021e8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004940:	f7fd fc52 	bl	80021e8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0fa      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <HAL_RCC_OscConfig+0x418>
 8004960:	e01b      	b.n	800499a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004962:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fd fc39 	bl	80021e8 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497a:	f7fd fc35 	bl	80021e8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0dd      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1ef      	bne.n	800497a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80d1 	beq.w	8004b46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b0c      	cmp	r3, #12
 80049ae:	f000 808b 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d15e      	bne.n	8004a78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <HAL_RCC_OscConfig+0x4b8>)
 80049c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fd fc0f 	bl	80021e8 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049cc:	e00c      	b.n	80049e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fd fc0b 	bl	80021e8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d905      	bls.n	80049e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0b3      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ec      	bne.n	80049ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f4:	4b56      	ldr	r3, [pc, #344]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_RCC_OscConfig+0x62c>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6a11      	ldr	r1, [r2, #32]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a0e:	0212      	lsls	r2, r2, #8
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a16:	0852      	lsrs	r2, r2, #1
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	0552      	lsls	r2, r2, #21
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0652      	lsls	r2, r2, #25
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a2e:	06d2      	lsls	r2, r2, #27
 8004a30:	430a      	orrs	r2, r1
 8004a32:	4947      	ldr	r1, [pc, #284]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a44      	ldr	r2, [pc, #272]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a44:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a41      	ldr	r2, [pc, #260]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fbca 	bl	80021e8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd fbc6 	bl	80021e8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e06e      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x530>
 8004a76:	e066      	b.n	8004b46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a78:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a90:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a2e      	ldr	r2, [pc, #184]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004a96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fba2 	bl	80021e8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fd fb9e 	bl	80021e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e046      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x580>
 8004ac6:	e03e      	b.n	8004b46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e039      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ad4:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <HAL_RCC_OscConfig+0x628>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0203 	and.w	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d12c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	3b01      	subs	r3, #1
 8004af4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d123      	bne.n	8004b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d11b      	bne.n	8004b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d113      	bne.n	8004b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d109      	bne.n	8004b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40021000 	.word	0x40021000
 8004b54:	019f800c 	.word	0x019f800c

08004b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e11e      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b8e      	ldr	r3, [pc, #568]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 020f 	bic.w	r2, r3, #15
 8004b86:	498c      	ldr	r1, [pc, #560]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e106      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d073      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d129      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0f4      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bc4:	f000 f99e 	bl	8004f04 <RCC_GetSysClockFreqFromPLLSource>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a7c      	ldr	r2, [pc, #496]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d93f      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d033      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d12f      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf2:	4b72      	ldr	r3, [pc, #456]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfa:	4a70      	ldr	r2, [pc, #448]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e024      	b.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0c6      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	4b66      	ldr	r3, [pc, #408]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0be      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c30:	f000 f8ce 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d909      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c46:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c52:	4b5a      	ldr	r3, [pc, #360]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4957      	ldr	r1, [pc, #348]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fd fac0 	bl	80021e8 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6c:	f7fd fabc 	bl	80021e8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e095      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	4b4e      	ldr	r3, [pc, #312]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 020c 	and.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1eb      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ccc:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4936      	ldr	r1, [pc, #216]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21d      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 020f 	bic.w	r2, r3, #15
 8004d10:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d18:	f7fd fa66 	bl	80021e8 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fd fa62 	bl	80021e8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e03b      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1ed      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4917      	ldr	r1, [pc, #92]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490f      	ldr	r1, [pc, #60]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d82:	f000 f825 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490c      	ldr	r1, [pc, #48]	; (8004dc4 <HAL_RCC_ClockConfig+0x26c>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x270>)
 8004da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd f9d2 	bl	8002150 <HAL_InitTick>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	04c4b400 	.word	0x04c4b400
 8004dc4:	08007b68 	.word	0x08007b68
 8004dc8:	20000004 	.word	0x20000004
 8004dcc:	20000008 	.word	0x20000008

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e047      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e03e      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d136      	bne.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2e:	68d2      	ldr	r2, [r2, #12]
 8004e30:	0a12      	lsrs	r2, r2, #8
 8004e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	617b      	str	r3, [r7, #20]
      break;
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	0a12      	lsrs	r2, r2, #8
 8004e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	0e5b      	lsrs	r3, r3, #25
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	3301      	adds	r3, #1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e001      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e78:	693b      	ldr	r3, [r7, #16]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	007a1200 	.word	0x007a1200

08004e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000004 	.word	0x20000004

08004eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eb0:	f7ff fff0 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	08007b78 	.word	0x08007b78

08004ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004edc:	f7ff ffda 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0adb      	lsrs	r3, r3, #11
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	08007b78 	.word	0x08007b78

08004f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d10c      	bne.n	8004f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f28:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	0a12      	lsrs	r2, r2, #8
 8004f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
    break;
 8004f40:	e00c      	b.n	8004f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	0a12      	lsrs	r2, r2, #8
 8004f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    break;
 8004f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	0e5b      	lsrs	r3, r3, #25
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	3301      	adds	r3, #1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f76:	687b      	ldr	r3, [r7, #4]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40021000 	.word	0x40021000
 8004f88:	007a1200 	.word	0x007a1200
 8004f8c:	00f42400 	.word	0x00f42400

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8098 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fda:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe6:	f7fd f8ff 	bl	80021e8 <HAL_GetTick>
 8004fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fec:	e009      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fd f8fb 	bl	80021e8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d159      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	d019      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fd f8bb 	bl	80021e8 <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005074:	e00b      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fd f8b7 	bl	80021e8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d902      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	74fb      	strb	r3, [r7, #19]
            break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ec      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
 80050be:	e005      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050cc:	7c7b      	ldrb	r3, [r7, #17]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4ba6      	ldr	r3, [pc, #664]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	4aa5      	ldr	r2, [pc, #660]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ea:	4ba0      	ldr	r3, [pc, #640]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f023 0203 	bic.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	499c      	ldr	r1, [pc, #624]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510c:	4b97      	ldr	r3, [pc, #604]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 020c 	bic.w	r2, r3, #12
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4994      	ldr	r1, [pc, #592]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512e:	4b8f      	ldr	r3, [pc, #572]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	498b      	ldr	r1, [pc, #556]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005150:	4b86      	ldr	r3, [pc, #536]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	4983      	ldr	r1, [pc, #524]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005172:	4b7e      	ldr	r3, [pc, #504]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	497a      	ldr	r1, [pc, #488]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005194:	4b75      	ldr	r3, [pc, #468]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	4972      	ldr	r1, [pc, #456]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4969      	ldr	r1, [pc, #420]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d8:	4b64      	ldr	r3, [pc, #400]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4961      	ldr	r1, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051fa:	4b5c      	ldr	r3, [pc, #368]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4958      	ldr	r1, [pc, #352]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800521c:	4b53      	ldr	r3, [pc, #332]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	4950      	ldr	r1, [pc, #320]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d105      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4a4a      	ldr	r2, [pc, #296]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005254:	4b45      	ldr	r3, [pc, #276]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	4942      	ldr	r1, [pc, #264]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a3c      	ldr	r2, [pc, #240]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	4934      	ldr	r1, [pc, #208]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ac:	4b2f      	ldr	r3, [pc, #188]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a2e      	ldr	r2, [pc, #184]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c4:	4b29      	ldr	r3, [pc, #164]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	4926      	ldr	r1, [pc, #152]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e2:	d105      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a20      	ldr	r2, [pc, #128]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	4918      	ldr	r1, [pc, #96]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800531a:	d105      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d015      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	490a      	ldr	r1, [pc, #40]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005352:	d105      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005360:	7cbb      	ldrb	r3, [r7, #18]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000

08005370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e049      	b.n	8005416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fd30 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fb10 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e04a      	b.n	80054ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_TIM_Base_Start_IT+0xbc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d013      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d115      	bne.n	80054b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d015      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d011      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	e008      	b.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e000      	b.n	80054cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	00010007 	.word	0x00010007

080054f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e049      	b.n	800559a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f841 	bl	80055a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f000 fa4e 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0ff      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b14      	cmp	r3, #20
 80055e2:	f200 80f0 	bhi.w	80057c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005641 	.word	0x08005641
 80055f0:	080057c7 	.word	0x080057c7
 80055f4:	080057c7 	.word	0x080057c7
 80055f8:	080057c7 	.word	0x080057c7
 80055fc:	08005681 	.word	0x08005681
 8005600:	080057c7 	.word	0x080057c7
 8005604:	080057c7 	.word	0x080057c7
 8005608:	080057c7 	.word	0x080057c7
 800560c:	080056c3 	.word	0x080056c3
 8005610:	080057c7 	.word	0x080057c7
 8005614:	080057c7 	.word	0x080057c7
 8005618:	080057c7 	.word	0x080057c7
 800561c:	08005703 	.word	0x08005703
 8005620:	080057c7 	.word	0x080057c7
 8005624:	080057c7 	.word	0x080057c7
 8005628:	080057c7 	.word	0x080057c7
 800562c:	08005745 	.word	0x08005745
 8005630:	080057c7 	.word	0x080057c7
 8005634:	080057c7 	.word	0x080057c7
 8005638:	080057c7 	.word	0x080057c7
 800563c:	08005785 	.word	0x08005785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa54 	bl	8005af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0204 	bic.w	r2, r2, #4
 800566a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6999      	ldr	r1, [r3, #24]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	619a      	str	r2, [r3, #24]
      break;
 800567e:	e0a5      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fac4 	bl	8005c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6999      	ldr	r1, [r3, #24]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	021a      	lsls	r2, r3, #8
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	619a      	str	r2, [r3, #24]
      break;
 80056c0:	e084      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fb2d 	bl	8005d28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0208 	orr.w	r2, r2, #8
 80056dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0204 	bic.w	r2, r2, #4
 80056ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
      break;
 8005700:	e064      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fb95 	bl	8005e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	021a      	lsls	r2, r3, #8
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	61da      	str	r2, [r3, #28]
      break;
 8005742:	e043      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fbfe 	bl	8005f4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005782:	e023      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fc42 	bl	8006014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057c4:	e002      	b.n	80057cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop

080057e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_ConfigClockSource+0x1c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0de      	b.n	80059ba <HAL_TIM_ConfigClockSource+0x1da>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800581a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a63      	ldr	r2, [pc, #396]	; (80059c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	f000 80a9 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 800583c:	4a61      	ldr	r2, [pc, #388]	; (80059c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	f200 80ae 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005844:	4a60      	ldr	r2, [pc, #384]	; (80059c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f000 80a1 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 800584c:	4a5e      	ldr	r2, [pc, #376]	; (80059c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	f200 80a6 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005854:	4a5d      	ldr	r2, [pc, #372]	; (80059cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f000 8099 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 800585c:	4a5b      	ldr	r2, [pc, #364]	; (80059cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800585e:	4293      	cmp	r3, r2
 8005860:	f200 809e 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005864:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f000 8091 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 800586c:	4a58      	ldr	r2, [pc, #352]	; (80059d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	f200 8096 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005878:	f000 8089 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 800587c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005880:	f200 808e 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005888:	d03e      	beq.n	8005908 <HAL_TIM_ConfigClockSource+0x128>
 800588a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588e:	f200 8087 	bhi.w	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	f000 8086 	beq.w	80059a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800589a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589e:	d87f      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a0:	2b70      	cmp	r3, #112	; 0x70
 80058a2:	d01a      	beq.n	80058da <HAL_TIM_ConfigClockSource+0xfa>
 80058a4:	2b70      	cmp	r3, #112	; 0x70
 80058a6:	d87b      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a8:	2b60      	cmp	r3, #96	; 0x60
 80058aa:	d050      	beq.n	800594e <HAL_TIM_ConfigClockSource+0x16e>
 80058ac:	2b60      	cmp	r3, #96	; 0x60
 80058ae:	d877      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b0:	2b50      	cmp	r3, #80	; 0x50
 80058b2:	d03c      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x14e>
 80058b4:	2b50      	cmp	r3, #80	; 0x50
 80058b6:	d873      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d058      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x18e>
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d86f      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c0:	2b30      	cmp	r3, #48	; 0x30
 80058c2:	d064      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	d86b      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d060      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d867      	bhi.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d05c      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d05a      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x1ae>
 80058d8:	e062      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f000 fc75 	bl	80061d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	609a      	str	r2, [r3, #8]
      break;
 8005906:	e04f      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f000 fc5e 	bl	80061d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800592a:	609a      	str	r2, [r3, #8]
      break;
 800592c:	e03c      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6859      	ldr	r1, [r3, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	461a      	mov	r2, r3
 800593c:	f000 fbd0 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2150      	movs	r1, #80	; 0x50
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fc29 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 800594c:	e02c      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	f000 fbef 	bl	800613e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2160      	movs	r1, #96	; 0x60
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fc19 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 800596c:	e01c      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	461a      	mov	r2, r3
 800597c:	f000 fbb0 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2140      	movs	r1, #64	; 0x40
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fc09 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 800598c:	e00c      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f000 fc00 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 800599e:	e003      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	e000      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80059a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	00100070 	.word	0x00100070
 80059c8:	00100040 	.word	0x00100040
 80059cc:	00100030 	.word	0x00100030
 80059d0:	00100020 	.word	0x00100020

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <TIM_Base_SetConfig+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a39      	ldr	r2, [pc, #228]	; (8005adc <TIM_Base_SetConfig+0x108>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a38      	ldr	r2, [pc, #224]	; (8005ae0 <TIM_Base_SetConfig+0x10c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <TIM_Base_SetConfig+0x110>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2d      	ldr	r2, [pc, #180]	; (8005ad8 <TIM_Base_SetConfig+0x104>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <TIM_Base_SetConfig+0x108>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <TIM_Base_SetConfig+0x10c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <TIM_Base_SetConfig+0x110>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a10      	ldr	r2, [pc, #64]	; (8005ad8 <TIM_Base_SetConfig+0x104>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <TIM_Base_SetConfig+0x110>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <TIM_Base_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d103      	bne.n	8005ac4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 0302 	bic.w	r3, r3, #2
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <TIM_OC1_SetConfig+0x10c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00f      	beq.n	8005b74 <TIM_OC1_SetConfig+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <TIM_OC1_SetConfig+0x110>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_OC1_SetConfig+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <TIM_OC1_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_OC1_SetConfig+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_OC1_SetConfig+0x118>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a28      	ldr	r2, [pc, #160]	; (8005c10 <TIM_OC1_SetConfig+0x11c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10c      	bne.n	8005b8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0308 	bic.w	r3, r3, #8
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 0304 	bic.w	r3, r3, #4
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <TIM_OC1_SetConfig+0x10c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_OC1_SetConfig+0xc2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <TIM_OC1_SetConfig+0x110>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_OC1_SetConfig+0xc2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <TIM_OC1_SetConfig+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_OC1_SetConfig+0xc2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <TIM_OC1_SetConfig+0x118>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <TIM_OC1_SetConfig+0x11c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d111      	bne.n	8005bda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	621a      	str	r2, [r3, #32]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400
 8005c10:	40014800 	.word	0x40014800

08005c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f023 0210 	bic.w	r2, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0320 	bic.w	r3, r3, #32
 8005c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <TIM_OC2_SetConfig+0x100>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC2_SetConfig+0x6c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <TIM_OC2_SetConfig+0x104>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10d      	bne.n	8005c9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <TIM_OC2_SetConfig+0x100>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_OC2_SetConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	; (8005d18 <TIM_OC2_SetConfig+0x104>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_OC2_SetConfig+0xb0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <TIM_OC2_SetConfig+0x108>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_OC2_SetConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <TIM_OC2_SetConfig+0x10c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <TIM_OC2_SetConfig+0x110>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d113      	bne.n	8005cec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	621a      	str	r2, [r3, #32]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40013400 	.word	0x40013400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800

08005d28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a27      	ldr	r2, [pc, #156]	; (8005e24 <TIM_OC3_SetConfig+0xfc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC3_SetConfig+0x6a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <TIM_OC3_SetConfig+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10d      	bne.n	8005dae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <TIM_OC3_SetConfig+0xfc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <TIM_OC3_SetConfig+0xae>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <TIM_OC3_SetConfig+0x100>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_OC3_SetConfig+0xae>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <TIM_OC3_SetConfig+0x104>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_OC3_SetConfig+0xae>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <TIM_OC3_SetConfig+0x108>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <TIM_OC3_SetConfig+0x10c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d113      	bne.n	8005dfe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a28      	ldr	r2, [pc, #160]	; (8005f38 <TIM_OC4_SetConfig+0x100>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x6c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <TIM_OC4_SetConfig+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <TIM_OC4_SetConfig+0x100>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00f      	beq.n	8005ee8 <TIM_OC4_SetConfig+0xb0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <TIM_OC4_SetConfig+0x104>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00b      	beq.n	8005ee8 <TIM_OC4_SetConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <TIM_OC4_SetConfig+0x108>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d007      	beq.n	8005ee8 <TIM_OC4_SetConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <TIM_OC4_SetConfig+0x10c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC4_SetConfig+0xb0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <TIM_OC4_SetConfig+0x110>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d113      	bne.n	8005f10 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	019b      	lsls	r3, r3, #6
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <TIM_OC5_SetConfig+0xb4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x7a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a16      	ldr	r2, [pc, #88]	; (8006004 <TIM_OC5_SetConfig+0xb8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x7a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <TIM_OC5_SetConfig+0xbc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x7a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <TIM_OC5_SetConfig+0xc0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x7a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <TIM_OC5_SetConfig+0xc4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d109      	bne.n	8005fda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40013400 	.word	0x40013400
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	051b      	lsls	r3, r3, #20
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_OC6_SetConfig+0xb8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_OC6_SetConfig+0x7c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC6_SetConfig+0xbc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_OC6_SetConfig+0x7c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <TIM_OC6_SetConfig+0xc0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC6_SetConfig+0x7c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <TIM_OC6_SetConfig+0xc4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC6_SetConfig+0x7c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a14      	ldr	r2, [pc, #80]	; (80060dc <TIM_OC6_SetConfig+0xc8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	f043 0307 	orr.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	609a      	str	r2, [r3, #8]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800622c:	2302      	movs	r3, #2
 800622e:	e065      	b.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2c      	ldr	r2, [pc, #176]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2b      	ldr	r2, [pc, #172]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d108      	bne.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800626a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d013      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a18      	ldr	r2, [pc, #96]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a17      	ldr	r2, [pc, #92]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a13      	ldr	r2, [pc, #76]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40014000 	.word	0x40014000

0800631c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006334:	2302      	movs	r3, #2
 8006336:	e087      	b.n	8006448 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a27      	ldr	r2, [pc, #156]	; (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a25      	ldr	r2, [pc, #148]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d106      	bne.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1e      	ldr	r2, [pc, #120]	; (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d126      	bne.n	8006436 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	051b      	lsls	r3, r3, #20
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0e      	ldr	r2, [pc, #56]	; (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a0d      	ldr	r2, [pc, #52]	; (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d106      	bne.n	8006436 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40013400 	.word	0x40013400

0800645c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e042      	b.n	80064f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fb fd51 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2224      	movs	r2, #36	; 0x24
 800648a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8c2 	bl	8006628 <UART_SetConfig>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e022      	b.n	80064f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fb82 	bl	8006bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc09 	bl	8006d04 <UART_CheckIdleState>
 80064f2:	4603      	mov	r3, r0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006512:	2b20      	cmp	r3, #32
 8006514:	f040 8083 	bne.w	800661e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_UART_Transmit+0x28>
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e07b      	b.n	8006620 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_UART_Transmit+0x3a>
 8006532:	2302      	movs	r3, #2
 8006534:	e074      	b.n	8006620 <HAL_UART_Transmit+0x124>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2221      	movs	r2, #33	; 0x21
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654e:	f7fb fe4b 	bl	80021e8 <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d108      	bne.n	8006580 <HAL_UART_Transmit+0x84>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e003      	b.n	8006588 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006590:	e02c      	b.n	80065ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fbfc 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e039      	b.n	8006620 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	3302      	adds	r3, #2
 80065c6:	61bb      	str	r3, [r7, #24]
 80065c8:	e007      	b.n	80065da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1cc      	bne.n	8006592 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fbc9 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e006      	b.n	8006620 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800662c:	b08c      	sub	sp, #48	; 0x30
 800662e:	af00      	add	r7, sp, #0
 8006630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	431a      	orrs	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	431a      	orrs	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	4313      	orrs	r3, r2
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4bab      	ldr	r3, [pc, #684]	; (8006904 <UART_SetConfig+0x2dc>)
 8006658:	4013      	ands	r3, r2
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006660:	430b      	orrs	r3, r1
 8006662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4aa0      	ldr	r2, [pc, #640]	; (8006908 <UART_SetConfig+0x2e0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006690:	4313      	orrs	r3, r2
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800669e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	f023 010f 	bic.w	r1, r3, #15
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a91      	ldr	r2, [pc, #580]	; (800690c <UART_SetConfig+0x2e4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d125      	bne.n	8006718 <UART_SetConfig+0xf0>
 80066cc:	4b90      	ldr	r3, [pc, #576]	; (8006910 <UART_SetConfig+0x2e8>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d81a      	bhi.n	8006710 <UART_SetConfig+0xe8>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0xb8>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	08006701 	.word	0x08006701
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	08006709 	.word	0x08006709
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f6:	e0d6      	b.n	80068a6 <UART_SetConfig+0x27e>
 80066f8:	2302      	movs	r3, #2
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e0d2      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006700:	2304      	movs	r3, #4
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e0ce      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006708:	2308      	movs	r3, #8
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e0ca      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006710:	2310      	movs	r3, #16
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e0c6      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a7d      	ldr	r2, [pc, #500]	; (8006914 <UART_SetConfig+0x2ec>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d138      	bne.n	8006794 <UART_SetConfig+0x16c>
 8006722:	4b7b      	ldr	r3, [pc, #492]	; (8006910 <UART_SetConfig+0x2e8>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d82d      	bhi.n	800678c <UART_SetConfig+0x164>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0x110>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800676d 	.word	0x0800676d
 800673c:	0800678d 	.word	0x0800678d
 8006740:	0800678d 	.word	0x0800678d
 8006744:	0800678d 	.word	0x0800678d
 8006748:	0800677d 	.word	0x0800677d
 800674c:	0800678d 	.word	0x0800678d
 8006750:	0800678d 	.word	0x0800678d
 8006754:	0800678d 	.word	0x0800678d
 8006758:	08006775 	.word	0x08006775
 800675c:	0800678d 	.word	0x0800678d
 8006760:	0800678d 	.word	0x0800678d
 8006764:	0800678d 	.word	0x0800678d
 8006768:	08006785 	.word	0x08006785
 800676c:	2300      	movs	r3, #0
 800676e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006772:	e098      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006774:	2302      	movs	r3, #2
 8006776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677a:	e094      	b.n	80068a6 <UART_SetConfig+0x27e>
 800677c:	2304      	movs	r3, #4
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e090      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006784:	2308      	movs	r3, #8
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e08c      	b.n	80068a6 <UART_SetConfig+0x27e>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e088      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a5f      	ldr	r2, [pc, #380]	; (8006918 <UART_SetConfig+0x2f0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d125      	bne.n	80067ea <UART_SetConfig+0x1c2>
 800679e:	4b5c      	ldr	r3, [pc, #368]	; (8006910 <UART_SetConfig+0x2e8>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067a8:	2b30      	cmp	r3, #48	; 0x30
 80067aa:	d016      	beq.n	80067da <UART_SetConfig+0x1b2>
 80067ac:	2b30      	cmp	r3, #48	; 0x30
 80067ae:	d818      	bhi.n	80067e2 <UART_SetConfig+0x1ba>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d00a      	beq.n	80067ca <UART_SetConfig+0x1a2>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d814      	bhi.n	80067e2 <UART_SetConfig+0x1ba>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <UART_SetConfig+0x19a>
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d008      	beq.n	80067d2 <UART_SetConfig+0x1aa>
 80067c0:	e00f      	b.n	80067e2 <UART_SetConfig+0x1ba>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c8:	e06d      	b.n	80068a6 <UART_SetConfig+0x27e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d0:	e069      	b.n	80068a6 <UART_SetConfig+0x27e>
 80067d2:	2304      	movs	r3, #4
 80067d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d8:	e065      	b.n	80068a6 <UART_SetConfig+0x27e>
 80067da:	2308      	movs	r3, #8
 80067dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e0:	e061      	b.n	80068a6 <UART_SetConfig+0x27e>
 80067e2:	2310      	movs	r3, #16
 80067e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e8:	e05d      	b.n	80068a6 <UART_SetConfig+0x27e>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a4b      	ldr	r2, [pc, #300]	; (800691c <UART_SetConfig+0x2f4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d125      	bne.n	8006840 <UART_SetConfig+0x218>
 80067f4:	4b46      	ldr	r3, [pc, #280]	; (8006910 <UART_SetConfig+0x2e8>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006800:	d016      	beq.n	8006830 <UART_SetConfig+0x208>
 8006802:	2bc0      	cmp	r3, #192	; 0xc0
 8006804:	d818      	bhi.n	8006838 <UART_SetConfig+0x210>
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d00a      	beq.n	8006820 <UART_SetConfig+0x1f8>
 800680a:	2b80      	cmp	r3, #128	; 0x80
 800680c:	d814      	bhi.n	8006838 <UART_SetConfig+0x210>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <UART_SetConfig+0x1f0>
 8006812:	2b40      	cmp	r3, #64	; 0x40
 8006814:	d008      	beq.n	8006828 <UART_SetConfig+0x200>
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0x210>
 8006818:	2300      	movs	r3, #0
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681e:	e042      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006820:	2302      	movs	r3, #2
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006826:	e03e      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006828:	2304      	movs	r3, #4
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682e:	e03a      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006830:	2308      	movs	r3, #8
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006836:	e036      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006838:	2310      	movs	r3, #16
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683e:	e032      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a30      	ldr	r2, [pc, #192]	; (8006908 <UART_SetConfig+0x2e0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d12a      	bne.n	80068a0 <UART_SetConfig+0x278>
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <UART_SetConfig+0x2e8>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006854:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006858:	d01a      	beq.n	8006890 <UART_SetConfig+0x268>
 800685a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800685e:	d81b      	bhi.n	8006898 <UART_SetConfig+0x270>
 8006860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006864:	d00c      	beq.n	8006880 <UART_SetConfig+0x258>
 8006866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686a:	d815      	bhi.n	8006898 <UART_SetConfig+0x270>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <UART_SetConfig+0x250>
 8006870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006874:	d008      	beq.n	8006888 <UART_SetConfig+0x260>
 8006876:	e00f      	b.n	8006898 <UART_SetConfig+0x270>
 8006878:	2300      	movs	r3, #0
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687e:	e012      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006880:	2302      	movs	r3, #2
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006886:	e00e      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006888:	2304      	movs	r3, #4
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e00a      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006890:	2308      	movs	r3, #8
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e006      	b.n	80068a6 <UART_SetConfig+0x27e>
 8006898:	2310      	movs	r3, #16
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689e:	e002      	b.n	80068a6 <UART_SetConfig+0x27e>
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a17      	ldr	r2, [pc, #92]	; (8006908 <UART_SetConfig+0x2e0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f040 80a8 	bne.w	8006a02 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d834      	bhi.n	8006924 <UART_SetConfig+0x2fc>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <UART_SetConfig+0x298>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	08006925 	.word	0x08006925
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	08006925 	.word	0x08006925
 80068d0:	080068f3 	.word	0x080068f3
 80068d4:	08006925 	.word	0x08006925
 80068d8:	08006925 	.word	0x08006925
 80068dc:	08006925 	.word	0x08006925
 80068e0:	080068fb 	.word	0x080068fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe fae2 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 80068e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ea:	e021      	b.n	8006930 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <UART_SetConfig+0x2f8>)
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068f0:	e01e      	b.n	8006930 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f2:	f7fe fa6d 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068f8:	e01a      	b.n	8006930 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006900:	e016      	b.n	8006930 <UART_SetConfig+0x308>
 8006902:	bf00      	nop
 8006904:	cfff69f3 	.word	0xcfff69f3
 8006908:	40008000 	.word	0x40008000
 800690c:	40013800 	.word	0x40013800
 8006910:	40021000 	.word	0x40021000
 8006914:	40004400 	.word	0x40004400
 8006918:	40004800 	.word	0x40004800
 800691c:	40004c00 	.word	0x40004c00
 8006920:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800692e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 812a 	beq.w	8006b8c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	4a9e      	ldr	r2, [pc, #632]	; (8006bb8 <UART_SetConfig+0x590>)
 800693e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006942:	461a      	mov	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	fbb3 f3f2 	udiv	r3, r3, r2
 800694a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	4413      	add	r3, r2
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	429a      	cmp	r2, r3
 800695a:	d305      	bcc.n	8006968 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	429a      	cmp	r2, r3
 8006966:	d903      	bls.n	8006970 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800696e:	e10d      	b.n	8006b8c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	60fa      	str	r2, [r7, #12]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	4a8e      	ldr	r2, [pc, #568]	; (8006bb8 <UART_SetConfig+0x590>)
 800697e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006982:	b29b      	uxth	r3, r3
 8006984:	2200      	movs	r2, #0
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	607a      	str	r2, [r7, #4]
 800698a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006992:	f7f9 fc95 	bl	80002c0 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	020b      	lsls	r3, r1, #8
 80069a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069ac:	0202      	lsls	r2, r0, #8
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	6849      	ldr	r1, [r1, #4]
 80069b2:	0849      	lsrs	r1, r1, #1
 80069b4:	2000      	movs	r0, #0
 80069b6:	460c      	mov	r4, r1
 80069b8:	4605      	mov	r5, r0
 80069ba:	eb12 0804 	adds.w	r8, r2, r4
 80069be:	eb43 0905 	adc.w	r9, r3, r5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	469a      	mov	sl, r3
 80069ca:	4693      	mov	fp, r2
 80069cc:	4652      	mov	r2, sl
 80069ce:	465b      	mov	r3, fp
 80069d0:	4640      	mov	r0, r8
 80069d2:	4649      	mov	r1, r9
 80069d4:	f7f9 fc74 	bl	80002c0 <__aeabi_uldivmod>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4613      	mov	r3, r2
 80069de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e6:	d308      	bcc.n	80069fa <UART_SetConfig+0x3d2>
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ee:	d204      	bcs.n	80069fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	e0c8      	b.n	8006b8c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a00:	e0c4      	b.n	8006b8c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0a:	d167      	bne.n	8006adc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d828      	bhi.n	8006a66 <UART_SetConfig+0x43e>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x3f4>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a67 	.word	0x08006a67
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe fa34 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a46:	e014      	b.n	8006a72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a48:	f7fe fa46 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a4e:	e010      	b.n	8006a72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b5a      	ldr	r3, [pc, #360]	; (8006bbc <UART_SetConfig+0x594>)
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a54:	e00d      	b.n	8006a72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fe f9bb 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a5c:	e009      	b.n	8006a72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a64:	e005      	b.n	8006a72 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8089 	beq.w	8006b8c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	4a4e      	ldr	r2, [pc, #312]	; (8006bb8 <UART_SetConfig+0x590>)
 8006a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a8c:	005a      	lsls	r2, r3, #1
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	441a      	add	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d916      	bls.n	8006ad4 <UART_SetConfig+0x4ac>
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d212      	bcs.n	8006ad4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f023 030f 	bic.w	r3, r3, #15
 8006ab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	8bfb      	ldrh	r3, [r7, #30]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	8bfa      	ldrh	r2, [r7, #30]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e05b      	b.n	8006b8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ada:	e057      	b.n	8006b8c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d828      	bhi.n	8006b36 <UART_SetConfig+0x50e>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x4c4>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe f9cc 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b16:	e014      	b.n	8006b42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fe f9de 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b1e:	e010      	b.n	8006b42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <UART_SetConfig+0x594>)
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b24:	e00d      	b.n	8006b42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fe f953 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b2c:	e009      	b.n	8006b42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b34:	e005      	b.n	8006b42 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b40:	bf00      	nop
    }

    if (pclk != 0U)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d021      	beq.n	8006b8c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	4a1a      	ldr	r2, [pc, #104]	; (8006bb8 <UART_SetConfig+0x590>)
 8006b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	441a      	add	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d909      	bls.n	8006b86 <UART_SetConfig+0x55e>
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d205      	bcs.n	8006b86 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60da      	str	r2, [r3, #12]
 8006b84:	e002      	b.n	8006b8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ba8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08007b80 	.word	0x08007b80
 8006bbc:	00f42400 	.word	0x00f42400

08006bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbe:	d10a      	bne.n	8006cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d14:	f7fb fa68 	bl	80021e8 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d10e      	bne.n	8006d46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f82f 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e025      	b.n	8006d92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d10e      	bne.n	8006d72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f819 	bl	8006d9a <UART_WaitOnFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e00f      	b.n	8006d92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b09c      	sub	sp, #112	; 0x70
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006daa:	e0a9      	b.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	f000 80a5 	beq.w	8006f00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fb fa17 	bl	80021e8 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <UART_WaitOnFlagUntilTimeout+0x32>
 8006dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d140      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006de0:	667b      	str	r3, [r7, #100]	; 0x64
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006df0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e6      	bne.n	8006dcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	663b      	str	r3, [r7, #96]	; 0x60
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e5      	bne.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e069      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d051      	beq.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d149      	bne.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e6      	bne.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ec8:	623a      	str	r2, [r7, #32]
 8006eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	69f9      	ldr	r1, [r7, #28]
 8006ece:	6a3a      	ldr	r2, [r7, #32]
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e010      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69da      	ldr	r2, [r3, #28]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f43f af46 	beq.w	8006dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3770      	adds	r7, #112	; 0x70
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e027      	b.n	8006f90 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2224      	movs	r2, #36	; 0x24
 8006f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e02d      	b.n	8007010 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2224      	movs	r2, #36	; 0x24
 8006fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f84f 	bl	8007094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800702c:	2302      	movs	r3, #2
 800702e:	e02d      	b.n	800708c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	; 0x24
 800703c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f811 	bl	8007094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d108      	bne.n	80070b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070b4:	e031      	b.n	800711a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070b6:	2308      	movs	r3, #8
 80070b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ba:	2308      	movs	r3, #8
 80070bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	0e5b      	lsrs	r3, r3, #25
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	0f5b      	lsrs	r3, r3, #29
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	7b3a      	ldrb	r2, [r7, #12]
 80070e2:	4911      	ldr	r1, [pc, #68]	; (8007128 <UARTEx_SetNbDataToProcess+0x94>)
 80070e4:	5c8a      	ldrb	r2, [r1, r2]
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ea:	7b3a      	ldrb	r2, [r7, #12]
 80070ec:	490f      	ldr	r1, [pc, #60]	; (800712c <UARTEx_SetNbDataToProcess+0x98>)
 80070ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	7b7a      	ldrb	r2, [r7, #13]
 8007100:	4909      	ldr	r1, [pc, #36]	; (8007128 <UARTEx_SetNbDataToProcess+0x94>)
 8007102:	5c8a      	ldrb	r2, [r1, r2]
 8007104:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007108:	7b7a      	ldrb	r2, [r7, #13]
 800710a:	4908      	ldr	r1, [pc, #32]	; (800712c <UARTEx_SetNbDataToProcess+0x98>)
 800710c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800710e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	08007b98 	.word	0x08007b98
 800712c:	08007ba0 	.word	0x08007ba0

08007130 <siprintf>:
 8007130:	b40e      	push	{r1, r2, r3}
 8007132:	b500      	push	{lr}
 8007134:	b09c      	sub	sp, #112	; 0x70
 8007136:	ab1d      	add	r3, sp, #116	; 0x74
 8007138:	9002      	str	r0, [sp, #8]
 800713a:	9006      	str	r0, [sp, #24]
 800713c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007140:	4809      	ldr	r0, [pc, #36]	; (8007168 <siprintf+0x38>)
 8007142:	9107      	str	r1, [sp, #28]
 8007144:	9104      	str	r1, [sp, #16]
 8007146:	4909      	ldr	r1, [pc, #36]	; (800716c <siprintf+0x3c>)
 8007148:	f853 2b04 	ldr.w	r2, [r3], #4
 800714c:	9105      	str	r1, [sp, #20]
 800714e:	6800      	ldr	r0, [r0, #0]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	a902      	add	r1, sp, #8
 8007154:	f000 f992 	bl	800747c <_svfiprintf_r>
 8007158:	9b02      	ldr	r3, [sp, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	b01c      	add	sp, #112	; 0x70
 8007160:	f85d eb04 	ldr.w	lr, [sp], #4
 8007164:	b003      	add	sp, #12
 8007166:	4770      	bx	lr
 8007168:	2000005c 	.word	0x2000005c
 800716c:	ffff0208 	.word	0xffff0208

08007170 <memset>:
 8007170:	4402      	add	r2, r0
 8007172:	4603      	mov	r3, r0
 8007174:	4293      	cmp	r3, r2
 8007176:	d100      	bne.n	800717a <memset+0xa>
 8007178:	4770      	bx	lr
 800717a:	f803 1b01 	strb.w	r1, [r3], #1
 800717e:	e7f9      	b.n	8007174 <memset+0x4>

08007180 <__errno>:
 8007180:	4b01      	ldr	r3, [pc, #4]	; (8007188 <__errno+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000005c 	.word	0x2000005c

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	; (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	; (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	; (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	; (80071d0 <__libc_init_array+0x44>)
 80071a0:	f000 fc6a 	bl	8007a78 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	08007be4 	.word	0x08007be4
 80071c8:	08007be4 	.word	0x08007be4
 80071cc:	08007be4 	.word	0x08007be4
 80071d0:	08007be8 	.word	0x08007be8

080071d4 <__retarget_lock_acquire_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <__retarget_lock_release_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <_free_r>:
 80071d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071da:	2900      	cmp	r1, #0
 80071dc:	d044      	beq.n	8007268 <_free_r+0x90>
 80071de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e2:	9001      	str	r0, [sp, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f1a1 0404 	sub.w	r4, r1, #4
 80071ea:	bfb8      	it	lt
 80071ec:	18e4      	addlt	r4, r4, r3
 80071ee:	f000 f8df 	bl	80073b0 <__malloc_lock>
 80071f2:	4a1e      	ldr	r2, [pc, #120]	; (800726c <_free_r+0x94>)
 80071f4:	9801      	ldr	r0, [sp, #4]
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	b933      	cbnz	r3, 8007208 <_free_r+0x30>
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6014      	str	r4, [r2, #0]
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007204:	f000 b8da 	b.w	80073bc <__malloc_unlock>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d908      	bls.n	800721e <_free_r+0x46>
 800720c:	6825      	ldr	r5, [r4, #0]
 800720e:	1961      	adds	r1, r4, r5
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1949      	addeq	r1, r1, r5
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	e7ed      	b.n	80071fa <_free_r+0x22>
 800721e:	461a      	mov	r2, r3
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b10b      	cbz	r3, 8007228 <_free_r+0x50>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d9fa      	bls.n	800721e <_free_r+0x46>
 8007228:	6811      	ldr	r1, [r2, #0]
 800722a:	1855      	adds	r5, r2, r1
 800722c:	42a5      	cmp	r5, r4
 800722e:	d10b      	bne.n	8007248 <_free_r+0x70>
 8007230:	6824      	ldr	r4, [r4, #0]
 8007232:	4421      	add	r1, r4
 8007234:	1854      	adds	r4, r2, r1
 8007236:	42a3      	cmp	r3, r4
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	d1e0      	bne.n	80071fe <_free_r+0x26>
 800723c:	681c      	ldr	r4, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	6053      	str	r3, [r2, #4]
 8007242:	440c      	add	r4, r1
 8007244:	6014      	str	r4, [r2, #0]
 8007246:	e7da      	b.n	80071fe <_free_r+0x26>
 8007248:	d902      	bls.n	8007250 <_free_r+0x78>
 800724a:	230c      	movs	r3, #12
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	e7d6      	b.n	80071fe <_free_r+0x26>
 8007250:	6825      	ldr	r5, [r4, #0]
 8007252:	1961      	adds	r1, r4, r5
 8007254:	428b      	cmp	r3, r1
 8007256:	bf04      	itt	eq
 8007258:	6819      	ldreq	r1, [r3, #0]
 800725a:	685b      	ldreq	r3, [r3, #4]
 800725c:	6063      	str	r3, [r4, #4]
 800725e:	bf04      	itt	eq
 8007260:	1949      	addeq	r1, r1, r5
 8007262:	6021      	streq	r1, [r4, #0]
 8007264:	6054      	str	r4, [r2, #4]
 8007266:	e7ca      	b.n	80071fe <_free_r+0x26>
 8007268:	b003      	add	sp, #12
 800726a:	bd30      	pop	{r4, r5, pc}
 800726c:	20000800 	.word	0x20000800

08007270 <sbrk_aligned>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4e0e      	ldr	r6, [pc, #56]	; (80072ac <sbrk_aligned+0x3c>)
 8007274:	460c      	mov	r4, r1
 8007276:	6831      	ldr	r1, [r6, #0]
 8007278:	4605      	mov	r5, r0
 800727a:	b911      	cbnz	r1, 8007282 <sbrk_aligned+0x12>
 800727c:	f000 fba6 	bl	80079cc <_sbrk_r>
 8007280:	6030      	str	r0, [r6, #0]
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f000 fba1 	bl	80079cc <_sbrk_r>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d00a      	beq.n	80072a4 <sbrk_aligned+0x34>
 800728e:	1cc4      	adds	r4, r0, #3
 8007290:	f024 0403 	bic.w	r4, r4, #3
 8007294:	42a0      	cmp	r0, r4
 8007296:	d007      	beq.n	80072a8 <sbrk_aligned+0x38>
 8007298:	1a21      	subs	r1, r4, r0
 800729a:	4628      	mov	r0, r5
 800729c:	f000 fb96 	bl	80079cc <_sbrk_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d101      	bne.n	80072a8 <sbrk_aligned+0x38>
 80072a4:	f04f 34ff 	mov.w	r4, #4294967295
 80072a8:	4620      	mov	r0, r4
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	20000804 	.word	0x20000804

080072b0 <_malloc_r>:
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4607      	mov	r7, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d905      	bls.n	80072d8 <_malloc_r+0x28>
 80072cc:	230c      	movs	r3, #12
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	2600      	movs	r6, #0
 80072d2:	4630      	mov	r0, r6
 80072d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073ac <_malloc_r+0xfc>
 80072dc:	f000 f868 	bl	80073b0 <__malloc_lock>
 80072e0:	f8d8 3000 	ldr.w	r3, [r8]
 80072e4:	461c      	mov	r4, r3
 80072e6:	bb5c      	cbnz	r4, 8007340 <_malloc_r+0x90>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff ffc0 	bl	8007270 <sbrk_aligned>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	4604      	mov	r4, r0
 80072f4:	d155      	bne.n	80073a2 <_malloc_r+0xf2>
 80072f6:	f8d8 4000 	ldr.w	r4, [r8]
 80072fa:	4626      	mov	r6, r4
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	d145      	bne.n	800738c <_malloc_r+0xdc>
 8007300:	2c00      	cmp	r4, #0
 8007302:	d048      	beq.n	8007396 <_malloc_r+0xe6>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	4631      	mov	r1, r6
 8007308:	4638      	mov	r0, r7
 800730a:	eb04 0903 	add.w	r9, r4, r3
 800730e:	f000 fb5d 	bl	80079cc <_sbrk_r>
 8007312:	4581      	cmp	r9, r0
 8007314:	d13f      	bne.n	8007396 <_malloc_r+0xe6>
 8007316:	6821      	ldr	r1, [r4, #0]
 8007318:	1a6d      	subs	r5, r5, r1
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ffa7 	bl	8007270 <sbrk_aligned>
 8007322:	3001      	adds	r0, #1
 8007324:	d037      	beq.n	8007396 <_malloc_r+0xe6>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	442b      	add	r3, r5
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	f8d8 3000 	ldr.w	r3, [r8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d038      	beq.n	80073a6 <_malloc_r+0xf6>
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	42a2      	cmp	r2, r4
 8007338:	d12b      	bne.n	8007392 <_malloc_r+0xe2>
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	e00f      	b.n	8007360 <_malloc_r+0xb0>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	1b52      	subs	r2, r2, r5
 8007344:	d41f      	bmi.n	8007386 <_malloc_r+0xd6>
 8007346:	2a0b      	cmp	r2, #11
 8007348:	d917      	bls.n	800737a <_malloc_r+0xca>
 800734a:	1961      	adds	r1, r4, r5
 800734c:	42a3      	cmp	r3, r4
 800734e:	6025      	str	r5, [r4, #0]
 8007350:	bf18      	it	ne
 8007352:	6059      	strne	r1, [r3, #4]
 8007354:	6863      	ldr	r3, [r4, #4]
 8007356:	bf08      	it	eq
 8007358:	f8c8 1000 	streq.w	r1, [r8]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4638      	mov	r0, r7
 8007362:	f104 060b 	add.w	r6, r4, #11
 8007366:	f000 f829 	bl	80073bc <__malloc_unlock>
 800736a:	f026 0607 	bic.w	r6, r6, #7
 800736e:	1d23      	adds	r3, r4, #4
 8007370:	1af2      	subs	r2, r6, r3
 8007372:	d0ae      	beq.n	80072d2 <_malloc_r+0x22>
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	50a3      	str	r3, [r4, r2]
 8007378:	e7ab      	b.n	80072d2 <_malloc_r+0x22>
 800737a:	42a3      	cmp	r3, r4
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	d1dd      	bne.n	800733c <_malloc_r+0x8c>
 8007380:	f8c8 2000 	str.w	r2, [r8]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xb0>
 8007386:	4623      	mov	r3, r4
 8007388:	6864      	ldr	r4, [r4, #4]
 800738a:	e7ac      	b.n	80072e6 <_malloc_r+0x36>
 800738c:	4634      	mov	r4, r6
 800738e:	6876      	ldr	r6, [r6, #4]
 8007390:	e7b4      	b.n	80072fc <_malloc_r+0x4c>
 8007392:	4613      	mov	r3, r2
 8007394:	e7cc      	b.n	8007330 <_malloc_r+0x80>
 8007396:	230c      	movs	r3, #12
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	4638      	mov	r0, r7
 800739c:	f000 f80e 	bl	80073bc <__malloc_unlock>
 80073a0:	e797      	b.n	80072d2 <_malloc_r+0x22>
 80073a2:	6025      	str	r5, [r4, #0]
 80073a4:	e7dc      	b.n	8007360 <_malloc_r+0xb0>
 80073a6:	605b      	str	r3, [r3, #4]
 80073a8:	deff      	udf	#255	; 0xff
 80073aa:	bf00      	nop
 80073ac:	20000800 	.word	0x20000800

080073b0 <__malloc_lock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__malloc_lock+0x8>)
 80073b2:	f7ff bf0f 	b.w	80071d4 <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	200007fc 	.word	0x200007fc

080073bc <__malloc_unlock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_unlock+0x8>)
 80073be:	f7ff bf0a 	b.w	80071d6 <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	200007fc 	.word	0x200007fc

080073c8 <__ssputs_r>:
 80073c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	688e      	ldr	r6, [r1, #8]
 80073ce:	461f      	mov	r7, r3
 80073d0:	42be      	cmp	r6, r7
 80073d2:	680b      	ldr	r3, [r1, #0]
 80073d4:	4682      	mov	sl, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4690      	mov	r8, r2
 80073da:	d82c      	bhi.n	8007436 <__ssputs_r+0x6e>
 80073dc:	898a      	ldrh	r2, [r1, #12]
 80073de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073e2:	d026      	beq.n	8007432 <__ssputs_r+0x6a>
 80073e4:	6965      	ldr	r5, [r4, #20]
 80073e6:	6909      	ldr	r1, [r1, #16]
 80073e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073ec:	eba3 0901 	sub.w	r9, r3, r1
 80073f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073f4:	1c7b      	adds	r3, r7, #1
 80073f6:	444b      	add	r3, r9
 80073f8:	106d      	asrs	r5, r5, #1
 80073fa:	429d      	cmp	r5, r3
 80073fc:	bf38      	it	cc
 80073fe:	461d      	movcc	r5, r3
 8007400:	0553      	lsls	r3, r2, #21
 8007402:	d527      	bpl.n	8007454 <__ssputs_r+0x8c>
 8007404:	4629      	mov	r1, r5
 8007406:	f7ff ff53 	bl	80072b0 <_malloc_r>
 800740a:	4606      	mov	r6, r0
 800740c:	b360      	cbz	r0, 8007468 <__ssputs_r+0xa0>
 800740e:	6921      	ldr	r1, [r4, #16]
 8007410:	464a      	mov	r2, r9
 8007412:	f000 faeb 	bl	80079ec <memcpy>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	6126      	str	r6, [r4, #16]
 8007424:	6165      	str	r5, [r4, #20]
 8007426:	444e      	add	r6, r9
 8007428:	eba5 0509 	sub.w	r5, r5, r9
 800742c:	6026      	str	r6, [r4, #0]
 800742e:	60a5      	str	r5, [r4, #8]
 8007430:	463e      	mov	r6, r7
 8007432:	42be      	cmp	r6, r7
 8007434:	d900      	bls.n	8007438 <__ssputs_r+0x70>
 8007436:	463e      	mov	r6, r7
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	4632      	mov	r2, r6
 800743c:	4641      	mov	r1, r8
 800743e:	f000 faab 	bl	8007998 <memmove>
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	1b9b      	subs	r3, r3, r6
 8007446:	60a3      	str	r3, [r4, #8]
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	4433      	add	r3, r6
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	2000      	movs	r0, #0
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	462a      	mov	r2, r5
 8007456:	f000 fad7 	bl	8007a08 <_realloc_r>
 800745a:	4606      	mov	r6, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	d1e0      	bne.n	8007422 <__ssputs_r+0x5a>
 8007460:	6921      	ldr	r1, [r4, #16]
 8007462:	4650      	mov	r0, sl
 8007464:	f7ff feb8 	bl	80071d8 <_free_r>
 8007468:	230c      	movs	r3, #12
 800746a:	f8ca 3000 	str.w	r3, [sl]
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	e7e9      	b.n	8007450 <__ssputs_r+0x88>

0800747c <_svfiprintf_r>:
 800747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	4698      	mov	r8, r3
 8007482:	898b      	ldrh	r3, [r1, #12]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	b09d      	sub	sp, #116	; 0x74
 8007488:	4607      	mov	r7, r0
 800748a:	460d      	mov	r5, r1
 800748c:	4614      	mov	r4, r2
 800748e:	d50e      	bpl.n	80074ae <_svfiprintf_r+0x32>
 8007490:	690b      	ldr	r3, [r1, #16]
 8007492:	b963      	cbnz	r3, 80074ae <_svfiprintf_r+0x32>
 8007494:	2140      	movs	r1, #64	; 0x40
 8007496:	f7ff ff0b 	bl	80072b0 <_malloc_r>
 800749a:	6028      	str	r0, [r5, #0]
 800749c:	6128      	str	r0, [r5, #16]
 800749e:	b920      	cbnz	r0, 80074aa <_svfiprintf_r+0x2e>
 80074a0:	230c      	movs	r3, #12
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	e0d0      	b.n	800764c <_svfiprintf_r+0x1d0>
 80074aa:	2340      	movs	r3, #64	; 0x40
 80074ac:	616b      	str	r3, [r5, #20]
 80074ae:	2300      	movs	r3, #0
 80074b0:	9309      	str	r3, [sp, #36]	; 0x24
 80074b2:	2320      	movs	r3, #32
 80074b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074bc:	2330      	movs	r3, #48	; 0x30
 80074be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007664 <_svfiprintf_r+0x1e8>
 80074c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c6:	f04f 0901 	mov.w	r9, #1
 80074ca:	4623      	mov	r3, r4
 80074cc:	469a      	mov	sl, r3
 80074ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d2:	b10a      	cbz	r2, 80074d8 <_svfiprintf_r+0x5c>
 80074d4:	2a25      	cmp	r2, #37	; 0x25
 80074d6:	d1f9      	bne.n	80074cc <_svfiprintf_r+0x50>
 80074d8:	ebba 0b04 	subs.w	fp, sl, r4
 80074dc:	d00b      	beq.n	80074f6 <_svfiprintf_r+0x7a>
 80074de:	465b      	mov	r3, fp
 80074e0:	4622      	mov	r2, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff ff6f 	bl	80073c8 <__ssputs_r>
 80074ea:	3001      	adds	r0, #1
 80074ec:	f000 80a9 	beq.w	8007642 <_svfiprintf_r+0x1c6>
 80074f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f2:	445a      	add	r2, fp
 80074f4:	9209      	str	r2, [sp, #36]	; 0x24
 80074f6:	f89a 3000 	ldrb.w	r3, [sl]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 80a1 	beq.w	8007642 <_svfiprintf_r+0x1c6>
 8007500:	2300      	movs	r3, #0
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800750a:	f10a 0a01 	add.w	sl, sl, #1
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	9307      	str	r3, [sp, #28]
 8007512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007516:	931a      	str	r3, [sp, #104]	; 0x68
 8007518:	4654      	mov	r4, sl
 800751a:	2205      	movs	r2, #5
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	4850      	ldr	r0, [pc, #320]	; (8007664 <_svfiprintf_r+0x1e8>)
 8007522:	f7f8 fe7d 	bl	8000220 <memchr>
 8007526:	9a04      	ldr	r2, [sp, #16]
 8007528:	b9d8      	cbnz	r0, 8007562 <_svfiprintf_r+0xe6>
 800752a:	06d0      	lsls	r0, r2, #27
 800752c:	bf44      	itt	mi
 800752e:	2320      	movmi	r3, #32
 8007530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007534:	0711      	lsls	r1, r2, #28
 8007536:	bf44      	itt	mi
 8007538:	232b      	movmi	r3, #43	; 0x2b
 800753a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753e:	f89a 3000 	ldrb.w	r3, [sl]
 8007542:	2b2a      	cmp	r3, #42	; 0x2a
 8007544:	d015      	beq.n	8007572 <_svfiprintf_r+0xf6>
 8007546:	9a07      	ldr	r2, [sp, #28]
 8007548:	4654      	mov	r4, sl
 800754a:	2000      	movs	r0, #0
 800754c:	f04f 0c0a 	mov.w	ip, #10
 8007550:	4621      	mov	r1, r4
 8007552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007556:	3b30      	subs	r3, #48	; 0x30
 8007558:	2b09      	cmp	r3, #9
 800755a:	d94d      	bls.n	80075f8 <_svfiprintf_r+0x17c>
 800755c:	b1b0      	cbz	r0, 800758c <_svfiprintf_r+0x110>
 800755e:	9207      	str	r2, [sp, #28]
 8007560:	e014      	b.n	800758c <_svfiprintf_r+0x110>
 8007562:	eba0 0308 	sub.w	r3, r0, r8
 8007566:	fa09 f303 	lsl.w	r3, r9, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	46a2      	mov	sl, r4
 8007570:	e7d2      	b.n	8007518 <_svfiprintf_r+0x9c>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	9103      	str	r1, [sp, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfbb      	ittet	lt
 800757e:	425b      	neglt	r3, r3
 8007580:	f042 0202 	orrlt.w	r2, r2, #2
 8007584:	9307      	strge	r3, [sp, #28]
 8007586:	9307      	strlt	r3, [sp, #28]
 8007588:	bfb8      	it	lt
 800758a:	9204      	strlt	r2, [sp, #16]
 800758c:	7823      	ldrb	r3, [r4, #0]
 800758e:	2b2e      	cmp	r3, #46	; 0x2e
 8007590:	d10c      	bne.n	80075ac <_svfiprintf_r+0x130>
 8007592:	7863      	ldrb	r3, [r4, #1]
 8007594:	2b2a      	cmp	r3, #42	; 0x2a
 8007596:	d134      	bne.n	8007602 <_svfiprintf_r+0x186>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	9203      	str	r2, [sp, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	bfb8      	it	lt
 80075a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a8:	3402      	adds	r4, #2
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007674 <_svfiprintf_r+0x1f8>
 80075b0:	7821      	ldrb	r1, [r4, #0]
 80075b2:	2203      	movs	r2, #3
 80075b4:	4650      	mov	r0, sl
 80075b6:	f7f8 fe33 	bl	8000220 <memchr>
 80075ba:	b138      	cbz	r0, 80075cc <_svfiprintf_r+0x150>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	eba0 000a 	sub.w	r0, r0, sl
 80075c2:	2240      	movs	r2, #64	; 0x40
 80075c4:	4082      	lsls	r2, r0
 80075c6:	4313      	orrs	r3, r2
 80075c8:	3401      	adds	r4, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	4825      	ldr	r0, [pc, #148]	; (8007668 <_svfiprintf_r+0x1ec>)
 80075d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d6:	2206      	movs	r2, #6
 80075d8:	f7f8 fe22 	bl	8000220 <memchr>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d038      	beq.n	8007652 <_svfiprintf_r+0x1d6>
 80075e0:	4b22      	ldr	r3, [pc, #136]	; (800766c <_svfiprintf_r+0x1f0>)
 80075e2:	bb1b      	cbnz	r3, 800762c <_svfiprintf_r+0x1b0>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	3307      	adds	r3, #7
 80075e8:	f023 0307 	bic.w	r3, r3, #7
 80075ec:	3308      	adds	r3, #8
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	4433      	add	r3, r6
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	e768      	b.n	80074ca <_svfiprintf_r+0x4e>
 80075f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fc:	460c      	mov	r4, r1
 80075fe:	2001      	movs	r0, #1
 8007600:	e7a6      	b.n	8007550 <_svfiprintf_r+0xd4>
 8007602:	2300      	movs	r3, #0
 8007604:	3401      	adds	r4, #1
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	4619      	mov	r1, r3
 800760a:	f04f 0c0a 	mov.w	ip, #10
 800760e:	4620      	mov	r0, r4
 8007610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007614:	3a30      	subs	r2, #48	; 0x30
 8007616:	2a09      	cmp	r2, #9
 8007618:	d903      	bls.n	8007622 <_svfiprintf_r+0x1a6>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0c6      	beq.n	80075ac <_svfiprintf_r+0x130>
 800761e:	9105      	str	r1, [sp, #20]
 8007620:	e7c4      	b.n	80075ac <_svfiprintf_r+0x130>
 8007622:	fb0c 2101 	mla	r1, ip, r1, r2
 8007626:	4604      	mov	r4, r0
 8007628:	2301      	movs	r3, #1
 800762a:	e7f0      	b.n	800760e <_svfiprintf_r+0x192>
 800762c:	ab03      	add	r3, sp, #12
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	462a      	mov	r2, r5
 8007632:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <_svfiprintf_r+0x1f4>)
 8007634:	a904      	add	r1, sp, #16
 8007636:	4638      	mov	r0, r7
 8007638:	f3af 8000 	nop.w
 800763c:	1c42      	adds	r2, r0, #1
 800763e:	4606      	mov	r6, r0
 8007640:	d1d6      	bne.n	80075f0 <_svfiprintf_r+0x174>
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	065b      	lsls	r3, r3, #25
 8007646:	f53f af2d 	bmi.w	80074a4 <_svfiprintf_r+0x28>
 800764a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800764c:	b01d      	add	sp, #116	; 0x74
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	ab03      	add	r3, sp, #12
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	462a      	mov	r2, r5
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <_svfiprintf_r+0x1f4>)
 800765a:	a904      	add	r1, sp, #16
 800765c:	4638      	mov	r0, r7
 800765e:	f000 f879 	bl	8007754 <_printf_i>
 8007662:	e7eb      	b.n	800763c <_svfiprintf_r+0x1c0>
 8007664:	08007ba8 	.word	0x08007ba8
 8007668:	08007bb2 	.word	0x08007bb2
 800766c:	00000000 	.word	0x00000000
 8007670:	080073c9 	.word	0x080073c9
 8007674:	08007bae 	.word	0x08007bae

08007678 <_printf_common>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	4616      	mov	r6, r2
 800767e:	4699      	mov	r9, r3
 8007680:	688a      	ldr	r2, [r1, #8]
 8007682:	690b      	ldr	r3, [r1, #16]
 8007684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007688:	4293      	cmp	r3, r2
 800768a:	bfb8      	it	lt
 800768c:	4613      	movlt	r3, r2
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007694:	4607      	mov	r7, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b10a      	cbz	r2, 800769e <_printf_common+0x26>
 800769a:	3301      	adds	r3, #1
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	0699      	lsls	r1, r3, #26
 80076a2:	bf42      	ittt	mi
 80076a4:	6833      	ldrmi	r3, [r6, #0]
 80076a6:	3302      	addmi	r3, #2
 80076a8:	6033      	strmi	r3, [r6, #0]
 80076aa:	6825      	ldr	r5, [r4, #0]
 80076ac:	f015 0506 	ands.w	r5, r5, #6
 80076b0:	d106      	bne.n	80076c0 <_printf_common+0x48>
 80076b2:	f104 0a19 	add.w	sl, r4, #25
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	6832      	ldr	r2, [r6, #0]
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dc26      	bgt.n	800770e <_printf_common+0x96>
 80076c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c4:	1e13      	subs	r3, r2, #0
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	0692      	lsls	r2, r2, #26
 80076ce:	d42b      	bmi.n	8007728 <_printf_common+0xb0>
 80076d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d4:	4649      	mov	r1, r9
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c0      	blx	r8
 80076da:	3001      	adds	r0, #1
 80076dc:	d01e      	beq.n	800771c <_printf_common+0xa4>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	f003 0306 	and.w	r3, r3, #6
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	bf02      	ittt	eq
 80076ea:	68e5      	ldreq	r5, [r4, #12]
 80076ec:	6833      	ldreq	r3, [r6, #0]
 80076ee:	1aed      	subeq	r5, r5, r3
 80076f0:	68a3      	ldr	r3, [r4, #8]
 80076f2:	bf0c      	ite	eq
 80076f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f8:	2500      	movne	r5, #0
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bfc4      	itt	gt
 80076fe:	1a9b      	subgt	r3, r3, r2
 8007700:	18ed      	addgt	r5, r5, r3
 8007702:	2600      	movs	r6, #0
 8007704:	341a      	adds	r4, #26
 8007706:	42b5      	cmp	r5, r6
 8007708:	d11a      	bne.n	8007740 <_printf_common+0xc8>
 800770a:	2000      	movs	r0, #0
 800770c:	e008      	b.n	8007720 <_printf_common+0xa8>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4649      	mov	r1, r9
 8007714:	4638      	mov	r0, r7
 8007716:	47c0      	blx	r8
 8007718:	3001      	adds	r0, #1
 800771a:	d103      	bne.n	8007724 <_printf_common+0xac>
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	3501      	adds	r5, #1
 8007726:	e7c6      	b.n	80076b6 <_printf_common+0x3e>
 8007728:	18e1      	adds	r1, r4, r3
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	2030      	movs	r0, #48	; 0x30
 800772e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007732:	4422      	add	r2, r4
 8007734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800773c:	3302      	adds	r3, #2
 800773e:	e7c7      	b.n	80076d0 <_printf_common+0x58>
 8007740:	2301      	movs	r3, #1
 8007742:	4622      	mov	r2, r4
 8007744:	4649      	mov	r1, r9
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d0e6      	beq.n	800771c <_printf_common+0xa4>
 800774e:	3601      	adds	r6, #1
 8007750:	e7d9      	b.n	8007706 <_printf_common+0x8e>
	...

08007754 <_printf_i>:
 8007754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	7e0f      	ldrb	r7, [r1, #24]
 800775a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800775c:	2f78      	cmp	r7, #120	; 0x78
 800775e:	4691      	mov	r9, r2
 8007760:	4680      	mov	r8, r0
 8007762:	460c      	mov	r4, r1
 8007764:	469a      	mov	sl, r3
 8007766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800776a:	d807      	bhi.n	800777c <_printf_i+0x28>
 800776c:	2f62      	cmp	r7, #98	; 0x62
 800776e:	d80a      	bhi.n	8007786 <_printf_i+0x32>
 8007770:	2f00      	cmp	r7, #0
 8007772:	f000 80d4 	beq.w	800791e <_printf_i+0x1ca>
 8007776:	2f58      	cmp	r7, #88	; 0x58
 8007778:	f000 80c0 	beq.w	80078fc <_printf_i+0x1a8>
 800777c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007784:	e03a      	b.n	80077fc <_printf_i+0xa8>
 8007786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800778a:	2b15      	cmp	r3, #21
 800778c:	d8f6      	bhi.n	800777c <_printf_i+0x28>
 800778e:	a101      	add	r1, pc, #4	; (adr r1, 8007794 <_printf_i+0x40>)
 8007790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007794:	080077ed 	.word	0x080077ed
 8007798:	08007801 	.word	0x08007801
 800779c:	0800777d 	.word	0x0800777d
 80077a0:	0800777d 	.word	0x0800777d
 80077a4:	0800777d 	.word	0x0800777d
 80077a8:	0800777d 	.word	0x0800777d
 80077ac:	08007801 	.word	0x08007801
 80077b0:	0800777d 	.word	0x0800777d
 80077b4:	0800777d 	.word	0x0800777d
 80077b8:	0800777d 	.word	0x0800777d
 80077bc:	0800777d 	.word	0x0800777d
 80077c0:	08007905 	.word	0x08007905
 80077c4:	0800782d 	.word	0x0800782d
 80077c8:	080078bf 	.word	0x080078bf
 80077cc:	0800777d 	.word	0x0800777d
 80077d0:	0800777d 	.word	0x0800777d
 80077d4:	08007927 	.word	0x08007927
 80077d8:	0800777d 	.word	0x0800777d
 80077dc:	0800782d 	.word	0x0800782d
 80077e0:	0800777d 	.word	0x0800777d
 80077e4:	0800777d 	.word	0x0800777d
 80077e8:	080078c7 	.word	0x080078c7
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	1d1a      	adds	r2, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	602a      	str	r2, [r5, #0]
 80077f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077fc:	2301      	movs	r3, #1
 80077fe:	e09f      	b.n	8007940 <_printf_i+0x1ec>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	0607      	lsls	r7, r0, #24
 8007806:	f103 0104 	add.w	r1, r3, #4
 800780a:	6029      	str	r1, [r5, #0]
 800780c:	d501      	bpl.n	8007812 <_printf_i+0xbe>
 800780e:	681e      	ldr	r6, [r3, #0]
 8007810:	e003      	b.n	800781a <_printf_i+0xc6>
 8007812:	0646      	lsls	r6, r0, #25
 8007814:	d5fb      	bpl.n	800780e <_printf_i+0xba>
 8007816:	f9b3 6000 	ldrsh.w	r6, [r3]
 800781a:	2e00      	cmp	r6, #0
 800781c:	da03      	bge.n	8007826 <_printf_i+0xd2>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	4276      	negs	r6, r6
 8007822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007826:	485a      	ldr	r0, [pc, #360]	; (8007990 <_printf_i+0x23c>)
 8007828:	230a      	movs	r3, #10
 800782a:	e012      	b.n	8007852 <_printf_i+0xfe>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6820      	ldr	r0, [r4, #0]
 8007830:	1d19      	adds	r1, r3, #4
 8007832:	6029      	str	r1, [r5, #0]
 8007834:	0605      	lsls	r5, r0, #24
 8007836:	d501      	bpl.n	800783c <_printf_i+0xe8>
 8007838:	681e      	ldr	r6, [r3, #0]
 800783a:	e002      	b.n	8007842 <_printf_i+0xee>
 800783c:	0641      	lsls	r1, r0, #25
 800783e:	d5fb      	bpl.n	8007838 <_printf_i+0xe4>
 8007840:	881e      	ldrh	r6, [r3, #0]
 8007842:	4853      	ldr	r0, [pc, #332]	; (8007990 <_printf_i+0x23c>)
 8007844:	2f6f      	cmp	r7, #111	; 0x6f
 8007846:	bf0c      	ite	eq
 8007848:	2308      	moveq	r3, #8
 800784a:	230a      	movne	r3, #10
 800784c:	2100      	movs	r1, #0
 800784e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007852:	6865      	ldr	r5, [r4, #4]
 8007854:	60a5      	str	r5, [r4, #8]
 8007856:	2d00      	cmp	r5, #0
 8007858:	bfa2      	ittt	ge
 800785a:	6821      	ldrge	r1, [r4, #0]
 800785c:	f021 0104 	bicge.w	r1, r1, #4
 8007860:	6021      	strge	r1, [r4, #0]
 8007862:	b90e      	cbnz	r6, 8007868 <_printf_i+0x114>
 8007864:	2d00      	cmp	r5, #0
 8007866:	d04b      	beq.n	8007900 <_printf_i+0x1ac>
 8007868:	4615      	mov	r5, r2
 800786a:	fbb6 f1f3 	udiv	r1, r6, r3
 800786e:	fb03 6711 	mls	r7, r3, r1, r6
 8007872:	5dc7      	ldrb	r7, [r0, r7]
 8007874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007878:	4637      	mov	r7, r6
 800787a:	42bb      	cmp	r3, r7
 800787c:	460e      	mov	r6, r1
 800787e:	d9f4      	bls.n	800786a <_printf_i+0x116>
 8007880:	2b08      	cmp	r3, #8
 8007882:	d10b      	bne.n	800789c <_printf_i+0x148>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07de      	lsls	r6, r3, #31
 8007888:	d508      	bpl.n	800789c <_printf_i+0x148>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	bfde      	ittt	le
 8007892:	2330      	movle	r3, #48	; 0x30
 8007894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800789c:	1b52      	subs	r2, r2, r5
 800789e:	6122      	str	r2, [r4, #16]
 80078a0:	f8cd a000 	str.w	sl, [sp]
 80078a4:	464b      	mov	r3, r9
 80078a6:	aa03      	add	r2, sp, #12
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f7ff fee4 	bl	8007678 <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d14a      	bne.n	800794a <_printf_i+0x1f6>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b004      	add	sp, #16
 80078ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f043 0320 	orr.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	4833      	ldr	r0, [pc, #204]	; (8007994 <_printf_i+0x240>)
 80078c8:	2778      	movs	r7, #120	; 0x78
 80078ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	6829      	ldr	r1, [r5, #0]
 80078d2:	061f      	lsls	r7, r3, #24
 80078d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80078d8:	d402      	bmi.n	80078e0 <_printf_i+0x18c>
 80078da:	065f      	lsls	r7, r3, #25
 80078dc:	bf48      	it	mi
 80078de:	b2b6      	uxthmi	r6, r6
 80078e0:	07df      	lsls	r7, r3, #31
 80078e2:	bf48      	it	mi
 80078e4:	f043 0320 	orrmi.w	r3, r3, #32
 80078e8:	6029      	str	r1, [r5, #0]
 80078ea:	bf48      	it	mi
 80078ec:	6023      	strmi	r3, [r4, #0]
 80078ee:	b91e      	cbnz	r6, 80078f8 <_printf_i+0x1a4>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	f023 0320 	bic.w	r3, r3, #32
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	2310      	movs	r3, #16
 80078fa:	e7a7      	b.n	800784c <_printf_i+0xf8>
 80078fc:	4824      	ldr	r0, [pc, #144]	; (8007990 <_printf_i+0x23c>)
 80078fe:	e7e4      	b.n	80078ca <_printf_i+0x176>
 8007900:	4615      	mov	r5, r2
 8007902:	e7bd      	b.n	8007880 <_printf_i+0x12c>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	6826      	ldr	r6, [r4, #0]
 8007908:	6961      	ldr	r1, [r4, #20]
 800790a:	1d18      	adds	r0, r3, #4
 800790c:	6028      	str	r0, [r5, #0]
 800790e:	0635      	lsls	r5, r6, #24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	d501      	bpl.n	8007918 <_printf_i+0x1c4>
 8007914:	6019      	str	r1, [r3, #0]
 8007916:	e002      	b.n	800791e <_printf_i+0x1ca>
 8007918:	0670      	lsls	r0, r6, #25
 800791a:	d5fb      	bpl.n	8007914 <_printf_i+0x1c0>
 800791c:	8019      	strh	r1, [r3, #0]
 800791e:	2300      	movs	r3, #0
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	4615      	mov	r5, r2
 8007924:	e7bc      	b.n	80078a0 <_printf_i+0x14c>
 8007926:	682b      	ldr	r3, [r5, #0]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	602a      	str	r2, [r5, #0]
 800792c:	681d      	ldr	r5, [r3, #0]
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	2100      	movs	r1, #0
 8007932:	4628      	mov	r0, r5
 8007934:	f7f8 fc74 	bl	8000220 <memchr>
 8007938:	b108      	cbz	r0, 800793e <_printf_i+0x1ea>
 800793a:	1b40      	subs	r0, r0, r5
 800793c:	6060      	str	r0, [r4, #4]
 800793e:	6863      	ldr	r3, [r4, #4]
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	2300      	movs	r3, #0
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007948:	e7aa      	b.n	80078a0 <_printf_i+0x14c>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	462a      	mov	r2, r5
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d0ad      	beq.n	80078b4 <_printf_i+0x160>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	079b      	lsls	r3, r3, #30
 800795c:	d413      	bmi.n	8007986 <_printf_i+0x232>
 800795e:	68e0      	ldr	r0, [r4, #12]
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	4298      	cmp	r0, r3
 8007964:	bfb8      	it	lt
 8007966:	4618      	movlt	r0, r3
 8007968:	e7a6      	b.n	80078b8 <_printf_i+0x164>
 800796a:	2301      	movs	r3, #1
 800796c:	4632      	mov	r2, r6
 800796e:	4649      	mov	r1, r9
 8007970:	4640      	mov	r0, r8
 8007972:	47d0      	blx	sl
 8007974:	3001      	adds	r0, #1
 8007976:	d09d      	beq.n	80078b4 <_printf_i+0x160>
 8007978:	3501      	adds	r5, #1
 800797a:	68e3      	ldr	r3, [r4, #12]
 800797c:	9903      	ldr	r1, [sp, #12]
 800797e:	1a5b      	subs	r3, r3, r1
 8007980:	42ab      	cmp	r3, r5
 8007982:	dcf2      	bgt.n	800796a <_printf_i+0x216>
 8007984:	e7eb      	b.n	800795e <_printf_i+0x20a>
 8007986:	2500      	movs	r5, #0
 8007988:	f104 0619 	add.w	r6, r4, #25
 800798c:	e7f5      	b.n	800797a <_printf_i+0x226>
 800798e:	bf00      	nop
 8007990:	08007bb9 	.word	0x08007bb9
 8007994:	08007bca 	.word	0x08007bca

08007998 <memmove>:
 8007998:	4288      	cmp	r0, r1
 800799a:	b510      	push	{r4, lr}
 800799c:	eb01 0402 	add.w	r4, r1, r2
 80079a0:	d902      	bls.n	80079a8 <memmove+0x10>
 80079a2:	4284      	cmp	r4, r0
 80079a4:	4623      	mov	r3, r4
 80079a6:	d807      	bhi.n	80079b8 <memmove+0x20>
 80079a8:	1e43      	subs	r3, r0, #1
 80079aa:	42a1      	cmp	r1, r4
 80079ac:	d008      	beq.n	80079c0 <memmove+0x28>
 80079ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079b6:	e7f8      	b.n	80079aa <memmove+0x12>
 80079b8:	4402      	add	r2, r0
 80079ba:	4601      	mov	r1, r0
 80079bc:	428a      	cmp	r2, r1
 80079be:	d100      	bne.n	80079c2 <memmove+0x2a>
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ca:	e7f7      	b.n	80079bc <memmove+0x24>

080079cc <_sbrk_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d06      	ldr	r5, [pc, #24]	; (80079e8 <_sbrk_r+0x1c>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7fa fb30 	bl	800203c <_sbrk>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_sbrk_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_sbrk_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	200007f8 	.word	0x200007f8

080079ec <memcpy>:
 80079ec:	440a      	add	r2, r1
 80079ee:	4291      	cmp	r1, r2
 80079f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f4:	d100      	bne.n	80079f8 <memcpy+0xc>
 80079f6:	4770      	bx	lr
 80079f8:	b510      	push	{r4, lr}
 80079fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a02:	4291      	cmp	r1, r2
 8007a04:	d1f9      	bne.n	80079fa <memcpy+0xe>
 8007a06:	bd10      	pop	{r4, pc}

08007a08 <_realloc_r>:
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	4614      	mov	r4, r2
 8007a10:	460e      	mov	r6, r1
 8007a12:	b921      	cbnz	r1, 8007a1e <_realloc_r+0x16>
 8007a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a18:	4611      	mov	r1, r2
 8007a1a:	f7ff bc49 	b.w	80072b0 <_malloc_r>
 8007a1e:	b92a      	cbnz	r2, 8007a2c <_realloc_r+0x24>
 8007a20:	f7ff fbda 	bl	80071d8 <_free_r>
 8007a24:	4625      	mov	r5, r4
 8007a26:	4628      	mov	r0, r5
 8007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2c:	f000 f81b 	bl	8007a66 <_malloc_usable_size_r>
 8007a30:	4284      	cmp	r4, r0
 8007a32:	4607      	mov	r7, r0
 8007a34:	d802      	bhi.n	8007a3c <_realloc_r+0x34>
 8007a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a3a:	d812      	bhi.n	8007a62 <_realloc_r+0x5a>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4640      	mov	r0, r8
 8007a40:	f7ff fc36 	bl	80072b0 <_malloc_r>
 8007a44:	4605      	mov	r5, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0ed      	beq.n	8007a26 <_realloc_r+0x1e>
 8007a4a:	42bc      	cmp	r4, r7
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4631      	mov	r1, r6
 8007a50:	bf28      	it	cs
 8007a52:	463a      	movcs	r2, r7
 8007a54:	f7ff ffca 	bl	80079ec <memcpy>
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	f7ff fbbc 	bl	80071d8 <_free_r>
 8007a60:	e7e1      	b.n	8007a26 <_realloc_r+0x1e>
 8007a62:	4635      	mov	r5, r6
 8007a64:	e7df      	b.n	8007a26 <_realloc_r+0x1e>

08007a66 <_malloc_usable_size_r>:
 8007a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6a:	1f18      	subs	r0, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfbc      	itt	lt
 8007a70:	580b      	ldrlt	r3, [r1, r0]
 8007a72:	18c0      	addlt	r0, r0, r3
 8007a74:	4770      	bx	lr
	...

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
