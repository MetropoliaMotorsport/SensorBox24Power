
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f78  08006f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006f98  08006f98  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f98  08006f98  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00007f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00007f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006fa0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000000c  08006fac  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08006fac  00008668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015820  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a46  00000000  00000000  0001d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000202a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f77  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207b4  00000000  00000000  00022637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ed5  00000000  00000000  00042deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6b7  00000000  00000000  00057cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  001323bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00137a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f60 	.word	0x08006f60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006f60 	.word	0x08006f60

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(check_bit(PWM_out_enable,1) != 0){
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <set_pwm_duty_cycle+0x84>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fd58 	bl	8000cdc <check_bit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d010      	beq.n	8000254 <set_pwm_duty_cycle+0x3c>
		PWM_speed[0] = (PWM_width[0] * 40)/100;
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4613      	mov	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4a18      	ldr	r2, [pc, #96]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 8000242:	fb82 1203 	smull	r1, r2, r2, r3
 8000246:	1152      	asrs	r2, r2, #5
 8000248:	17db      	asrs	r3, r3, #31
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000250:	801a      	strh	r2, [r3, #0]
 8000252:	e002      	b.n	800025a <set_pwm_duty_cycle+0x42>
	}else{
		PWM_speed[0] = 0;
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
	}
	if(check_bit(PWM_out_enable,0) != 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <set_pwm_duty_cycle+0x84>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fd3b 	bl	8000cdc <check_bit>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d010      	beq.n	800028e <set_pwm_duty_cycle+0x76>
		PWM_speed[1] = (PWM_width[1] * 40)/100;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 800026e:	885b      	ldrh	r3, [r3, #2]
 8000270:	461a      	mov	r2, r3
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 800027c:	fb82 1203 	smull	r1, r2, r2, r3
 8000280:	1152      	asrs	r2, r2, #5
 8000282:	17db      	asrs	r3, r3, #31
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	b29a      	uxth	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 800028a:	805a      	strh	r2, [r3, #2]
	}else{
		PWM_speed[1] = 0;
	}
}
 800028c:	e002      	b.n	8000294 <set_pwm_duty_cycle+0x7c>
		PWM_speed[1] = 0;
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	805a      	strh	r2, [r3, #2]
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000604 	.word	0x20000604
 80002a0:	20000608 	.word	0x20000608
 80002a4:	51eb851f 	.word	0x51eb851f
 80002a8:	2000060c 	.word	0x2000060c

080002ac <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80002b0:	f000 f802 	bl	80002b8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Config_1>:

void Config_1(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 80002be:	af00      	add	r7, sp, #0

	CAN_ID = 17;
 80002c0:	4bbc      	ldr	r3, [pc, #752]	@ (80005b4 <Config_1+0x2fc>)
 80002c2:	2211      	movs	r2, #17
 80002c4:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 80002c6:	4bbc      	ldr	r3, [pc, #752]	@ (80005b8 <Config_1+0x300>)
 80002c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002cc:	801a      	strh	r2, [r3, #0]

	//definition of Outputs
	Outputs OUT0_1 = {NC, 2050, 1900, 0, OUT0_1_pin};
 80002ce:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80002d2:	224e      	movs	r2, #78	@ 0x4e
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f006 fe08 	bl	8006eec <memset>
 80002dc:	f640 0302 	movw	r3, #2050	@ 0x802
 80002e0:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
 80002e4:	f240 736c 	movw	r3, #1900	@ 0x76c
 80002e8:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234
	Outputs OUT1_1 = {NC, 2050, 1900, 0, OUT1_1_pin};
 80002ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80002f0:	224e      	movs	r2, #78	@ 0x4e
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f006 fdf9 	bl	8006eec <memset>
 80002fa:	f640 0302 	movw	r3, #2050	@ 0x802
 80002fe:	f8a7 31e2 	strh.w	r3, [r7, #482]	@ 0x1e2
 8000302:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000306:	f8a7 31e4 	strh.w	r3, [r7, #484]	@ 0x1e4
 800030a:	2301      	movs	r3, #1
 800030c:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
	Outputs OUT2_1 = {NC, 2050, 1900, 0, OUT2_1_pin};
 8000310:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000314:	224e      	movs	r2, #78	@ 0x4e
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f006 fde7 	bl	8006eec <memset>
 800031e:	f640 0302 	movw	r3, #2050	@ 0x802
 8000322:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
 8000326:	f240 736c 	movw	r3, #1900	@ 0x76c
 800032a:	f8a7 3194 	strh.w	r3, [r7, #404]	@ 0x194
 800032e:	2302      	movs	r3, #2
 8000330:	f887 3198 	strb.w	r3, [r7, #408]	@ 0x198
	Outputs OUT3_1 = {NC, 2050, 1900, 0, OUT3_1_pin};
 8000334:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000338:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800033c:	4618      	mov	r0, r3
 800033e:	234e      	movs	r3, #78	@ 0x4e
 8000340:	461a      	mov	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f006 fdd2 	bl	8006eec <memset>
 8000348:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800034c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000350:	f640 0202 	movw	r2, #2050	@ 0x802
 8000354:	805a      	strh	r2, [r3, #2]
 8000356:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800035a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800035e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000362:	809a      	strh	r2, [r3, #4]
 8000364:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000368:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800036c:	2203      	movs	r2, #3
 800036e:	721a      	strb	r2, [r3, #8]
	Outputs OUT0_2 = {NC, 2050, 1900, 0, OUT0_2_pin};
 8000370:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000374:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000378:	4618      	mov	r0, r3
 800037a:	234e      	movs	r3, #78	@ 0x4e
 800037c:	461a      	mov	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f006 fdb4 	bl	8006eec <memset>
 8000384:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000388:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800038c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000390:	805a      	strh	r2, [r3, #2]
 8000392:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000396:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800039a:	f240 726c 	movw	r2, #1900	@ 0x76c
 800039e:	809a      	strh	r2, [r3, #4]
 80003a0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80003a8:	2204      	movs	r2, #4
 80003aa:	721a      	strb	r2, [r3, #8]
	Outputs OUT1_2 = {NC, 2050, 1900, 0, OUT1_2_pin};
 80003ac:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80003b4:	4618      	mov	r0, r3
 80003b6:	234e      	movs	r3, #78	@ 0x4e
 80003b8:	461a      	mov	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f006 fd96 	bl	8006eec <memset>
 80003c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80003c8:	f640 0202 	movw	r2, #2050	@ 0x802
 80003cc:	805a      	strh	r2, [r3, #2]
 80003ce:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80003d6:	f240 726c 	movw	r2, #1900	@ 0x76c
 80003da:	809a      	strh	r2, [r3, #4]
 80003dc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80003e4:	2205      	movs	r2, #5
 80003e6:	721a      	strb	r2, [r3, #8]
	Outputs OUT2_2 = {NC, 2050, 1900, 0, OUT2_2_pin};
 80003e8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80003ec:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80003f0:	4618      	mov	r0, r3
 80003f2:	234e      	movs	r3, #78	@ 0x4e
 80003f4:	461a      	mov	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f006 fd78 	bl	8006eec <memset>
 80003fc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000400:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8000404:	f640 0202 	movw	r2, #2050	@ 0x802
 8000408:	805a      	strh	r2, [r3, #2]
 800040a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800040e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8000412:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000416:	809a      	strh	r2, [r3, #4]
 8000418:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800041c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8000420:	2206      	movs	r2, #6
 8000422:	721a      	strb	r2, [r3, #8]
	Outputs OUT3_2 = {NC, 2050, 1900, 0, OUT3_2_pin};
 8000424:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000428:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800042c:	4618      	mov	r0, r3
 800042e:	234e      	movs	r3, #78	@ 0x4e
 8000430:	461a      	mov	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f006 fd5a 	bl	8006eec <memset>
 8000438:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800043c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000440:	f640 0202 	movw	r2, #2050	@ 0x802
 8000444:	805a      	strh	r2, [r3, #2]
 8000446:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800044a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800044e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000452:	809a      	strh	r2, [r3, #4]
 8000454:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000458:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800045c:	2207      	movs	r2, #7
 800045e:	721a      	strb	r2, [r3, #8]

	outputs[OUT0_1.pin] = OUT0_1;
 8000460:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8000464:	4619      	mov	r1, r3
 8000466:	4a55      	ldr	r2, [pc, #340]	@ (80005bc <Config_1+0x304>)
 8000468:	234e      	movs	r3, #78	@ 0x4e
 800046a:	fb01 f303 	mul.w	r3, r1, r3
 800046e:	4413      	add	r3, r2
 8000470:	4618      	mov	r0, r3
 8000472:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000476:	224e      	movs	r2, #78	@ 0x4e
 8000478:	4619      	mov	r1, r3
 800047a:	f006 fd63 	bl	8006f44 <memcpy>
	outputs[OUT1_1.pin] = OUT1_1;
 800047e:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 8000482:	4619      	mov	r1, r3
 8000484:	4a4d      	ldr	r2, [pc, #308]	@ (80005bc <Config_1+0x304>)
 8000486:	234e      	movs	r3, #78	@ 0x4e
 8000488:	fb01 f303 	mul.w	r3, r1, r3
 800048c:	4413      	add	r3, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000494:	224e      	movs	r2, #78	@ 0x4e
 8000496:	4619      	mov	r1, r3
 8000498:	f006 fd54 	bl	8006f44 <memcpy>
	outputs[OUT2_1.pin] = OUT2_1;
 800049c:	f897 3198 	ldrb.w	r3, [r7, #408]	@ 0x198
 80004a0:	4619      	mov	r1, r3
 80004a2:	4a46      	ldr	r2, [pc, #280]	@ (80005bc <Config_1+0x304>)
 80004a4:	234e      	movs	r3, #78	@ 0x4e
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80004b2:	224e      	movs	r2, #78	@ 0x4e
 80004b4:	4619      	mov	r1, r3
 80004b6:	f006 fd45 	bl	8006f44 <memcpy>
	outputs[OUT3_1.pin] = OUT3_1;
 80004ba:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80004be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80004c2:	7a1b      	ldrb	r3, [r3, #8]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4a3d      	ldr	r2, [pc, #244]	@ (80005bc <Config_1+0x304>)
 80004c8:	234e      	movs	r3, #78	@ 0x4e
 80004ca:	fb01 f303 	mul.w	r3, r1, r3
 80004ce:	441a      	add	r2, r3
 80004d0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80004d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80004d8:	4610      	mov	r0, r2
 80004da:	4619      	mov	r1, r3
 80004dc:	234e      	movs	r3, #78	@ 0x4e
 80004de:	461a      	mov	r2, r3
 80004e0:	f006 fd30 	bl	8006f44 <memcpy>
	outputs[OUT0_2.pin] = OUT0_2;
 80004e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80004e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80004ec:	7a1b      	ldrb	r3, [r3, #8]
 80004ee:	4619      	mov	r1, r3
 80004f0:	4a32      	ldr	r2, [pc, #200]	@ (80005bc <Config_1+0x304>)
 80004f2:	234e      	movs	r3, #78	@ 0x4e
 80004f4:	fb01 f303 	mul.w	r3, r1, r3
 80004f8:	441a      	add	r2, r3
 80004fa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80004fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000502:	4610      	mov	r0, r2
 8000504:	4619      	mov	r1, r3
 8000506:	234e      	movs	r3, #78	@ 0x4e
 8000508:	461a      	mov	r2, r3
 800050a:	f006 fd1b 	bl	8006f44 <memcpy>
	outputs[OUT1_2.pin] = OUT1_2;
 800050e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000512:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	4619      	mov	r1, r3
 800051a:	4a28      	ldr	r2, [pc, #160]	@ (80005bc <Config_1+0x304>)
 800051c:	234e      	movs	r3, #78	@ 0x4e
 800051e:	fb01 f303 	mul.w	r3, r1, r3
 8000522:	441a      	add	r2, r3
 8000524:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000528:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800052c:	4610      	mov	r0, r2
 800052e:	4619      	mov	r1, r3
 8000530:	234e      	movs	r3, #78	@ 0x4e
 8000532:	461a      	mov	r2, r3
 8000534:	f006 fd06 	bl	8006f44 <memcpy>
	outputs[OUT2_2.pin] = OUT2_2;
 8000538:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800053c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8000540:	7a1b      	ldrb	r3, [r3, #8]
 8000542:	4619      	mov	r1, r3
 8000544:	4a1d      	ldr	r2, [pc, #116]	@ (80005bc <Config_1+0x304>)
 8000546:	234e      	movs	r3, #78	@ 0x4e
 8000548:	fb01 f303 	mul.w	r3, r1, r3
 800054c:	441a      	add	r2, r3
 800054e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000552:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8000556:	4610      	mov	r0, r2
 8000558:	4619      	mov	r1, r3
 800055a:	234e      	movs	r3, #78	@ 0x4e
 800055c:	461a      	mov	r2, r3
 800055e:	f006 fcf1 	bl	8006f44 <memcpy>
	outputs[OUT3_2.pin] = OUT3_2;
 8000562:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000566:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800056a:	7a1b      	ldrb	r3, [r3, #8]
 800056c:	4619      	mov	r1, r3
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <Config_1+0x304>)
 8000570:	234e      	movs	r3, #78	@ 0x4e
 8000572:	fb01 f303 	mul.w	r3, r1, r3
 8000576:	441a      	add	r2, r3
 8000578:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800057c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8000580:	4610      	mov	r0, r2
 8000582:	4619      	mov	r1, r3
 8000584:	234e      	movs	r3, #78	@ 0x4e
 8000586:	461a      	mov	r2, r3
 8000588:	f006 fcdc 	bl	8006f44 <memcpy>

	Default_Switch_State = 0b00000000; //each bit represent one output [8,7,6,5,4,3,2,1]
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <Config_1+0x308>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

	PWM_out_enable = 0b11;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <Config_1+0x30c>)
 8000594:	2203      	movs	r2, #3
 8000596:	701a      	strb	r2, [r3, #0]

	//Duty cycle 0-100%
	PWM_width[0] = 10;
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <Config_1+0x310>)
 800059a:	220a      	movs	r2, #10
 800059c:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 10;
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <Config_1+0x310>)
 80005a0:	220a      	movs	r2, #10
 80005a2:	805a      	strh	r2, [r3, #2]

	switch_output();
 80005a4:	f000 f8c2 	bl	800072c <switch_output>

}
 80005a8:	bf00      	nop
 80005aa:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000610 	.word	0x20000610
 80005b8:	20000612 	.word	0x20000612
 80005bc:	20000388 	.word	0x20000388
 80005c0:	200005fb 	.word	0x200005fb
 80005c4:	20000604 	.word	0x20000604
 80005c8:	20000608 	.word	0x20000608

080005cc <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d01d      	beq.n	800061c <HAL_FDCAN_RxFifo0Callback+0x50>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80005e2:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f003 fb90 	bl	8003d0c <HAL_FDCAN_GetRxMessage>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 80005f2:	f001 f8ed 	bl	80017d0 <Error_Handler>
 80005f6:	e007      	b.n	8000608 <HAL_FDCAN_RxFifo0Callback+0x3c>
		}else{
			if(RxHeader.Identifier == CAN_ID){
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005fe:	7812      	ldrb	r2, [r2, #0]
 8000600:	4293      	cmp	r3, r2
 8000602:	d101      	bne.n	8000608 <HAL_FDCAN_RxFifo0Callback+0x3c>
				decode();
 8000604:	f000 f94a 	bl	800089c <decode>
			}
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f003 fc97 	bl	8003f40 <HAL_FDCAN_ActivateNotification>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <HAL_FDCAN_RxFifo0Callback+0x50>
		{
			/* Notification Error */
			Error_Handler();
 8000618:	f001 f8da 	bl	80017d0 <Error_Handler>
		}
	}
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	20000638 	.word	0x20000638
 800062c:	20000610 	.word	0x20000610

08000630 <CanSend>:

void CanSend(uint8_t *TxData){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000638:	e006      	b.n	8000648 <CanSend+0x18>
		Error_Handler();
 800063a:	f001 f8c9 	bl	80017d0 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	480a      	ldr	r0, [pc, #40]	@ (800066c <CanSend+0x3c>)
 8000644:	f004 f944 	bl	80048d0 <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <CanSend+0x40>)
 800064a:	f003 fc67 	bl	8003f1c <HAL_FDCAN_GetTxFifoFreeLevel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <CanSend+0x34>
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	4907      	ldr	r1, [pc, #28]	@ (8000674 <CanSend+0x44>)
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <CanSend+0x40>)
 800065a:	f003 fb13 	bl	8003c84 <HAL_FDCAN_AddMessageToTxFifoQ>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ea      	bne.n	800063a <CanSend+0xa>
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	48000400 	.word	0x48000400
 8000670:	20000110 	.word	0x20000110
 8000674:	20000614 	.word	0x20000614

08000678 <CAN_switch_state>:

//function to send state of switches on CAN, for debugging!
void CAN_switch_state(uint8_t values){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData1[5];
	uint8_t TxData2[5];

	if(can_select == 0){
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <CAN_switch_state+0xac>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d121      	bne.n	80006ce <CAN_switch_state+0x56>
		TxData1[0] = 11;
 800068a:	230b      	movs	r3, #11
 800068c:	743b      	strb	r3, [r7, #16]
		for(int i = 1; i < 5;i++){
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	e014      	b.n	80006be <CAN_switch_state+0x46>
			TxData1[i] = check_bit(Default_Switch_State,i-1);
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <CAN_switch_state+0xb0>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	3b01      	subs	r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	4610      	mov	r0, r2
 80006a4:	f000 fb1a 	bl	8000cdc <check_bit>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4619      	mov	r1, r3
 80006ac:	f107 0210 	add.w	r2, r7, #16
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	4413      	add	r3, r2
 80006b4:	460a      	mov	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3301      	adds	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	dde7      	ble.n	8000694 <CAN_switch_state+0x1c>
		}
		CanSend(TxData1);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffb1 	bl	8000630 <CanSend>
	}
	if(can_select == 1){
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <CAN_switch_state+0xac>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d121      	bne.n	800071a <CAN_switch_state+0xa2>
		TxData2[0] = 12;
 80006d6:	230c      	movs	r3, #12
 80006d8:	723b      	strb	r3, [r7, #8]
		for(int i = 1; i < 5;i++){
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	e014      	b.n	800070a <CAN_switch_state+0x92>
			TxData2[i] = check_bit(Default_Switch_State,i+3);
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <CAN_switch_state+0xb0>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3303      	adds	r3, #3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	4610      	mov	r0, r2
 80006f0:	f000 faf4 	bl	8000cdc <check_bit>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4619      	mov	r1, r3
 80006f8:	f107 0208 	add.w	r2, r7, #8
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	2b04      	cmp	r3, #4
 800070e:	dde7      	ble.n	80006e0 <CAN_switch_state+0x68>
		}
		CanSend(TxData2);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff8b 	bl	8000630 <CanSend>
	}
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200005fa 	.word	0x200005fa
 8000728:	200005fb 	.word	0x200005fb

0800072c <switch_output>:



void switch_output(){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e065      	b.n	800080c <switch_output+0xe0>
		bit = check_bit(Default_Switch_State, i);
 8000740:	4b36      	ldr	r3, [pc, #216]	@ (800081c <switch_output+0xf0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fac7 	bl	8000cdc <check_bit>
 800074e:	4603      	mov	r3, r0
 8000750:	71bb      	strb	r3, [r7, #6]
		switch(i){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b07      	cmp	r3, #7
 8000756:	d853      	bhi.n	8000800 <switch_output+0xd4>
 8000758:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <switch_output+0x34>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000781 	.word	0x08000781
 8000764:	0800078f 	.word	0x0800078f
 8000768:	080007a1 	.word	0x080007a1
 800076c:	080007b3 	.word	0x080007b3
 8000770:	080007c5 	.word	0x080007c5
 8000774:	080007d5 	.word	0x080007d5
 8000778:	080007e5 	.word	0x080007e5
 800077c:	080007f3 	.word	0x080007f3
		case 0:
			HAL_GPIO_WritePin(GPIOB,IN0_Pin,bit);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	2108      	movs	r1, #8
 8000786:	4826      	ldr	r0, [pc, #152]	@ (8000820 <switch_output+0xf4>)
 8000788:	f004 f8a2 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 800078c:	e03b      	b.n	8000806 <switch_output+0xda>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	461a      	mov	r2, r3
 8000792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f004 f899 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 800079e:	e032      	b.n	8000806 <switch_output+0xda>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f004 f890 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007b0:	e029      	b.n	8000806 <switch_output+0xda>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f004 f887 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007c2:	e020      	b.n	8000806 <switch_output+0xda>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	461a      	mov	r2, r3
 80007c8:	2110      	movs	r1, #16
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ce:	f004 f87f 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007d2:	e018      	b.n	8000806 <switch_output+0xda>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	461a      	mov	r2, r3
 80007d8:	2102      	movs	r1, #2
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f004 f877 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007e2:	e010      	b.n	8000806 <switch_output+0xda>
		case 6:
			HAL_GPIO_WritePin(GPIOB,IN2_2_Pin,bit);
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <switch_output+0xf4>)
 80007ec:	f004 f870 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007f0:	e009      	b.n	8000806 <switch_output+0xda>
		case 7:
			HAL_GPIO_WritePin(GPIOB,IN3_2_Pin,bit);
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2110      	movs	r1, #16
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <switch_output+0xf4>)
 80007fa:	f004 f869 	bl	80048d0 <HAL_GPIO_WritePin>
			break;
 80007fe:	e002      	b.n	8000806 <switch_output+0xda>
		default:
			Error_Handler();
 8000800:	f000 ffe6 	bl	80017d0 <Error_Handler>
			break;
 8000804:	bf00      	nop
	for(i = 0; i < 8;i++){
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	3301      	adds	r3, #1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b07      	cmp	r3, #7
 8000810:	d996      	bls.n	8000740 <switch_output+0x14>
		}
	}
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200005fb 	.word	0x200005fb
 8000820:	48000400 	.word	0x48000400

08000824 <Over_current>:

void Over_current(uint8_t output_pin){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <Over_current+0x24>)
 8000830:	220f      	movs	r2, #15
 8000832:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <Over_current+0x24>)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <Over_current+0x24>)
 800083c:	f7ff fef8 	bl	8000630 <CanSend>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000030 	.word	0x20000030

0800084c <Warning_current>:

void Warning_current(uint8_t output_pin){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <Warning_current+0x24>)
 8000858:	220e      	movs	r2, #14
 800085a:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <Warning_current+0x24>)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 8000862:	4803      	ldr	r0, [pc, #12]	@ (8000870 <Warning_current+0x24>)
 8000864:	f7ff fee4 	bl	8000630 <CanSend>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000030 	.word	0x20000030

08000874 <Under_current>:

void Under_current(uint8_t output_pin){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 13;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <Under_current+0x24>)
 8000880:	220d      	movs	r2, #13
 8000882:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <Under_current+0x24>)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800088a:	4803      	ldr	r0, [pc, #12]	@ (8000898 <Under_current+0x24>)
 800088c:	f7ff fed0 	bl	8000630 <CanSend>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000030 	.word	0x20000030

0800089c <decode>:

void decode(){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 80008a2:	4b36      	ldr	r3, [pc, #216]	@ (800097c <decode+0xe0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d860      	bhi.n	800096e <decode+0xd2>
 80008ac:	a201      	add	r2, pc, #4	@ (adr r2, 80008b4 <decode+0x18>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008ff 	.word	0x080008ff
 80008bc:	0800091f 	.word	0x0800091f
 80008c0:	08000931 	.word	0x08000931
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 80008c4:	4b2d      	ldr	r3, [pc, #180]	@ (800097c <decode+0xe0>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d002      	beq.n	80008d2 <decode+0x36>
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d009      	beq.n	80008e4 <decode+0x48>
 80008d0:	e011      	b.n	80008f6 <decode+0x5a>
		case 1:										//PUMPS
			PWM_width[0] = RxData[2];
 80008d2:	4b2a      	ldr	r3, [pc, #168]	@ (800097c <decode+0xe0>)
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <decode+0xe4>)
 80008da:	801a      	strh	r2, [r3, #0]
			set_pwm_duty_cycle(&htim1);
 80008dc:	4829      	ldr	r0, [pc, #164]	@ (8000984 <decode+0xe8>)
 80008de:	f7ff fc9b 	bl	8000218 <set_pwm_duty_cycle>
			break;
 80008e2:	e00b      	b.n	80008fc <decode+0x60>
		case 2:										//FANS
			PWM_width[1] = RxData[2];
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <decode+0xe0>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <decode+0xe4>)
 80008ec:	805a      	strh	r2, [r3, #2]
			set_pwm_duty_cycle(&htim2);
 80008ee:	4826      	ldr	r0, [pc, #152]	@ (8000988 <decode+0xec>)
 80008f0:	f7ff fc92 	bl	8000218 <set_pwm_duty_cycle>
			break;
 80008f4:	e002      	b.n	80008fc <decode+0x60>
		default:
			Error_Handler();
 80008f6:	f000 ff6b 	bl	80017d0 <Error_Handler>
			break;
 80008fa:	bf00      	nop
		}
		break;
 80008fc:	e03a      	b.n	8000974 <decode+0xd8>
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <decode+0xf0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4a1e      	ldr	r2, [pc, #120]	@ (800097c <decode+0xe0>)
 8000904:	7851      	ldrb	r1, [r2, #1]
 8000906:	4a1d      	ldr	r2, [pc, #116]	@ (800097c <decode+0xe0>)
 8000908:	7892      	ldrb	r2, [r2, #2]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fa02 	bl	8000d14 <set_bit>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <decode+0xf0>)
 8000916:	701a      	strb	r2, [r3, #0]
		switch_output();
 8000918:	f7ff ff08 	bl	800072c <switch_output>
		break;
 800091c:	e02a      	b.n	8000974 <decode+0xd8>
	case 3:							// turning analog node on and off, RxData[1] -> 0 is off 1 is on
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,RxData[1]);
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <decode+0xe0>)
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	461a      	mov	r2, r3
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f003 ffd1 	bl	80048d0 <HAL_GPIO_WritePin>
		break;
 800092e:	e021      	b.n	8000974 <decode+0xd8>
	case 4:							//switch BRAKE_LIGHT	RxData[1] --> 0 for off and 1 for on
		for(int i = 0; i < 8; i++){
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	e017      	b.n	8000966 <decode+0xca>
			if(output_list[i] == BRAKE_LIGHT){
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <decode+0xf4>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10e      	bne.n	8000960 <decode+0xc4>
				Default_Switch_State = set_bit(Default_Switch_State,i,RxData[1]);
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <decode+0xf0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	b2d1      	uxtb	r1, r2
 800094a:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <decode+0xe0>)
 800094c:	7852      	ldrb	r2, [r2, #1]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f9e0 	bl	8000d14 <set_bit>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <decode+0xf0>)
 800095a:	701a      	strb	r2, [r3, #0]
				switch_output();
 800095c:	f7ff fee6 	bl	800072c <switch_output>
		for(int i = 0; i < 8; i++){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b07      	cmp	r3, #7
 800096a:	dde4      	ble.n	8000936 <decode+0x9a>
			}
		}
		break;
 800096c:	e002      	b.n	8000974 <decode+0xd8>
	default:
		//decode_error(); //TODO: IMPLEMENT
		Error_Handler();
 800096e:	f000 ff2f 	bl	80017d0 <Error_Handler>
		break;
 8000972:	bf00      	nop
	}
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000028 	.word	0x20000028
 8000980:	20000608 	.word	0x20000608
 8000984:	20000174 	.word	0x20000174
 8000988:	200001c0 	.word	0x200001c0
 800098c:	200005fb 	.word	0x200005fb
 8000990:	200005fc 	.word	0x200005fc

08000994 <Current_Sense_process>:



void Current_Sense_process(){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	for(int i = 0; i < 8; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e051      	b.n	8000a44 <Current_Sense_process+0xb0>
		outputs[i].raw_current = outputs[i].Current_Sense[0];
 80009a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a58 <Current_Sense_process+0xc4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	214e      	movs	r1, #78	@ 0x4e
 80009a6:	fb01 f303 	mul.w	r3, r1, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	330e      	adds	r3, #14
 80009ae:	8818      	ldrh	r0, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	@ (8000a58 <Current_Sense_process+0xc4>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	214e      	movs	r1, #78	@ 0x4e
 80009b6:	fb01 f303 	mul.w	r3, r1, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	330c      	adds	r3, #12
 80009be:	4602      	mov	r2, r0
 80009c0:	801a      	strh	r2, [r3, #0]
		for(int z = 1; z < I_AVERAGE; z++){
 80009c2:	2301      	movs	r3, #1
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	e021      	b.n	8000a0c <Current_Sense_process+0x78>
			outputs[i].raw_current = (outputs[i].raw_current + outputs[i].Current_Sense[0])/2;
 80009c8:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <Current_Sense_process+0xc4>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	214e      	movs	r1, #78	@ 0x4e
 80009ce:	fb01 f303 	mul.w	r3, r1, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	330c      	adds	r3, #12
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <Current_Sense_process+0xc4>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	214e      	movs	r1, #78	@ 0x4e
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	330e      	adds	r3, #14
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4403      	add	r3, r0
 80009ec:	0fda      	lsrs	r2, r3, #31
 80009ee:	4413      	add	r3, r2
 80009f0:	105b      	asrs	r3, r3, #1
 80009f2:	b298      	uxth	r0, r3
 80009f4:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <Current_Sense_process+0xc4>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	214e      	movs	r1, #78	@ 0x4e
 80009fa:	fb01 f303 	mul.w	r3, r1, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	330c      	adds	r3, #12
 8000a02:	4602      	mov	r2, r0
 8000a04:	801a      	strh	r2, [r3, #0]
		for(int z = 1; z < I_AVERAGE; z++){
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	2b1f      	cmp	r3, #31
 8000a10:	ddda      	ble.n	80009c8 <Current_Sense_process+0x34>

		}
		outputs[i].actual_current = Current_Sense_Raw_to_mA(outputs[i].raw_current);
 8000a12:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <Current_Sense_process+0xc4>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	214e      	movs	r1, #78	@ 0x4e
 8000a18:	fb01 f303 	mul.w	r3, r1, r3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	330c      	adds	r3, #12
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f99c 	bl	8000d60 <Current_Sense_Raw_to_mA>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <Current_Sense_process+0xc4>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	214e      	movs	r1, #78	@ 0x4e
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	330a      	adds	r3, #10
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3301      	adds	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	ddaa      	ble.n	80009a0 <Current_Sense_process+0xc>
	}
	check_warnings();
 8000a4a:	f000 f807 	bl	8000a5c <check_warnings>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000388 	.word	0x20000388

08000a5c <check_warnings>:

void check_warnings(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 8000a62:	2300      	movs	r3, #0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	e060      	b.n	8000b2a <check_warnings+0xce>
		if(outputs[x].device != NC){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4a34      	ldr	r2, [pc, #208]	@ (8000b3c <check_warnings+0xe0>)
 8000a6c:	214e      	movs	r1, #78	@ 0x4e
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d03e      	beq.n	8000af8 <check_warnings+0x9c>
			if(outputs[x].actual_current >= outputs[x].Warning_Current){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b3c <check_warnings+0xe0>)
 8000a7e:	214e      	movs	r1, #78	@ 0x4e
 8000a80:	fb01 f303 	mul.w	r3, r1, r3
 8000a84:	4413      	add	r3, r2
 8000a86:	330a      	adds	r3, #10
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	492b      	ldr	r1, [pc, #172]	@ (8000b3c <check_warnings+0xe0>)
 8000a8e:	204e      	movs	r0, #78	@ 0x4e
 8000a90:	fb00 f303 	mul.w	r3, r0, r3
 8000a94:	440b      	add	r3, r1
 8000a96:	3304      	adds	r3, #4
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d32c      	bcc.n	8000af8 <check_warnings+0x9c>
				if(outputs[x].actual_current >= outputs[x].Over_Current){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a26      	ldr	r2, [pc, #152]	@ (8000b3c <check_warnings+0xe0>)
 8000aa2:	214e      	movs	r1, #78	@ 0x4e
 8000aa4:	fb01 f303 	mul.w	r3, r1, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	330a      	adds	r3, #10
 8000aac:	881a      	ldrh	r2, [r3, #0]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4922      	ldr	r1, [pc, #136]	@ (8000b3c <check_warnings+0xe0>)
 8000ab2:	204e      	movs	r0, #78	@ 0x4e
 8000ab4:	fb00 f303 	mul.w	r3, r0, r3
 8000ab8:	440b      	add	r3, r1
 8000aba:	3302      	adds	r3, #2
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d316      	bcc.n	8000af0 <check_warnings+0x94>
					Default_Switch_State = set_bit(Default_Switch_State, outputs[x].pin, 0);
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <check_warnings+0xe4>)
 8000ac4:	7818      	ldrb	r0, [r3, #0]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <check_warnings+0xe0>)
 8000aca:	214e      	movs	r1, #78	@ 0x4e
 8000acc:	fb01 f303 	mul.w	r3, r1, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f000 f91b 	bl	8000d14 <set_bit>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <check_warnings+0xe4>)
 8000ae4:	701a      	strb	r2, [r3, #0]
					Over_current(x);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe9b 	bl	8000824 <Over_current>
 8000aee:	e003      	b.n	8000af8 <check_warnings+0x9c>
				}else{
					Warning_current(x);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff feaa 	bl	800084c <Warning_current>
				}
			}
		}
		if(outputs[x].actual_current < outputs[x].Under_Current){
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <check_warnings+0xe0>)
 8000afc:	214e      	movs	r1, #78	@ 0x4e
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	330a      	adds	r3, #10
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <check_warnings+0xe0>)
 8000b0c:	204e      	movs	r0, #78	@ 0x4e
 8000b0e:	fb00 f303 	mul.w	r3, r0, r3
 8000b12:	440b      	add	r3, r1
 8000b14:	3306      	adds	r3, #6
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d203      	bcs.n	8000b24 <check_warnings+0xc8>
			Under_current(x);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fea8 	bl	8000874 <Under_current>
	for(uint8_t x = 0; x < 7; x++){
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	3301      	adds	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d99b      	bls.n	8000a68 <check_warnings+0xc>
		}
	}
	switch_output();
 8000b30:	f7ff fdfc 	bl	800072c <switch_output>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000388 	.word	0x20000388
 8000b40:	200005fb 	.word	0x200005fb

08000b44 <ConfigureCurrentSense>:


void ConfigureCurrentSense(uint8_t SEL0, uint8_t SEL1){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB,SEL0_Pin,SEL0);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	461a      	mov	r2, r3
 8000b58:	2140      	movs	r1, #64	@ 0x40
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <ConfigureCurrentSense+0x30>)
 8000b5c:	f003 feb8 	bl	80048d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,SEL1_Pin,SEL1);
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	461a      	mov	r2, r3
 8000b64:	2120      	movs	r1, #32
 8000b66:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <ConfigureCurrentSense+0x30>)
 8000b68:	f003 feb2 	bl	80048d0 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	48000400 	.word	0x48000400

08000b78 <ReadADCValues>:

void ReadADCValues(uint16_t *adc1_values, uint16_t *adc2_values){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < I_AVERAGE; i++){
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e048      	b.n	8000c1a <ReadADCValues+0xa2>
		if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000b88:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <ReadADCValues+0xb4>)
 8000b8a:	f001 fdb7 	bl	80026fc <HAL_ADC_Start>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <ReadADCValues+0x20>
 8000b94:	f000 fe1c 	bl	80017d0 <Error_Handler>
		if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000b98:	4825      	ldr	r0, [pc, #148]	@ (8000c30 <ReadADCValues+0xb8>)
 8000b9a:	f001 fdaf 	bl	80026fc <HAL_ADC_Start>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <ReadADCValues+0x30>
 8000ba4:	f000 fe14 	bl	80017d0 <Error_Handler>
		if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000ba8:	2164      	movs	r1, #100	@ 0x64
 8000baa:	4820      	ldr	r0, [pc, #128]	@ (8000c2c <ReadADCValues+0xb4>)
 8000bac:	f001 fe96 	bl	80028dc <HAL_ADC_PollForConversion>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <ReadADCValues+0x42>
 8000bb6:	f000 fe0b 	bl	80017d0 <Error_Handler>
		if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000bba:	2164      	movs	r1, #100	@ 0x64
 8000bbc:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <ReadADCValues+0xb8>)
 8000bbe:	f001 fe8d 	bl	80028dc <HAL_ADC_PollForConversion>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <ReadADCValues+0x54>
 8000bc8:	f000 fe02 	bl	80017d0 <Error_Handler>
        adc1_values[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000bcc:	4817      	ldr	r0, [pc, #92]	@ (8000c2c <ReadADCValues+0xb4>)
 8000bce:	f001 ff5d 	bl	8002a8c <HAL_ADC_GetValue>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b28a      	uxth	r2, r1
 8000bde:	801a      	strh	r2, [r3, #0]
        adc2_values[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000be0:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <ReadADCValues+0xb8>)
 8000be2:	f001 ff53 	bl	8002a8c <HAL_ADC_GetValue>
 8000be6:	4601      	mov	r1, r0
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b28a      	uxth	r2, r1
 8000bf2:	801a      	strh	r2, [r3, #0]
		if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <ReadADCValues+0xb4>)
 8000bf6:	f001 fe3d 	bl	8002874 <HAL_ADC_Stop>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <ReadADCValues+0x8c>
 8000c00:	f000 fde6 	bl	80017d0 <Error_Handler>
		if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000c04:	480a      	ldr	r0, [pc, #40]	@ (8000c30 <ReadADCValues+0xb8>)
 8000c06:	f001 fe35 	bl	8002874 <HAL_ADC_Stop>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <ReadADCValues+0x9c>
 8000c10:	f000 fdde 	bl	80017d0 <Error_Handler>
	for(int i = 0; i < I_AVERAGE; i++){
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b1f      	cmp	r3, #31
 8000c1e:	ddb3      	ble.n	8000b88 <ReadADCValues+0x10>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000038 	.word	0x20000038
 8000c30:	200000a4 	.word	0x200000a4

08000c34 <Current_Sense_read>:

void Current_Sense_read(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	for(int x = 0;x < 5; x++){
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e034      	b.n	8000caa <Current_Sense_read+0x76>
		switch(x){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d82e      	bhi.n	8000ca4 <Current_Sense_read+0x70>
 8000c46:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <Current_Sense_read+0x18>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c6f 	.word	0x08000c6f
 8000c54:	08000c81 	.word	0x08000c81
 8000c58:	08000c93 	.word	0x08000c93
		case 0:
			ConfigureCurrentSense(0, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ff70 	bl	8000b44 <ConfigureCurrentSense>
			ReadADCValues(outputs[0].Current_Sense, outputs[4].Current_Sense);
 8000c64:	4915      	ldr	r1, [pc, #84]	@ (8000cbc <Current_Sense_read+0x88>)
 8000c66:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <Current_Sense_read+0x8c>)
 8000c68:	f7ff ff86 	bl	8000b78 <ReadADCValues>
			break;
 8000c6c:	e01a      	b.n	8000ca4 <Current_Sense_read+0x70>
		case 1:
			ConfigureCurrentSense(0, 1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ff67 	bl	8000b44 <ConfigureCurrentSense>
			ReadADCValues(outputs[1].Current_Sense, outputs[5].Current_Sense);
 8000c76:	4913      	ldr	r1, [pc, #76]	@ (8000cc4 <Current_Sense_read+0x90>)
 8000c78:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <Current_Sense_read+0x94>)
 8000c7a:	f7ff ff7d 	bl	8000b78 <ReadADCValues>
			break;
 8000c7e:	e011      	b.n	8000ca4 <Current_Sense_read+0x70>
		case 2:
			ConfigureCurrentSense(1, 0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff ff5e 	bl	8000b44 <ConfigureCurrentSense>
			ReadADCValues(outputs[2].Current_Sense, outputs[6].Current_Sense);
 8000c88:	4910      	ldr	r1, [pc, #64]	@ (8000ccc <Current_Sense_read+0x98>)
 8000c8a:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <Current_Sense_read+0x9c>)
 8000c8c:	f7ff ff74 	bl	8000b78 <ReadADCValues>
			break;
 8000c90:	e008      	b.n	8000ca4 <Current_Sense_read+0x70>
		case 3:
			ConfigureCurrentSense(1, 1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff55 	bl	8000b44 <ConfigureCurrentSense>
			ReadADCValues(outputs[3].Current_Sense, outputs[7].Current_Sense);
 8000c9a:	490e      	ldr	r1, [pc, #56]	@ (8000cd4 <Current_Sense_read+0xa0>)
 8000c9c:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <Current_Sense_read+0xa4>)
 8000c9e:	f7ff ff6b 	bl	8000b78 <ReadADCValues>
			break;
 8000ca2:	bf00      	nop
	for(int x = 0;x < 5; x++){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	ddc7      	ble.n	8000c40 <Current_Sense_read+0xc>
		}
	}
	Current_Sense_process();
 8000cb0:	f7ff fe70 	bl	8000994 <Current_Sense_process>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200004ce 	.word	0x200004ce
 8000cc0:	20000396 	.word	0x20000396
 8000cc4:	2000051c 	.word	0x2000051c
 8000cc8:	200003e4 	.word	0x200003e4
 8000ccc:	2000056a 	.word	0x2000056a
 8000cd0:	20000432 	.word	0x20000432
 8000cd4:	200005b8 	.word	0x200005b8
 8000cd8:	20000480 	.word	0x20000480

08000cdc <check_bit>:

uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <check_bit+0x2a>
		return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <check_bit+0x2c>
	}else{
		return 0;
 8000d06:	2300      	movs	r3, #0
	}
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	71bb      	strb	r3, [r7, #6]
 8000d22:	4613      	mov	r3, r2
 8000d24:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000d30:	797b      	ldrb	r3, [r7, #5]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d104      	bne.n	8000d40 <set_bit+0x2c>
		byte |= mask;
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	e008      	b.n	8000d52 <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <Current_Sense_Raw_to_mA>:

uint16_t Current_Sense_Raw_to_mA(uint16_t raw){
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000d6a:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000d6e:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	817b      	strh	r3, [r7, #10]

	//current = raw*max_mA / 4095;
	current = raw*3300 / 4095;
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <Current_Sense_Raw_to_mA+0x3c>)
 8000d80:	fb82 1203 	smull	r1, r2, r2, r3
 8000d84:	441a      	add	r2, r3
 8000d86:	12d2      	asrs	r2, r2, #11
 8000d88:	17db      	asrs	r3, r3, #31
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	817b      	strh	r3, [r7, #10]

	return current;
 8000d8e:	897b      	ldrh	r3, [r7, #10]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	80080081 	.word	0x80080081

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f001 f819 	bl	8001dda <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000da8:	f7ff fa80 	bl	80002ac <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f880 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f000 fcac 	bl	800170c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000db4:	f000 f8c6 	bl	8000f44 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000db8:	f000 f9c6 	bl	8001148 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000dbc:	f000 fa2c 	bl	8001218 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000dc0:	f000 fada 	bl	8001378 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dc4:	f000 fb4e 	bl	8001464 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dc8:	f000 fb9a 	bl	8001500 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000dcc:	f000 fc0c 	bl	80015e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000dd0:	f000 fc40 	bl	8001654 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000dd4:	f000 fc74 	bl	80016c0 <MX_TIM16_Init>
  MX_ADC2_Init();
 8000dd8:	f000 f950 	bl	800107c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f003 fd74 	bl	80048d0 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Init(&htim1);
 8000de8:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <main+0xf0>)
 8000dea:	f004 fde5 	bl	80059b8 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000dee:	4829      	ldr	r0, [pc, #164]	@ (8000e94 <main+0xf4>)
 8000df0:	f004 fde2 	bl	80059b8 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000df4:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <main+0xf8>)
 8000df6:	f004 fd75 	bl	80058e4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4824      	ldr	r0, [pc, #144]	@ (8000e90 <main+0xf0>)
 8000dfe:	f004 fe3d 	bl	8005a7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4823      	ldr	r0, [pc, #140]	@ (8000e94 <main+0xf4>)
 8000e06:	f004 fe39 	bl	8005a7c <HAL_TIM_PWM_Start>

  set_pwm_duty_cycle(&htim1);
 8000e0a:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <main+0xf0>)
 8000e0c:	f7ff fa04 	bl	8000218 <set_pwm_duty_cycle>
  set_pwm_duty_cycle(&htim2);
 8000e10:	4820      	ldr	r0, [pc, #128]	@ (8000e94 <main+0xf4>)
 8000e12:	f7ff fa01 	bl	8000218 <set_pwm_duty_cycle>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 8000e16:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <main+0xfc>)
 8000e18:	f002 ff0c 	bl	8003c34 <HAL_FDCAN_Start>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <main+0x88>
 8000e22:	f000 fcd5 	bl	80017d0 <Error_Handler>
 8000e26:	e004      	b.n	8000e32 <main+0x92>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	481c      	ldr	r0, [pc, #112]	@ (8000ea0 <main+0x100>)
 8000e2e:	f003 fd4f 	bl	80048d0 <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000e32:	2200      	movs	r2, #0
 8000e34:	2101      	movs	r1, #1
 8000e36:	4819      	ldr	r0, [pc, #100]	@ (8000e9c <main+0xfc>)
 8000e38:	f003 f882 	bl	8003f40 <HAL_FDCAN_ActivateNotification>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <main+0xa6>
 8000e42:	f000 fcc5 	bl	80017d0 <Error_Handler>

  HAL_Delay(2000);
 8000e46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e4a:	f001 f837 	bl	8001ebc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e56:	f003 fd3b 	bl	80048d0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <main+0x104>)
 8000e5c:	881a      	ldrh	r2, [r3, #0]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <main+0xf0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	635a      	str	r2, [r3, #52]	@ 0x34

		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PWM_speed[1]);
 8000e64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <main+0x104>)
 8000e66:	885a      	ldrh	r2, [r3, #2]
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <main+0xf4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	635a      	str	r2, [r3, #52]	@ 0x34
	  if(millis % 100 == 0){
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <main+0x108>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <main+0x10c>)
 8000e74:	fba2 1203 	umull	r1, r2, r2, r3
 8000e78:	0952      	lsrs	r2, r2, #5
 8000e7a:	2164      	movs	r1, #100	@ 0x64
 8000e7c:	fb01 f202 	mul.w	r2, r1, r2
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e8      	bne.n	8000e5a <main+0xba>

		  Current_Sense_read();
 8000e88:	f7ff fed4 	bl	8000c34 <Current_Sense_read>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8000e8c:	e7e5      	b.n	8000e5a <main+0xba>
 8000e8e:	bf00      	nop
 8000e90:	20000174 	.word	0x20000174
 8000e94:	200001c0 	.word	0x200001c0
 8000e98:	2000020c 	.word	0x2000020c
 8000e9c:	20000110 	.word	0x20000110
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	2000060c 	.word	0x2000060c
 8000ea8:	200005f8 	.word	0x200005f8
 8000eac:	51eb851f 	.word	0x51eb851f

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	@ 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2238      	movs	r2, #56	@ 0x38
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 f814 	bl	8006eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ed6:	f003 fd13 	bl	8004900 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ede:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fdaf 	bl	8004a68 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000f10:	f000 fc5e 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 f8ad 	bl	800508c <HAL_RCC_ClockConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f38:	f000 fc4a 	bl	80017d0 <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3750      	adds	r7, #80	@ 0x50
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 ffc5 	bl	8006eec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4b42      	ldr	r3, [pc, #264]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f6a:	4b40      	ldr	r3, [pc, #256]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f72:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f78:	4b3c      	ldr	r3, [pc, #240]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f84:	4b39      	ldr	r3, [pc, #228]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f90:	4b36      	ldr	r3, [pc, #216]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f96:	4b35      	ldr	r3, [pc, #212]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	@ (800106c <MX_ADC1_Init+0x128>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8000faa:	4b30      	ldr	r3, [pc, #192]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd2:	4826      	ldr	r0, [pc, #152]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fd4:	f001 fa0e 	bl	80023f4 <HAL_ADC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000fde:	f000 fbf7 	bl	80017d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	481f      	ldr	r0, [pc, #124]	@ (800106c <MX_ADC1_Init+0x128>)
 8000fee:	f002 fb13 	bl	8003618 <HAL_ADCEx_MultiModeConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000ff8:	f000 fbea 	bl	80017d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <MX_ADC1_Init+0x12c>)
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001004:	2302      	movs	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001008:	237f      	movs	r3, #127	@ 0x7f
 800100a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800100c:	2304      	movs	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4814      	ldr	r0, [pc, #80]	@ (800106c <MX_ADC1_Init+0x128>)
 800101a:	f001 fd45 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001024:	f000 fbd4 	bl	80017d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <MX_ADC1_Init+0x130>)
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800102c:	230c      	movs	r3, #12
 800102e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <MX_ADC1_Init+0x128>)
 8001036:	f001 fd37 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001040:	f000 fbc6 	bl	80017d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_ADC1_Init+0x134>)
 8001046:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001048:	2312      	movs	r3, #18
 800104a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_ADC1_Init+0x128>)
 8001056:	f001 fd27 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001060:	f000 fbb6 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	@ 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000038 	.word	0x20000038
 8001070:	04300002 	.word	0x04300002
 8001074:	0c900008 	.word	0x0c900008
 8001078:	10c00010 	.word	0x10c00010

0800107c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f005 ff2f 	bl	8006eec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_ADC2_Init+0xc0>)
 8001090:	4a2b      	ldr	r2, [pc, #172]	@ (8001140 <MX_ADC2_Init+0xc4>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC2_Init+0xc0>)
 8001096:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800109a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_ADC2_Init+0xc0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC2_Init+0xc0>)
 80010f8:	f001 f97c 	bl	80023f4 <HAL_ADC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001102:	f000 fb65 	bl	80017d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC2_Init+0xc8>)
 8001108:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800110e:	2302      	movs	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC2_Init+0xc0>)
 8001124:	f001 fcc0 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800112e:	f000 fb4f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000a4 	.word	0x200000a4
 8001140:	50000100 	.word	0x50000100
 8001144:	0c900008 	.word	0x0c900008

08001148 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800114c:	4b2e      	ldr	r3, [pc, #184]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800114e:	4a2f      	ldr	r2, [pc, #188]	@ (800120c <MX_FDCAN1_Init+0xc4>)
 8001150:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001158:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800117e:	2201      	movs	r2, #1
 8001180:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001184:	220d      	movs	r2, #13
 8001186:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800118a:	2202      	movs	r2, #2
 800118c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001190:	2201      	movs	r2, #1
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 8001196:	2201      	movs	r2, #1
 8001198:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 800119c:	2201      	movs	r2, #1
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 80011a8:	221c      	movs	r2, #28
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_FDCAN1_Init+0xc0>)
 80011ba:	f002 fbe1 	bl	8003980 <HAL_FDCAN_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80011c4:	f000 fb04 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_FDCAN1_Init+0xc8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011d0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011e0:	2205      	movs	r2, #5
 80011e2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <MX_FDCAN1_Init+0xcc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000110 	.word	0x20000110
 800120c:	40006400 	.word	0x40006400
 8001210:	20000610 	.word	0x20000610
 8001214:	20000614 	.word	0x20000614

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09c      	sub	sp, #112	@ 0x70
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001238:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2234      	movs	r2, #52	@ 0x34
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fe4a 	bl	8006eec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001258:	4b45      	ldr	r3, [pc, #276]	@ (8001370 <MX_TIM1_Init+0x158>)
 800125a:	4a46      	ldr	r2, [pc, #280]	@ (8001374 <MX_TIM1_Init+0x15c>)
 800125c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800125e:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001260:	220f      	movs	r2, #15
 8001262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 800126a:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <MX_TIM1_Init+0x158>)
 800126c:	2227      	movs	r2, #39	@ 0x27
 800126e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b3f      	ldr	r3, [pc, #252]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001276:	4b3e      	ldr	r3, [pc, #248]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <MX_TIM1_Init+0x158>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001282:	483b      	ldr	r0, [pc, #236]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001284:	f004 fad6 	bl	8005834 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800128e:	f000 fa9f 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800129c:	4619      	mov	r1, r3
 800129e:	4834      	ldr	r0, [pc, #208]	@ (8001370 <MX_TIM1_Init+0x158>)
 80012a0:	f004 ff50 	bl	8006144 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012aa:	f000 fa91 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ae:	4830      	ldr	r0, [pc, #192]	@ (8001370 <MX_TIM1_Init+0x158>)
 80012b0:	f004 fb82 	bl	80059b8 <HAL_TIM_PWM_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ba:	f000 fa89 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ce:	4619      	mov	r1, r3
 80012d0:	4827      	ldr	r0, [pc, #156]	@ (8001370 <MX_TIM1_Init+0x158>)
 80012d2:	f005 fcb7 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012dc:	f000 fa78 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	@ 0x60
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001306:	f004 fe09 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001310:	f000 fa5e 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001352:	f005 fcf9 	bl	8006d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800135c:	f000 fa38 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM1_Init+0x158>)
 8001362:	f000 fc19 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3770      	adds	r7, #112	@ 0x70
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000174 	.word	0x20000174
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	@ 0x38
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80013b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013b4:	220f      	movs	r2, #15
 80013b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80013be:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013c0:	2227      	movs	r2, #39	@ 0x27
 80013c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d0:	4823      	ldr	r0, [pc, #140]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013d2:	f004 fa2f 	bl	8005834 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013dc:	f000 f9f8 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	481c      	ldr	r0, [pc, #112]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013ee:	f004 fea9 	bl	8006144 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013f8:	f000 f9ea 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fc:	4818      	ldr	r0, [pc, #96]	@ (8001460 <MX_TIM2_Init+0xe8>)
 80013fe:	f004 fadb 	bl	80059b8 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001408:	f000 f9e2 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	@ (8001460 <MX_TIM2_Init+0xe8>)
 800141c:	f005 fc12 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001426:	f000 f9d3 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	@ 0x60
 800142c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	@ (8001460 <MX_TIM2_Init+0xe8>)
 8001442:	f004 fd6b 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800144c:	f000 f9c0 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001450:	4803      	ldr	r0, [pc, #12]	@ (8001460 <MX_TIM2_Init+0xe8>)
 8001452:	f000 fba1 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3738      	adds	r7, #56	@ 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001c0 	.word	0x200001c0

08001464 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM3_Init+0x94>)
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <MX_TIM3_Init+0x98>)
 8001486:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_TIM3_Init+0x94>)
 800148a:	223f      	movs	r2, #63	@ 0x3f
 800148c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM3_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM3_Init+0x94>)
 8001496:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800149a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_TIM3_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_TIM3_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <MX_TIM3_Init+0x94>)
 80014aa:	f004 f9c3 	bl	8005834 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014b4:	f000 f98c 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_TIM3_Init+0x94>)
 80014c6:	f004 fe3d 	bl	8006144 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 f97e 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM3_Init+0x94>)
 80014e2:	f005 fbaf 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f000 f970 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000020c 	.word	0x2000020c
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	@ 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001534:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <MX_TIM4_Init+0xe4>)
 8001536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001558:	4821      	ldr	r0, [pc, #132]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 800155a:	f004 f96b 	bl	8005834 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001564:	f000 f934 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001572:	4619      	mov	r1, r3
 8001574:	481a      	ldr	r0, [pc, #104]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001576:	f004 fde5 	bl	8006144 <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001580:	f000 f926 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 8001586:	f004 fa17 	bl	80059b8 <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001590:	f000 f91e 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 80015a4:	f005 fb4e 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f000 f90f 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	@ 0x60
 80015b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_TIM4_Init+0xe0>)
 80015ca:	f004 fca7 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015d4:	f000 f8fc 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	@ 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000258 	.word	0x20000258
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_TIM6_Init+0x64>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_TIM6_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_TIM6_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_TIM6_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_TIM6_Init+0x64>)
 800160c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001610:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_TIM6_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_TIM6_Init+0x64>)
 800161a:	f004 f90b 	bl	8005834 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001624:	f000 f8d4 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_TIM6_Init+0x64>)
 8001636:	f005 fb05 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001640:	f000 f8c6 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002a4 	.word	0x200002a4
 8001650:	40001000 	.word	0x40001000

08001654 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_TIM7_Init+0x64>)
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <MX_TIM7_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <MX_TIM7_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_TIM7_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_TIM7_Init+0x64>)
 8001678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_TIM7_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <MX_TIM7_Init+0x64>)
 8001686:	f004 f8d5 	bl	8005834 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001690:	f000 f89e 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_TIM7_Init+0x64>)
 80016a2:	f005 facf 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 f890 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	40001400 	.word	0x40001400

080016c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <MX_TIM16_Init+0x48>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_TIM16_Init+0x44>)
 80016f2:	f004 f89f 	bl	8005834 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80016fc:	f000 f868 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000033c 	.word	0x2000033c
 8001708:	40014400 	.word	0x40014400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_GPIO_Init+0xbc>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 800176a:	2200      	movs	r2, #0
 800176c:	f248 6192 	movw	r1, #34450	@ 0x8692
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f003 f8ac 	bl	80048d0 <HAL_GPIO_WritePin>
                          |IN2_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001778:	2200      	movs	r2, #0
 800177a:	21f9      	movs	r1, #249	@ 0xf9
 800177c:	4813      	ldr	r0, [pc, #76]	@ (80017cc <MX_GPIO_Init+0xc0>)
 800177e:	f003 f8a7 	bl	80048d0 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_2_Pin IN0_2_Pin LED2_Pin IN3_Pin
                           IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 8001782:	f248 6392 	movw	r3, #34450	@ 0x8692
 8001786:	60fb      	str	r3, [r7, #12]
                          |IN2_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179e:	f002 ff15 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 80017a2:	23f9      	movs	r3, #249	@ 0xf9
 80017a4:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_GPIO_Init+0xc0>)
 80017ba:	f002 ff07 	bl	80045cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <Error_Handler+0x8>

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001812:	f003 f919 	bl	8004a48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09c      	sub	sp, #112	@ 0x70
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	2244      	movs	r2, #68	@ 0x44
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fb51 	bl	8006eec <memset>
  if(hadc->Instance==ADC1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001852:	d13e      	bne.n	80018d2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001858:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800185a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800185e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fdf5 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001870:	f7ff ffae 	bl	80017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a39      	ldr	r2, [pc, #228]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 800187c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10b      	bne.n	800189e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a36      	ldr	r2, [pc, #216]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 800188c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b31      	ldr	r3, [pc, #196]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a30      	ldr	r2, [pc, #192]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80018b6:	230d      	movs	r3, #13
 80018b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018cc:	f002 fe7e 	bl	80045cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018d0:	e042      	b.n	8001958 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a24      	ldr	r2, [pc, #144]	@ (8001968 <HAL_ADC_MspInit+0x144>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d13d      	bne.n	8001958 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fdb1 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80018f8:	f7ff ff6a 	bl	80017d0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 8001904:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_ADC_MspInit+0x13c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d10b      	bne.n	8001926 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001914:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_ADC_MspInit+0x140>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800193e:	2340      	movs	r3, #64	@ 0x40
 8001940:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800194e:	4619      	mov	r1, r3
 8001950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001954:	f002 fe3a 	bl	80045cc <HAL_GPIO_Init>
}
 8001958:	bf00      	nop
 800195a:	3770      	adds	r7, #112	@ 0x70
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000660 	.word	0x20000660
 8001964:	40021000 	.word	0x40021000
 8001968:	50000100 	.word	0x50000100

0800196c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09a      	sub	sp, #104	@ 0x68
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2244      	movs	r2, #68	@ 0x44
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f005 faad 	bl	8006eec <memset>
  if(hfdcan->Instance==FDCAN1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a24      	ldr	r2, [pc, #144]	@ (8001a28 <HAL_FDCAN_MspInit+0xbc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d141      	bne.n	8001a20 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80019a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019a6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fd51 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80019b8:	f7ff ff0a 	bl	80017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_FDCAN_MspInit+0xc0>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019fe:	2309      	movs	r3, #9
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0c:	f002 fdde 	bl	80045cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2015      	movs	r0, #21
 8001a16:	f001 ff7e 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a1a:	2015      	movs	r0, #21
 8001a1c:	f001 ff95 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3768      	adds	r7, #104	@ 0x68
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40006400 	.word	0x40006400
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <HAL_TIM_Base_MspInit+0x14c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10c      	bne.n	8001a5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a42:	4b4f      	ldr	r3, [pc, #316]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a46:	4a4e      	ldr	r2, [pc, #312]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001a5a:	e08a      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a64:	d114      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b43      	ldr	r3, [pc, #268]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	201c      	movs	r0, #28
 8001a84:	f001 ff47 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a88:	201c      	movs	r0, #28
 8001a8a:	f001 ff5e 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8001a8e:	e070      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a3b      	ldr	r2, [pc, #236]	@ (8001b84 <HAL_TIM_Base_MspInit+0x154>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d114      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa6:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201d      	movs	r0, #29
 8001ab8:	f001 ff2d 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001abc:	201d      	movs	r0, #29
 8001abe:	f001 ff44 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8001ac2:	e056      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b88 <HAL_TIM_Base_MspInit+0x158>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d114      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ace:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201e      	movs	r0, #30
 8001aec:	f001 ff13 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001af0:	201e      	movs	r0, #30
 8001af2:	f001 ff2a 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8001af6:	e03c      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <HAL_TIM_Base_MspInit+0x15c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10c      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
}
 8001b1a:	e02a      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_TIM_Base_MspInit+0x160>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d114      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2037      	movs	r0, #55	@ 0x37
 8001b44:	f001 fee7 	bl	8003916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b48:	2037      	movs	r0, #55	@ 0x37
 8001b4a:	f001 fefe 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8001b4e:	e010      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_TIM_Base_MspInit+0x164>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5e:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_TIM_Base_MspInit+0x150>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	@ 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40001000 	.word	0x40001000
 8001b90:	40001400 	.word	0x40001400
 8001b94:	40014400 	.word	0x40014400

08001b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <HAL_TIM_MspPostInit+0xac>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d11e      	bne.n	8001bf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001be4:	2306      	movs	r3, #6
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf2:	f002 fceb 	bl	80045cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bf6:	e021      	b.n	8001c3c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c00:	d11c      	bne.n	8001c3c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_TIM_MspPostInit+0xb0>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c38:	f002 fcc8 	bl	80045cc <HAL_GPIO_Init>
}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	@ 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40012c00 	.word	0x40012c00
 8001c48:	40021000 	.word	0x40021000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <NMI_Handler+0x4>

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <MemManage_Handler+0x4>

08001c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca2:	f000 f8ed 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <FDCAN1_IT0_IRQHandler+0x10>)
 8001cb2:	f002 fa2b 	bl	800410c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000110 	.word	0x20000110

08001cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <TIM2_IRQHandler+0x10>)
 8001cc6:	f003 ffd9 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001c0 	.word	0x200001c0

08001cd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <TIM3_IRQHandler+0x58>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <TIM3_IRQHandler+0x58>)
 8001ce2:	801a      	strh	r2, [r3, #0]
	if(millis % (CAN_interval/2) == 0){
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <TIM3_IRQHandler+0x58>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <TIM3_IRQHandler+0x5c>)
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cf4:	fb01 f202 	mul.w	r2, r1, r2
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10f      	bne.n	8001d20 <TIM3_IRQHandler+0x4c>
		  CAN_switch_state(can_select);
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <TIM3_IRQHandler+0x60>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fcb7 	bl	8000678 <CAN_switch_state>
		  if(can_select == 0){
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <TIM3_IRQHandler+0x60>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <TIM3_IRQHandler+0x46>
			  can_select = 1;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <TIM3_IRQHandler+0x60>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e002      	b.n	8001d20 <TIM3_IRQHandler+0x4c>
		  }else{
			  can_select = 0;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <TIM3_IRQHandler+0x60>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
		  }
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <TIM3_IRQHandler+0x64>)
 8001d22:	f003 ffab 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200005f8 	.word	0x200005f8
 8001d30:	20000612 	.word	0x20000612
 8001d34:	200005fa 	.word	0x200005fa
 8001d38:	2000020c 	.word	0x2000020c

08001d3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <TIM4_IRQHandler+0x10>)
 8001d42:	f003 ff9b 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000258 	.word	0x20000258

08001d50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM7_IRQHandler+0x10>)
 8001d56:	f003 ff91 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002f0 	.word	0x200002f0

08001d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d88:	480d      	ldr	r0, [pc, #52]	@ (8001dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d8c:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8e:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d90:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <LoopForever+0xe>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da4:	4c0b      	ldr	r4, [pc, #44]	@ (8001dd4 <LoopForever+0x16>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001db2:	f7ff ffd7 	bl	8001d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f005 f8a1 	bl	8006efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dba:	f7fe fff1 	bl	8000da0 <main>

08001dbe <LoopForever>:

LoopForever:
    b LoopForever
 8001dbe:	e7fe      	b.n	8001dbe <LoopForever>
  ldr   r0, =_estack
 8001dc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dcc:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 8001dd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dd4:	20000668 	.word	0x20000668

08001dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC1_2_IRQHandler>

08001dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f001 fd8b 	bl	8003900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	200f      	movs	r0, #15
 8001dec:	f000 f80e 	bl	8001e0c <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e001      	b.n	8001e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dfc:	f7ff fcee 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e00:	79fb      	ldrb	r3, [r7, #7]

}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_InitTick+0x68>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d022      	beq.n	8001e66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_InitTick+0x6c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_InitTick+0x68>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fd96 	bl	8003966 <HAL_SYSTICK_Config>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10f      	bne.n	8001e60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	d809      	bhi.n	8001e5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e46:	2200      	movs	r2, #0
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4e:	f001 fd62 	bl	8003916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_InitTick+0x70>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e007      	b.n	8001e6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e004      	b.n	8001e6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e001      	b.n	8001e6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_IncTick+0x1c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a03      	ldr	r2, [pc, #12]	@ (8001e9c <HAL_IncTick+0x1c>)
 8001e90:	6013      	str	r3, [r2, #0]
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	20000664 	.word	0x20000664
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000664 	.word	0x20000664

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d004      	beq.n	8001ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_Delay+0x40>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee0:	bf00      	nop
 8001ee2:	f7ff ffdf 	bl	8001ea4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d8f7      	bhi.n	8001ee2 <HAL_Delay+0x26>
  {
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000008 	.word	0x20000008

08001f00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	609a      	str	r2, [r3, #8]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3360      	adds	r3, #96	@ 0x60
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <LL_ADC_SetOffset+0x44>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	03fff000 	.word	0x03fff000

08001fb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3360      	adds	r3, #96	@ 0x60
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3360      	adds	r3, #96	@ 0x60
 8001fec:	461a      	mov	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3360      	adds	r3, #96	@ 0x60
 8002022:	461a      	mov	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3360      	adds	r3, #96	@ 0x60
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	615a      	str	r2, [r3, #20]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3330      	adds	r3, #48	@ 0x30
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	4413      	add	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	211f      	movs	r1, #31
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 011f 	and.w	r1, r3, #31
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002122:	b480      	push	{r7}
 8002124:	b087      	sub	sp, #28
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3314      	adds	r3, #20
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0e5b      	lsrs	r3, r3, #25
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0d1b      	lsrs	r3, r3, #20
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2107      	movs	r1, #7
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	401a      	ands	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0d1b      	lsrs	r3, r3, #20
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	431a      	orrs	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0318 	and.w	r3, r3, #24
 800219a:	4908      	ldr	r1, [pc, #32]	@ (80021bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800219c:	40d9      	lsrs	r1, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	400b      	ands	r3, r1
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	0007ffff 	.word	0x0007ffff

080021c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 031f 	and.w	r3, r3, #31
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002208:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6093      	str	r3, [r2, #8]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800222c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002230:	d101      	bne.n	8002236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002258:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <LL_ADC_IsEnabled+0x18>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_ADC_IsEnabled+0x1a>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d101      	bne.n	8002322 <LL_ADC_IsDisableOngoing+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_IsDisableOngoing+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800236c:	f043 0210 	orr.w	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d101      	bne.n	8002398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e167      	b.n	80026de <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fa01 	bl	8001824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fef1 	bl	800221c <LL_ADC_IsDeepPowerDownEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fed7 	bl	80021f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff0c 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fef0 	bl	8002244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002464:	4ba0      	ldr	r3, [pc, #640]	@ (80026e8 <HAL_ADC_Init+0x2f4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	4aa0      	ldr	r2, [pc, #640]	@ (80026ec <HAL_ADC_Init+0x2f8>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002478:	e002      	b.n	8002480 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f9      	bne.n	800247a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff feee 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff62 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8100 	bne.w	80026cc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80fc 	bne.w	80026cc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024dc:	f043 0202 	orr.w	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fefb 	bl	80022e4 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024f8:	f7ff fef4 	bl	80022e4 <LL_ADC_IsEnabled>
 80024fc:	4604      	mov	r4, r0
 80024fe:	487c      	ldr	r0, [pc, #496]	@ (80026f0 <HAL_ADC_Init+0x2fc>)
 8002500:	f7ff fef0 	bl	80022e4 <LL_ADC_IsEnabled>
 8002504:	4603      	mov	r3, r0
 8002506:	4323      	orrs	r3, r4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4619      	mov	r1, r3
 8002512:	4878      	ldr	r0, [pc, #480]	@ (80026f4 <HAL_ADC_Init+0x300>)
 8002514:	f7ff fcf4 	bl	8001f00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7f5b      	ldrb	r3, [r3, #29]
 800251c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002522:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002528:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800252e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002536:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002542:	2b01      	cmp	r3, #1
 8002544:	d106      	bne.n	8002554 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	045b      	lsls	r3, r3, #17
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_ADC_Init+0x304>)
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	430b      	orrs	r3, r1
 8002582:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff15 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 80025a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d16d      	bne.n	8002688 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d16a      	bne.n	8002688 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ce:	f023 0302 	bic.w	r3, r3, #2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	430b      	orrs	r3, r1
 80025da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002600:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6911      	ldr	r1, [r2, #16]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002612:	e013      	b.n	800263c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002622:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002638:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002642:	2b01      	cmp	r3, #1
 8002644:	d118      	bne.n	8002678 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002668:	430a      	orrs	r2, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	e007      	b.n	8002688 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10c      	bne.n	80026aa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f023 010f 	bic.w	r1, r3, #15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a8:	e007      	b.n	80026ba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020f 	bic.w	r2, r2, #15
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ca:	e007      	b.n	80026dc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	f043 0210 	orr.w	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000
 80026ec:	053e2d63 	.word	0x053e2d63
 80026f0:	50000100 	.word	0x50000100
 80026f4:	50000300 	.word	0x50000300
 80026f8:	fff04007 	.word	0xfff04007

080026fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002704:	4859      	ldr	r0, [pc, #356]	@ (800286c <HAL_ADC_Start+0x170>)
 8002706:	f7ff fd5b 	bl	80021c0 <LL_ADC_GetMultimode>
 800270a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe35 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 809f 	bne.w	800285c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_Start+0x30>
 8002728:	2302      	movs	r3, #2
 800272a:	e09a      	b.n	8002862 <HAL_ADC_Start+0x166>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fe63 	bl	8003400 <ADC_Enable>
 800273a:	4603      	mov	r3, r0
 800273c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 8086 	bne.w	8002852 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a44      	ldr	r2, [pc, #272]	@ (8002870 <HAL_ADC_Start+0x174>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d002      	beq.n	800276a <HAL_ADC_Start+0x6e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	e001      	b.n	800276e <HAL_ADC_Start+0x72>
 800276a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4293      	cmp	r3, r2
 8002774:	d002      	beq.n	800277c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279a:	f023 0206 	bic.w	r2, r3, #6
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80027a2:	e002      	b.n	80027aa <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	221c      	movs	r2, #28
 80027b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2c      	ldr	r2, [pc, #176]	@ (8002870 <HAL_ADC_Start+0x174>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d002      	beq.n	80027ca <HAL_ADC_Start+0xce>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e001      	b.n	80027ce <HAL_ADC_Start+0xd2>
 80027ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d008      	beq.n	80027e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d002      	beq.n	80027e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d114      	bne.n	8002812 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fd90 	bl	8002330 <LL_ADC_REG_StartConversion>
 8002810:	e026      	b.n	8002860 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a13      	ldr	r2, [pc, #76]	@ (8002870 <HAL_ADC_Start+0x174>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d002      	beq.n	800282e <HAL_ADC_Start+0x132>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e001      	b.n	8002832 <HAL_ADC_Start+0x136>
 800282e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002832:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002848:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002850:	e006      	b.n	8002860 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800285a:	e001      	b.n	8002860 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	50000300 	.word	0x50000300
 8002870:	50000100 	.word	0x50000100

08002874 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ADC_Stop+0x16>
 8002886:	2302      	movs	r3, #2
 8002888:	e023      	b.n	80028d2 <HAL_ADC_Stop+0x5e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002892:	2103      	movs	r1, #3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fcf7 	bl	8003288 <ADC_ConversionStop>
 800289a:	4603      	mov	r3, r0
 800289c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fe31 	bl	800350c <ADC_Disable>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e6:	4867      	ldr	r0, [pc, #412]	@ (8002a84 <HAL_ADC_PollForConversion+0x1a8>)
 80028e8:	f7ff fc6a 	bl	80021c0 <LL_ADC_GetMultimode>
 80028ec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028f6:	2308      	movs	r3, #8
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e02a      	b.n	8002952 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d002      	beq.n	800290e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b09      	cmp	r3, #9
 800290c:	d111      	bne.n	8002932 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0a6      	b.n	8002a7a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800292c:	2304      	movs	r3, #4
 800292e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002930:	e00f      	b.n	8002952 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002932:	4854      	ldr	r0, [pc, #336]	@ (8002a84 <HAL_ADC_PollForConversion+0x1a8>)
 8002934:	f7ff fc52 	bl	80021dc <LL_ADC_GetMultiDMATransfer>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e095      	b.n	8002a7a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800294e:	2304      	movs	r3, #4
 8002950:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002952:	f7ff faa7 	bl	8001ea4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002958:	e021      	b.n	800299e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d01d      	beq.n	800299e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002962:	f7ff fa9f 	bl	8001ea4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <HAL_ADC_PollForConversion+0x9c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d112      	bne.n	800299e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e06d      	b.n	8002a7a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0d6      	beq.n	800295a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fb71 	bl	80020a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01c      	beq.n	8002a02 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7f5b      	ldrb	r3, [r3, #29]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d118      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a20      	ldr	r2, [pc, #128]	@ (8002a88 <HAL_ADC_PollForConversion+0x1ac>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d002      	beq.n	8002a12 <HAL_ADC_PollForConversion+0x136>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	e001      	b.n	8002a16 <HAL_ADC_PollForConversion+0x13a>
 8002a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d008      	beq.n	8002a30 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d002      	beq.n	8002a30 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d104      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e00d      	b.n	8002a56 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a12      	ldr	r2, [pc, #72]	@ (8002a88 <HAL_ADC_PollForConversion+0x1ac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d002      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x16e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e001      	b.n	8002a4e <HAL_ADC_PollForConversion+0x172>
 8002a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d104      	bne.n	8002a66 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2208      	movs	r2, #8
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e008      	b.n	8002a78 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	220c      	movs	r2, #12
 8002a76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	50000300 	.word	0x50000300
 8002a88:	50000100 	.word	0x50000100

08002a8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b0b6      	sub	sp, #216	@ 0xd8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x22>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e3c8      	b.n	800325c <HAL_ADC_ConfigChannel+0x7b4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fc52 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 83ad 	bne.w	800323e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f7ff faea 	bl	80020ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fc40 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002b00:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fc60 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 8002b0e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 81d9 	bne.w	8002ece <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 81d4 	bne.w	8002ece <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b2e:	d10f      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7ff faf1 	bl	8002122 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fa98 	bl	800207e <LL_ADC_SetSamplingTimeCommonConfig>
 8002b4e:	e00e      	b.n	8002b6e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f7ff fae0 	bl	8002122 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fa88 	bl	800207e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d022      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6919      	ldr	r1, [r3, #16]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ba0:	f7ff f9e2 	bl	8001f68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6919      	ldr	r1, [r3, #16]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f7ff fa2e 	bl	8002012 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x124>
 8002bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bca:	e000      	b.n	8002bce <HAL_ADC_ConfigChannel+0x126>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f7ff fa3a 	bl	8002048 <LL_ADC_SetOffsetSaturation>
 8002bd4:	e17b      	b.n	8002ece <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f9e7 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x15a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f9dc 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	e01e      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x198>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f9d1 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e004      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1b0>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	e018      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x1e2>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d106      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f9a0 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f984 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x220>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff f979 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	e01e      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x25e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff f96e 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e004      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x276>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	e018      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x2a8>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e004      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d106      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff f93d 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f921 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x2e6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f916 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	e01e      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x324>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f90b 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e004      	b.n	8002dca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x33c>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	e016      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x36a>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002df6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e004      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d106      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f8dc 	bl	8001fdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8c0 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x3a8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f8b5 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	f003 021f 	and.w	r2, r3, #31
 8002e4e:	e017      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x3d8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2103      	movs	r1, #3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f8aa 	bl	8001fb0 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x3f0>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	e011      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x414>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f887 	bl	8001fdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fa06 	bl	80022e4 <LL_ADC_IsEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8140 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f7ff f943 	bl	8002178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a8f      	ldr	r2, [pc, #572]	@ (8003134 <HAL_ADC_ConfigChannel+0x68c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	f040 8131 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x47e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	bf94      	ite	ls
 8002f1e:	2301      	movls	r3, #1
 8002f20:	2300      	movhi	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e019      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x4b2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d079      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x4d2>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f78:	e015      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x4fe>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	069b      	lsls	r3, r3, #26
 8002fa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x51e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	e017      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x54e>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x574>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	e018      	b.n	800304e <HAL_ADC_ConfigChannel+0x5a6>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800302e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e003      	b.n	8003040 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f003 021f 	and.w	r2, r3, #31
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304e:	430b      	orrs	r3, r1
 8003050:	e081      	b.n	8003156 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_ADC_ConfigChannel+0x5c6>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	3301      	adds	r3, #1
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306c:	e015      	b.n	800309a <HAL_ADC_ConfigChannel+0x5f2>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x612>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	e017      	b.n	80030ea <HAL_ADC_ConfigChannel+0x642>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	61fb      	str	r3, [r7, #28]
  return result;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	ea42 0103 	orr.w	r1, r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10d      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x66e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	3301      	adds	r3, #1
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	3b1e      	subs	r3, #30
 800310e:	051b      	lsls	r3, r3, #20
 8003110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003114:	e01e      	b.n	8003154 <HAL_ADC_ConfigChannel+0x6ac>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	613b      	str	r3, [r7, #16]
  return result;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e006      	b.n	8003140 <HAL_ADC_ConfigChannel+0x698>
 8003132:	bf00      	nop
 8003134:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	3b1e      	subs	r3, #30
 800314e:	051b      	lsls	r3, r3, #20
 8003150:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003154:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315a:	4619      	mov	r1, r3
 800315c:	f7fe ffe1 	bl	8002122 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b3f      	ldr	r3, [pc, #252]	@ (8003264 <HAL_ADC_ConfigChannel+0x7bc>)
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d071      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800316c:	483e      	ldr	r0, [pc, #248]	@ (8003268 <HAL_ADC_ConfigChannel+0x7c0>)
 800316e:	f7fe feed 	bl	8001f4c <LL_ADC_GetCommonPathInternalCh>
 8003172:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3c      	ldr	r2, [pc, #240]	@ (800326c <HAL_ADC_ConfigChannel+0x7c4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_ADC_ConfigChannel+0x6e2>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a3a      	ldr	r2, [pc, #232]	@ (8003270 <HAL_ADC_ConfigChannel+0x7c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d127      	bne.n	80031da <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800318a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800318e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800319e:	d157      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031a8:	4619      	mov	r1, r3
 80031aa:	482f      	ldr	r0, [pc, #188]	@ (8003268 <HAL_ADC_ConfigChannel+0x7c0>)
 80031ac:	f7fe febb 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b0:	4b30      	ldr	r3, [pc, #192]	@ (8003274 <HAL_ADC_ConfigChannel+0x7cc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	4a30      	ldr	r2, [pc, #192]	@ (8003278 <HAL_ADC_ConfigChannel+0x7d0>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ca:	e002      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d8:	e03a      	b.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_ADC_ConfigChannel+0x7d4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d113      	bne.n	800320c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <HAL_ADC_ConfigChannel+0x7d8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02a      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003202:	4619      	mov	r1, r3
 8003204:	4818      	ldr	r0, [pc, #96]	@ (8003268 <HAL_ADC_ConfigChannel+0x7c0>)
 8003206:	f7fe fe8e 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800320a:	e021      	b.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1c      	ldr	r2, [pc, #112]	@ (8003284 <HAL_ADC_ConfigChannel+0x7dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11c      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <HAL_ADC_ConfigChannel+0x7d8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d011      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003234:	4619      	mov	r1, r3
 8003236:	480c      	ldr	r0, [pc, #48]	@ (8003268 <HAL_ADC_ConfigChannel+0x7c0>)
 8003238:	f7fe fe75 	bl	8001f26 <LL_ADC_SetCommonPathInternalCh>
 800323c:	e008      	b.n	8003250 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003258:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800325c:	4618      	mov	r0, r3
 800325e:	37d8      	adds	r7, #216	@ 0xd8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	80080000 	.word	0x80080000
 8003268:	50000300 	.word	0x50000300
 800326c:	c3210000 	.word	0xc3210000
 8003270:	90c00010 	.word	0x90c00010
 8003274:	20000000 	.word	0x20000000
 8003278:	053e2d63 	.word	0x053e2d63
 800327c:	c7520000 	.word	0xc7520000
 8003280:	50000100 	.word	0x50000100
 8003284:	cb840000 	.word	0xcb840000

08003288 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f86e 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80032a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f88f 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 80032b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8098 	beq.w	80033f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02a      	beq.n	8003324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7f5b      	ldrb	r3, [r3, #29]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d126      	bne.n	8003324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7f1b      	ldrb	r3, [r3, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d122      	bne.n	8003324 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032e2:	e014      	b.n	800330e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4a45      	ldr	r2, [pc, #276]	@ (80033fc <ADC_ConversionStop+0x174>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d90d      	bls.n	8003308 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e074      	b.n	80033f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d1e3      	bne.n	80032e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2240      	movs	r2, #64	@ 0x40
 8003322:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d014      	beq.n	8003354 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f826 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe ffe3 	bl	800230a <LL_ADC_IsDisableOngoing>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff f802 	bl	8002358 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d014      	beq.n	8003384 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f835 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ffcb 	bl	800230a <LL_ADC_IsDisableOngoing>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f811 	bl	80023a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d005      	beq.n	8003396 <ADC_ConversionStop+0x10e>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d105      	bne.n	800339c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003390:	230c      	movs	r3, #12
 8003392:	617b      	str	r3, [r7, #20]
        break;
 8003394:	e005      	b.n	80033a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003396:	2308      	movs	r3, #8
 8003398:	617b      	str	r3, [r7, #20]
        break;
 800339a:	e002      	b.n	80033a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800339c:	2304      	movs	r3, #4
 800339e:	617b      	str	r3, [r7, #20]
        break;
 80033a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80033a2:	f7fe fd7f 	bl	8001ea4 <HAL_GetTick>
 80033a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033a8:	e01b      	b.n	80033e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033aa:	f7fe fd7b 	bl	8001ea4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d914      	bls.n	80033e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1dc      	bne.n	80033aa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	a33fffff 	.word	0xa33fffff

08003400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe ff67 	bl	80022e4 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d169      	bne.n	80034f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <ADC_Enable+0xfc>)
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e055      	b.n	80034f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe ff22 	bl	8002294 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003450:	482b      	ldr	r0, [pc, #172]	@ (8003500 <ADC_Enable+0x100>)
 8003452:	f7fe fd7b 	bl	8001f4c <LL_ADC_GetCommonPathInternalCh>
 8003456:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <ADC_Enable+0x104>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	4a28      	ldr	r2, [pc, #160]	@ (8003508 <ADC_Enable+0x108>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800347a:	e002      	b.n	8003482 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3b01      	subs	r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f9      	bne.n	800347c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003488:	f7fe fd0c 	bl	8001ea4 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800348e:	e028      	b.n	80034e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe ff25 	bl	80022e4 <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fef5 	bl	8002294 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034aa:	f7fe fcfb 	bl	8001ea4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d914      	bls.n	80034e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00d      	beq.n	80034e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	f043 0210 	orr.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1cf      	bne.n	8003490 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	8000003f 	.word	0x8000003f
 8003500:	50000300 	.word	0x50000300
 8003504:	20000000 	.word	0x20000000
 8003508:	053e2d63 	.word	0x053e2d63

0800350c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fef6 	bl	800230a <LL_ADC_IsDisableOngoing>
 800351e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fedd 	bl	80022e4 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d047      	beq.n	80035c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d144      	bne.n	80035c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030d 	and.w	r3, r3, #13
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10c      	bne.n	800355e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe feb7 	bl	80022bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2203      	movs	r2, #3
 8003554:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003556:	f7fe fca5 	bl	8001ea4 <HAL_GetTick>
 800355a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800355c:	e029      	b.n	80035b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e023      	b.n	80035c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800357a:	f7fe fc93 	bl	8001ea4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d914      	bls.n	80035b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1dc      	bne.n	800357a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <LL_ADC_IsEnabled>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <LL_ADC_IsEnabled+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_ADC_IsEnabled+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d101      	bne.n	8003608 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b0a1      	sub	sp, #132	@ 0x84
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003632:	2302      	movs	r3, #2
 8003634:	e08b      	b.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800363e:	2300      	movs	r3, #0
 8003640:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003642:	2300      	movs	r3, #0
 8003644:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364e:	d102      	bne.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	e001      	b.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e06a      	b.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ffb8 	bl	80035f0 <LL_ADC_REG_IsConversionOngoing>
 8003680:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ffb2 	bl	80035f0 <LL_ADC_REG_IsConversionOngoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d14c      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003692:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003694:	2b00      	cmp	r3, #0
 8003696:	d149      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003698:	4b30      	ldr	r3, [pc, #192]	@ (800375c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800369a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036b6:	035b      	lsls	r3, r3, #13
 80036b8:	430b      	orrs	r3, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036c4:	f7ff ff81 	bl	80035ca <LL_ADC_IsEnabled>
 80036c8:	4604      	mov	r4, r0
 80036ca:	4823      	ldr	r0, [pc, #140]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036cc:	f7ff ff7d 	bl	80035ca <LL_ADC_IsEnabled>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4323      	orrs	r3, r4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d133      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036e0:	f023 030f 	bic.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6811      	ldr	r1, [r2, #0]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f4:	e024      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003700:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003702:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003706:	f7ff ff60 	bl	80035ca <LL_ADC_IsEnabled>
 800370a:	4604      	mov	r4, r0
 800370c:	4812      	ldr	r0, [pc, #72]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800370e:	f7ff ff5c 	bl	80035ca <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	4323      	orrs	r3, r4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d112      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800371a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003722:	f023 030f 	bic.w	r3, r3, #15
 8003726:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003728:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800372a:	e009      	b.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800373e:	e000      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003740:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800374a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800374e:	4618      	mov	r0, r3
 8003750:	3784      	adds	r7, #132	@ 0x84
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	bf00      	nop
 8003758:	50000100 	.word	0x50000100
 800375c:	50000300 	.word	0x50000300

08003760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800378c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0307 	and.w	r3, r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db0b      	blt.n	80037ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4907      	ldr	r1, [pc, #28]	@ (80037fc <__NVIC_EnableIRQ+0x38>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2001      	movs	r0, #1
 80037e6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000e100 	.word	0xe000e100

08003800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	@ (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	@ (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	@ 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf28      	it	cs
 8003872:	2304      	movcs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3304      	adds	r3, #4
 800387a:	2b06      	cmp	r3, #6
 800387c:	d902      	bls.n	8003884 <NVIC_EncodePriority+0x30>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3b03      	subs	r3, #3
 8003882:	e000      	b.n	8003886 <NVIC_EncodePriority+0x32>
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	4313      	orrs	r3, r2
         );
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	@ 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038cc:	d301      	bcc.n	80038d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00f      	b.n	80038f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <SysTick_Config+0x40>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038da:	210f      	movs	r1, #15
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f7ff ff8e 	bl	8003800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <SysTick_Config+0x40>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ea:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <SysTick_Config+0x40>)
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	e000e010 	.word	0xe000e010

08003900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff29 	bl	8003760 <__NVIC_SetPriorityGrouping>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff40 	bl	80037a8 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff90 	bl	8003854 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5f 	bl	8003800 <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff33 	bl	80037c4 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa4 	bl	80038bc <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e147      	b.n	8003c22 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd ffe0 	bl	800196c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0210 	bic.w	r2, r2, #16
 80039ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039bc:	f7fe fa72 	bl	8001ea4 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039c2:	e012      	b.n	80039ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039c4:	f7fe fa6e 	bl	8001ea4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b0a      	cmp	r3, #10
 80039d0:	d90b      	bls.n	80039ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e11b      	b.n	8003c22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d0e5      	beq.n	80039c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a08:	f7fe fa4c 	bl	8001ea4 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a0e:	e012      	b.n	8003a36 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a10:	f7fe fa48 	bl	8001ea4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b0a      	cmp	r3, #10
 8003a1c:	d90b      	bls.n	8003a36 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0f5      	b.n	8003c22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0e5      	beq.n	8003a10 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0202 	orr.w	r2, r2, #2
 8003a52:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a74      	ldr	r2, [pc, #464]	@ (8003c2c <HAL_FDCAN_Init+0x2ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d103      	bne.n	8003a66 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a5e:	4a74      	ldr	r2, [pc, #464]	@ (8003c30 <HAL_FDCAN_Init+0x2b0>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7c1b      	ldrb	r3, [r3, #16]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d108      	bne.n	8003a80 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a7c:	619a      	str	r2, [r3, #24]
 8003a7e:	e007      	b.n	8003a90 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7c5b      	ldrb	r3, [r3, #17]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d108      	bne.n	8003aaa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aa6:	619a      	str	r2, [r3, #24]
 8003aa8:	e007      	b.n	8003aba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ab8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7c9b      	ldrb	r3, [r3, #18]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d108      	bne.n	8003ad4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e007      	b.n	8003ae4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ae2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0210 	bic.w	r2, r2, #16
 8003b18:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e02c      	b.n	8003b8e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d028      	beq.n	8003b8e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d01c      	beq.n	8003b7e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b52:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0210 	orr.w	r2, r2, #16
 8003b62:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d110      	bne.n	8003b8e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0220 	orr.w	r2, r2, #32
 8003b7a:	619a      	str	r2, [r3, #24]
 8003b7c:	e007      	b.n	8003b8e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0220 	orr.w	r2, r2, #32
 8003b8c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b9e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ba6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bb6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc2:	d115      	bne.n	8003bf0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bd2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fc0e 	bl	8004428 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40006400 	.word	0x40006400
 8003c30:	40006500 	.word	0x40006500

08003c34 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d110      	bne.n	8003c6a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e006      	b.n	8003c78 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	f043 0204 	orr.w	r2, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d12c      	bne.n	8003cf6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e023      	b.n	8003d04 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fbfe 	bl	80044d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e006      	b.n	8003d04 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	f043 0208 	orr.w	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b08b      	sub	sp, #44	@ 0x2c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d24:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003d26:	7efb      	ldrb	r3, [r7, #27]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f040 80e8 	bne.w	8003efe <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b40      	cmp	r3, #64	@ 0x40
 8003d32:	d137      	bne.n	8003da4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0db      	b.n	8003f0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10a      	bne.n	8003d7c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	e036      	b.n	8003e12 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0a3      	b.n	8003f0c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dcc:	0e1b      	lsrs	r3, r3, #24
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10a      	bne.n	8003dec <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e005      	b.n	8003e42 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e1b      	lsrs	r3, r3, #24
 8003e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0fda      	lsrs	r2, r3, #31
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	3304      	adds	r3, #4
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	e00a      	b.n	8003ece <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	440b      	add	r3, r1
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d3ec      	bcc.n	8003eb8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d105      	bne.n	8003ef0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003eee:	e004      	b.n	8003efa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e006      	b.n	8003f0c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f02:	f043 0208 	orr.w	r2, r3, #8
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	372c      	adds	r7, #44	@ 0x2c
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	08006f88 	.word	0x08006f88

08003f1c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f52:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d003      	beq.n	8003f62 <HAL_FDCAN_ActivateNotification+0x22>
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f040 80c8 	bne.w	80040f2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d031      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d027      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00c      	beq.n	8004006 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d107      	bne.n	8004006 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d13b      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d131      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d127      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11d      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d113      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0202 	orr.w	r2, r2, #2
 80040a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	430a      	orrs	r2, r1
 80040da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e006      	b.n	8004100 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	@ 0x30
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800411e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004128:	4013      	ands	r3, r2
 800412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004140:	4013      	ands	r3, r2
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004158:	4013      	ands	r3, r2
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004162:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004166:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	4013      	ands	r3, r2
 8004172:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800417e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004192:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2240      	movs	r2, #64	@ 0x40
 80041b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f916 	bl	80043ea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d019      	beq.n	80041fc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041da:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80041f4:	6939      	ldr	r1, [r7, #16]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f8d8 	bl	80043ac <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004208:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800420a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8a2 	bl	8004356 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800421e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc f9d2 	bl	80005cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f897 	bl	800436c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f890 	bl	8004382 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d018      	beq.n	800429e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800427e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4013      	ands	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2280      	movs	r2, #128	@ 0x80
 8004294:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f87c 	bl	8004396 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f880 	bl	80043c2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80042de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f878 	bl	80043d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004302:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004308:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800431e:	69f9      	ldr	r1, [r7, #28]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f876 	bl	8004412 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f858 	bl	80043fe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800434e:	bf00      	nop
 8004350:	3730      	adds	r7, #48	@ 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004430:	4b27      	ldr	r3, [pc, #156]	@ (80044d0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004432:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004442:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	041a      	lsls	r2, r3, #16
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004468:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	061a      	lsls	r2, r3, #24
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e005      	b.n	80044b6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3304      	adds	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3f3      	bcc.n	80044aa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	4000a400 	.word	0x4000a400

080044d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	@ 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80044f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	e00a      	b.n	8004516 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004508:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800450e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004514:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004520:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004526:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800452c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3304      	adds	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	3304      	adds	r3, #4
 8004560:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e020      	b.n	80045aa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3303      	adds	r3, #3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3302      	adds	r3, #2
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	440b      	add	r3, r1
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004580:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	440b      	add	r3, r1
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800458e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	440a      	add	r2, r1
 8004596:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004598:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3304      	adds	r3, #4
 80045a2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3304      	adds	r3, #4
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <FDCAN_CopyMessageToRAM+0xf4>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	461a      	mov	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d3d6      	bcc.n	8004568 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	3724      	adds	r7, #36	@ 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	08006f88 	.word	0x08006f88

080045cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045da:	e15a      	b.n	8004892 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 814c 	beq.w	800488c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d005      	beq.n	800460c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004608:	2b02      	cmp	r3, #2
 800460a:	d130      	bne.n	800466e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004642:	2201      	movs	r2, #1
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0201 	and.w	r2, r3, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b03      	cmp	r3, #3
 8004678:	d017      	beq.n	80046aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2203      	movs	r2, #3
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d123      	bne.n	80046fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	08da      	lsrs	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3208      	adds	r2, #8
 80046be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	220f      	movs	r2, #15
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	08da      	lsrs	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3208      	adds	r2, #8
 80046f8:	6939      	ldr	r1, [r7, #16]
 80046fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0203 	and.w	r2, r3, #3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80a6 	beq.w	800488c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004740:	4b5b      	ldr	r3, [pc, #364]	@ (80048b0 <HAL_GPIO_Init+0x2e4>)
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	4a5a      	ldr	r2, [pc, #360]	@ (80048b0 <HAL_GPIO_Init+0x2e4>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6613      	str	r3, [r2, #96]	@ 0x60
 800474c:	4b58      	ldr	r3, [pc, #352]	@ (80048b0 <HAL_GPIO_Init+0x2e4>)
 800474e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004758:	4a56      	ldr	r2, [pc, #344]	@ (80048b4 <HAL_GPIO_Init+0x2e8>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	220f      	movs	r2, #15
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4013      	ands	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004782:	d01f      	beq.n	80047c4 <HAL_GPIO_Init+0x1f8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a4c      	ldr	r2, [pc, #304]	@ (80048b8 <HAL_GPIO_Init+0x2ec>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d019      	beq.n	80047c0 <HAL_GPIO_Init+0x1f4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a4b      	ldr	r2, [pc, #300]	@ (80048bc <HAL_GPIO_Init+0x2f0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_GPIO_Init+0x1f0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a4a      	ldr	r2, [pc, #296]	@ (80048c0 <HAL_GPIO_Init+0x2f4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00d      	beq.n	80047b8 <HAL_GPIO_Init+0x1ec>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a49      	ldr	r2, [pc, #292]	@ (80048c4 <HAL_GPIO_Init+0x2f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <HAL_GPIO_Init+0x1e8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a48      	ldr	r2, [pc, #288]	@ (80048c8 <HAL_GPIO_Init+0x2fc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_GPIO_Init+0x1e4>
 80047ac:	2305      	movs	r3, #5
 80047ae:	e00a      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047b0:	2306      	movs	r3, #6
 80047b2:	e008      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047b4:	2304      	movs	r3, #4
 80047b6:	e006      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e004      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047bc:	2302      	movs	r3, #2
 80047be:	e002      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047c4:	2300      	movs	r3, #0
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	f002 0203 	and.w	r2, r2, #3
 80047cc:	0092      	lsls	r2, r2, #2
 80047ce:	4093      	lsls	r3, r2
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047d6:	4937      	ldr	r1, [pc, #220]	@ (80048b4 <HAL_GPIO_Init+0x2e8>)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047e4:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_GPIO_Init+0x300>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004808:	4a30      	ldr	r2, [pc, #192]	@ (80048cc <HAL_GPIO_Init+0x300>)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800480e:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <HAL_GPIO_Init+0x300>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004832:	4a26      	ldr	r2, [pc, #152]	@ (80048cc <HAL_GPIO_Init+0x300>)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004838:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_GPIO_Init+0x300>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43db      	mvns	r3, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4013      	ands	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800485c:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <HAL_GPIO_Init+0x300>)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004862:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <HAL_GPIO_Init+0x300>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	43db      	mvns	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004886:	4a11      	ldr	r2, [pc, #68]	@ (80048cc <HAL_GPIO_Init+0x300>)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f ae9d 	bne.w	80045dc <HAL_GPIO_Init+0x10>
  }
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40010000 	.word	0x40010000
 80048b8:	48000400 	.word	0x48000400
 80048bc:	48000800 	.word	0x48000800
 80048c0:	48000c00 	.word	0x48000c00
 80048c4:	48001000 	.word	0x48001000
 80048c8:	48001400 	.word	0x48001400
 80048cc:	40010400 	.word	0x40010400

080048d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	807b      	strh	r3, [r7, #2]
 80048dc:	4613      	mov	r3, r2
 80048de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048e0:	787b      	ldrb	r3, [r7, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048e6:	887a      	ldrh	r2, [r7, #2]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048ec:	e002      	b.n	80048f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d141      	bne.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800490e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491a:	d131      	bne.n	8004980 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800491c:	4b47      	ldr	r3, [pc, #284]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004922:	4a46      	ldr	r2, [pc, #280]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800492c:	4b43      	ldr	r3, [pc, #268]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004934:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800493a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800493c:	4b40      	ldr	r3, [pc, #256]	@ (8004a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2232      	movs	r2, #50	@ 0x32
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	4a3f      	ldr	r2, [pc, #252]	@ (8004a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	0c9b      	lsrs	r3, r3, #18
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004952:	e002      	b.n	800495a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495a:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d102      	bne.n	800496e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f2      	bne.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d158      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e057      	b.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004980:	4b2e      	ldr	r3, [pc, #184]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004986:	4a2d      	ldr	r2, [pc, #180]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800498c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004990:	e04d      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004998:	d141      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800499a:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a6:	d131      	bne.n	8004a0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a8:	4b24      	ldr	r3, [pc, #144]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ae:	4a23      	ldr	r2, [pc, #140]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b8:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049c0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2232      	movs	r2, #50	@ 0x32
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049de:	e002      	b.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d102      	bne.n	80049fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f2      	bne.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049fa:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d112      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e011      	b.n	8004a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a1c:	e007      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a26:	4a05      	ldr	r2, [pc, #20]	@ (8004a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	20000000 	.word	0x20000000
 8004a44:	431bde83 	.word	0x431bde83

08004a48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a04      	ldr	r2, [pc, #16]	@ (8004a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a56:	6093      	str	r3, [r2, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e2fe      	b.n	8005078 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d075      	beq.n	8004b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a86:	4b97      	ldr	r3, [pc, #604]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a90:	4b94      	ldr	r3, [pc, #592]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3e>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_OscConfig+0x44>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b8d      	ldr	r3, [pc, #564]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d157      	bne.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e2d9      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x74>
 8004ace:	4b85      	ldr	r3, [pc, #532]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a84      	ldr	r2, [pc, #528]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x98>
 8004ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004b00:	4b78      	ldr	r3, [pc, #480]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b75      	ldr	r3, [pc, #468]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a74      	ldr	r2, [pc, #464]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fd f9c0 	bl	8001ea4 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd f9bc 	bl	8001ea4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e29e      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd f9ac 	bl	8001ea4 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd f9a8 	bl	8001ea4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e28a      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	4b60      	ldr	r3, [pc, #384]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7e:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b88:	4b56      	ldr	r3, [pc, #344]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_OscConfig+0x136>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x13c>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11f      	bne.n	8004be4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x154>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e25d      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b49      	ldr	r3, [pc, #292]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	4946      	ldr	r1, [pc, #280]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ce8 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fd f919 	bl	8001e0c <HAL_InitTick>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d043      	beq.n	8004c68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e249      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bec:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd f954 	bl	8001ea4 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd f950 	bl	8001ea4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e232      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b34      	ldr	r3, [pc, #208]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	492d      	ldr	r1, [pc, #180]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
 8004c32:	e01a      	b.n	8004c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd f930 	bl	8001ea4 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fd f92c 	bl	8001ea4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e20e      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x1e0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d041      	beq.n	8004cfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01c      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c84:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd f909 	bl	8001ea4 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd f905 	bl	8001ea4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1e7      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ef      	beq.n	8004c96 <HAL_RCC_OscConfig+0x22e>
 8004cb6:	e020      	b.n	8004cfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cbe:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f8ec 	bl	8001ea4 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cce:	e00d      	b.n	8004cec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f8e8 	bl	8001ea4 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d906      	bls.n	8004cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1ca      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cec:	4b8c      	ldr	r3, [pc, #560]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ea      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a6 	beq.w	8004e54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d0c:	4b84      	ldr	r3, [pc, #528]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2b4>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x2b6>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	4b7f      	ldr	r3, [pc, #508]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	4a7e      	ldr	r2, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d3e:	4b79      	ldr	r3, [pc, #484]	@ (8004f24 <HAL_RCC_OscConfig+0x4bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d118      	bne.n	8004d7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4a:	4b76      	ldr	r3, [pc, #472]	@ (8004f24 <HAL_RCC_OscConfig+0x4bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a75      	ldr	r2, [pc, #468]	@ (8004f24 <HAL_RCC_OscConfig+0x4bc>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d56:	f7fd f8a5 	bl	8001ea4 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fd f8a1 	bl	8001ea4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e183      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d70:	4b6c      	ldr	r3, [pc, #432]	@ (8004f24 <HAL_RCC_OscConfig+0x4bc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d108      	bne.n	8004d96 <HAL_RCC_OscConfig+0x32e>
 8004d84:	4b66      	ldr	r3, [pc, #408]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d94:	e024      	b.n	8004de0 <HAL_RCC_OscConfig+0x378>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d110      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x358>
 8004d9e:	4b60      	ldr	r3, [pc, #384]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dae:	4b5c      	ldr	r3, [pc, #368]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dbe:	e00f      	b.n	8004de0 <HAL_RCC_OscConfig+0x378>
 8004dc0:	4b57      	ldr	r3, [pc, #348]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	4a56      	ldr	r2, [pc, #344]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd0:	4b53      	ldr	r3, [pc, #332]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd6:	4a52      	ldr	r2, [pc, #328]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd f85c 	bl	8001ea4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd f858 	bl	8001ea4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e138      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	4b46      	ldr	r3, [pc, #280]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ed      	beq.n	8004df0 <HAL_RCC_OscConfig+0x388>
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fd f845 	bl	8001ea4 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd f841 	bl	8001ea4 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e121      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	4b3a      	ldr	r3, [pc, #232]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ed      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b35      	ldr	r3, [pc, #212]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	4a34      	ldr	r2, [pc, #208]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03c      	beq.n	8004eda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e68:	4b2d      	ldr	r3, [pc, #180]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd f814 	bl	8001ea4 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e80:	f7fd f810 	bl	8001ea4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0f2      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e92:	4b23      	ldr	r3, [pc, #140]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCC_OscConfig+0x418>
 8004ea0:	e01b      	b.n	8004eda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fc fff7 	bl	8001ea4 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eba:	f7fc fff3 	bl	8001ea4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0d5      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ecc:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ef      	bne.n	8004eba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80c9 	beq.w	8005076 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	f000 8083 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d15e      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a08      	ldr	r2, [pc, #32]	@ (8004f20 <HAL_RCC_OscConfig+0x4b8>)
 8004f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fc ffcd 	bl	8001ea4 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0c:	e00c      	b.n	8004f28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fc ffc9 	bl	8001ea4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d905      	bls.n	8004f28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0ab      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	4b55      	ldr	r3, [pc, #340]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ec      	bne.n	8004f0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f34:	4b52      	ldr	r3, [pc, #328]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	4b52      	ldr	r3, [pc, #328]	@ (8005084 <HAL_RCC_OscConfig+0x61c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6a11      	ldr	r1, [r2, #32]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f4e:	0212      	lsls	r2, r2, #8
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0552      	lsls	r2, r2, #21
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f62:	0852      	lsrs	r2, r2, #1
 8004f64:	3a01      	subs	r2, #1
 8004f66:	0652      	lsls	r2, r2, #25
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f6e:	06d2      	lsls	r2, r2, #27
 8004f70:	430a      	orrs	r2, r1
 8004f72:	4943      	ldr	r1, [pc, #268]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b41      	ldr	r3, [pc, #260]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a40      	ldr	r2, [pc, #256]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f84:	4b3e      	ldr	r3, [pc, #248]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a3d      	ldr	r2, [pc, #244]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc ff88 	bl	8001ea4 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fc ff84 	bl	8001ea4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e066      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	4b35      	ldr	r3, [pc, #212]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x530>
 8004fb6:	e05e      	b.n	8005076 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb8:	4b31      	ldr	r3, [pc, #196]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fc ff6e 	bl	8001ea4 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fc ff6a 	bl	8001ea4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04c      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fde:	4b28      	ldr	r3, [pc, #160]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fea:	4b25      	ldr	r3, [pc, #148]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	4924      	ldr	r1, [pc, #144]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8004ff0:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <HAL_RCC_OscConfig+0x620>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	60cb      	str	r3, [r1, #12]
 8004ff6:	e03e      	b.n	8005076 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e039      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005004:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <HAL_RCC_OscConfig+0x618>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 0203 	and.w	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	429a      	cmp	r2, r3
 8005016:	d12c      	bne.n	8005072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	3b01      	subs	r3, #1
 8005024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d123      	bne.n	8005072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d11b      	bne.n	8005072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d113      	bne.n	8005072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	3b01      	subs	r3, #1
 8005058:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d109      	bne.n	8005072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	019f800c 	.word	0x019f800c
 8005088:	feeefffc 	.word	0xfeeefffc

0800508c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e11e      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b91      	ldr	r3, [pc, #580]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d910      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b8e      	ldr	r3, [pc, #568]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 020f 	bic.w	r2, r3, #15
 80050ba:	498c      	ldr	r1, [pc, #560]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b8a      	ldr	r3, [pc, #552]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e106      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d073      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d129      	bne.n	800513c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e8:	4b81      	ldr	r3, [pc, #516]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0f4      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050f8:	f000 f966 	bl	80053c8 <RCC_GetSysClockFreqFromPLLSource>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4a7c      	ldr	r2, [pc, #496]	@ (80052f4 <HAL_RCC_ClockConfig+0x268>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d93f      	bls.n	8005186 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005106:	4b7a      	ldr	r3, [pc, #488]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800511a:	2b00      	cmp	r3, #0
 800511c:	d033      	beq.n	8005186 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005122:	2b00      	cmp	r3, #0
 8005124:	d12f      	bne.n	8005186 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005126:	4b72      	ldr	r3, [pc, #456]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800512e:	4a70      	ldr	r2, [pc, #448]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005134:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e024      	b.n	8005186 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d107      	bne.n	8005154 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005144:	4b6a      	ldr	r3, [pc, #424]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0c6      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005154:	4b66      	ldr	r3, [pc, #408]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0be      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005164:	f000 f8ce 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8005168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a61      	ldr	r2, [pc, #388]	@ (80052f4 <HAL_RCC_ClockConfig+0x268>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d909      	bls.n	8005186 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005172:	4b5f      	ldr	r3, [pc, #380]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517a:	4a5d      	ldr	r2, [pc, #372]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 800517c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005180:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005186:	4b5a      	ldr	r3, [pc, #360]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4957      	ldr	r1, [pc, #348]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005198:	f7fc fe84 	bl	8001ea4 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a0:	f7fc fe80 	bl	8001ea4 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e095      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	4b4e      	ldr	r3, [pc, #312]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 020c 	and.w	r2, r3, #12
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d1eb      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d023      	beq.n	800521c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4a42      	ldr	r2, [pc, #264]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80051e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051f8:	4b3d      	ldr	r3, [pc, #244]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005200:	4a3b      	ldr	r2, [pc, #236]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b39      	ldr	r3, [pc, #228]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	4936      	ldr	r1, [pc, #216]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
 800521a:	e008      	b.n	800522e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b80      	cmp	r3, #128	@ 0x80
 8005220:	d105      	bne.n	800522e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005222:	4b33      	ldr	r3, [pc, #204]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4a32      	ldr	r2, [pc, #200]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005228:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800522c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800522e:	4b2f      	ldr	r3, [pc, #188]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d21d      	bcs.n	8005278 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523c:	4b2b      	ldr	r3, [pc, #172]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 020f 	bic.w	r2, r3, #15
 8005244:	4929      	ldr	r1, [pc, #164]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800524c:	f7fc fe2a 	bl	8001ea4 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fc fe26 	bl	8001ea4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e03b      	b.n	80052e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_RCC_ClockConfig+0x260>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d1ed      	bne.n	8005254 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005284:	4b1a      	ldr	r3, [pc, #104]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4917      	ldr	r1, [pc, #92]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	490f      	ldr	r1, [pc, #60]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052b6:	f000 f825 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <HAL_RCC_ClockConfig+0x264>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	490c      	ldr	r1, [pc, #48]	@ (80052f8 <HAL_RCC_ClockConfig+0x26c>)
 80052c8:	5ccb      	ldrb	r3, [r1, r3]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <HAL_RCC_ClockConfig+0x270>)
 80052d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <HAL_RCC_ClockConfig+0x274>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fc fd96 	bl	8001e0c <HAL_InitTick>
 80052e0:	4603      	mov	r3, r0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40021000 	.word	0x40021000
 80052f4:	04c4b400 	.word	0x04c4b400
 80052f8:	08006f78 	.word	0x08006f78
 80052fc:	20000000 	.word	0x20000000
 8005300:	20000004 	.word	0x20000004

08005304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800530a:	4b2c      	ldr	r3, [pc, #176]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b04      	cmp	r3, #4
 8005314:	d102      	bne.n	800531c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005316:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e047      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800531c:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b08      	cmp	r3, #8
 8005326:	d102      	bne.n	800532e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005328:	4b26      	ldr	r3, [pc, #152]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	e03e      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800532e:	4b23      	ldr	r3, [pc, #140]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d136      	bne.n	80053a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800533a:	4b20      	ldr	r3, [pc, #128]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005344:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	3301      	adds	r3, #1
 8005350:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d10c      	bne.n	8005372 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005358:	4a1a      	ldr	r2, [pc, #104]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005362:	68d2      	ldr	r2, [r2, #12]
 8005364:	0a12      	lsrs	r2, r2, #8
 8005366:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	617b      	str	r3, [r7, #20]
      break;
 8005370:	e00c      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005372:	4a13      	ldr	r2, [pc, #76]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	4a10      	ldr	r2, [pc, #64]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	0a12      	lsrs	r2, r2, #8
 8005380:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]
      break;
 800538a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800538c:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	0e5b      	lsrs	r3, r3, #25
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e001      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053ac:	693b      	ldr	r3, [r7, #16]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d10c      	bne.n	8005406 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ec:	4a17      	ldr	r2, [pc, #92]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f6:	68d2      	ldr	r2, [r2, #12]
 80053f8:	0a12      	lsrs	r2, r2, #8
 80053fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]
    break;
 8005404:	e00c      	b.n	8005420 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005406:	4a12      	ldr	r2, [pc, #72]	@ (8005450 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	4a0e      	ldr	r2, [pc, #56]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005410:	68d2      	ldr	r2, [r2, #12]
 8005412:	0a12      	lsrs	r2, r2, #8
 8005414:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
    break;
 800541e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0e5b      	lsrs	r3, r3, #25
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800543a:	687b      	ldr	r3, [r7, #4]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40021000 	.word	0x40021000
 800544c:	007a1200 	.word	0x007a1200
 8005450:	00f42400 	.word	0x00f42400

08005454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800545c:	2300      	movs	r3, #0
 800545e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005460:	2300      	movs	r3, #0
 8005462:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8098 	beq.w	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b43      	ldr	r3, [pc, #268]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005486:	4a3f      	ldr	r2, [pc, #252]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548c:	6593      	str	r3, [r2, #88]	@ 0x58
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549a:	2301      	movs	r3, #1
 800549c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549e:	4b3a      	ldr	r3, [pc, #232]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a39      	ldr	r2, [pc, #228]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054aa:	f7fc fcfb 	bl	8001ea4 <HAL_GetTick>
 80054ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054b0:	e009      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b2:	f7fc fcf7 	bl	8001ea4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d902      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	74fb      	strb	r3, [r7, #19]
        break;
 80054c4:	e005      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c6:	4b30      	ldr	r3, [pc, #192]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ef      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d159      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d019      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054f4:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005500:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005510:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005520:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fc fcb7 	bl	8001ea4 <HAL_GetTick>
 8005536:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005538:	e00b      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fc fcb3 	bl	8001ea4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d902      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	74fb      	strb	r3, [r7, #19]
            break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005552:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ec      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	4903      	ldr	r1, [pc, #12]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	74bb      	strb	r3, [r7, #18]
 8005582:	e005      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005584:	40021000 	.word	0x40021000
 8005588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005590:	7c7b      	ldrb	r3, [r7, #17]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005596:	4ba6      	ldr	r3, [pc, #664]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	4aa5      	ldr	r2, [pc, #660]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ae:	4ba0      	ldr	r3, [pc, #640]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f023 0203 	bic.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	499c      	ldr	r1, [pc, #624]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055d0:	4b97      	ldr	r3, [pc, #604]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 020c 	bic.w	r2, r3, #12
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	4994      	ldr	r1, [pc, #592]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	498b      	ldr	r1, [pc, #556]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005614:	4b86      	ldr	r3, [pc, #536]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	4983      	ldr	r1, [pc, #524]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005636:	4b7e      	ldr	r3, [pc, #504]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	497a      	ldr	r1, [pc, #488]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005658:	4b75      	ldr	r3, [pc, #468]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	4972      	ldr	r1, [pc, #456]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800567a:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4969      	ldr	r1, [pc, #420]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800569c:	4b64      	ldr	r3, [pc, #400]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4961      	ldr	r1, [pc, #388]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056be:	4b5c      	ldr	r3, [pc, #368]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	4958      	ldr	r1, [pc, #352]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	4950      	ldr	r1, [pc, #320]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005718:	4b45      	ldr	r3, [pc, #276]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4942      	ldr	r1, [pc, #264]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a3c      	ldr	r2, [pc, #240]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005750:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005788:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	4926      	ldr	r1, [pc, #152]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a8:	4b21      	ldr	r3, [pc, #132]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d015      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	4918      	ldr	r1, [pc, #96]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d105      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	490a      	ldr	r1, [pc, #40]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a04      	ldr	r2, [pc, #16]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005822:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005824:	7cbb      	ldrb	r3, [r7, #18]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e049      	b.n	80058da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc f8e8 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 fd92 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e04a      	b.n	8005992 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d013      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <HAL_TIM_Base_Start_IT+0xc8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a19      	ldr	r2, [pc, #100]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d115      	bne.n	800597c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d015      	beq.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005968:	d011      	beq.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	e008      	b.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e000      	b.n	8005990 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	00010007 	.word	0x00010007

080059b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e049      	b.n	8005a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f841 	bl	8005a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 fcd0 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x24>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e03c      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d109      	bne.n	8005aba <HAL_TIM_PWM_Start+0x3e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e02f      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d109      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0x58>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e022      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d109      	bne.n	8005aee <HAL_TIM_PWM_Start+0x72>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	e015      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d109      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x8c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e008      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e097      	b.n	8005c52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xb6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b30:	e023      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xc6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b40:	e01b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Start+0xd6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b50:	e013      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xe6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b60:	e00b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0xf6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f838 	bl	8006bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	@ (8005c68 <HAL_TIM_PWM_Start+0x1ec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c6c <HAL_TIM_PWM_Start+0x1f0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x142>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x144>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be6:	d013      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <HAL_TIM_PWM_Start+0x1f4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <HAL_TIM_PWM_Start+0x1f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d115      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b18      	ldr	r3, [pc, #96]	@ (8005c78 <HAL_TIM_PWM_Start+0x1fc>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d015      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d011      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d020      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0202 	mvn.w	r2, #2
 8005cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fb4a 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb3c 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fb4d 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0204 	mvn.w	r2, #4
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb24 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb16 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb27 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0208 	mvn.w	r2, #8
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fafe 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 faf0 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb01 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0210 	mvn.w	r2, #16
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fad8 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 faca 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fadb 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0201 	mvn.w	r2, #1
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 faa8 	bl	8006338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f82f 	bl	8006e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f827 	bl	8006e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa95 	bl	8006388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0220 	mvn.w	r2, #32
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ffef 	bl	8006e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00c      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fffb 	bl	8006e9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fff3 	bl	8006eb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 ffeb 	bl	8006ec4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00c      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 ffe3 	bl	8006ed8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e0ff      	b.n	800613a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b14      	cmp	r3, #20
 8005f46:	f200 80f0 	bhi.w	800612a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	0800612b 	.word	0x0800612b
 8005f58:	0800612b 	.word	0x0800612b
 8005f5c:	0800612b 	.word	0x0800612b
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	0800612b 	.word	0x0800612b
 8005f68:	0800612b 	.word	0x0800612b
 8005f6c:	0800612b 	.word	0x0800612b
 8005f70:	08006027 	.word	0x08006027
 8005f74:	0800612b 	.word	0x0800612b
 8005f78:	0800612b 	.word	0x0800612b
 8005f7c:	0800612b 	.word	0x0800612b
 8005f80:	08006067 	.word	0x08006067
 8005f84:	0800612b 	.word	0x0800612b
 8005f88:	0800612b 	.word	0x0800612b
 8005f8c:	0800612b 	.word	0x0800612b
 8005f90:	080060a9 	.word	0x080060a9
 8005f94:	0800612b 	.word	0x0800612b
 8005f98:	0800612b 	.word	0x0800612b
 8005f9c:	0800612b 	.word	0x0800612b
 8005fa0:	080060e9 	.word	0x080060e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fa92 	bl	80064d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	619a      	str	r2, [r3, #24]
      break;
 8005fe2:	e0a5      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fb02 	bl	80065f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800600e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6999      	ldr	r1, [r3, #24]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	619a      	str	r2, [r3, #24]
      break;
 8006024:	e084      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fb6b 	bl	8006708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0208 	orr.w	r2, r2, #8
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0204 	bic.w	r2, r2, #4
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
      break;
 8006064:	e064      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fbd3 	bl	8006818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	021a      	lsls	r2, r3, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	61da      	str	r2, [r3, #28]
      break;
 80060a6:	e043      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fc3c 	bl	800692c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060e6:	e023      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fc80 	bl	80069f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006102:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006112:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006128:	e002      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
      break;
 800612e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIM_ConfigClockSource+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e0de      	b.n	800631e <HAL_TIM_ConfigClockSource+0x1da>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800617e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800618a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a63      	ldr	r2, [pc, #396]	@ (8006328 <HAL_TIM_ConfigClockSource+0x1e4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f000 80a9 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061a0:	4a61      	ldr	r2, [pc, #388]	@ (8006328 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f200 80ae 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061a8:	4a60      	ldr	r2, [pc, #384]	@ (800632c <HAL_TIM_ConfigClockSource+0x1e8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f000 80a1 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b0:	4a5e      	ldr	r2, [pc, #376]	@ (800632c <HAL_TIM_ConfigClockSource+0x1e8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f200 80a6 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006330 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f000 8099 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006330 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f200 809e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006334 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f000 8091 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061d0:	4a58      	ldr	r2, [pc, #352]	@ (8006334 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f200 8096 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061dc:	f000 8089 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061e4:	f200 808e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ec:	d03e      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x128>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	f200 8087 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fa:	f000 8086 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1c6>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d87f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006204:	2b70      	cmp	r3, #112	@ 0x70
 8006206:	d01a      	beq.n	800623e <HAL_TIM_ConfigClockSource+0xfa>
 8006208:	2b70      	cmp	r3, #112	@ 0x70
 800620a:	d87b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800620c:	2b60      	cmp	r3, #96	@ 0x60
 800620e:	d050      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x16e>
 8006210:	2b60      	cmp	r3, #96	@ 0x60
 8006212:	d877      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	2b50      	cmp	r3, #80	@ 0x50
 8006216:	d03c      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x14e>
 8006218:	2b50      	cmp	r3, #80	@ 0x50
 800621a:	d873      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d058      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x18e>
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	d86f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006224:	2b30      	cmp	r3, #48	@ 0x30
 8006226:	d064      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006228:	2b30      	cmp	r3, #48	@ 0x30
 800622a:	d86b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d060      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d867      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d05a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800623c:	e062      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800624e:	f000 fcb3 	bl	8006bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
      break;
 800626a:	e04f      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800627c:	f000 fc9c 	bl	8006bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800628e:	609a      	str	r2, [r3, #8]
      break;
 8006290:	e03c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 fc0e 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2150      	movs	r1, #80	@ 0x50
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fc67 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062b0:	e02c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062be:	461a      	mov	r2, r3
 80062c0:	f000 fc2d 	bl	8006b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2160      	movs	r1, #96	@ 0x60
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fc57 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062d0:	e01c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fbee 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2140      	movs	r1, #64	@ 0x40
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fc47 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062f0:	e00c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fc3e 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006302:	e003      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e000      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800630a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	00100070 	.word	0x00100070
 800632c:	00100040 	.word	0x00100040
 8006330:	00100030 	.word	0x00100030
 8006334:	00100020 	.word	0x00100020

08006338 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3e      	ldr	r2, [pc, #248]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a30      	ldr	r2, [pc, #192]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2b      	ldr	r2, [pc, #172]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a16      	ldr	r2, [pc, #88]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]
  }
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 0201 	bic.w	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0302 	bic.w	r3, r3, #2
 8006520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <TIM_OC1_SetConfig+0x10c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2b      	ldr	r2, [pc, #172]	@ (80065e4 <TIM_OC1_SetConfig+0x110>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2a      	ldr	r2, [pc, #168]	@ (80065e8 <TIM_OC1_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a29      	ldr	r2, [pc, #164]	@ (80065ec <TIM_OC1_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a28      	ldr	r2, [pc, #160]	@ (80065f0 <TIM_OC1_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10c      	bne.n	800656e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0308 	bic.w	r3, r3, #8
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0304 	bic.w	r3, r3, #4
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1b      	ldr	r2, [pc, #108]	@ (80065e0 <TIM_OC1_SetConfig+0x10c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1a      	ldr	r2, [pc, #104]	@ (80065e4 <TIM_OC1_SetConfig+0x110>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <TIM_OC1_SetConfig+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <TIM_OC1_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a17      	ldr	r2, [pc, #92]	@ (80065f0 <TIM_OC1_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d111      	bne.n	80065ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800659c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f023 0210 	bic.w	r2, r3, #16
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0320 	bic.w	r3, r3, #32
 8006642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <TIM_OC2_SetConfig+0x100>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC2_SetConfig+0x6c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <TIM_OC2_SetConfig+0x104>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10d      	bne.n	800667c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800667a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <TIM_OC2_SetConfig+0x100>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1c      	ldr	r2, [pc, #112]	@ (80066f8 <TIM_OC2_SetConfig+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <TIM_OC2_SetConfig+0x108>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <TIM_OC2_SetConfig+0x10c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a19      	ldr	r2, [pc, #100]	@ (8006704 <TIM_OC2_SetConfig+0x110>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d113      	bne.n	80066cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400
 80066fc:	40014000 	.word	0x40014000
 8006700:	40014400 	.word	0x40014400
 8006704:	40014800 	.word	0x40014800

08006708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <TIM_OC3_SetConfig+0xfc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_OC3_SetConfig+0x6a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <TIM_OC3_SetConfig+0x100>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10d      	bne.n	800678e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800678c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <TIM_OC3_SetConfig+0xfc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <TIM_OC3_SetConfig+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <TIM_OC3_SetConfig+0x104>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a19      	ldr	r2, [pc, #100]	@ (8006810 <TIM_OC3_SetConfig+0x108>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a18      	ldr	r2, [pc, #96]	@ (8006814 <TIM_OC3_SetConfig+0x10c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d113      	bne.n	80067de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40013400 	.word	0x40013400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a28      	ldr	r2, [pc, #160]	@ (8006918 <TIM_OC4_SetConfig+0x100>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC4_SetConfig+0x6c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a27      	ldr	r2, [pc, #156]	@ (800691c <TIM_OC4_SetConfig+0x104>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10d      	bne.n	80068a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	031b      	lsls	r3, r3, #12
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <TIM_OC4_SetConfig+0x100>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00f      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <TIM_OC4_SetConfig+0x104>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006920 <TIM_OC4_SetConfig+0x108>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006924 <TIM_OC4_SetConfig+0x10c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <TIM_OC4_SetConfig+0x110>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d113      	bne.n	80068f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <TIM_OC5_SetConfig+0xb4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <TIM_OC5_SetConfig+0xb8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a15      	ldr	r2, [pc, #84]	@ (80069e8 <TIM_OC5_SetConfig+0xbc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a14      	ldr	r2, [pc, #80]	@ (80069ec <TIM_OC5_SetConfig+0xc0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a13      	ldr	r2, [pc, #76]	@ (80069f0 <TIM_OC5_SetConfig+0xc4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d109      	bne.n	80069ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800

080069f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	051b      	lsls	r3, r3, #20
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <TIM_OC6_SetConfig+0xb8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a17      	ldr	r2, [pc, #92]	@ (8006ab0 <TIM_OC6_SetConfig+0xbc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <TIM_OC6_SetConfig+0xc0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <TIM_OC6_SetConfig+0xc4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	@ (8006abc <TIM_OC6_SetConfig+0xc8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d109      	bne.n	8006a84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 030a 	bic.w	r3, r3, #10
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b087      	sub	sp, #28
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f023 0210 	bic.w	r2, r3, #16
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f043 0307 	orr.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e065      	b.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2c      	ldr	r2, [pc, #176]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	d013      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a12      	ldr	r2, [pc, #72]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a13      	ldr	r2, [pc, #76]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10c      	bne.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40014000 	.word	0x40014000

08006d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e073      	b.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	041b      	lsls	r3, r3, #16
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d11c      	bne.n	8006e3a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	051b      	lsls	r3, r3, #20
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40013400 	.word	0x40013400

08006e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <memset>:
 8006eec:	4402      	add	r2, r0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memset+0xa>
 8006ef4:	4770      	bx	lr
 8006ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8006efa:	e7f9      	b.n	8006ef0 <memset+0x4>

08006efc <__libc_init_array>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	4d0d      	ldr	r5, [pc, #52]	@ (8006f34 <__libc_init_array+0x38>)
 8006f00:	4c0d      	ldr	r4, [pc, #52]	@ (8006f38 <__libc_init_array+0x3c>)
 8006f02:	1b64      	subs	r4, r4, r5
 8006f04:	10a4      	asrs	r4, r4, #2
 8006f06:	2600      	movs	r6, #0
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	d109      	bne.n	8006f20 <__libc_init_array+0x24>
 8006f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f3c <__libc_init_array+0x40>)
 8006f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f40 <__libc_init_array+0x44>)
 8006f10:	f000 f826 	bl	8006f60 <_init>
 8006f14:	1b64      	subs	r4, r4, r5
 8006f16:	10a4      	asrs	r4, r4, #2
 8006f18:	2600      	movs	r6, #0
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	d105      	bne.n	8006f2a <__libc_init_array+0x2e>
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f24:	4798      	blx	r3
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7ee      	b.n	8006f08 <__libc_init_array+0xc>
 8006f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2e:	4798      	blx	r3
 8006f30:	3601      	adds	r6, #1
 8006f32:	e7f2      	b.n	8006f1a <__libc_init_array+0x1e>
 8006f34:	08006f98 	.word	0x08006f98
 8006f38:	08006f98 	.word	0x08006f98
 8006f3c:	08006f98 	.word	0x08006f98
 8006f40:	08006f9c 	.word	0x08006f9c

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <_init>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr

08006f6c <_fini>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr
