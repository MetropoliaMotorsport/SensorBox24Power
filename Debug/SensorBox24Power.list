
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006fc4  08006fc4  00007fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe4  08006fe4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006fe4  08006fe4  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fe4  08006fe4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006fec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000000c  08006ff8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08006ff8  000086b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015913  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a42  00000000  00000000  0001d94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7d  00000000  00000000  000217b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207b4  00000000  00000000  00022735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f1d  00000000  00000000  00042ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6de  00000000  00000000  00057e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001324e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  00132528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00137bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006fac 	.word	0x08006fac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006fac 	.word	0x08006fac

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(check_bit(PWM_out_enable,1) != 0){
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <set_pwm_duty_cycle+0x84>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fda0 	bl	8000d6c <check_bit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d010      	beq.n	8000254 <set_pwm_duty_cycle+0x3c>
		PWM_speed[0] = (PWM_width[0] * 40)/100;
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4613      	mov	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4a18      	ldr	r2, [pc, #96]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 8000242:	fb82 1203 	smull	r1, r2, r2, r3
 8000246:	1152      	asrs	r2, r2, #5
 8000248:	17db      	asrs	r3, r3, #31
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000250:	801a      	strh	r2, [r3, #0]
 8000252:	e002      	b.n	800025a <set_pwm_duty_cycle+0x42>
	}else{
		PWM_speed[0] = 0;
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
	}
	if(check_bit(PWM_out_enable,0) != 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <set_pwm_duty_cycle+0x84>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fd83 	bl	8000d6c <check_bit>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d010      	beq.n	800028e <set_pwm_duty_cycle+0x76>
		PWM_speed[1] = (PWM_width[1] * 40)/100;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 800026e:	885b      	ldrh	r3, [r3, #2]
 8000270:	461a      	mov	r2, r3
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 800027c:	fb82 1203 	smull	r1, r2, r2, r3
 8000280:	1152      	asrs	r2, r2, #5
 8000282:	17db      	asrs	r3, r3, #31
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	b29a      	uxth	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 800028a:	805a      	strh	r2, [r3, #2]
	}else{
		PWM_speed[1] = 0;
	}
}
 800028c:	e002      	b.n	8000294 <set_pwm_duty_cycle+0x7c>
		PWM_speed[1] = 0;
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	805a      	strh	r2, [r3, #2]
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000643 	.word	0x20000643
 80002a0:	20000644 	.word	0x20000644
 80002a4:	51eb851f 	.word	0x51eb851f
 80002a8:	20000648 	.word	0x20000648

080002ac <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

		Config_1();

#elif ID == 2

		Config_2();
 80002b0:	f000 f802 	bl	80002b8 <Config_2>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Config_2>:

	switch_output();

}

void Config_2(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 80002be:	af00      	add	r7, sp, #0

	CAN_ID = 22;
 80002c0:	4be7      	ldr	r3, [pc, #924]	@ (8000660 <Config_2+0x3a8>)
 80002c2:	2216      	movs	r2, #22
 80002c4:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 80002c6:	4be7      	ldr	r3, [pc, #924]	@ (8000664 <Config_2+0x3ac>)
 80002c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002cc:	801a      	strh	r2, [r3, #0]

	//definition of Outputs
	Outputs OUT0_1 = {TSAL, 2050, 1900, 0, GPIOB, IN0_Pin, OUT0_1_pin};
 80002ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80002d2:	2258      	movs	r2, #88	@ 0x58
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f006 fe2e 	bl	8006f38 <memset>
 80002dc:	2306      	movs	r3, #6
 80002de:	f8a7 3268 	strh.w	r3, [r7, #616]	@ 0x268
 80002e2:	f640 0302 	movw	r3, #2050	@ 0x802
 80002e6:	f8a7 326a 	strh.w	r3, [r7, #618]	@ 0x26a
 80002ea:	f240 736c 	movw	r3, #1900	@ 0x76c
 80002ee:	f8a7 326c 	strh.w	r3, [r7, #620]	@ 0x26c
 80002f2:	4bdd      	ldr	r3, [pc, #884]	@ (8000668 <Config_2+0x3b0>)
 80002f4:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80002f8:	2308      	movs	r3, #8
 80002fa:	f8a7 3274 	strh.w	r3, [r7, #628]	@ 0x274
	Outputs OUT1_1 = {FAN, 2050, 1900, 0, GPIOA, IN1_Pin, OUT1_1_pin};
 80002fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000302:	2258      	movs	r2, #88	@ 0x58
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f006 fe16 	bl	8006f38 <memset>
 800030c:	2303      	movs	r3, #3
 800030e:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
 8000312:	f640 0302 	movw	r3, #2050	@ 0x802
 8000316:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
 800031a:	f240 736c 	movw	r3, #1900	@ 0x76c
 800031e:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
 8000322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000326:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800032a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800032e:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
 8000332:	2301      	movs	r3, #1
 8000334:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	Outputs OUT2_1 = {FAN, 2050, 1900, 0, GPIOA, IN2_Pin, OUT2_1_pin};
 8000338:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800033c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000340:	4618      	mov	r0, r3
 8000342:	2358      	movs	r3, #88	@ 0x58
 8000344:	461a      	mov	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f006 fdf6 	bl	8006f38 <memset>
 800034c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000354:	2203      	movs	r2, #3
 8000356:	801a      	strh	r2, [r3, #0]
 8000358:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800035c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000360:	f640 0202 	movw	r2, #2050	@ 0x802
 8000364:	805a      	strh	r2, [r3, #2]
 8000366:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800036a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800036e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000372:	809a      	strh	r2, [r3, #4]
 8000374:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800037c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800038a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800038e:	819a      	strh	r2, [r3, #12]
 8000390:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000398:	2202      	movs	r2, #2
 800039a:	739a      	strb	r2, [r3, #14]
	Outputs OUT3_1 = {BRAKE_LIGHT, 2050, 1900, 0, GPIOA, IN3_Pin, OUT3_1_pin};
 800039c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003a4:	4618      	mov	r0, r3
 80003a6:	2358      	movs	r3, #88	@ 0x58
 80003a8:	461a      	mov	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	f006 fdc4 	bl	8006f38 <memset>
 80003b0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003b8:	2201      	movs	r2, #1
 80003ba:	801a      	strh	r2, [r3, #0]
 80003bc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003c4:	f640 0202 	movw	r2, #2050	@ 0x802
 80003c8:	805a      	strh	r2, [r3, #2]
 80003ca:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003d2:	f240 726c 	movw	r2, #1900	@ 0x76c
 80003d6:	809a      	strh	r2, [r3, #4]
 80003d8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003f2:	819a      	strh	r2, [r3, #12]
 80003f4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80003f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80003fc:	2203      	movs	r2, #3
 80003fe:	739a      	strb	r2, [r3, #14]
	Outputs OUT0_2 = {BUZZER, 2050, 1900, 0, GPIOA, IN0_2_Pin, OUT0_2_pin};
 8000400:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000404:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000408:	4618      	mov	r0, r3
 800040a:	2358      	movs	r3, #88	@ 0x58
 800040c:	461a      	mov	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f006 fd92 	bl	8006f38 <memset>
 8000414:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000418:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800041c:	2205      	movs	r2, #5
 800041e:	801a      	strh	r2, [r3, #0]
 8000420:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000424:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000428:	f640 0202 	movw	r2, #2050	@ 0x802
 800042c:	805a      	strh	r2, [r3, #2]
 800042e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000432:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000436:	f240 726c 	movw	r2, #1900	@ 0x76c
 800043a:	809a      	strh	r2, [r3, #4]
 800043c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000440:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000444:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800044e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000452:	2210      	movs	r2, #16
 8000454:	819a      	strh	r2, [r3, #12]
 8000456:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800045a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800045e:	2204      	movs	r2, #4
 8000460:	739a      	strb	r2, [r3, #14]
	Outputs OUT1_2 = {IMU, 2050, 1900, 0, GPIOA, IN1_2_Pin, OUT1_2_pin};
 8000462:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000466:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800046a:	4618      	mov	r0, r3
 800046c:	2358      	movs	r3, #88	@ 0x58
 800046e:	461a      	mov	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f006 fd61 	bl	8006f38 <memset>
 8000476:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800047a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800047e:	2207      	movs	r2, #7
 8000480:	801a      	strh	r2, [r3, #0]
 8000482:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000486:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800048a:	f640 0202 	movw	r2, #2050	@ 0x802
 800048e:	805a      	strh	r2, [r3, #2]
 8000490:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000494:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000498:	f240 726c 	movw	r2, #1900	@ 0x76c
 800049c:	809a      	strh	r2, [r3, #4]
 800049e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004a2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80004a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004b0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80004b4:	2202      	movs	r2, #2
 80004b6:	819a      	strh	r2, [r3, #12]
 80004b8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004bc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80004c0:	2205      	movs	r2, #5
 80004c2:	739a      	strb	r2, [r3, #14]
	Outputs OUT2_2 = {PUMP, 2050, 1900, 0, GPIOB, IN2_2_Pin, OUT2_2_pin};
 80004c4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004c8:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80004cc:	4618      	mov	r0, r3
 80004ce:	2358      	movs	r3, #88	@ 0x58
 80004d0:	461a      	mov	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f006 fd30 	bl	8006f38 <memset>
 80004d8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004dc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80004e0:	2204      	movs	r2, #4
 80004e2:	801a      	strh	r2, [r3, #0]
 80004e4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004e8:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80004ec:	f640 0202 	movw	r2, #2050	@ 0x802
 80004f0:	805a      	strh	r2, [r3, #2]
 80004f2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80004f6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80004fa:	f240 726c 	movw	r2, #1900	@ 0x76c
 80004fe:	809a      	strh	r2, [r3, #4]
 8000500:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000504:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000508:	4a57      	ldr	r2, [pc, #348]	@ (8000668 <Config_2+0x3b0>)
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000510:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	819a      	strh	r2, [r3, #12]
 8000518:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800051c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000520:	2206      	movs	r2, #6
 8000522:	739a      	strb	r2, [r3, #14]
	Outputs OUT3_2 = {NC, 2050, 1900, 0, GPIOB, IN3_2_Pin, OUT3_2_pin};
 8000524:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000528:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 800052c:	4618      	mov	r0, r3
 800052e:	2358      	movs	r3, #88	@ 0x58
 8000530:	461a      	mov	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f006 fd00 	bl	8006f38 <memset>
 8000538:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800053c:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8000540:	f640 0202 	movw	r2, #2050	@ 0x802
 8000544:	805a      	strh	r2, [r3, #2]
 8000546:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800054a:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 800054e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000552:	809a      	strh	r2, [r3, #4]
 8000554:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000558:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 800055c:	4a42      	ldr	r2, [pc, #264]	@ (8000668 <Config_2+0x3b0>)
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000564:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8000568:	2210      	movs	r2, #16
 800056a:	819a      	strh	r2, [r3, #12]
 800056c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000570:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8000574:	2207      	movs	r2, #7
 8000576:	739a      	strb	r2, [r3, #14]

	outputs[OUT0_1.pin] = OUT0_1;
 8000578:	f897 3276 	ldrb.w	r3, [r7, #630]	@ 0x276
 800057c:	4619      	mov	r1, r3
 800057e:	4a3b      	ldr	r2, [pc, #236]	@ (800066c <Config_2+0x3b4>)
 8000580:	2358      	movs	r3, #88	@ 0x58
 8000582:	fb01 f303 	mul.w	r3, r1, r3
 8000586:	4413      	add	r3, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800058e:	2258      	movs	r2, #88	@ 0x58
 8000590:	4619      	mov	r1, r3
 8000592:	f006 fcfd 	bl	8006f90 <memcpy>
	outputs[OUT1_1.pin] = OUT1_1;
 8000596:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800059a:	4619      	mov	r1, r3
 800059c:	4a33      	ldr	r2, [pc, #204]	@ (800066c <Config_2+0x3b4>)
 800059e:	2358      	movs	r3, #88	@ 0x58
 80005a0:	fb01 f303 	mul.w	r3, r1, r3
 80005a4:	4413      	add	r3, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80005ac:	2258      	movs	r2, #88	@ 0x58
 80005ae:	4619      	mov	r1, r3
 80005b0:	f006 fcee 	bl	8006f90 <memcpy>
	outputs[OUT2_1.pin] = OUT2_1;
 80005b4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005bc:	7b9b      	ldrb	r3, [r3, #14]
 80005be:	4619      	mov	r1, r3
 80005c0:	4a2a      	ldr	r2, [pc, #168]	@ (800066c <Config_2+0x3b4>)
 80005c2:	2358      	movs	r3, #88	@ 0x58
 80005c4:	fb01 f303 	mul.w	r3, r1, r3
 80005c8:	441a      	add	r2, r3
 80005ca:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005d2:	4610      	mov	r0, r2
 80005d4:	4619      	mov	r1, r3
 80005d6:	2358      	movs	r3, #88	@ 0x58
 80005d8:	461a      	mov	r2, r3
 80005da:	f006 fcd9 	bl	8006f90 <memcpy>
	outputs[OUT3_1.pin] = OUT3_1;
 80005de:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80005e6:	7b9b      	ldrb	r3, [r3, #14]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4a20      	ldr	r2, [pc, #128]	@ (800066c <Config_2+0x3b4>)
 80005ec:	2358      	movs	r3, #88	@ 0x58
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	441a      	add	r2, r3
 80005f4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80005f8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80005fc:	4610      	mov	r0, r2
 80005fe:	4619      	mov	r1, r3
 8000600:	2358      	movs	r3, #88	@ 0x58
 8000602:	461a      	mov	r2, r3
 8000604:	f006 fcc4 	bl	8006f90 <memcpy>
	outputs[OUT0_2.pin] = OUT0_2;
 8000608:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800060c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000610:	7b9b      	ldrb	r3, [r3, #14]
 8000612:	4619      	mov	r1, r3
 8000614:	4a15      	ldr	r2, [pc, #84]	@ (800066c <Config_2+0x3b4>)
 8000616:	2358      	movs	r3, #88	@ 0x58
 8000618:	fb01 f303 	mul.w	r3, r1, r3
 800061c:	441a      	add	r2, r3
 800061e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000622:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000626:	4610      	mov	r0, r2
 8000628:	4619      	mov	r1, r3
 800062a:	2358      	movs	r3, #88	@ 0x58
 800062c:	461a      	mov	r2, r3
 800062e:	f006 fcaf 	bl	8006f90 <memcpy>
	outputs[OUT1_2.pin] = OUT1_2;
 8000632:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000636:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800063a:	7b9b      	ldrb	r3, [r3, #14]
 800063c:	4619      	mov	r1, r3
 800063e:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <Config_2+0x3b4>)
 8000640:	2358      	movs	r3, #88	@ 0x58
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	441a      	add	r2, r3
 8000648:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800064c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000650:	4610      	mov	r0, r2
 8000652:	4619      	mov	r1, r3
 8000654:	2358      	movs	r3, #88	@ 0x58
 8000656:	461a      	mov	r2, r3
 8000658:	f006 fc9a 	bl	8006f90 <memcpy>
 800065c:	e008      	b.n	8000670 <Config_2+0x3b8>
 800065e:	bf00      	nop
 8000660:	2000064c 	.word	0x2000064c
 8000664:	2000064e 	.word	0x2000064e
 8000668:	48000400 	.word	0x48000400
 800066c:	20000380 	.word	0x20000380
	outputs[OUT2_2.pin] = OUT2_2;
 8000670:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000674:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8000678:	7b9b      	ldrb	r3, [r3, #14]
 800067a:	4619      	mov	r1, r3
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <Config_2+0x434>)
 800067e:	2358      	movs	r3, #88	@ 0x58
 8000680:	fb01 f303 	mul.w	r3, r1, r3
 8000684:	441a      	add	r2, r3
 8000686:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800068a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800068e:	4610      	mov	r0, r2
 8000690:	4619      	mov	r1, r3
 8000692:	2358      	movs	r3, #88	@ 0x58
 8000694:	461a      	mov	r2, r3
 8000696:	f006 fc7b 	bl	8006f90 <memcpy>
	outputs[OUT3_2.pin] = OUT3_2;
 800069a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800069e:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80006a2:	7b9b      	ldrb	r3, [r3, #14]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <Config_2+0x434>)
 80006a8:	2358      	movs	r3, #88	@ 0x58
 80006aa:	fb01 f303 	mul.w	r3, r1, r3
 80006ae:	441a      	add	r2, r3
 80006b0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80006b4:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80006b8:	4610      	mov	r0, r2
 80006ba:	4619      	mov	r1, r3
 80006bc:	2358      	movs	r3, #88	@ 0x58
 80006be:	461a      	mov	r2, r3
 80006c0:	f006 fc66 	bl	8006f90 <memcpy>

	Default_Switch_State = 0b01100111; //each bit represent one output [8,7,6,5,4,3,2,1]
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <Config_2+0x438>)
 80006c6:	2267      	movs	r2, #103	@ 0x67
 80006c8:	701a      	strb	r2, [r3, #0]

	PWM_out_enable = 0b11;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <Config_2+0x43c>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	701a      	strb	r2, [r3, #0]

	//Duty cycle 0-100%
	PWM_width[0] = 10;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <Config_2+0x440>)
 80006d2:	220a      	movs	r2, #10
 80006d4:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 10;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <Config_2+0x440>)
 80006d8:	220a      	movs	r2, #10
 80006da:	805a      	strh	r2, [r3, #2]

	switch_output();
 80006dc:	f000 f87e 	bl	80007dc <switch_output>

}
 80006e0:	bf00      	nop
 80006e2:	f507 7730 	add.w	r7, r7, #704	@ 0x2c0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000380 	.word	0x20000380
 80006f0:	20000642 	.word	0x20000642
 80006f4:	20000643 	.word	0x20000643
 80006f8:	20000644 	.word	0x20000644

080006fc <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	d022      	beq.n	8000756 <HAL_FDCAN_RxFifo0Callback+0x5a>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000714:	2140      	movs	r1, #64	@ 0x40
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f003 fb1e 	bl	8003d58 <HAL_FDCAN_GetRxMessage>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000722:	f001 f89d 	bl	8001860 <Error_Handler>
 8000726:	e00c      	b.n	8000742 <HAL_FDCAN_RxFifo0Callback+0x46>
		}else{
			if(RxHeader.Identifier == CAN_ID){
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <HAL_FDCAN_RxFifo0Callback+0x46>
				RxMessage.DLC = RxHeader.DataLength;
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x70>)
 800073c:	701a      	strb	r2, [r3, #0]
				decode();
 800073e:	f000 f8cd 	bl	80008dc <decode>
			}
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000742:	2200      	movs	r2, #0
 8000744:	2101      	movs	r1, #1
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f003 fc20 	bl	8003f8c <HAL_FDCAN_ActivateNotification>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_FDCAN_RxFifo0Callback+0x5a>
		{
			/* Notification Error */
			Error_Handler();
 8000752:	f001 f885 	bl	8001860 <Error_Handler>
		}
	}
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000069d 	.word	0x2000069d
 8000764:	20000674 	.word	0x20000674
 8000768:	2000064c 	.word	0x2000064c
 800076c:	2000069c 	.word	0x2000069c

08000770 <CanSend>:

void CanSend(uint8_t *TxData){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000778:	e006      	b.n	8000788 <CanSend+0x18>
		Error_Handler();
 800077a:	f001 f871 	bl	8001860 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	480a      	ldr	r0, [pc, #40]	@ (80007ac <CanSend+0x3c>)
 8000784:	f004 f8ca 	bl	800491c <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CanSend+0x40>)
 800078a:	f003 fbed 	bl	8003f68 <HAL_FDCAN_GetTxFifoFreeLevel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d007      	beq.n	80007a4 <CanSend+0x34>
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4907      	ldr	r1, [pc, #28]	@ (80007b4 <CanSend+0x44>)
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <CanSend+0x40>)
 800079a:	f003 fa99 	bl	8003cd0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1ea      	bne.n	800077a <CanSend+0xa>
	}
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000400 	.word	0x48000400
 80007b0:	20000108 	.word	0x20000108
 80007b4:	20000650 	.word	0x20000650

080007b8 <switch_on_off>:
		}
		CanSend(TxData2);
	}
}

void switch_on_off(GPIO_TypeDef *port, uint16_t pin, uint8_t state){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(port, pin, state);
 80007c8:	787a      	ldrb	r2, [r7, #1]
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f004 f8a4 	bl	800491c <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <switch_output>:

void switch_output(){
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8;i++){
 80007e6:	2300      	movs	r3, #0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	e02f      	b.n	800084c <switch_output+0x70>
		outputs[i].state = check_bit(Default_Switch_State, i);
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <switch_output+0x80>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	79fc      	ldrb	r4, [r7, #7]
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fab8 	bl	8000d6c <check_bit>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4619      	mov	r1, r3
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <switch_output+0x84>)
 8000802:	2358      	movs	r3, #88	@ 0x58
 8000804:	fb04 f303 	mul.w	r3, r4, r3
 8000808:	4413      	add	r3, r2
 800080a:	3354      	adds	r3, #84	@ 0x54
 800080c:	460a      	mov	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
		switch_on_off(outputs[i].port, outputs[i].physical_pin, outputs[i].state);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <switch_output+0x84>)
 8000814:	2158      	movs	r1, #88	@ 0x58
 8000816:	fb01 f303 	mul.w	r3, r1, r3
 800081a:	4413      	add	r3, r2
 800081c:	3308      	adds	r3, #8
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <switch_output+0x84>)
 8000824:	2158      	movs	r1, #88	@ 0x58
 8000826:	fb01 f303 	mul.w	r3, r1, r3
 800082a:	4413      	add	r3, r2
 800082c:	330c      	adds	r3, #12
 800082e:	8819      	ldrh	r1, [r3, #0]
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <switch_output+0x84>)
 8000834:	2458      	movs	r4, #88	@ 0x58
 8000836:	fb04 f303 	mul.w	r3, r4, r3
 800083a:	4413      	add	r3, r2
 800083c:	3354      	adds	r3, #84	@ 0x54
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	f7ff ffb9 	bl	80007b8 <switch_on_off>
	for(i = 0; i < 8;i++){
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3301      	adds	r3, #1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b07      	cmp	r3, #7
 8000850:	d9cc      	bls.n	80007ec <switch_output+0x10>
	}
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	20000642 	.word	0x20000642
 8000860:	20000380 	.word	0x20000380

08000864 <Over_current>:

void Over_current(uint8_t output_pin){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <Over_current+0x24>)
 8000870:	220f      	movs	r2, #15
 8000872:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <Over_current+0x24>)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <Over_current+0x24>)
 800087c:	f7ff ff78 	bl	8000770 <CanSend>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000028 	.word	0x20000028

0800088c <Warning_current>:

void Warning_current(uint8_t output_pin){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <Warning_current+0x24>)
 8000898:	220e      	movs	r2, #14
 800089a:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <Warning_current+0x24>)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <Warning_current+0x24>)
 80008a4:	f7ff ff64 	bl	8000770 <CanSend>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000028 	.word	0x20000028

080008b4 <Under_current>:

void Under_current(uint8_t output_pin){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 13;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <Under_current+0x24>)
 80008c0:	220d      	movs	r2, #13
 80008c2:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <Under_current+0x24>)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <Under_current+0x24>)
 80008cc:	f7ff ff50 	bl	8000770 <CanSend>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000028 	.word	0x20000028

080008dc <decode>:

void decode(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	switch(RxMessage.Bytes[0]){
 80008e2:	4b4a      	ldr	r3, [pc, #296]	@ (8000a0c <decode+0x130>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	f200 8087 	bhi.w	80009fc <decode+0x120>
 80008ee:	a201      	add	r2, pc, #4	@ (adr r2, 80008f4 <decode+0x18>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000909 	.word	0x08000909
 80008f8:	08000943 	.word	0x08000943
 80008fc:	08000963 	.word	0x08000963
 8000900:	08000975 	.word	0x08000975
 8000904:	080009b9 	.word	0x080009b9
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxMessage.Bytes[1]){
 8000908:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <decode+0x130>)
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d002      	beq.n	8000916 <decode+0x3a>
 8000910:	2b02      	cmp	r3, #2
 8000912:	d009      	beq.n	8000928 <decode+0x4c>
 8000914:	e011      	b.n	800093a <decode+0x5e>
		case 1:										//PUMPS
			PWM_width[0] = RxMessage.Bytes[2];
 8000916:	4b3d      	ldr	r3, [pc, #244]	@ (8000a0c <decode+0x130>)
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	461a      	mov	r2, r3
 800091c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a10 <decode+0x134>)
 800091e:	801a      	strh	r2, [r3, #0]
			set_pwm_duty_cycle(&htim1);
 8000920:	483c      	ldr	r0, [pc, #240]	@ (8000a14 <decode+0x138>)
 8000922:	f7ff fc79 	bl	8000218 <set_pwm_duty_cycle>
			break;
 8000926:	e00b      	b.n	8000940 <decode+0x64>
		case 2:										//FANS
			PWM_width[1] = RxMessage.Bytes[2];
 8000928:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <decode+0x130>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	461a      	mov	r2, r3
 800092e:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <decode+0x134>)
 8000930:	805a      	strh	r2, [r3, #2]
			set_pwm_duty_cycle(&htim2);
 8000932:	4839      	ldr	r0, [pc, #228]	@ (8000a18 <decode+0x13c>)
 8000934:	f7ff fc70 	bl	8000218 <set_pwm_duty_cycle>
			break;
 8000938:	e002      	b.n	8000940 <decode+0x64>
		default:
			Error_Handler();
 800093a:	f000 ff91 	bl	8001860 <Error_Handler>
			break;
 800093e:	bf00      	nop
		}
		break;
 8000940:	e05f      	b.n	8000a02 <decode+0x126>
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxMessage.Bytes[1],RxMessage.Bytes[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 8000942:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <decode+0x140>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4a31      	ldr	r2, [pc, #196]	@ (8000a0c <decode+0x130>)
 8000948:	7891      	ldrb	r1, [r2, #2]
 800094a:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <decode+0x130>)
 800094c:	78d2      	ldrb	r2, [r2, #3]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fa28 	bl	8000da4 <set_bit>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <decode+0x140>)
 800095a:	701a      	strb	r2, [r3, #0]
		switch_output();
 800095c:	f7ff ff3e 	bl	80007dc <switch_output>
		break;
 8000960:	e04f      	b.n	8000a02 <decode+0x126>
	case 3:							// turning analog node on and off, RxData[1] -> 0 is off 1 is on
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,RxMessage.Bytes[1]);
 8000962:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <decode+0x130>)
 8000964:	789b      	ldrb	r3, [r3, #2]
 8000966:	461a      	mov	r2, r3
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f003 ffd5 	bl	800491c <HAL_GPIO_WritePin>
		break;
 8000972:	e046      	b.n	8000a02 <decode+0x126>
	case 4:							//switch BRAKE_LIGHT	RxData[1] --> 0 for off and 1 for on
		for(int i = 0; i < 8; i++){
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	e01a      	b.n	80009b0 <decode+0xd4>
			if(outputs[i].device == BRAKE_LIGHT){
 800097a:	4a29      	ldr	r2, [pc, #164]	@ (8000a20 <decode+0x144>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2158      	movs	r1, #88	@ 0x58
 8000980:	fb01 f303 	mul.w	r3, r1, r3
 8000984:	4413      	add	r3, r2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <decode+0xce>
				Default_Switch_State = set_bit(Default_Switch_State,i,RxMessage.Bytes[1]);
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <decode+0x140>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	b2d1      	uxtb	r1, r2
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <decode+0x130>)
 8000996:	7892      	ldrb	r2, [r2, #2]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fa03 	bl	8000da4 <set_bit>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a1c <decode+0x140>)
 80009a4:	701a      	strb	r2, [r3, #0]
				switch_output();
 80009a6:	f7ff ff19 	bl	80007dc <switch_output>
		for(int i = 0; i < 8; i++){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	dde1      	ble.n	800097a <decode+0x9e>
			}
		}
		break;
 80009b6:	e024      	b.n	8000a02 <decode+0x126>
	case 5:							//switch BUZZER on off
		for(int i = 0; i < 8; i++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	e01a      	b.n	80009f4 <decode+0x118>
			if(outputs[i].device == BUZZER){
 80009be:	4a18      	ldr	r2, [pc, #96]	@ (8000a20 <decode+0x144>)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2158      	movs	r1, #88	@ 0x58
 80009c4:	fb01 f303 	mul.w	r3, r1, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d10e      	bne.n	80009ee <decode+0x112>
				Default_Switch_State = set_bit(Default_Switch_State,i,RxMessage.Bytes[1]);
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <decode+0x140>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	b2d1      	uxtb	r1, r2
 80009d8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <decode+0x130>)
 80009da:	7892      	ldrb	r2, [r2, #2]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f9e1 	bl	8000da4 <set_bit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <decode+0x140>)
 80009e8:	701a      	strb	r2, [r3, #0]
				switch_output();
 80009ea:	f7ff fef7 	bl	80007dc <switch_output>
		for(int i = 0; i < 8; i++){
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	dde1      	ble.n	80009be <decode+0xe2>
			}
		}
		break;
 80009fa:	e002      	b.n	8000a02 <decode+0x126>
	default:
		//decode_error(); //TODO: IMPLEMENT
		Error_Handler();
 80009fc:	f000 ff30 	bl	8001860 <Error_Handler>
		break;
 8000a00:	bf00      	nop
	}
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000069c 	.word	0x2000069c
 8000a10:	20000644 	.word	0x20000644
 8000a14:	2000016c 	.word	0x2000016c
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	20000642 	.word	0x20000642
 8000a20:	20000380 	.word	0x20000380

08000a24 <Current_Sense_process>:



void Current_Sense_process(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	for(int i = 0; i < 8; i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e051      	b.n	8000ad4 <Current_Sense_process+0xb0>
		outputs[i].raw_current = outputs[i].Current_Sense[0];
 8000a30:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2158      	movs	r1, #88	@ 0x58
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3314      	adds	r3, #20
 8000a3e:	8818      	ldrh	r0, [r3, #0]
 8000a40:	4a29      	ldr	r2, [pc, #164]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2158      	movs	r1, #88	@ 0x58
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3312      	adds	r3, #18
 8000a4e:	4602      	mov	r2, r0
 8000a50:	801a      	strh	r2, [r3, #0]
		for(int z = 1; z < I_AVERAGE; z++){
 8000a52:	2301      	movs	r3, #1
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	e021      	b.n	8000a9c <Current_Sense_process+0x78>
			outputs[i].raw_current = (outputs[i].raw_current + outputs[i].Current_Sense[0])/2;
 8000a58:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2158      	movs	r1, #88	@ 0x58
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	3312      	adds	r3, #18
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2158      	movs	r1, #88	@ 0x58
 8000a70:	fb01 f303 	mul.w	r3, r1, r3
 8000a74:	4413      	add	r3, r2
 8000a76:	3314      	adds	r3, #20
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	4403      	add	r3, r0
 8000a7c:	0fda      	lsrs	r2, r3, #31
 8000a7e:	4413      	add	r3, r2
 8000a80:	105b      	asrs	r3, r3, #1
 8000a82:	b298      	uxth	r0, r3
 8000a84:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2158      	movs	r1, #88	@ 0x58
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	3312      	adds	r3, #18
 8000a92:	4602      	mov	r2, r0
 8000a94:	801a      	strh	r2, [r3, #0]
		for(int z = 1; z < I_AVERAGE; z++){
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b1f      	cmp	r3, #31
 8000aa0:	ddda      	ble.n	8000a58 <Current_Sense_process+0x34>

		}
		outputs[i].actual_current = Current_Sense_Raw_to_mA(outputs[i].raw_current);
 8000aa2:	4a11      	ldr	r2, [pc, #68]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2158      	movs	r1, #88	@ 0x58
 8000aa8:	fb01 f303 	mul.w	r3, r1, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	3312      	adds	r3, #18
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f99c 	bl	8000df0 <Current_Sense_Raw_to_mA>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4618      	mov	r0, r3
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <Current_Sense_process+0xc4>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2158      	movs	r1, #88	@ 0x58
 8000ac2:	fb01 f303 	mul.w	r3, r1, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3310      	adds	r3, #16
 8000aca:	4602      	mov	r2, r0
 8000acc:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	ddaa      	ble.n	8000a30 <Current_Sense_process+0xc>
	}
	check_warnings();
 8000ada:	f000 f807 	bl	8000aec <check_warnings>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000380 	.word	0x20000380

08000aec <check_warnings>:

void check_warnings(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e060      	b.n	8000bba <check_warnings+0xce>
		if(outputs[x].device != NC){
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a34      	ldr	r2, [pc, #208]	@ (8000bcc <check_warnings+0xe0>)
 8000afc:	2158      	movs	r1, #88	@ 0x58
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d03e      	beq.n	8000b88 <check_warnings+0x9c>
			if(outputs[x].actual_current >= outputs[x].Warning_Current){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <check_warnings+0xe0>)
 8000b0e:	2158      	movs	r1, #88	@ 0x58
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	3310      	adds	r3, #16
 8000b18:	881a      	ldrh	r2, [r3, #0]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	492b      	ldr	r1, [pc, #172]	@ (8000bcc <check_warnings+0xe0>)
 8000b1e:	2058      	movs	r0, #88	@ 0x58
 8000b20:	fb00 f303 	mul.w	r3, r0, r3
 8000b24:	440b      	add	r3, r1
 8000b26:	3304      	adds	r3, #4
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d32c      	bcc.n	8000b88 <check_warnings+0x9c>
				if(outputs[x].actual_current >= outputs[x].Over_Current){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a26      	ldr	r2, [pc, #152]	@ (8000bcc <check_warnings+0xe0>)
 8000b32:	2158      	movs	r1, #88	@ 0x58
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	3310      	adds	r3, #16
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4922      	ldr	r1, [pc, #136]	@ (8000bcc <check_warnings+0xe0>)
 8000b42:	2058      	movs	r0, #88	@ 0x58
 8000b44:	fb00 f303 	mul.w	r3, r0, r3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d316      	bcc.n	8000b80 <check_warnings+0x94>
					Default_Switch_State = set_bit(Default_Switch_State, outputs[x].pin, 0);
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <check_warnings+0xe4>)
 8000b54:	7818      	ldrb	r0, [r3, #0]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a1c      	ldr	r2, [pc, #112]	@ (8000bcc <check_warnings+0xe0>)
 8000b5a:	2158      	movs	r1, #88	@ 0x58
 8000b5c:	fb01 f303 	mul.w	r3, r1, r3
 8000b60:	4413      	add	r3, r2
 8000b62:	330e      	adds	r3, #14
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f000 f91b 	bl	8000da4 <set_bit>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <check_warnings+0xe4>)
 8000b74:	701a      	strb	r2, [r3, #0]
					Over_current(x);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe73 	bl	8000864 <Over_current>
 8000b7e:	e003      	b.n	8000b88 <check_warnings+0x9c>
				}else{
					Warning_current(x);
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe82 	bl	800088c <Warning_current>
				}
			}
		}
		if(outputs[x].actual_current < outputs[x].Under_Current){
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <check_warnings+0xe0>)
 8000b8c:	2158      	movs	r1, #88	@ 0x58
 8000b8e:	fb01 f303 	mul.w	r3, r1, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	3310      	adds	r3, #16
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <check_warnings+0xe0>)
 8000b9c:	2058      	movs	r0, #88	@ 0x58
 8000b9e:	fb00 f303 	mul.w	r3, r0, r3
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d203      	bcs.n	8000bb4 <check_warnings+0xc8>
			Under_current(x);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe80 	bl	80008b4 <Under_current>
	for(uint8_t x = 0; x < 7; x++){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d99b      	bls.n	8000af8 <check_warnings+0xc>
		}
	}
	switch_output();
 8000bc0:	f7ff fe0c 	bl	80007dc <switch_output>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000380 	.word	0x20000380
 8000bd0:	20000642 	.word	0x20000642

08000bd4 <ConfigureCurrentSense>:


void ConfigureCurrentSense(uint8_t SEL0, uint8_t SEL1){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB,SEL0_Pin,SEL0);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	461a      	mov	r2, r3
 8000be8:	2140      	movs	r1, #64	@ 0x40
 8000bea:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <ConfigureCurrentSense+0x30>)
 8000bec:	f003 fe96 	bl	800491c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,SEL1_Pin,SEL1);
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <ConfigureCurrentSense+0x30>)
 8000bf8:	f003 fe90 	bl	800491c <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	48000400 	.word	0x48000400

08000c08 <ReadADCValues>:

void ReadADCValues(uint16_t *adc1_values, uint16_t *adc2_values){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < I_AVERAGE; i++){
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e048      	b.n	8000caa <ReadADCValues+0xa2>
		if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000c18:	4828      	ldr	r0, [pc, #160]	@ (8000cbc <ReadADCValues+0xb4>)
 8000c1a:	f001 fd95 	bl	8002748 <HAL_ADC_Start>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <ReadADCValues+0x20>
 8000c24:	f000 fe1c 	bl	8001860 <Error_Handler>
		if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000c28:	4825      	ldr	r0, [pc, #148]	@ (8000cc0 <ReadADCValues+0xb8>)
 8000c2a:	f001 fd8d 	bl	8002748 <HAL_ADC_Start>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <ReadADCValues+0x30>
 8000c34:	f000 fe14 	bl	8001860 <Error_Handler>
		if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000c38:	2164      	movs	r1, #100	@ 0x64
 8000c3a:	4820      	ldr	r0, [pc, #128]	@ (8000cbc <ReadADCValues+0xb4>)
 8000c3c:	f001 fe74 	bl	8002928 <HAL_ADC_PollForConversion>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <ReadADCValues+0x42>
 8000c46:	f000 fe0b 	bl	8001860 <Error_Handler>
		if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000c4a:	2164      	movs	r1, #100	@ 0x64
 8000c4c:	481c      	ldr	r0, [pc, #112]	@ (8000cc0 <ReadADCValues+0xb8>)
 8000c4e:	f001 fe6b 	bl	8002928 <HAL_ADC_PollForConversion>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <ReadADCValues+0x54>
 8000c58:	f000 fe02 	bl	8001860 <Error_Handler>
        adc1_values[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <ReadADCValues+0xb4>)
 8000c5e:	f001 ff3b 	bl	8002ad8 <HAL_ADC_GetValue>
 8000c62:	4601      	mov	r1, r0
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b28a      	uxth	r2, r1
 8000c6e:	801a      	strh	r2, [r3, #0]
        adc2_values[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000c70:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <ReadADCValues+0xb8>)
 8000c72:	f001 ff31 	bl	8002ad8 <HAL_ADC_GetValue>
 8000c76:	4601      	mov	r1, r0
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b28a      	uxth	r2, r1
 8000c82:	801a      	strh	r2, [r3, #0]
		if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000c84:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <ReadADCValues+0xb4>)
 8000c86:	f001 fe1b 	bl	80028c0 <HAL_ADC_Stop>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <ReadADCValues+0x8c>
 8000c90:	f000 fde6 	bl	8001860 <Error_Handler>
		if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000c94:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <ReadADCValues+0xb8>)
 8000c96:	f001 fe13 	bl	80028c0 <HAL_ADC_Stop>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <ReadADCValues+0x9c>
 8000ca0:	f000 fdde 	bl	8001860 <Error_Handler>
	for(int i = 0; i < I_AVERAGE; i++){
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b1f      	cmp	r3, #31
 8000cae:	ddb3      	ble.n	8000c18 <ReadADCValues+0x10>
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000030 	.word	0x20000030
 8000cc0:	2000009c 	.word	0x2000009c

08000cc4 <Current_Sense_read>:

void Current_Sense_read(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	for(int x = 0;x < 5; x++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	e034      	b.n	8000d3a <Current_Sense_read+0x76>
		switch(x){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d82e      	bhi.n	8000d34 <Current_Sense_read+0x70>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <Current_Sense_read+0x18>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000cff 	.word	0x08000cff
 8000ce4:	08000d11 	.word	0x08000d11
 8000ce8:	08000d23 	.word	0x08000d23
		case 0:
			ConfigureCurrentSense(0, 0);
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff70 	bl	8000bd4 <ConfigureCurrentSense>
			ReadADCValues(outputs[0].Current_Sense, outputs[4].Current_Sense);
 8000cf4:	4915      	ldr	r1, [pc, #84]	@ (8000d4c <Current_Sense_read+0x88>)
 8000cf6:	4816      	ldr	r0, [pc, #88]	@ (8000d50 <Current_Sense_read+0x8c>)
 8000cf8:	f7ff ff86 	bl	8000c08 <ReadADCValues>
			break;
 8000cfc:	e01a      	b.n	8000d34 <Current_Sense_read+0x70>
		case 1:
			ConfigureCurrentSense(0, 1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff67 	bl	8000bd4 <ConfigureCurrentSense>
			ReadADCValues(outputs[1].Current_Sense, outputs[5].Current_Sense);
 8000d06:	4913      	ldr	r1, [pc, #76]	@ (8000d54 <Current_Sense_read+0x90>)
 8000d08:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <Current_Sense_read+0x94>)
 8000d0a:	f7ff ff7d 	bl	8000c08 <ReadADCValues>
			break;
 8000d0e:	e011      	b.n	8000d34 <Current_Sense_read+0x70>
		case 2:
			ConfigureCurrentSense(1, 0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff ff5e 	bl	8000bd4 <ConfigureCurrentSense>
			ReadADCValues(outputs[2].Current_Sense, outputs[6].Current_Sense);
 8000d18:	4910      	ldr	r1, [pc, #64]	@ (8000d5c <Current_Sense_read+0x98>)
 8000d1a:	4811      	ldr	r0, [pc, #68]	@ (8000d60 <Current_Sense_read+0x9c>)
 8000d1c:	f7ff ff74 	bl	8000c08 <ReadADCValues>
			break;
 8000d20:	e008      	b.n	8000d34 <Current_Sense_read+0x70>
		case 3:
			ConfigureCurrentSense(1, 1);
 8000d22:	2101      	movs	r1, #1
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ff55 	bl	8000bd4 <ConfigureCurrentSense>
			ReadADCValues(outputs[3].Current_Sense, outputs[7].Current_Sense);
 8000d2a:	490e      	ldr	r1, [pc, #56]	@ (8000d64 <Current_Sense_read+0xa0>)
 8000d2c:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <Current_Sense_read+0xa4>)
 8000d2e:	f7ff ff6b 	bl	8000c08 <ReadADCValues>
			break;
 8000d32:	bf00      	nop
	for(int x = 0;x < 5; x++){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3301      	adds	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	ddc7      	ble.n	8000cd0 <Current_Sense_read+0xc>
		}
	}
	Current_Sense_process();
 8000d40:	f7ff fe70 	bl	8000a24 <Current_Sense_process>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200004f4 	.word	0x200004f4
 8000d50:	20000394 	.word	0x20000394
 8000d54:	2000054c 	.word	0x2000054c
 8000d58:	200003ec 	.word	0x200003ec
 8000d5c:	200005a4 	.word	0x200005a4
 8000d60:	20000444 	.word	0x20000444
 8000d64:	200005fc 	.word	0x200005fc
 8000d68:	2000049c 	.word	0x2000049c

08000d6c <check_bit>:

uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <check_bit+0x2a>
		return 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <check_bit+0x2c>
	}else{
		return 0;
 8000d96:	2300      	movs	r3, #0
	}
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	460b      	mov	r3, r1
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	4613      	mov	r3, r2
 8000db4:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	2201      	movs	r2, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d104      	bne.n	8000dd0 <set_bit+0x2c>
		byte |= mask;
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e008      	b.n	8000de2 <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	b25a      	sxtb	r2, r3
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <Current_Sense_Raw_to_mA>:

uint16_t Current_Sense_Raw_to_mA(uint16_t raw){
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000dfa:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000dfe:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	817b      	strh	r3, [r7, #10]

	current = raw*max_mA / 4095;
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	fb03 f202 	mul.w	r2, r3, r2
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <Current_Sense_Raw_to_mA+0x3c>)
 8000e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	0852      	lsrs	r2, r2, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	0adb      	lsrs	r3, r3, #11
 8000e1a:	817b      	strh	r3, [r7, #10]
	//current = raw*3300 / 4095;

	return current;
 8000e1c:	897b      	ldrh	r3, [r7, #10]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	00100101 	.word	0x00100101

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fff7 	bl	8001e26 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000e38:	f7ff fa38 	bl	80002ac <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f880 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 fcac 	bl	800179c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e44:	f000 f8c6 	bl	8000fd4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000e48:	f000 f9c6 	bl	80011d8 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000e4c:	f000 fa2c 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e50:	f000 fada 	bl	8001408 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e54:	f000 fb4e 	bl	80014f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e58:	f000 fb9a 	bl	8001590 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000e5c:	f000 fc0c 	bl	8001678 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000e60:	f000 fc40 	bl	80016e4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000e64:	f000 fc74 	bl	8001750 <MX_TIM16_Init>
  MX_ADC2_Init();
 8000e68:	f000 f950 	bl	800110c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f003 fd52 	bl	800491c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Init(&htim1);
 8000e78:	4829      	ldr	r0, [pc, #164]	@ (8000f20 <main+0xf0>)
 8000e7a:	f004 fdc3 	bl	8005a04 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000e7e:	4829      	ldr	r0, [pc, #164]	@ (8000f24 <main+0xf4>)
 8000e80:	f004 fdc0 	bl	8005a04 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e84:	4828      	ldr	r0, [pc, #160]	@ (8000f28 <main+0xf8>)
 8000e86:	f004 fd53 	bl	8005930 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4824      	ldr	r0, [pc, #144]	@ (8000f20 <main+0xf0>)
 8000e8e:	f004 fe1b 	bl	8005ac8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000e92:	2100      	movs	r1, #0
 8000e94:	4823      	ldr	r0, [pc, #140]	@ (8000f24 <main+0xf4>)
 8000e96:	f004 fe17 	bl	8005ac8 <HAL_TIM_PWM_Start>

  set_pwm_duty_cycle(&htim1);
 8000e9a:	4821      	ldr	r0, [pc, #132]	@ (8000f20 <main+0xf0>)
 8000e9c:	f7ff f9bc 	bl	8000218 <set_pwm_duty_cycle>
  set_pwm_duty_cycle(&htim2);
 8000ea0:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <main+0xf4>)
 8000ea2:	f7ff f9b9 	bl	8000218 <set_pwm_duty_cycle>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 8000ea6:	4821      	ldr	r0, [pc, #132]	@ (8000f2c <main+0xfc>)
 8000ea8:	f002 feea 	bl	8003c80 <HAL_FDCAN_Start>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <main+0x88>
 8000eb2:	f000 fcd5 	bl	8001860 <Error_Handler>
 8000eb6:	e004      	b.n	8000ec2 <main+0x92>
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2101      	movs	r1, #1
 8000ebc:	481c      	ldr	r0, [pc, #112]	@ (8000f30 <main+0x100>)
 8000ebe:	f003 fd2d 	bl	800491c <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <main+0xfc>)
 8000ec8:	f003 f860 	bl	8003f8c <HAL_FDCAN_ActivateNotification>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <main+0xa6>
 8000ed2:	f000 fcc5 	bl	8001860 <Error_Handler>

  HAL_Delay(2000);
 8000ed6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eda:	f001 f815 	bl	8001f08 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f003 fd19 	bl	800491c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <main+0x104>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <main+0xf0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	635a      	str	r2, [r3, #52]	@ 0x34

		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PWM_speed[1]);
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <main+0x104>)
 8000ef6:	885a      	ldrh	r2, [r3, #2]
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <main+0xf4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
	  if(millis % 10 == 0){
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <main+0x108>)
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <main+0x10c>)
 8000f04:	fba3 1302 	umull	r1, r3, r3, r2
 8000f08:	08d9      	lsrs	r1, r3, #3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1e7      	bne.n	8000eea <main+0xba>

		  Current_Sense_read();
 8000f1a:	f7ff fed3 	bl	8000cc4 <Current_Sense_read>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8000f1e:	e7e4      	b.n	8000eea <main+0xba>
 8000f20:	2000016c 	.word	0x2000016c
 8000f24:	200001b8 	.word	0x200001b8
 8000f28:	20000204 	.word	0x20000204
 8000f2c:	20000108 	.word	0x20000108
 8000f30:	48000400 	.word	0x48000400
 8000f34:	20000648 	.word	0x20000648
 8000f38:	20000640 	.word	0x20000640
 8000f3c:	cccccccd 	.word	0xcccccccd

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2238      	movs	r2, #56	@ 0x38
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fff2 	bl	8006f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f66:	f003 fcf1 	bl	800494c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000f80:	230c      	movs	r3, #12
 8000f82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fd8d 	bl	8004ab4 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000fa0:	f000 fc5e 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f88b 	bl	80050d8 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fc8:	f000 fc4a 	bl	8001860 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	@ 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2220      	movs	r2, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 ffa3 	bl	8006f38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <MX_ADC1_Init+0x128>)
 8000ff4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ffa:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <MX_ADC1_Init+0x128>)
 8000ffc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001000:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001008:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <MX_ADC1_Init+0x128>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001014:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001016:	2201      	movs	r2, #1
 8001018:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <MX_ADC1_Init+0x128>)
 800101c:	2204      	movs	r2, #4
 800101e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001022:	2200      	movs	r2, #0
 8001024:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001028:	2200      	movs	r2, #0
 800102a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_ADC1_Init+0x128>)
 800102e:	2203      	movs	r2, #3
 8001030:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 800103a:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <MX_ADC1_Init+0x128>)
 800103c:	2201      	movs	r2, #1
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001048:	2200      	movs	r2, #0
 800104a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104c:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <MX_ADC1_Init+0x128>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001054:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001056:	2200      	movs	r2, #0
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800105a:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <MX_ADC1_Init+0x128>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001062:	4826      	ldr	r0, [pc, #152]	@ (80010fc <MX_ADC1_Init+0x128>)
 8001064:	f001 f9ec 	bl	8002440 <HAL_ADC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800106e:	f000 fbf7 	bl	8001860 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	481f      	ldr	r0, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x128>)
 800107e:	f002 faf1 	bl	8003664 <HAL_ADCEx_MultiModeConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001088:	f000 fbea 	bl	8001860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_ADC1_Init+0x12c>)
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2306      	movs	r3, #6
 8001092:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001094:	2302      	movs	r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001098:	237f      	movs	r3, #127	@ 0x7f
 800109a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109c:	2304      	movs	r3, #4
 800109e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4814      	ldr	r0, [pc, #80]	@ (80010fc <MX_ADC1_Init+0x128>)
 80010aa:	f001 fd23 	bl	8002af4 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010b4:	f000 fbd4 	bl	8001860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_ADC1_Init+0x130>)
 80010ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010bc:	230c      	movs	r3, #12
 80010be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_ADC1_Init+0x128>)
 80010c6:	f001 fd15 	bl	8002af4 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010d0:	f000 fbc6 	bl	8001860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_ADC1_Init+0x134>)
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d8:	2312      	movs	r3, #18
 80010da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_ADC1_Init+0x128>)
 80010e6:	f001 fd05 	bl	8002af4 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80010f0:	f000 fbb6 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3730      	adds	r7, #48	@ 0x30
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000030 	.word	0x20000030
 8001100:	04300002 	.word	0x04300002
 8001104:	0c900008 	.word	0x0c900008
 8001108:	10c00010 	.word	0x10c00010

0800110c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f005 ff0d 	bl	8006f38 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800111e:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001120:	4a2b      	ldr	r2, [pc, #172]	@ (80011d0 <MX_ADC2_Init+0xc4>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001126:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001146:	2204      	movs	r2, #4
 8001148:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800114a:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001150:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001152:	2200      	movs	r2, #0
 8001154:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001158:	2201      	movs	r2, #1
 800115a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_ADC2_Init+0xc0>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_ADC2_Init+0xc0>)
 8001188:	f001 f95a 	bl	8002440 <HAL_ADC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001192:	f000 fb65 	bl	8001860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC2_Init+0xc8>)
 8001198:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119a:	2306      	movs	r3, #6
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800119e:	2302      	movs	r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a2:	237f      	movs	r3, #127	@ 0x7f
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_ADC2_Init+0xc0>)
 80011b4:	f001 fc9e 	bl	8002af4 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011be:	f000 fb4f 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000009c 	.word	0x2000009c
 80011d0:	50000100 	.word	0x50000100
 80011d4:	0c900008 	.word	0x0c900008

080011d8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011de:	4a2f      	ldr	r2, [pc, #188]	@ (800129c <MX_FDCAN1_Init+0xc4>)
 80011e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011fa:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001208:	2201      	movs	r2, #1
 800120a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 800120e:	2201      	movs	r2, #1
 8001210:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001214:	220d      	movs	r2, #13
 8001216:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 800121a:	2202      	movs	r2, #2
 800121c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001220:	2201      	movs	r2, #1
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001226:	2201      	movs	r2, #1
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 800122c:	2201      	movs	r2, #1
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001232:	2201      	movs	r2, #1
 8001234:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001238:	221c      	movs	r2, #28
 800123a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 800123e:	2200      	movs	r2, #0
 8001240:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001248:	4813      	ldr	r0, [pc, #76]	@ (8001298 <MX_FDCAN1_Init+0xc0>)
 800124a:	f002 fbbf 	bl	80039cc <HAL_FDCAN_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001254:	f000 fb04 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_FDCAN1_Init+0xc8>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001260:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001270:	2205      	movs	r2, #5
 8001272:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <MX_FDCAN1_Init+0xcc>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000108 	.word	0x20000108
 800129c:	40006400 	.word	0x40006400
 80012a0:	2000064c 	.word	0x2000064c
 80012a4:	20000650 	.word	0x20000650

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09c      	sub	sp, #112	@ 0x70
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2234      	movs	r2, #52	@ 0x34
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fe28 	bl	8006f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <MX_TIM1_Init+0x158>)
 80012ea:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <MX_TIM1_Init+0x15c>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80012ee:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <MX_TIM1_Init+0x158>)
 80012f0:	220f      	movs	r2, #15
 80012f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b42      	ldr	r3, [pc, #264]	@ (8001400 <MX_TIM1_Init+0x158>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <MX_TIM1_Init+0x158>)
 80012fc:	2227      	movs	r2, #39	@ 0x27
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001306:	4b3e      	ldr	r3, [pc, #248]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <MX_TIM1_Init+0x158>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	483b      	ldr	r0, [pc, #236]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001314:	f004 fab4 	bl	8005880 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800131e:	f000 fa9f 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800132c:	4619      	mov	r1, r3
 800132e:	4834      	ldr	r0, [pc, #208]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001330:	f004 ff2e 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800133a:	f000 fa91 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133e:	4830      	ldr	r0, [pc, #192]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001340:	f004 fb60 	bl	8005a04 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800134a:	f000 fa89 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800135e:	4619      	mov	r1, r3
 8001360:	4827      	ldr	r0, [pc, #156]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001362:	f005 fc95 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800136c:	f000 fa78 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	@ 0x60
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	481a      	ldr	r0, [pc, #104]	@ (8001400 <MX_TIM1_Init+0x158>)
 8001396:	f004 fde7 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80013a0:	f000 fa5e 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <MX_TIM1_Init+0x158>)
 80013e2:	f005 fcd7 	bl	8006d94 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80013ec:	f000 fa38 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <MX_TIM1_Init+0x158>)
 80013f2:	f000 fc19 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3770      	adds	r7, #112	@ 0x70
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000016c 	.word	0x2000016c
 8001404:	40012c00 	.word	0x40012c00

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	@ 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 8001444:	220f      	movs	r2, #15
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800144e:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 8001450:	2227      	movs	r2, #39	@ 0x27
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 8001462:	f004 fa0d 	bl	8005880 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800146c:	f000 f9f8 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 800147e:	f004 fe87 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001488:	f000 f9ea 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800148c:	4818      	ldr	r0, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 800148e:	f004 fab9 	bl	8005a04 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001498:	f000 f9e2 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4811      	ldr	r0, [pc, #68]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 80014ac:	f005 fbf0 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014b6:	f000 f9d3 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	@ 0x60
 80014bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 80014d2:	f004 fd49 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014dc:	f000 f9c0 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <MX_TIM2_Init+0xe8>)
 80014e2:	f000 fba1 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	@ 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001b8 	.word	0x200001b8

080014f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001514:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <MX_TIM3_Init+0x98>)
 8001516:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_TIM3_Init+0x94>)
 800151a:	223f      	movs	r2, #63	@ 0x3f
 800151c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001526:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_TIM3_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001538:	4813      	ldr	r0, [pc, #76]	@ (8001588 <MX_TIM3_Init+0x94>)
 800153a:	f004 f9a1 	bl	8005880 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001544:	f000 f98c 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001556:	f004 fe1b 	bl	8006190 <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001560:	f000 f97e 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_TIM3_Init+0x94>)
 8001572:	f005 fb8d 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800157c:	f000 f970 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000204 	.word	0x20000204
 800158c:	40000400 	.word	0x40000400

08001590 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	@ 0x38
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001674 <MX_TIM4_Init+0xe4>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015e8:	4821      	ldr	r0, [pc, #132]	@ (8001670 <MX_TIM4_Init+0xe0>)
 80015ea:	f004 f949 	bl	8005880 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80015f4:	f000 f934 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001602:	4619      	mov	r1, r3
 8001604:	481a      	ldr	r0, [pc, #104]	@ (8001670 <MX_TIM4_Init+0xe0>)
 8001606:	f004 fdc3 	bl	8006190 <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001610:	f000 f926 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <MX_TIM4_Init+0xe0>)
 8001616:	f004 f9f5 	bl	8005a04 <HAL_TIM_PWM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001620:	f000 f91e 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <MX_TIM4_Init+0xe0>)
 8001634:	f005 fb2c 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800163e:	f000 f90f 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	@ 0x60
 8001644:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM4_Init+0xe0>)
 800165a:	f004 fc85 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001664:	f000 f8fc 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3738      	adds	r7, #56	@ 0x38
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000250 	.word	0x20000250
 8001674:	40000800 	.word	0x40000800

08001678 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_TIM6_Init+0x64>)
 800168a:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <MX_TIM6_Init+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_TIM6_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_TIM6_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_TIM6_Init+0x64>)
 800169c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_TIM6_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <MX_TIM6_Init+0x64>)
 80016aa:	f004 f8e9 	bl	8005880 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016b4:	f000 f8d4 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_TIM6_Init+0x64>)
 80016c6:	f005 fae3 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016d0:	f000 f8c6 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000029c 	.word	0x2000029c
 80016e0:	40001000 	.word	0x40001000

080016e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_TIM7_Init+0x64>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	@ (800174c <MX_TIM7_Init+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_TIM7_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_TIM7_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <MX_TIM7_Init+0x64>)
 8001708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800170c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_TIM7_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <MX_TIM7_Init+0x64>)
 8001716:	f004 f8b3 	bl	8005880 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001720:	f000 f89e 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_TIM7_Init+0x64>)
 8001732:	f005 faad 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800173c:	f000 f890 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002e8 	.word	0x200002e8
 800174c:	40001400 	.word	0x40001400

08001750 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <MX_TIM16_Init+0x48>)
 8001758:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_TIM16_Init+0x44>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001768:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_TIM16_Init+0x44>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_TIM16_Init+0x44>)
 8001782:	f004 f87d 	bl	8005880 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800178c:	f000 f868 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000334 	.word	0x20000334
 8001798:	40014400 	.word	0x40014400

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_GPIO_Init+0xbc>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 80017fa:	2200      	movs	r2, #0
 80017fc:	f248 6192 	movw	r1, #34450	@ 0x8692
 8001800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001804:	f003 f88a 	bl	800491c <HAL_GPIO_WritePin>
                          |IN2_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001808:	2200      	movs	r2, #0
 800180a:	21f9      	movs	r1, #249	@ 0xf9
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <MX_GPIO_Init+0xc0>)
 800180e:	f003 f885 	bl	800491c <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_2_Pin IN0_2_Pin LED2_Pin IN3_Pin
                           IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 8001812:	f248 6392 	movw	r3, #34450	@ 0x8692
 8001816:	60fb      	str	r3, [r7, #12]
                          |IN2_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f002 fef3 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001832:	23f9      	movs	r3, #249	@ 0xf9
 8001834:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4619      	mov	r1, r3
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <MX_GPIO_Init+0xc0>)
 800184a:	f002 fee5 	bl	8004618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <Error_Handler+0x8>

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <HAL_MspInit+0x44>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6613      	str	r3, [r2, #96]	@ 0x60
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_MspInit+0x44>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_MspInit+0x44>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_MspInit+0x44>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018a2:	f003 f8f7 	bl	8004a94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09c      	sub	sp, #112	@ 0x70
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	2244      	movs	r2, #68	@ 0x44
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 fb2f 	bl	8006f38 <memset>
  if(hadc->Instance==ADC1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018e2:	d13e      	bne.n	8001962 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018ee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fdd3 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001900:	f7ff ffae 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001904:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	4a39      	ldr	r2, [pc, #228]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 800190c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d10b      	bne.n	800192e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001916:	4b37      	ldr	r3, [pc, #220]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a36      	ldr	r2, [pc, #216]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 800191c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001946:	230d      	movs	r3, #13
 8001948:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194a:	2303      	movs	r3, #3
 800194c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195c:	f002 fe5c 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001960:	e042      	b.n	80019e8 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_ADC_MspInit+0x144>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d13d      	bne.n	80019e8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800196c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001970:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001972:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001976:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fd8f 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001988:	f7ff ff6a 	bl	8001860 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 8001994:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_ADC_MspInit+0x13c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10b      	bne.n	80019b6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a0e      	ldr	r2, [pc, #56]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_ADC_MspInit+0x140>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ce:	2340      	movs	r3, #64	@ 0x40
 80019d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d2:	2303      	movs	r3, #3
 80019d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e4:	f002 fe18 	bl	8004618 <HAL_GPIO_Init>
}
 80019e8:	bf00      	nop
 80019ea:	3770      	adds	r7, #112	@ 0x70
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200006a8 	.word	0x200006a8
 80019f4:	40021000 	.word	0x40021000
 80019f8:	50000100 	.word	0x50000100

080019fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b09a      	sub	sp, #104	@ 0x68
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	2244      	movs	r2, #68	@ 0x44
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f005 fa8b 	bl	8006f38 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <HAL_FDCAN_MspInit+0xbc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d141      	bne.n	8001ab0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001a32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a36:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fd2f 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a48:	f7ff ff0a 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	4a1a      	ldr	r2, [pc, #104]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_FDCAN_MspInit+0xc0>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a7c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a8e:	2309      	movs	r3, #9
 8001a90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9c:	f002 fdbc 	bl	8004618 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2015      	movs	r0, #21
 8001aa6:	f001 ff5c 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001aaa:	2015      	movs	r0, #21
 8001aac:	f001 ff73 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3768      	adds	r7, #104	@ 0x68
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40006400 	.word	0x40006400
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_TIM_Base_MspInit+0x14c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10c      	bne.n	8001aec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001ad8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ade:	4b4c      	ldr	r3, [pc, #304]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001aea:	e08a      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af4:	d114      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	4b46      	ldr	r3, [pc, #280]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	4a45      	ldr	r2, [pc, #276]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b02:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	201c      	movs	r0, #28
 8001b14:	f001 ff25 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b18:	201c      	movs	r0, #28
 8001b1a:	f001 ff3c 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	e070      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3b      	ldr	r2, [pc, #236]	@ (8001c14 <HAL_TIM_Base_MspInit+0x154>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d114      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b36:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201d      	movs	r0, #29
 8001b48:	f001 ff0b 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b4c:	201d      	movs	r0, #29
 8001b4e:	f001 ff22 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 8001b52:	e056      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <HAL_TIM_Base_MspInit+0x158>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d114      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	4a2b      	ldr	r2, [pc, #172]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	201e      	movs	r0, #30
 8001b7c:	f001 fef1 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b80:	201e      	movs	r0, #30
 8001b82:	f001 ff08 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 8001b86:	e03c      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	@ (8001c1c <HAL_TIM_Base_MspInit+0x15c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001b98:	f043 0310 	orr.w	r3, r3, #16
 8001b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
}
 8001baa:	e02a      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c20 <HAL_TIM_Base_MspInit+0x160>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d114      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2037      	movs	r0, #55	@ 0x37
 8001bd4:	f001 fec5 	bl	8003962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bd8:	2037      	movs	r0, #55	@ 0x37
 8001bda:	f001 fedc 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 8001bde:	e010      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <HAL_TIM_Base_MspInit+0x164>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10b      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_TIM_Base_MspInit+0x150>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40001000 	.word	0x40001000
 8001c20:	40001400 	.word	0x40001400
 8001c24:	40014400 	.word	0x40014400

08001c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <HAL_TIM_MspPostInit+0xac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11e      	bne.n	8001c88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c74:	2306      	movs	r3, #6
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c82:	f002 fcc9 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c86:	e021      	b.n	8001ccc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c90:	d11c      	bne.n	8001ccc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	4a10      	ldr	r2, [pc, #64]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <HAL_TIM_MspPostInit+0xb0>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001caa:	2320      	movs	r3, #32
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc8:	f002 fca6 	bl	8004618 <HAL_GPIO_Init>
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 f8cb 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <FDCAN1_IT0_IRQHandler+0x10>)
 8001d42:	f002 fa09 	bl	8004158 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000108 	.word	0x20000108

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f003 ffb7 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200001b8 	.word	0x200001b8

08001d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <TIM3_IRQHandler+0x1c>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <TIM3_IRQHandler+0x1c>)
 8001d72:	801a      	strh	r2, [r3, #0]
		  }else{
			  can_select = 0;
		  }
	}*/
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <TIM3_IRQHandler+0x20>)
 8001d76:	f003 ffa7 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000640 	.word	0x20000640
 8001d84:	20000204 	.word	0x20000204

08001d88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <TIM4_IRQHandler+0x10>)
 8001d8e:	f003 ff9b 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000250 	.word	0x20000250

08001d9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <TIM7_IRQHandler+0x10>)
 8001da2:	f003 ff91 	bl	8005cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002e8 	.word	0x200002e8

08001db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dda:	490e      	ldr	r1, [pc, #56]	@ (8001e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8001e18 <LoopForever+0xe>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	@ (8001e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df0:	4c0b      	ldr	r4, [pc, #44]	@ (8001e20 <LoopForever+0x16>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dfe:	f7ff ffd7 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f005 f8a1 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e06:	f7ff f813 	bl	8000e30 <main>

08001e0a <LoopForever>:

LoopForever:
    b LoopForever
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
  ldr   r0, =_estack
 8001e0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e18:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 8001e1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e20:	200006b0 	.word	0x200006b0

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>

08001e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f001 fd8b 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f80e 	bl	8001e58 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e001      	b.n	8001e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e48:	f7ff fd10 	bl	800186c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e64:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <HAL_InitTick+0x68>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d022      	beq.n	8001eb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <HAL_InitTick+0x6c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_InitTick+0x68>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fd96 	bl	80039b2 <HAL_SYSTICK_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10f      	bne.n	8001eac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	d809      	bhi.n	8001ea6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e92:	2200      	movs	r2, #0
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9a:	f001 fd62 	bl	8003962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_InitTick+0x70>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e007      	b.n	8001eb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e004      	b.n	8001eb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_IncTick+0x20>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a03      	ldr	r2, [pc, #12]	@ (8001ee8 <HAL_IncTick+0x1c>)
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	200006ac 	.word	0x200006ac
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	200006ac 	.word	0x200006ac

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d004      	beq.n	8001f2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_Delay+0x40>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2c:	bf00      	nop
 8001f2e:	f7ff ffdf 	bl	8001ef0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d8f7      	bhi.n	8001f2e <HAL_Delay+0x26>
  {
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000008 	.word	0x20000008

08001f4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3360      	adds	r3, #96	@ 0x60
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <LL_ADC_SetOffset+0x44>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	03fff000 	.word	0x03fff000

08001ffc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3360      	adds	r3, #96	@ 0x60
 800200a:	461a      	mov	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3360      	adds	r3, #96	@ 0x60
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800205e:	b480      	push	{r7}
 8002060:	b087      	sub	sp, #28
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3360      	adds	r3, #96	@ 0x60
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3360      	adds	r3, #96	@ 0x60
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	615a      	str	r2, [r3, #20]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002116:	b480      	push	{r7}
 8002118:	b087      	sub	sp, #28
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3330      	adds	r3, #48	@ 0x30
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	4413      	add	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	211f      	movs	r1, #31
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	f003 011f 	and.w	r1, r3, #31
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	431a      	orrs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800216e:	b480      	push	{r7}
 8002170:	b087      	sub	sp, #28
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3314      	adds	r3, #20
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0e5b      	lsrs	r3, r3, #25
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0d1b      	lsrs	r3, r3, #20
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2107      	movs	r1, #7
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0d1b      	lsrs	r3, r3, #20
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	431a      	orrs	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0318 	and.w	r3, r3, #24
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e8:	40d9      	lsrs	r1, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	400b      	ands	r3, r1
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0007ffff 	.word	0x0007ffff

0800220c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022cc:	d101      	bne.n	80022d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800231c:	f043 0202 	orr.w	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <LL_ADC_IsEnabled+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_IsEnabled+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d101      	bne.n	800236e <LL_ADC_IsDisableOngoing+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsDisableOngoing+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002390:	f043 0204 	orr.w	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023b8:	f043 0210 	orr.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d101      	bne.n	80023e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002402:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d101      	bne.n	8002432 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e167      	b.n	800272a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fa23 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fef1 	bl	8002268 <LL_ADC_IsDeepPowerDownEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fed7 	bl	8002244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff0c 	bl	80022b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fef0 	bl	8002290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002734 <HAL_ADC_Init+0x2f4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	4aa0      	ldr	r2, [pc, #640]	@ (8002738 <HAL_ADC_Init+0x2f8>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff feee 	bl	80022b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff62 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002508:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8100 	bne.w	8002718 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80fc 	bne.w	8002718 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002528:	f043 0202 	orr.w	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fefb 	bl	8002330 <LL_ADC_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002540:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002544:	f7ff fef4 	bl	8002330 <LL_ADC_IsEnabled>
 8002548:	4604      	mov	r4, r0
 800254a:	487c      	ldr	r0, [pc, #496]	@ (800273c <HAL_ADC_Init+0x2fc>)
 800254c:	f7ff fef0 	bl	8002330 <LL_ADC_IsEnabled>
 8002550:	4603      	mov	r3, r0
 8002552:	4323      	orrs	r3, r4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	4878      	ldr	r0, [pc, #480]	@ (8002740 <HAL_ADC_Init+0x300>)
 8002560:	f7ff fcf4 	bl	8001f4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7f5b      	ldrb	r3, [r3, #29]
 8002568:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800256e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002574:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800257a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002582:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800258e:	2b01      	cmp	r3, #1
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	045b      	lsls	r3, r3, #17
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b60      	ldr	r3, [pc, #384]	@ (8002744 <HAL_ADC_Init+0x304>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff15 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 80025f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d16d      	bne.n	80026d4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d16a      	bne.n	80026d4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002602:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800260a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800261a:	f023 0302 	bic.w	r3, r3, #2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d017      	beq.n	8002660 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800263e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002648:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800264c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6911      	ldr	r1, [r2, #16]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800265e:	e013      	b.n	8002688 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800266e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002684:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268e:	2b01      	cmp	r3, #1
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b4:	430a      	orrs	r2, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	e007      	b.n	80026d4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10c      	bne.n	80026f6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f023 010f 	bic.w	r1, r3, #15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f4:	e007      	b.n	8002706 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 020f 	bic.w	r2, r2, #15
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002716:	e007      	b.n	8002728 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f043 0210 	orr.w	r2, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002728:	7ffb      	ldrb	r3, [r7, #31]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000
 8002738:	053e2d63 	.word	0x053e2d63
 800273c:	50000100 	.word	0x50000100
 8002740:	50000300 	.word	0x50000300
 8002744:	fff04007 	.word	0xfff04007

08002748 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	4859      	ldr	r0, [pc, #356]	@ (80028b8 <HAL_ADC_Start+0x170>)
 8002752:	f7ff fd5b 	bl	800220c <LL_ADC_GetMultimode>
 8002756:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fe35 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 809f 	bne.w	80028a8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADC_Start+0x30>
 8002774:	2302      	movs	r3, #2
 8002776:	e09a      	b.n	80028ae <HAL_ADC_Start+0x166>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fe63 	bl	800344c <ADC_Enable>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 8086 	bne.w	800289e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a44      	ldr	r2, [pc, #272]	@ (80028bc <HAL_ADC_Start+0x174>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_Start+0x6e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e001      	b.n	80027ba <HAL_ADC_Start+0x72>
 80027b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4293      	cmp	r3, r2
 80027c0:	d002      	beq.n	80027c8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	f023 0206 	bic.w	r2, r3, #6
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	221c      	movs	r2, #28
 80027fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2c      	ldr	r2, [pc, #176]	@ (80028bc <HAL_ADC_Start+0x174>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d002      	beq.n	8002816 <HAL_ADC_Start+0xce>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e001      	b.n	800281a <HAL_ADC_Start+0xd2>
 8002816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	d008      	beq.n	8002834 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d002      	beq.n	8002834 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b09      	cmp	r3, #9
 8002832:	d114      	bne.n	800285e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800284a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fd90 	bl	800237c <LL_ADC_REG_StartConversion>
 800285c:	e026      	b.n	80028ac <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	@ (80028bc <HAL_ADC_Start+0x174>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d002      	beq.n	800287a <HAL_ADC_Start+0x132>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e001      	b.n	800287e <HAL_ADC_Start+0x136>
 800287a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800287e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00f      	beq.n	80028ac <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002894:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800289c:	e006      	b.n	80028ac <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80028a6:	e001      	b.n	80028ac <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	50000300 	.word	0x50000300
 80028bc:	50000100 	.word	0x50000100

080028c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Stop+0x16>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e023      	b.n	800291e <HAL_ADC_Stop+0x5e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028de:	2103      	movs	r1, #3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fcf7 	bl	80032d4 <ADC_ConversionStop>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d111      	bne.n	8002914 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fe31 	bl	8003558 <ADC_Disable>
 80028f6:	4603      	mov	r3, r0
 80028f8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002932:	4867      	ldr	r0, [pc, #412]	@ (8002ad0 <HAL_ADC_PollForConversion+0x1a8>)
 8002934:	f7ff fc6a 	bl	800220c <LL_ADC_GetMultimode>
 8002938:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b08      	cmp	r3, #8
 8002940:	d102      	bne.n	8002948 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002942:	2308      	movs	r3, #8
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e02a      	b.n	800299e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d002      	beq.n	800295a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b09      	cmp	r3, #9
 8002958:	d111      	bne.n	800297e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0a6      	b.n	8002ac6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002978:	2304      	movs	r3, #4
 800297a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800297c:	e00f      	b.n	800299e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800297e:	4854      	ldr	r0, [pc, #336]	@ (8002ad0 <HAL_ADC_PollForConversion+0x1a8>)
 8002980:	f7ff fc52 	bl	8002228 <LL_ADC_GetMultiDMATransfer>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e095      	b.n	8002ac6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800299a:	2304      	movs	r3, #4
 800299c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800299e:	f7ff faa7 	bl	8001ef0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029a4:	e021      	b.n	80029ea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d01d      	beq.n	80029ea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029ae:	f7ff fa9f 	bl	8001ef0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <HAL_ADC_PollForConversion+0x9c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d112      	bne.n	80029ea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e06d      	b.n	8002ac6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0d6      	beq.n	80029a6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fb71 	bl	80020f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7f5b      	ldrb	r3, [r3, #29]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d118      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d111      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a20      	ldr	r2, [pc, #128]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1ac>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_PollForConversion+0x136>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e001      	b.n	8002a62 <HAL_ADC_PollForConversion+0x13a>
 8002a5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d008      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d002      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	d104      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e00d      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <HAL_ADC_PollForConversion+0x1ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d002      	beq.n	8002a96 <HAL_ADC_PollForConversion+0x16e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e001      	b.n	8002a9a <HAL_ADC_PollForConversion+0x172>
 8002a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a9a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d104      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2208      	movs	r2, #8
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e008      	b.n	8002ac4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	220c      	movs	r2, #12
 8002ac2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	50000300 	.word	0x50000300
 8002ad4:	50000100 	.word	0x50000100

08002ad8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0b6      	sub	sp, #216	@ 0xd8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x22>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e3c8      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x7b4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc52 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 83ad 	bne.w	800328a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f7ff faea 	bl	8002116 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fc40 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002b4c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc60 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 8002b5a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 81d9 	bne.w	8002f1a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 81d4 	bne.w	8002f1a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7ff faf1 	bl	800216e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fa98 	bl	80020ca <LL_ADC_SetSamplingTimeCommonConfig>
 8002b9a:	e00e      	b.n	8002bba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff fae0 	bl	800216e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fa88 	bl	80020ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d022      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bec:	f7ff f9e2 	bl	8001fb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6919      	ldr	r1, [r3, #16]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f7ff fa2e 	bl	800205e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x124>
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x126>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff fa3a 	bl	8002094 <LL_ADC_SetOffsetSaturation>
 8002c20:	e17b      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f9e7 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x15a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f9dc 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x198>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f9d1 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1b0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	e018      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1e2>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e004      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f9a0 	bl	8002028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f984 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x220>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f979 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 021f 	and.w	r2, r3, #31
 8002d12:	e01e      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x25e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f96e 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e004      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x276>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e9b      	lsrs	r3, r3, #26
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	e018      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x2a8>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e004      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f93d 	bl	8002028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f921 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x2e6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f916 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	e01e      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x324>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f90b 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e004      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x33c>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	e016      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x36a>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e004      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d106      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f8dc 	bl	8002028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2103      	movs	r1, #3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f8c0 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x3a8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f8b5 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	e017      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x3d8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f8aa 	bl	8001ffc <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x3f0>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	e011      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x414>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2103      	movs	r1, #3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f887 	bl	8002028 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fa06 	bl	8002330 <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 8140 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f7ff f943 	bl	80021c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4a8f      	ldr	r2, [pc, #572]	@ (8003180 <HAL_ADC_ConfigChannel+0x68c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	f040 8131 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x47e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	bf94      	ite	ls
 8002f6a:	2301      	movls	r3, #1
 8002f6c:	2300      	movhi	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e019      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x4b2>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f82:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e003      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002f8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d079      	beq.n	800309e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x4d2>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc4:	e015      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x4fe>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x51e>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	3301      	adds	r3, #1
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	e017      	b.n	8003042 <HAL_ADC_ConfigChannel+0x54e>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003022:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e003      	b.n	8003036 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800302e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	ea42 0103 	orr.w	r1, r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x574>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	3301      	adds	r3, #1
 800305a:	f003 021f 	and.w	r2, r3, #31
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	e018      	b.n	800309a <HAL_ADC_ConfigChannel+0x5a6>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e003      	b.n	800308c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309a:	430b      	orrs	r3, r1
 800309c:	e081      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x5c6>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	3301      	adds	r3, #1
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030b8:	e015      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x5f2>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	069b      	lsls	r3, r3, #26
 80030e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x612>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	3301      	adds	r3, #1
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	e017      	b.n	8003136 <HAL_ADC_ConfigChannel+0x642>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	61fb      	str	r3, [r7, #28]
  return result;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	ea42 0103 	orr.w	r1, r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x66e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	051b      	lsls	r3, r3, #20
 800315c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003160:	e01e      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x6ac>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	613b      	str	r3, [r7, #16]
  return result;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e006      	b.n	800318c <HAL_ADC_ConfigChannel+0x698>
 800317e:	bf00      	nop
 8003180:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f003 021f 	and.w	r2, r3, #31
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	3b1e      	subs	r3, #30
 800319a:	051b      	lsls	r3, r3, #20
 800319c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fe ffe1 	bl	800216e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d071      	beq.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031b8:	483e      	ldr	r0, [pc, #248]	@ (80032b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80031ba:	f7fe feed 	bl	8001f98 <LL_ADC_GetCommonPathInternalCh>
 80031be:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3c      	ldr	r2, [pc, #240]	@ (80032b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x6e2>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3a      	ldr	r2, [pc, #232]	@ (80032bc <HAL_ADC_ConfigChannel+0x7c8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d127      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d121      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ea:	d157      	bne.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031f4:	4619      	mov	r1, r3
 80031f6:	482f      	ldr	r0, [pc, #188]	@ (80032b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80031f8:	f7fe febb 	bl	8001f72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fc:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	4a30      	ldr	r2, [pc, #192]	@ (80032c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003216:	e002      	b.n	800321e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f9      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003224:	e03a      	b.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a27      	ldr	r2, [pc, #156]	@ (80032c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d113      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a22      	ldr	r2, [pc, #136]	@ (80032cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02a      	beq.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800324e:	4619      	mov	r1, r3
 8003250:	4818      	ldr	r0, [pc, #96]	@ (80032b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003252:	f7fe fe8e 	bl	8001f72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003256:	e021      	b.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d11c      	bne.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_ADC_ConfigChannel+0x7d8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d011      	beq.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800327c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003280:	4619      	mov	r1, r3
 8003282:	480c      	ldr	r0, [pc, #48]	@ (80032b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003284:	f7fe fe75 	bl	8001f72 <LL_ADC_SetCommonPathInternalCh>
 8003288:	e008      	b.n	800329c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	37d8      	adds	r7, #216	@ 0xd8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	80080000 	.word	0x80080000
 80032b4:	50000300 	.word	0x50000300
 80032b8:	c3210000 	.word	0xc3210000
 80032bc:	90c00010 	.word	0x90c00010
 80032c0:	20000000 	.word	0x20000000
 80032c4:	053e2d63 	.word	0x053e2d63
 80032c8:	c7520000 	.word	0xc7520000
 80032cc:	50000100 	.word	0x50000100
 80032d0:	cb840000 	.word	0xcb840000

080032d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f86e 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80032f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f88f 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 80032fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8098 	beq.w	800343c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02a      	beq.n	8003370 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7f5b      	ldrb	r3, [r3, #29]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d126      	bne.n	8003370 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7f1b      	ldrb	r3, [r3, #28]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d122      	bne.n	8003370 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800332e:	e014      	b.n	800335a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4a45      	ldr	r2, [pc, #276]	@ (8003448 <ADC_ConversionStop+0x174>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d90d      	bls.n	8003354 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e074      	b.n	800343e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d1e3      	bne.n	8003330 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2240      	movs	r2, #64	@ 0x40
 800336e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d014      	beq.n	80033a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f826 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe ffe3 	bl	8002356 <LL_ADC_IsDisableOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f802 	bl	80023a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d014      	beq.n	80033d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f835 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ffcb 	bl	8002356 <LL_ADC_IsDisableOngoing>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff f811 	bl	80023f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d005      	beq.n	80033e2 <ADC_ConversionStop+0x10e>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d105      	bne.n	80033e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80033dc:	230c      	movs	r3, #12
 80033de:	617b      	str	r3, [r7, #20]
        break;
 80033e0:	e005      	b.n	80033ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033e2:	2308      	movs	r3, #8
 80033e4:	617b      	str	r3, [r7, #20]
        break;
 80033e6:	e002      	b.n	80033ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80033e8:	2304      	movs	r3, #4
 80033ea:	617b      	str	r3, [r7, #20]
        break;
 80033ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80033ee:	f7fe fd7f 	bl	8001ef0 <HAL_GetTick>
 80033f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033f4:	e01b      	b.n	800342e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033f6:	f7fe fd7b 	bl	8001ef0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b05      	cmp	r3, #5
 8003402:	d914      	bls.n	800342e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	f043 0210 	orr.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1dc      	bne.n	80033f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	a33fffff 	.word	0xa33fffff

0800344c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe ff67 	bl	8002330 <LL_ADC_IsEnabled>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d169      	bne.n	800353c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	4b36      	ldr	r3, [pc, #216]	@ (8003548 <ADC_Enable+0xfc>)
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e055      	b.n	800353e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe ff22 	bl	80022e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800349c:	482b      	ldr	r0, [pc, #172]	@ (800354c <ADC_Enable+0x100>)
 800349e:	f7fe fd7b 	bl	8001f98 <LL_ADC_GetCommonPathInternalCh>
 80034a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ac:	4b28      	ldr	r3, [pc, #160]	@ (8003550 <ADC_Enable+0x104>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	4a28      	ldr	r2, [pc, #160]	@ (8003554 <ADC_Enable+0x108>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034c6:	e002      	b.n	80034ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f9      	bne.n	80034c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034d4:	f7fe fd0c 	bl	8001ef0 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034da:	e028      	b.n	800352e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe ff25 	bl	8002330 <LL_ADC_IsEnabled>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fef5 	bl	80022e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f6:	f7fe fcfb 	bl	8001ef0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d914      	bls.n	800352e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d00d      	beq.n	800352e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d1cf      	bne.n	80034dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	8000003f 	.word	0x8000003f
 800354c:	50000300 	.word	0x50000300
 8003550:	20000000 	.word	0x20000000
 8003554:	053e2d63 	.word	0x053e2d63

08003558 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fef6 	bl	8002356 <LL_ADC_IsDisableOngoing>
 800356a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fedd 	bl	8002330 <LL_ADC_IsEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d047      	beq.n	800360c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d144      	bne.n	800360c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030d 	and.w	r3, r3, #13
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10c      	bne.n	80035aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe feb7 	bl	8002308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2203      	movs	r2, #3
 80035a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035a2:	f7fe fca5 	bl	8001ef0 <HAL_GetTick>
 80035a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a8:	e029      	b.n	80035fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f043 0210 	orr.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e023      	b.n	800360e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035c6:	f7fe fc93 	bl	8001ef0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d914      	bls.n	80035fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e007      	b.n	800360e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1dc      	bne.n	80035c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <LL_ADC_IsEnabled>:
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <LL_ADC_IsEnabled+0x18>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <LL_ADC_IsEnabled+0x1a>
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_REG_IsConversionOngoing>:
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d101      	bne.n	8003654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b0a1      	sub	sp, #132	@ 0x84
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800367e:	2302      	movs	r3, #2
 8003680:	e08b      	b.n	800379a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800368a:	2300      	movs	r3, #0
 800368c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800368e:	2300      	movs	r3, #0
 8003690:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369a:	d102      	bne.n	80036a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800369c:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	e001      	b.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e06a      	b.n	800379a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff ffb8 	bl	800363c <LL_ADC_REG_IsConversionOngoing>
 80036cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ffb2 	bl	800363c <LL_ADC_REG_IsConversionOngoing>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d14c      	bne.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d149      	bne.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036e4:	4b30      	ldr	r3, [pc, #192]	@ (80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80036e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d028      	beq.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003702:	035b      	lsls	r3, r3, #13
 8003704:	430b      	orrs	r3, r1
 8003706:	431a      	orrs	r2, r3
 8003708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800370a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800370c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003710:	f7ff ff81 	bl	8003616 <LL_ADC_IsEnabled>
 8003714:	4604      	mov	r4, r0
 8003716:	4823      	ldr	r0, [pc, #140]	@ (80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003718:	f7ff ff7d 	bl	8003616 <LL_ADC_IsEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	4323      	orrs	r3, r4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d133      	bne.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003724:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800372c:	f023 030f 	bic.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	6811      	ldr	r1, [r2, #0]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	430a      	orrs	r2, r1
 800373a:	431a      	orrs	r2, r3
 800373c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003740:	e024      	b.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800374a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800374e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003752:	f7ff ff60 	bl	8003616 <LL_ADC_IsEnabled>
 8003756:	4604      	mov	r4, r0
 8003758:	4812      	ldr	r0, [pc, #72]	@ (80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800375a:	f7ff ff5c 	bl	8003616 <LL_ADC_IsEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	4323      	orrs	r3, r4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d112      	bne.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800376e:	f023 030f 	bic.w	r3, r3, #15
 8003772:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003774:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003776:	e009      	b.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800378a:	e000      	b.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800378c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003796:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800379a:	4618      	mov	r0, r3
 800379c:	3784      	adds	r7, #132	@ 0x84
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	50000100 	.word	0x50000100
 80037a8:	50000300 	.word	0x50000300

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	@ (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	@ (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	@ (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff29 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff40 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff33 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa4 	bl	8003908 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e147      	b.n	8003c6e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe f802 	bl	80019fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0210 	bic.w	r2, r2, #16
 8003a06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a08:	f7fe fa72 	bl	8001ef0 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a0e:	e012      	b.n	8003a36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a10:	f7fe fa6e 	bl	8001ef0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b0a      	cmp	r3, #10
 8003a1c:	d90b      	bls.n	8003a36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e11b      	b.n	8003c6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d0e5      	beq.n	8003a10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a54:	f7fe fa4c 	bl	8001ef0 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a5a:	e012      	b.n	8003a82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a5c:	f7fe fa48 	bl	8001ef0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b0a      	cmp	r3, #10
 8003a68:	d90b      	bls.n	8003a82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0f5      	b.n	8003c6e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0e5      	beq.n	8003a5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0202 	orr.w	r2, r2, #2
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a74      	ldr	r2, [pc, #464]	@ (8003c78 <HAL_FDCAN_Init+0x2ac>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d103      	bne.n	8003ab2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003aaa:	4a74      	ldr	r2, [pc, #464]	@ (8003c7c <HAL_FDCAN_Init+0x2b0>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7c1b      	ldrb	r3, [r3, #16]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d108      	bne.n	8003acc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699a      	ldr	r2, [r3, #24]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac8:	619a      	str	r2, [r3, #24]
 8003aca:	e007      	b.n	8003adc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ada:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7c5b      	ldrb	r3, [r3, #17]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d108      	bne.n	8003af6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003af2:	619a      	str	r2, [r3, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b04:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7c9b      	ldrb	r3, [r3, #18]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e007      	b.n	8003b30 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b2e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b54:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0210 	bic.w	r2, r2, #16
 8003b64:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0204 	orr.w	r2, r2, #4
 8003b7c:	619a      	str	r2, [r3, #24]
 8003b7e:	e02c      	b.n	8003bda <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d028      	beq.n	8003bda <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d01c      	beq.n	8003bca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0210 	orr.w	r2, r2, #16
 8003bae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d110      	bne.n	8003bda <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	619a      	str	r2, [r3, #24]
 8003bc8:	e007      	b.n	8003bda <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0220 	orr.w	r2, r2, #32
 8003bd8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c02:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c04:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c0e:	d115      	bne.n	8003c3c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c1e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	3b01      	subs	r3, #1
 8003c26:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	3b01      	subs	r3, #1
 8003c32:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c38:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c3a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fc0e 	bl	8004474 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40006400 	.word	0x40006400
 8003c7c:	40006500 	.word	0x40006500

08003c80 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d110      	bne.n	8003cb6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e006      	b.n	8003cc4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f043 0204 	orr.w	r2, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d12c      	bne.n	8003d42 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e023      	b.n	8003d50 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fbfe 	bl	8004520 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003d34:	2201      	movs	r2, #1
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e006      	b.n	8003d50 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d46:	f043 0208 	orr.w	r2, r3, #8
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b08b      	sub	sp, #44	@ 0x2c
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d70:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003d72:	7efb      	ldrb	r3, [r7, #27]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f040 80e8 	bne.w	8003f4a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b40      	cmp	r3, #64	@ 0x40
 8003d7e:	d137      	bne.n	8003df0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0db      	b.n	8003f58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10a      	bne.n	8003dc8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dba:	0a5b      	lsrs	r3, r3, #9
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	e036      	b.n	8003e5e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0a3      	b.n	8003f58 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10a      	bne.n	8003e38 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	0c9b      	lsrs	r3, r3, #18
 8003e78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e005      	b.n	8003e8e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e1b      	lsrs	r3, r3, #24
 8003ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0fda      	lsrs	r2, r3, #31
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	e00a      	b.n	8003f1a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	441a      	add	r2, r3
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	440b      	add	r3, r1
 8003f10:	7812      	ldrb	r2, [r2, #0]
 8003f12:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	3301      	adds	r3, #1
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d3ec      	bcc.n	8003f04 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d105      	bne.n	8003f3c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003f3a:	e004      	b.n	8003f46 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e006      	b.n	8003f58 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4e:	f043 0208 	orr.w	r2, r3, #8
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	372c      	adds	r7, #44	@ 0x2c
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	08006fd4 	.word	0x08006fd4

08003f68 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f9e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d003      	beq.n	8003fae <HAL_FDCAN_ActivateNotification+0x22>
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f040 80c8 	bne.w	800413e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d03b      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d031      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d027      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01d      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d013      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d13b      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d131      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d127      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11d      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0202 	orr.w	r2, r2, #2
 80040ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	430a      	orrs	r2, r1
 8004108:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	430a      	orrs	r2, r1
 8004126:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	430a      	orrs	r2, r1
 8004138:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e006      	b.n	800414c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004142:	f043 0202 	orr.w	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	@ 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004166:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004174:	4013      	ands	r3, r2
 8004176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800418c:	4013      	ands	r3, r2
 800418e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a4:	4013      	ands	r3, r2
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ae:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80041b2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ba:	6a3a      	ldr	r2, [r7, #32]
 80041bc:	4013      	ands	r3, r2
 80041be:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80041ca:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2240      	movs	r2, #64	@ 0x40
 8004202:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f916 	bl	8004436 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d019      	beq.n	8004248 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d014      	beq.n	8004248 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004226:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800423e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004240:	6939      	ldr	r1, [r7, #16]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8d8 	bl	80043f8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004254:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8a2 	bl	80043a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800426a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800426c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fa44 	bl	80006fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004282:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f897 	bl	80043b8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00c      	beq.n	80042ae <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f890 	bl	80043ce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d018      	beq.n	80042ea <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042ca:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2280      	movs	r2, #128	@ 0x80
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f87c 	bl	80043e2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00c      	beq.n	800430e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004306:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f880 	bl	800440e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800432a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f878 	bl	8004422 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800434e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f876 	bl	800445e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f858 	bl	800444a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800439a:	bf00      	nop
 800439c:	3730      	adds	r7, #48	@ 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800447c:	4b27      	ldr	r3, [pc, #156]	@ (800451c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800447e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	041a      	lsls	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	061a      	lsls	r2, r3, #24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e005      	b.n	8004502 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3304      	adds	r3, #4
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	429a      	cmp	r2, r3
 800450c:	d3f3      	bcc.n	80044f6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	4000a400 	.word	0x4000a400

08004520 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800453e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004546:	4313      	orrs	r3, r2
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e00a      	b.n	8004562 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004554:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800455a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800455c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004560:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800456c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004572:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004578:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3304      	adds	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3304      	adds	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e020      	b.n	80045f6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3303      	adds	r3, #3
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3302      	adds	r3, #2
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	440b      	add	r3, r1
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80045cc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	3301      	adds	r3, #1
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	440b      	add	r3, r1
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80045da:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	440a      	add	r2, r1
 80045e2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80045e4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3304      	adds	r3, #4
 80045ee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3304      	adds	r3, #4
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a06      	ldr	r2, [pc, #24]	@ (8004614 <FDCAN_CopyMessageToRAM+0xf4>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	461a      	mov	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4293      	cmp	r3, r2
 8004604:	d3d6      	bcc.n	80045b4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	3724      	adds	r7, #36	@ 0x24
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	08006fd4 	.word	0x08006fd4

08004618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004626:	e15a      	b.n	80048de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 814c 	beq.w	80048d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d005      	beq.n	8004658 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004654:	2b02      	cmp	r3, #2
 8004656:	d130      	bne.n	80046ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800468e:	2201      	movs	r2, #1
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0201 	and.w	r2, r3, #1
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d017      	beq.n	80046f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d123      	bne.n	800474a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	08da      	lsrs	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3208      	adds	r2, #8
 8004744:	6939      	ldr	r1, [r7, #16]
 8004746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0203 	and.w	r2, r3, #3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80a6 	beq.w	80048d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478c:	4b5b      	ldr	r3, [pc, #364]	@ (80048fc <HAL_GPIO_Init+0x2e4>)
 800478e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004790:	4a5a      	ldr	r2, [pc, #360]	@ (80048fc <HAL_GPIO_Init+0x2e4>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6613      	str	r3, [r2, #96]	@ 0x60
 8004798:	4b58      	ldr	r3, [pc, #352]	@ (80048fc <HAL_GPIO_Init+0x2e4>)
 800479a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a4:	4a56      	ldr	r2, [pc, #344]	@ (8004900 <HAL_GPIO_Init+0x2e8>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	3302      	adds	r3, #2
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047ce:	d01f      	beq.n	8004810 <HAL_GPIO_Init+0x1f8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004904 <HAL_GPIO_Init+0x2ec>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d019      	beq.n	800480c <HAL_GPIO_Init+0x1f4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a4b      	ldr	r2, [pc, #300]	@ (8004908 <HAL_GPIO_Init+0x2f0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_GPIO_Init+0x1f0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <HAL_GPIO_Init+0x2f4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00d      	beq.n	8004804 <HAL_GPIO_Init+0x1ec>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a49      	ldr	r2, [pc, #292]	@ (8004910 <HAL_GPIO_Init+0x2f8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <HAL_GPIO_Init+0x1e8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a48      	ldr	r2, [pc, #288]	@ (8004914 <HAL_GPIO_Init+0x2fc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_GPIO_Init+0x1e4>
 80047f8:	2305      	movs	r3, #5
 80047fa:	e00a      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 80047fc:	2306      	movs	r3, #6
 80047fe:	e008      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 8004800:	2304      	movs	r3, #4
 8004802:	e006      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 8004804:	2303      	movs	r3, #3
 8004806:	e004      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 8004808:	2302      	movs	r3, #2
 800480a:	e002      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_GPIO_Init+0x1fa>
 8004810:	2300      	movs	r3, #0
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	f002 0203 	and.w	r2, r2, #3
 8004818:	0092      	lsls	r2, r2, #2
 800481a:	4093      	lsls	r3, r2
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004822:	4937      	ldr	r1, [pc, #220]	@ (8004900 <HAL_GPIO_Init+0x2e8>)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004830:	4b39      	ldr	r3, [pc, #228]	@ (8004918 <HAL_GPIO_Init+0x300>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_GPIO_Init+0x300>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <HAL_GPIO_Init+0x300>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800487e:	4a26      	ldr	r2, [pc, #152]	@ (8004918 <HAL_GPIO_Init+0x300>)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004884:	4b24      	ldr	r3, [pc, #144]	@ (8004918 <HAL_GPIO_Init+0x300>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_GPIO_Init+0x300>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004918 <HAL_GPIO_Init+0x300>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048d2:	4a11      	ldr	r2, [pc, #68]	@ (8004918 <HAL_GPIO_Init+0x300>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3301      	adds	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f ae9d 	bne.w	8004628 <HAL_GPIO_Init+0x10>
  }
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40021000 	.word	0x40021000
 8004900:	40010000 	.word	0x40010000
 8004904:	48000400 	.word	0x48000400
 8004908:	48000800 	.word	0x48000800
 800490c:	48000c00 	.word	0x48000c00
 8004910:	48001000 	.word	0x48001000
 8004914:	48001400 	.word	0x48001400
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800492c:	787b      	ldrb	r3, [r7, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004938:	e002      	b.n	8004940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d141      	bne.n	80049de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800495a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004966:	d131      	bne.n	80049cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004968:	4b47      	ldr	r3, [pc, #284]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800496e:	4a46      	ldr	r2, [pc, #280]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004978:	4b43      	ldr	r3, [pc, #268]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004980:	4a41      	ldr	r2, [pc, #260]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004988:	4b40      	ldr	r3, [pc, #256]	@ (8004a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2232      	movs	r2, #50	@ 0x32
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	4a3f      	ldr	r2, [pc, #252]	@ (8004a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	0c9b      	lsrs	r3, r3, #18
 800499a:	3301      	adds	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499e:	e002      	b.n	80049a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a6:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b2:	d102      	bne.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f2      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ba:	4b33      	ldr	r3, [pc, #204]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d158      	bne.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e057      	b.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049dc:	e04d      	b.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e4:	d141      	bne.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049e6:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d131      	bne.n	8004a58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049f4:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049fa:	4a23      	ldr	r2, [pc, #140]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a04:	4b20      	ldr	r3, [pc, #128]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a14:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2232      	movs	r2, #50	@ 0x32
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	0c9b      	lsrs	r3, r3, #18
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a2a:	e002      	b.n	8004a32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a32:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3e:	d102      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f2      	bne.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d112      	bne.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e011      	b.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a68:	e007      	b.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a72:	4a05      	ldr	r2, [pc, #20]	@ (8004a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	431bde83 	.word	0x431bde83

08004a94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aa2:	6093      	str	r3, [r2, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e2fe      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d075      	beq.n	8004bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad2:	4b97      	ldr	r3, [pc, #604]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004adc:	4b94      	ldr	r3, [pc, #592]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d102      	bne.n	8004af2 <HAL_RCC_OscConfig+0x3e>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d002      	beq.n	8004af8 <HAL_RCC_OscConfig+0x44>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	4b8d      	ldr	r3, [pc, #564]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x108>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d157      	bne.n	8004bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e2d9      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d106      	bne.n	8004b28 <HAL_RCC_OscConfig+0x74>
 8004b1a:	4b85      	ldr	r3, [pc, #532]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a84      	ldr	r2, [pc, #528]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x98>
 8004b32:	4b7f      	ldr	r3, [pc, #508]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a7e      	ldr	r2, [pc, #504]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a7b      	ldr	r2, [pc, #492]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xb0>
 8004b4c:	4b78      	ldr	r3, [pc, #480]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a77      	ldr	r2, [pc, #476]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b75      	ldr	r3, [pc, #468]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a74      	ldr	r2, [pc, #464]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fd f9c0 	bl	8001ef0 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fd f9bc 	bl	8001ef0 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	@ 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e29e      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b86:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xc0>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd f9ac 	bl	8001ef0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fd f9a8 	bl	8001ef0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	@ 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e28a      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bae:	4b60      	ldr	r3, [pc, #384]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0xe8>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bca:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd4:	4b56      	ldr	r3, [pc, #344]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d102      	bne.n	8004bea <HAL_RCC_OscConfig+0x136>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d11f      	bne.n	8004c30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_OscConfig+0x154>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e25d      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b49      	ldr	r3, [pc, #292]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	4946      	ldr	r1, [pc, #280]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c1c:	4b45      	ldr	r3, [pc, #276]	@ (8004d34 <HAL_RCC_OscConfig+0x280>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fd f919 	bl	8001e58 <HAL_InitTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d043      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e249      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d023      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b3d      	ldr	r3, [pc, #244]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd f954 	bl	8001ef0 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fd f950 	bl	8001ef0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e232      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5e:	4b34      	ldr	r3, [pc, #208]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b31      	ldr	r3, [pc, #196]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	492d      	ldr	r1, [pc, #180]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
 8004c7e:	e01a      	b.n	8004cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c80:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f930 	bl	8001ef0 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd f92c 	bl	8001ef0 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e20e      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca6:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1e0>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d041      	beq.n	8004d46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cca:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd0:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fd f909 	bl	8001ef0 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fd f905 	bl	8001ef0 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e1e7      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x22e>
 8004d02:	e020      	b.n	8004d46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	4a09      	ldr	r2, [pc, #36]	@ (8004d30 <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd f8ec 	bl	8001ef0 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d1a:	e00d      	b.n	8004d38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fd f8e8 	bl	8001ef0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d906      	bls.n	8004d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e1ca      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d38:	4b8c      	ldr	r3, [pc, #560]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ea      	bne.n	8004d1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a6 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d58:	4b84      	ldr	r3, [pc, #528]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x2b4>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x2b6>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	4a7e      	ldr	r2, [pc, #504]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8a:	4b79      	ldr	r3, [pc, #484]	@ (8004f70 <HAL_RCC_OscConfig+0x4bc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d118      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d96:	4b76      	ldr	r3, [pc, #472]	@ (8004f70 <HAL_RCC_OscConfig+0x4bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a75      	ldr	r2, [pc, #468]	@ (8004f70 <HAL_RCC_OscConfig+0x4bc>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da2:	f7fd f8a5 	bl	8001ef0 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004daa:	f7fd f8a1 	bl	8001ef0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e183      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <HAL_RCC_OscConfig+0x4bc>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d108      	bne.n	8004de2 <HAL_RCC_OscConfig+0x32e>
 8004dd0:	4b66      	ldr	r3, [pc, #408]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd6:	4a65      	ldr	r2, [pc, #404]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de0:	e024      	b.n	8004e2c <HAL_RCC_OscConfig+0x378>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d110      	bne.n	8004e0c <HAL_RCC_OscConfig+0x358>
 8004dea:	4b60      	ldr	r3, [pc, #384]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df0:	4a5e      	ldr	r2, [pc, #376]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f043 0304 	orr.w	r3, r3, #4
 8004df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e00:	4a5a      	ldr	r2, [pc, #360]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e0a:	e00f      	b.n	8004e2c <HAL_RCC_OscConfig+0x378>
 8004e0c:	4b57      	ldr	r3, [pc, #348]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e12:	4a56      	ldr	r2, [pc, #344]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e1c:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	4a52      	ldr	r2, [pc, #328]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d016      	beq.n	8004e62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd f85c 	bl	8001ef0 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fd f858 	bl	8001ef0 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e138      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e52:	4b46      	ldr	r3, [pc, #280]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ed      	beq.n	8004e3c <HAL_RCC_OscConfig+0x388>
 8004e60:	e015      	b.n	8004e8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fd f845 	bl	8001ef0 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fd f841 	bl	8001ef0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e121      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e80:	4b3a      	ldr	r3, [pc, #232]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ed      	bne.n	8004e6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e8e:	7ffb      	ldrb	r3, [r7, #31]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4b35      	ldr	r3, [pc, #212]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	4a34      	ldr	r2, [pc, #208]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01c      	beq.n	8004eee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eba:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fd f814 	bl	8001ef0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ecc:	f7fd f810 	bl	8001ef0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e0f2      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ede:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ef      	beq.n	8004ecc <HAL_RCC_OscConfig+0x418>
 8004eec:	e01b      	b.n	8004f26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eee:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fc fff7 	bl	8001ef0 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f06:	f7fc fff3 	bl	8001ef0 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0d5      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f18:	4b14      	ldr	r3, [pc, #80]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ef      	bne.n	8004f06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80c9 	beq.w	80050c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f30:	4b0e      	ldr	r3, [pc, #56]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	f000 8083 	beq.w	8005044 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d15e      	bne.n	8005004 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <HAL_RCC_OscConfig+0x4b8>)
 8004f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fc ffcd 	bl	8001ef0 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f58:	e00c      	b.n	8004f74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fc ffc9 	bl	8001ef0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d905      	bls.n	8004f74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0ab      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f74:	4b55      	ldr	r3, [pc, #340]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ec      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f80:	4b52      	ldr	r3, [pc, #328]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4b52      	ldr	r3, [pc, #328]	@ (80050d0 <HAL_RCC_OscConfig+0x61c>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6a11      	ldr	r1, [r2, #32]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f9a:	0212      	lsls	r2, r2, #8
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fa2:	0852      	lsrs	r2, r2, #1
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0552      	lsls	r2, r2, #21
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0652      	lsls	r2, r2, #25
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fba:	06d2      	lsls	r2, r2, #27
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	4943      	ldr	r1, [pc, #268]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b41      	ldr	r3, [pc, #260]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a40      	ldr	r2, [pc, #256]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc ff88 	bl	8001ef0 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc ff84 	bl	8001ef0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e066      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x530>
 8005002:	e05e      	b.n	80050c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b31      	ldr	r3, [pc, #196]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a30      	ldr	r2, [pc, #192]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc ff6e 	bl	8001ef0 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc ff6a 	bl	8001ef0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e04c      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502a:	4b28      	ldr	r3, [pc, #160]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005036:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	4924      	ldr	r1, [pc, #144]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 800503c:	4b25      	ldr	r3, [pc, #148]	@ (80050d4 <HAL_RCC_OscConfig+0x620>)
 800503e:	4013      	ands	r3, r2
 8005040:	60cb      	str	r3, [r1, #12]
 8005042:	e03e      	b.n	80050c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e039      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005050:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <HAL_RCC_OscConfig+0x618>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f003 0203 	and.w	r2, r3, #3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	429a      	cmp	r2, r3
 8005062:	d12c      	bne.n	80050be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506e:	3b01      	subs	r3, #1
 8005070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d123      	bne.n	80050be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d11b      	bne.n	80050be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d113      	bne.n	80050be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d109      	bne.n	80050be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	3b01      	subs	r3, #1
 80050b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	019f800c 	.word	0x019f800c
 80050d4:	feeefffc 	.word	0xfeeefffc

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e11e      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b91      	ldr	r3, [pc, #580]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d910      	bls.n	8005120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b8e      	ldr	r3, [pc, #568]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 020f 	bic.w	r2, r3, #15
 8005106:	498c      	ldr	r1, [pc, #560]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b8a      	ldr	r3, [pc, #552]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e106      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d073      	beq.n	8005214 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d129      	bne.n	8005188 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005134:	4b81      	ldr	r3, [pc, #516]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0f4      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005144:	f000 f966 	bl	8005414 <RCC_GetSysClockFreqFromPLLSource>
 8005148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4a7c      	ldr	r2, [pc, #496]	@ (8005340 <HAL_RCC_ClockConfig+0x268>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d93f      	bls.n	80051d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005152:	4b7a      	ldr	r3, [pc, #488]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d033      	beq.n	80051d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800516e:	2b00      	cmp	r3, #0
 8005170:	d12f      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005172:	4b72      	ldr	r3, [pc, #456]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517a:	4a70      	ldr	r2, [pc, #448]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 800517c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e024      	b.n	80051d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005190:	4b6a      	ldr	r3, [pc, #424]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0c6      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0be      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051b0:	f000 f8ce 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4a61      	ldr	r2, [pc, #388]	@ (8005340 <HAL_RCC_ClockConfig+0x268>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d909      	bls.n	80051d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051be:	4b5f      	ldr	r3, [pc, #380]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051c6:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80051c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051ce:	2380      	movs	r3, #128	@ 0x80
 80051d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4957      	ldr	r1, [pc, #348]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fc fe84 	bl	8001ef0 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fc fe80 	bl	8001ef0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e095      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b4e      	ldr	r3, [pc, #312]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800522c:	4b43      	ldr	r3, [pc, #268]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a42      	ldr	r2, [pc, #264]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005236:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005244:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800524c:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 800524e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005254:	4b39      	ldr	r3, [pc, #228]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4936      	ldr	r1, [pc, #216]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005262:	4313      	orrs	r3, r2
 8005264:	608b      	str	r3, [r1, #8]
 8005266:	e008      	b.n	800527a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d105      	bne.n	800527a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800526e:	4b33      	ldr	r3, [pc, #204]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4a32      	ldr	r2, [pc, #200]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 8005274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005278:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527a:	4b2f      	ldr	r3, [pc, #188]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d21d      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 020f 	bic.w	r2, r3, #15
 8005290:	4929      	ldr	r1, [pc, #164]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005298:	f7fc fe2a 	bl	8001ef0 <HAL_GetTick>
 800529c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a0:	f7fc fe26 	bl	8001ef0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e03b      	b.n	800532e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b20      	ldr	r3, [pc, #128]	@ (8005338 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d1ed      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4917      	ldr	r1, [pc, #92]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b13      	ldr	r3, [pc, #76]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490f      	ldr	r1, [pc, #60]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005302:	f000 f825 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <HAL_RCC_ClockConfig+0x264>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490c      	ldr	r1, [pc, #48]	@ (8005344 <HAL_RCC_ClockConfig+0x26c>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_RCC_ClockConfig+0x270>)
 8005320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005322:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_ClockConfig+0x274>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc fd96 	bl	8001e58 <HAL_InitTick>
 800532c:	4603      	mov	r3, r0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40022000 	.word	0x40022000
 800533c:	40021000 	.word	0x40021000
 8005340:	04c4b400 	.word	0x04c4b400
 8005344:	08006fc4 	.word	0x08006fc4
 8005348:	20000000 	.word	0x20000000
 800534c:	20000004 	.word	0x20000004

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005356:	4b2c      	ldr	r3, [pc, #176]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d102      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005362:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	e047      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005368:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d102      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005374:	4b26      	ldr	r3, [pc, #152]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e03e      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800537a:	4b23      	ldr	r3, [pc, #140]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d136      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005386:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	3301      	adds	r3, #1
 800539c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d10c      	bne.n	80053be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ae:	68d2      	ldr	r2, [r2, #12]
 80053b0:	0a12      	lsrs	r2, r2, #8
 80053b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e00c      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053be:	4a13      	ldr	r2, [pc, #76]	@ (800540c <HAL_RCC_GetSysClockFreq+0xbc>)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	4a10      	ldr	r2, [pc, #64]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	0a12      	lsrs	r2, r2, #8
 80053cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]
      break;
 80053d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0e5b      	lsrs	r3, r3, #25
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	3301      	adds	r3, #1
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e001      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053f8:	693b      	ldr	r3, [r7, #16]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000
 800540c:	00f42400 	.word	0x00f42400
 8005410:	007a1200 	.word	0x007a1200

08005414 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800541a:	4b1e      	ldr	r3, [pc, #120]	@ (8005494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005424:	4b1b      	ldr	r3, [pc, #108]	@ (8005494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d10c      	bne.n	8005452 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005438:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005442:	68d2      	ldr	r2, [r2, #12]
 8005444:	0a12      	lsrs	r2, r2, #8
 8005446:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	617b      	str	r3, [r7, #20]
    break;
 8005450:	e00c      	b.n	800546c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005452:	4a12      	ldr	r2, [pc, #72]	@ (800549c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4a0e      	ldr	r2, [pc, #56]	@ (8005494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	0a12      	lsrs	r2, r2, #8
 8005460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]
    break;
 800546a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0e5b      	lsrs	r3, r3, #25
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005486:	687b      	ldr	r3, [r7, #4]
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40021000 	.word	0x40021000
 8005498:	007a1200 	.word	0x007a1200
 800549c:	00f42400 	.word	0x00f42400

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054a8:	2300      	movs	r3, #0
 80054aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8098 	beq.w	80055ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c2:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10d      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ce:	4b40      	ldr	r3, [pc, #256]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	4a3f      	ldr	r2, [pc, #252]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054da:	4b3d      	ldr	r3, [pc, #244]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e6:	2301      	movs	r3, #1
 80054e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ea:	4b3a      	ldr	r3, [pc, #232]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a39      	ldr	r2, [pc, #228]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054f6:	f7fc fcfb 	bl	8001ef0 <HAL_GetTick>
 80054fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054fc:	e009      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fe:	f7fc fcf7 	bl	8001ef0 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d902      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	74fb      	strb	r3, [r7, #19]
        break;
 8005510:	e005      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005512:	4b30      	ldr	r3, [pc, #192]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ef      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d159      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005524:	4b2a      	ldr	r3, [pc, #168]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d01e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	429a      	cmp	r2, r3
 800553e:	d019      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005540:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800554c:	4b20      	ldr	r3, [pc, #128]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005552:	4a1f      	ldr	r2, [pc, #124]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800555c:	4b1c      	ldr	r3, [pc, #112]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005562:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800556c:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fcb7 	bl	8001ef0 <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005584:	e00b      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fc fcb3 	bl	8001ef0 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d902      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	74fb      	strb	r3, [r7, #19]
            break;
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ec      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055b2:	4b07      	ldr	r3, [pc, #28]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	4903      	ldr	r1, [pc, #12]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055c8:	e008      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	74bb      	strb	r3, [r7, #18]
 80055ce:	e005      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055dc:	7c7b      	ldrb	r3, [r7, #17]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d105      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	4ba6      	ldr	r3, [pc, #664]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	4aa5      	ldr	r2, [pc, #660]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055fa:	4ba0      	ldr	r3, [pc, #640]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005600:	f023 0203 	bic.w	r2, r3, #3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	499c      	ldr	r1, [pc, #624]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800561c:	4b97      	ldr	r3, [pc, #604]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	f023 020c 	bic.w	r2, r3, #12
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4994      	ldr	r1, [pc, #592]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800563e:	4b8f      	ldr	r3, [pc, #572]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005644:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	498b      	ldr	r1, [pc, #556]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005660:	4b86      	ldr	r3, [pc, #536]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005666:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	4983      	ldr	r1, [pc, #524]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005682:	4b7e      	ldr	r3, [pc, #504]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005688:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	497a      	ldr	r1, [pc, #488]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a4:	4b75      	ldr	r3, [pc, #468]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4972      	ldr	r1, [pc, #456]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c6:	4b6d      	ldr	r3, [pc, #436]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4969      	ldr	r1, [pc, #420]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e8:	4b64      	ldr	r3, [pc, #400]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4961      	ldr	r1, [pc, #388]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800570a:	4b5c      	ldr	r3, [pc, #368]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005710:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	4958      	ldr	r1, [pc, #352]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800572c:	4b53      	ldr	r3, [pc, #332]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005732:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	4950      	ldr	r1, [pc, #320]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800574c:	4b4b      	ldr	r3, [pc, #300]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4a4a      	ldr	r2, [pc, #296]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005764:	4b45      	ldr	r3, [pc, #276]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4942      	ldr	r1, [pc, #264]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005782:	d105      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005784:	4b3d      	ldr	r3, [pc, #244]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a3c      	ldr	r2, [pc, #240]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800578e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800579c:	4b37      	ldr	r3, [pc, #220]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	4934      	ldr	r1, [pc, #208]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057bc:	4b2f      	ldr	r3, [pc, #188]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057d4:	4b29      	ldr	r3, [pc, #164]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	4926      	ldr	r1, [pc, #152]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f4:	4b21      	ldr	r3, [pc, #132]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a20      	ldr	r2, [pc, #128]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581a:	4918      	ldr	r1, [pc, #96]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582c:	4b13      	ldr	r3, [pc, #76]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a12      	ldr	r2, [pc, #72]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005836:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005844:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005852:	490a      	ldr	r1, [pc, #40]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005862:	d105      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a04      	ldr	r2, [pc, #16]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005870:	7cbb      	ldrb	r3, [r7, #18]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e049      	b.n	8005926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f90a 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fd92 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e04a      	b.n	80059de <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <HAL_TIM_Base_Start_IT+0xbc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005972:	d013      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x6c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a19      	ldr	r2, [pc, #100]	@ (80059fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d115      	bne.n	80059c8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	4b17      	ldr	r3, [pc, #92]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xd0>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d015      	beq.n	80059da <HAL_TIM_Base_Start_IT+0xaa>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b4:	d011      	beq.n	80059da <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	e008      	b.n	80059da <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e000      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e049      	b.n	8005aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f841 	bl	8005ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 fcd0 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <HAL_TIM_PWM_Start+0x24>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	e03c      	b.n	8005b66 <HAL_TIM_PWM_Start+0x9e>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d109      	bne.n	8005b06 <HAL_TIM_PWM_Start+0x3e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	bf14      	ite	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	2300      	moveq	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e02f      	b.n	8005b66 <HAL_TIM_PWM_Start+0x9e>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d109      	bne.n	8005b20 <HAL_TIM_PWM_Start+0x58>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e022      	b.n	8005b66 <HAL_TIM_PWM_Start+0x9e>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b0c      	cmp	r3, #12
 8005b24:	d109      	bne.n	8005b3a <HAL_TIM_PWM_Start+0x72>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e015      	b.n	8005b66 <HAL_TIM_PWM_Start+0x9e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d109      	bne.n	8005b54 <HAL_TIM_PWM_Start+0x8c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e008      	b.n	8005b66 <HAL_TIM_PWM_Start+0x9e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e097      	b.n	8005c9e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_PWM_Start+0xb6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b7c:	e023      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xfe>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_PWM_Start+0xc6>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	e01b      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xfe>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0xd6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9c:	e013      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xfe>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0xe6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bac:	e00b      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xfe>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xf6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bbc:	e003      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xfe>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f838 	bl	8006c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a33      	ldr	r2, [pc, #204]	@ (8005ca8 <HAL_TIM_PWM_Start+0x1e0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x13e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a32      	ldr	r2, [pc, #200]	@ (8005cac <HAL_TIM_PWM_Start+0x1e4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x13e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a30      	ldr	r2, [pc, #192]	@ (8005cb0 <HAL_TIM_PWM_Start+0x1e8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x13e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb4 <HAL_TIM_PWM_Start+0x1ec>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x13e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <HAL_TIM_PWM_Start+0x1f0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x142>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <HAL_TIM_PWM_Start+0x144>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <HAL_TIM_PWM_Start+0x1e0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x194>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c32:	d013      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x194>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <HAL_TIM_PWM_Start+0x1f4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x194>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc0 <HAL_TIM_PWM_Start+0x1f8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x194>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <HAL_TIM_PWM_Start+0x1e4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_PWM_Start+0x194>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <HAL_TIM_PWM_Start+0x1e8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d115      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <HAL_TIM_PWM_Start+0x1fc>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d015      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x1d2>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c74:	d011      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c86:	e008      	b.n	8005c9a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	00010007 	.word	0x00010007

08005cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0202 	mvn.w	r2, #2
 8005cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb4a 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb3c 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb4d 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0204 	mvn.w	r2, #4
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fb24 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fb16 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb27 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0208 	mvn.w	r2, #8
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fafe 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 faf0 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fb01 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0210 	mvn.w	r2, #16
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2208      	movs	r2, #8
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fad8 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 faca 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fadb 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0201 	mvn.w	r2, #1
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 faa8 	bl	8006384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 f82f 	bl	8006ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 f827 	bl	8006ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa95 	bl	80063d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0220 	mvn.w	r2, #32
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 ffef 	bl	8006eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fffb 	bl	8006ee8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00c      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fff3 	bl	8006efc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 ffeb 	bl	8006f10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ffe3 	bl	8006f24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0ff      	b.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b14      	cmp	r3, #20
 8005f92:	f200 80f0 	bhi.w	8006176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f96:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08006177 	.word	0x08006177
 8005fa4:	08006177 	.word	0x08006177
 8005fa8:	08006177 	.word	0x08006177
 8005fac:	08006031 	.word	0x08006031
 8005fb0:	08006177 	.word	0x08006177
 8005fb4:	08006177 	.word	0x08006177
 8005fb8:	08006177 	.word	0x08006177
 8005fbc:	08006073 	.word	0x08006073
 8005fc0:	08006177 	.word	0x08006177
 8005fc4:	08006177 	.word	0x08006177
 8005fc8:	08006177 	.word	0x08006177
 8005fcc:	080060b3 	.word	0x080060b3
 8005fd0:	08006177 	.word	0x08006177
 8005fd4:	08006177 	.word	0x08006177
 8005fd8:	08006177 	.word	0x08006177
 8005fdc:	080060f5 	.word	0x080060f5
 8005fe0:	08006177 	.word	0x08006177
 8005fe4:	08006177 	.word	0x08006177
 8005fe8:	08006177 	.word	0x08006177
 8005fec:	08006135 	.word	0x08006135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fa92 	bl	8006520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0208 	orr.w	r2, r2, #8
 800600a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0204 	bic.w	r2, r2, #4
 800601a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6999      	ldr	r1, [r3, #24]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	619a      	str	r2, [r3, #24]
      break;
 800602e:	e0a5      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fb02 	bl	8006640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800604a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6999      	ldr	r1, [r3, #24]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	619a      	str	r2, [r3, #24]
      break;
 8006070:	e084      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fb6b 	bl	8006754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0208 	orr.w	r2, r2, #8
 800608c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0204 	bic.w	r2, r2, #4
 800609c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69d9      	ldr	r1, [r3, #28]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	61da      	str	r2, [r3, #28]
      break;
 80060b0:	e064      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fbd3 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69d9      	ldr	r1, [r3, #28]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	021a      	lsls	r2, r3, #8
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	61da      	str	r2, [r3, #28]
      break;
 80060f2:	e043      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fc3c 	bl	8006978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006132:	e023      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fc80 	bl	8006a40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006174:	e002      	b.n	800617c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
      break;
 800617a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006184:	7dfb      	ldrb	r3, [r7, #23]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop

08006190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0de      	b.n	800636a <HAL_TIM_ConfigClockSource+0x1da>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a63      	ldr	r2, [pc, #396]	@ (8006374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f000 80a9 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 80061ec:	4a61      	ldr	r2, [pc, #388]	@ (8006374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f200 80ae 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f4:	4a60      	ldr	r2, [pc, #384]	@ (8006378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f000 80a1 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 80061fc:	4a5e      	ldr	r2, [pc, #376]	@ (8006378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	f200 80a6 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006204:	4a5d      	ldr	r2, [pc, #372]	@ (800637c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f000 8099 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800620c:	4a5b      	ldr	r2, [pc, #364]	@ (800637c <HAL_TIM_ConfigClockSource+0x1ec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f200 809e 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	4a5a      	ldr	r2, [pc, #360]	@ (8006380 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f000 8091 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800621c:	4a58      	ldr	r2, [pc, #352]	@ (8006380 <HAL_TIM_ConfigClockSource+0x1f0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f200 8096 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006224:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006228:	f000 8089 	beq.w	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800622c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006230:	f200 808e 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006238:	d03e      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x128>
 800623a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800623e:	f200 8087 	bhi.w	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006246:	f000 8086 	beq.w	8006356 <HAL_TIM_ConfigClockSource+0x1c6>
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624e:	d87f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006250:	2b70      	cmp	r3, #112	@ 0x70
 8006252:	d01a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xfa>
 8006254:	2b70      	cmp	r3, #112	@ 0x70
 8006256:	d87b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006258:	2b60      	cmp	r3, #96	@ 0x60
 800625a:	d050      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x16e>
 800625c:	2b60      	cmp	r3, #96	@ 0x60
 800625e:	d877      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006260:	2b50      	cmp	r3, #80	@ 0x50
 8006262:	d03c      	beq.n	80062de <HAL_TIM_ConfigClockSource+0x14e>
 8006264:	2b50      	cmp	r3, #80	@ 0x50
 8006266:	d873      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d058      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x18e>
 800626c:	2b40      	cmp	r3, #64	@ 0x40
 800626e:	d86f      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006270:	2b30      	cmp	r3, #48	@ 0x30
 8006272:	d064      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006274:	2b30      	cmp	r3, #48	@ 0x30
 8006276:	d86b      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d060      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 800627c:	2b20      	cmp	r3, #32
 800627e:	d867      	bhi.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006284:	2b10      	cmp	r3, #16
 8006286:	d05a      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x1ae>
 8006288:	e062      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800629a:	f000 fcb3 	bl	8006c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	609a      	str	r2, [r3, #8]
      break;
 80062b6:	e04f      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c8:	f000 fc9c 	bl	8006c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062da:	609a      	str	r2, [r3, #8]
      break;
 80062dc:	e03c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 fc0e 	bl	8006b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2150      	movs	r1, #80	@ 0x50
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fc67 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 80062fc:	e02c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800630a:	461a      	mov	r2, r3
 800630c:	f000 fc2d 	bl	8006b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2160      	movs	r1, #96	@ 0x60
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fc57 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800631c:	e01c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fbee 	bl	8006b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2140      	movs	r1, #64	@ 0x40
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fc47 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800633c:	e00c      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 fc3e 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800634e:	e003      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      break;
 8006354:	e000      	b.n	8006358 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	00100070 	.word	0x00100070
 8006378:	00100040 	.word	0x00100040
 800637c:	00100030 	.word	0x00100030
 8006380:	00100020 	.word	0x00100020

08006384 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a42      	ldr	r2, [pc, #264]	@ (8006504 <TIM_Base_SetConfig+0x11c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00f      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d00b      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a3f      	ldr	r2, [pc, #252]	@ (8006508 <TIM_Base_SetConfig+0x120>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a3e      	ldr	r2, [pc, #248]	@ (800650c <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0x38>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a3d      	ldr	r2, [pc, #244]	@ (8006510 <TIM_Base_SetConfig+0x128>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d108      	bne.n	8006432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a33      	ldr	r2, [pc, #204]	@ (8006504 <TIM_Base_SetConfig+0x11c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01b      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006440:	d017      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a30      	ldr	r2, [pc, #192]	@ (8006508 <TIM_Base_SetConfig+0x120>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2f      	ldr	r2, [pc, #188]	@ (800650c <TIM_Base_SetConfig+0x124>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00f      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2e      	ldr	r2, [pc, #184]	@ (8006510 <TIM_Base_SetConfig+0x128>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00b      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2d      	ldr	r2, [pc, #180]	@ (8006514 <TIM_Base_SetConfig+0x12c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2c      	ldr	r2, [pc, #176]	@ (8006518 <TIM_Base_SetConfig+0x130>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_Base_SetConfig+0x8a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2b      	ldr	r2, [pc, #172]	@ (800651c <TIM_Base_SetConfig+0x134>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d108      	bne.n	8006484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a16      	ldr	r2, [pc, #88]	@ (8006504 <TIM_Base_SetConfig+0x11c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_Base_SetConfig+0xe8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <TIM_Base_SetConfig+0x128>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0xe8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <TIM_Base_SetConfig+0x12c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0xe8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <TIM_Base_SetConfig+0x130>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0xe8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a14      	ldr	r2, [pc, #80]	@ (800651c <TIM_Base_SetConfig+0x134>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d103      	bne.n	80064d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d105      	bne.n	80064f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]
  }
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40013400 	.word	0x40013400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800

08006520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f023 0201 	bic.w	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0302 	bic.w	r3, r3, #2
 800656c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2c      	ldr	r2, [pc, #176]	@ (800662c <TIM_OC1_SetConfig+0x10c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00f      	beq.n	80065a0 <TIM_OC1_SetConfig+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a2b      	ldr	r2, [pc, #172]	@ (8006630 <TIM_OC1_SetConfig+0x110>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC1_SetConfig+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <TIM_OC1_SetConfig+0x114>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC1_SetConfig+0x80>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a29      	ldr	r2, [pc, #164]	@ (8006638 <TIM_OC1_SetConfig+0x118>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC1_SetConfig+0x80>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a28      	ldr	r2, [pc, #160]	@ (800663c <TIM_OC1_SetConfig+0x11c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10c      	bne.n	80065ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <TIM_OC1_SetConfig+0x10c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_OC1_SetConfig+0xc2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006630 <TIM_OC1_SetConfig+0x110>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_OC1_SetConfig+0xc2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a19      	ldr	r2, [pc, #100]	@ (8006634 <TIM_OC1_SetConfig+0x114>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_OC1_SetConfig+0xc2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a18      	ldr	r2, [pc, #96]	@ (8006638 <TIM_OC1_SetConfig+0x118>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC1_SetConfig+0xc2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a17      	ldr	r2, [pc, #92]	@ (800663c <TIM_OC1_SetConfig+0x11c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d111      	bne.n	8006606 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800

08006640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 0210 	bic.w	r2, r3, #16
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a28      	ldr	r2, [pc, #160]	@ (8006740 <TIM_OC2_SetConfig+0x100>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC2_SetConfig+0x6c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <TIM_OC2_SetConfig+0x104>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10d      	bne.n	80066c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <TIM_OC2_SetConfig+0x100>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00f      	beq.n	80066f0 <TIM_OC2_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006744 <TIM_OC2_SetConfig+0x104>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_OC2_SetConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <TIM_OC2_SetConfig+0x108>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_OC2_SetConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a1a      	ldr	r2, [pc, #104]	@ (800674c <TIM_OC2_SetConfig+0x10c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC2_SetConfig+0xb0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a19      	ldr	r2, [pc, #100]	@ (8006750 <TIM_OC2_SetConfig+0x110>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d113      	bne.n	8006718 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40013400 	.word	0x40013400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800

08006754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a27      	ldr	r2, [pc, #156]	@ (8006850 <TIM_OC3_SetConfig+0xfc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC3_SetConfig+0x6a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a26      	ldr	r2, [pc, #152]	@ (8006854 <TIM_OC3_SetConfig+0x100>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10d      	bne.n	80067da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006850 <TIM_OC3_SetConfig+0xfc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00f      	beq.n	8006802 <TIM_OC3_SetConfig+0xae>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <TIM_OC3_SetConfig+0x100>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_OC3_SetConfig+0xae>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006858 <TIM_OC3_SetConfig+0x104>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d007      	beq.n	8006802 <TIM_OC3_SetConfig+0xae>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a19      	ldr	r2, [pc, #100]	@ (800685c <TIM_OC3_SetConfig+0x108>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_OC3_SetConfig+0xae>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <TIM_OC3_SetConfig+0x10c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d113      	bne.n	800682a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	031b      	lsls	r3, r3, #12
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a28      	ldr	r2, [pc, #160]	@ (8006964 <TIM_OC4_SetConfig+0x100>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC4_SetConfig+0x6c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a27      	ldr	r2, [pc, #156]	@ (8006968 <TIM_OC4_SetConfig+0x104>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10d      	bne.n	80068ec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <TIM_OC4_SetConfig+0x100>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00f      	beq.n	8006914 <TIM_OC4_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006968 <TIM_OC4_SetConfig+0x104>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_OC4_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <TIM_OC4_SetConfig+0x108>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_OC4_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1a      	ldr	r2, [pc, #104]	@ (8006970 <TIM_OC4_SetConfig+0x10c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC4_SetConfig+0xb0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <TIM_OC4_SetConfig+0x110>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d113      	bne.n	800693c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800691a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006922:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	019b      	lsls	r3, r3, #6
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40013400 	.word	0x40013400
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800

08006978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <TIM_OC5_SetConfig+0xb4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00f      	beq.n	80069f2 <TIM_OC5_SetConfig+0x7a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <TIM_OC5_SetConfig+0xb8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <TIM_OC5_SetConfig+0x7a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <TIM_OC5_SetConfig+0xbc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d007      	beq.n	80069f2 <TIM_OC5_SetConfig+0x7a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a14      	ldr	r2, [pc, #80]	@ (8006a38 <TIM_OC5_SetConfig+0xc0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d003      	beq.n	80069f2 <TIM_OC5_SetConfig+0x7a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a13      	ldr	r2, [pc, #76]	@ (8006a3c <TIM_OC5_SetConfig+0xc4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d109      	bne.n	8006a06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40013400 	.word	0x40013400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800

08006a40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	051b      	lsls	r3, r3, #20
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <TIM_OC6_SetConfig+0xb8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_OC6_SetConfig+0x7c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	@ (8006afc <TIM_OC6_SetConfig+0xbc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_OC6_SetConfig+0x7c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	@ (8006b00 <TIM_OC6_SetConfig+0xc0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_OC6_SetConfig+0x7c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <TIM_OC6_SetConfig+0xc4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC6_SetConfig+0x7c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <TIM_OC6_SetConfig+0xc8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d109      	bne.n	8006ad0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40013400 	.word	0x40013400
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800

08006b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 030a 	bic.w	r3, r3, #10
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f023 0210 	bic.w	r2, r3, #16
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f043 0307 	orr.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2201      	movs	r2, #1
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	401a      	ands	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1a      	ldr	r2, [r3, #32]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e065      	b.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1b      	ldr	r2, [pc, #108]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d013      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a12      	ldr	r2, [pc, #72]	@ (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a13      	ldr	r2, [pc, #76]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d10c      	bne.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40014000 	.word	0x40014000

08006d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e073      	b.n	8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	@ (8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d11c      	bne.n	8006e86 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	051b      	lsls	r3, r3, #20
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40013400 	.word	0x40013400

08006eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <memset>:
 8006f38:	4402      	add	r2, r0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d100      	bne.n	8006f42 <memset+0xa>
 8006f40:	4770      	bx	lr
 8006f42:	f803 1b01 	strb.w	r1, [r3], #1
 8006f46:	e7f9      	b.n	8006f3c <memset+0x4>

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	@ (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f000 f826 	bl	8006fac <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	08006fe4 	.word	0x08006fe4
 8006f84:	08006fe4 	.word	0x08006fe4
 8006f88:	08006fe4 	.word	0x08006fe4
 8006f8c:	08006fe8 	.word	0x08006fe8

08006f90 <memcpy>:
 8006f90:	440a      	add	r2, r1
 8006f92:	4291      	cmp	r1, r2
 8006f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f98:	d100      	bne.n	8006f9c <memcpy+0xc>
 8006f9a:	4770      	bx	lr
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	d1f9      	bne.n	8006f9e <memcpy+0xe>
 8006faa:	bd10      	pop	{r4, pc}

08006fac <_init>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_fini>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr
