
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007920  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c54  08007c54  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c5c  08007c5c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000060  08007cc4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08007cc4  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a014  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d88  00000000  00000000  0003a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001183  00000000  00000000  0003e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002138f  00000000  00000000  0003f673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001940d  00000000  00000000  00060a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e08bd  00000000  00000000  00079e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066dc  00000000  00000000  0015a6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00160da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ae8 	.word	0x08007ae8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007ae8 	.word	0x08007ae8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80005c0:	f000 f802 	bl	80005c8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Config_1>:

void Config_1(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <Config_1+0x10c>)
 80005ce:	f240 726c 	movw	r2, #1900	; 0x76c
 80005d2:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 80005d4:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <Config_1+0x110>)
 80005d6:	f640 0202 	movw	r2, #2050	; 0x802
 80005da:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <Config_1+0x114>)
 80005de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005e2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 80005e4:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <Config_1+0x118>)
 80005e6:	f240 726c 	movw	r2, #1900	; 0x76c
 80005ea:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <Config_1+0x11c>)
 80005ee:	f640 0202 	movw	r2, #2050	; 0x802
 80005f2:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <Config_1+0x120>)
 80005f6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005fa:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <Config_1+0x124>)
 80005fe:	f240 726c 	movw	r2, #1900	; 0x76c
 8000602:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <Config_1+0x128>)
 8000606:	f640 0202 	movw	r2, #2050	; 0x802
 800060a:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <Config_1+0x12c>)
 800060e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000612:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <Config_1+0x130>)
 8000616:	f240 726c 	movw	r2, #1900	; 0x76c
 800061a:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 800061c:	4b37      	ldr	r3, [pc, #220]	; (80006fc <Config_1+0x134>)
 800061e:	f640 0202 	movw	r2, #2050	; 0x802
 8000622:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <Config_1+0x138>)
 8000626:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800062a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <Config_1+0x13c>)
 800062e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000632:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <Config_1+0x140>)
 8000636:	f640 0202 	movw	r2, #2050	; 0x802
 800063a:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <Config_1+0x144>)
 800063e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000642:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <Config_1+0x148>)
 8000646:	f240 726c 	movw	r2, #1900	; 0x76c
 800064a:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <Config_1+0x14c>)
 800064e:	f640 0202 	movw	r2, #2050	; 0x802
 8000652:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <Config_1+0x150>)
 8000656:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800065a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <Config_1+0x154>)
 800065e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000662:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <Config_1+0x158>)
 8000666:	f640 0202 	movw	r2, #2050	; 0x802
 800066a:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <Config_1+0x15c>)
 800066e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000672:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <Config_1+0x160>)
 8000676:	f240 726c 	movw	r2, #1900	; 0x76c
 800067a:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <Config_1+0x164>)
 800067e:	f640 0202 	movw	r2, #2050	; 0x802
 8000682:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <Config_1+0x168>)
 8000686:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800068a:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b11111111; //each bit represent one output [1,2,3,4,5,6,7,8]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <Config_1+0x16c>)
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00000000;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <Config_1+0x170>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

	PWM_Prescalers[0] = 0 ;PWM_Prescalers[1] = 0 ;PWM_Prescalers[2] = 0 ;PWM_Prescalers[3] = 0 ;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <Config_1+0x174>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <Config_1+0x174>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	805a      	strh	r2, [r3, #2]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <Config_1+0x174>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	809a      	strh	r2, [r3, #4]
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <Config_1+0x174>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[4] = 0 ;PWM_Prescalers[5] = 0 ;PWM_Prescalers[6] = 0 ;PWM_Prescalers[7] = 0 ;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <Config_1+0x174>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	811a      	strh	r2, [r3, #8]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <Config_1+0x174>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	815a      	strh	r2, [r3, #10]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <Config_1+0x174>)
 80006be:	2200      	movs	r2, #0
 80006c0:	819a      	strh	r2, [r3, #12]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <Config_1+0x174>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	81da      	strh	r2, [r3, #14]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000066c 	.word	0x2000066c
 80006d8:	2000066e 	.word	0x2000066e
 80006dc:	20000670 	.word	0x20000670
 80006e0:	20000672 	.word	0x20000672
 80006e4:	20000674 	.word	0x20000674
 80006e8:	20000676 	.word	0x20000676
 80006ec:	20000678 	.word	0x20000678
 80006f0:	2000067a 	.word	0x2000067a
 80006f4:	2000067c 	.word	0x2000067c
 80006f8:	2000067e 	.word	0x2000067e
 80006fc:	20000680 	.word	0x20000680
 8000700:	20000682 	.word	0x20000682
 8000704:	20000684 	.word	0x20000684
 8000708:	20000686 	.word	0x20000686
 800070c:	20000688 	.word	0x20000688
 8000710:	2000068a 	.word	0x2000068a
 8000714:	2000068c 	.word	0x2000068c
 8000718:	2000068e 	.word	0x2000068e
 800071c:	20000690 	.word	0x20000690
 8000720:	20000692 	.word	0x20000692
 8000724:	20000694 	.word	0x20000694
 8000728:	20000696 	.word	0x20000696
 800072c:	20000698 	.word	0x20000698
 8000730:	2000069a 	.word	0x2000069a
 8000734:	2000069e 	.word	0x2000069e
 8000738:	2000069f 	.word	0x2000069f
 800073c:	200006a0 	.word	0x200006a0

08000740 <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 8000746:	4b50      	ldr	r3, [pc, #320]	; (8000888 <CS_process+0x148>)
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <CS_process+0x14c>)
 800074c:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 800074e:	4b50      	ldr	r3, [pc, #320]	; (8000890 <CS_process+0x150>)
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	4b50      	ldr	r3, [pc, #320]	; (8000894 <CS_process+0x154>)
 8000754:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 8000756:	4b50      	ldr	r3, [pc, #320]	; (8000898 <CS_process+0x158>)
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	4b50      	ldr	r3, [pc, #320]	; (800089c <CS_process+0x15c>)
 800075c:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <CS_process+0x160>)
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <CS_process+0x164>)
 8000764:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 8000766:	4b50      	ldr	r3, [pc, #320]	; (80008a8 <CS_process+0x168>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <CS_process+0x16c>)
 800076c:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 800076e:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <CS_process+0x170>)
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <CS_process+0x174>)
 8000774:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <CS_process+0x178>)
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	4b50      	ldr	r3, [pc, #320]	; (80008bc <CS_process+0x17c>)
 800077c:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 800077e:	4b50      	ldr	r3, [pc, #320]	; (80008c0 <CS_process+0x180>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <CS_process+0x184>)
 8000784:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e072      	b.n	8000872 <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <CS_process+0x14c>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4a3d      	ldr	r2, [pc, #244]	; (8000888 <CS_process+0x148>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079a:	440b      	add	r3, r1
 800079c:	0fda      	lsrs	r2, r3, #31
 800079e:	4413      	add	r3, r2
 80007a0:	105b      	asrs	r3, r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <CS_process+0x14c>)
 80007a6:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 80007a8:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <CS_process+0x154>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <CS_process+0x150>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b6:	440b      	add	r3, r1
 80007b8:	0fda      	lsrs	r2, r3, #31
 80007ba:	4413      	add	r3, r2
 80007bc:	105b      	asrs	r3, r3, #1
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <CS_process+0x154>)
 80007c2:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <CS_process+0x15c>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <CS_process+0x158>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d2:	440b      	add	r3, r1
 80007d4:	0fda      	lsrs	r2, r3, #31
 80007d6:	4413      	add	r3, r2
 80007d8:	105b      	asrs	r3, r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <CS_process+0x15c>)
 80007de:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <CS_process+0x164>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <CS_process+0x160>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ee:	440b      	add	r3, r1
 80007f0:	0fda      	lsrs	r2, r3, #31
 80007f2:	4413      	add	r3, r2
 80007f4:	105b      	asrs	r3, r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <CS_process+0x164>)
 80007fa:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <CS_process+0x16c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <CS_process+0x168>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080a:	440b      	add	r3, r1
 800080c:	0fda      	lsrs	r2, r3, #31
 800080e:	4413      	add	r3, r2
 8000810:	105b      	asrs	r3, r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <CS_process+0x16c>)
 8000816:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <CS_process+0x174>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <CS_process+0x170>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000826:	440b      	add	r3, r1
 8000828:	0fda      	lsrs	r2, r3, #31
 800082a:	4413      	add	r3, r2
 800082c:	105b      	asrs	r3, r3, #1
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <CS_process+0x174>)
 8000832:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <CS_process+0x17c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <CS_process+0x178>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000842:	440b      	add	r3, r1
 8000844:	0fda      	lsrs	r2, r3, #31
 8000846:	4413      	add	r3, r2
 8000848:	105b      	asrs	r3, r3, #1
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <CS_process+0x17c>)
 800084e:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <CS_process+0x184>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <CS_process+0x180>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	440b      	add	r3, r1
 8000860:	0fda      	lsrs	r2, r3, #31
 8000862:	4413      	add	r3, r2
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <CS_process+0x184>)
 800086a:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b1f      	cmp	r3, #31
 8000876:	dd89      	ble.n	800078c <CS_process+0x4c>
	}

}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	2000045c 	.word	0x2000045c
 800088c:	2000065c 	.word	0x2000065c
 8000890:	2000049c 	.word	0x2000049c
 8000894:	2000065e 	.word	0x2000065e
 8000898:	200004dc 	.word	0x200004dc
 800089c:	20000660 	.word	0x20000660
 80008a0:	2000051c 	.word	0x2000051c
 80008a4:	20000662 	.word	0x20000662
 80008a8:	2000055c 	.word	0x2000055c
 80008ac:	20000664 	.word	0x20000664
 80008b0:	2000059c 	.word	0x2000059c
 80008b4:	20000666 	.word	0x20000666
 80008b8:	200005dc 	.word	0x200005dc
 80008bc:	20000668 	.word	0x20000668
 80008c0:	2000061c 	.word	0x2000061c
 80008c4:	2000066a 	.word	0x2000066a

080008c8 <CS_read>:
	if(IN4_2_PROC <= UC_4_2){
		print_out(-1,"8_UC",data_output_switch);
	}
}

void CS_read(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e1af      	b.n	8000c34 <CS_read+0x36c>
		switch(x){
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	f200 81a9 	bhi.w	8000c2e <CS_read+0x366>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <CS_read+0x1c>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	080008f5 	.word	0x080008f5
 80008e8:	080009b9 	.word	0x080009b9
 80008ec:	08000a7d 	.word	0x08000a7d
 80008f0:	08000b41 	.word	0x08000b41
		case 0:
			CS_SEL[0] = 0;
 80008f4:	4b9e      	ldr	r3, [pc, #632]	; (8000b70 <CS_read+0x2a8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 80008fa:	4b9d      	ldr	r3, [pc, #628]	; (8000b70 <CS_read+0x2a8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000900:	4b9b      	ldr	r3, [pc, #620]	; (8000b70 <CS_read+0x2a8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	489a      	ldr	r0, [pc, #616]	; (8000b74 <CS_read+0x2ac>)
 800090a:	f003 fb83 	bl	8004014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 800090e:	4b98      	ldr	r3, [pc, #608]	; (8000b70 <CS_read+0x2a8>)
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	461a      	mov	r2, r3
 8000914:	2120      	movs	r1, #32
 8000916:	4897      	ldr	r0, [pc, #604]	; (8000b74 <CS_read+0x2ac>)
 8000918:	f003 fb7c 	bl	8004014 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	e046      	b.n	80009b0 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000922:	4895      	ldr	r0, [pc, #596]	; (8000b78 <CS_read+0x2b0>)
 8000924:	f001 ff84 	bl	8002830 <HAL_ADC_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <CS_read+0x6a>
 800092e:	f000 ff15 	bl	800175c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000932:	4892      	ldr	r0, [pc, #584]	; (8000b7c <CS_read+0x2b4>)
 8000934:	f001 ff7c 	bl	8002830 <HAL_ADC_Start_IT>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <CS_read+0x7a>
 800093e:	f000 ff0d 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000942:	210a      	movs	r1, #10
 8000944:	488c      	ldr	r0, [pc, #560]	; (8000b78 <CS_read+0x2b0>)
 8000946:	f001 fe9b 	bl	8002680 <HAL_ADC_PollForConversion>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <CS_read+0x8c>
 8000950:	f000 ff04 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000954:	210a      	movs	r1, #10
 8000956:	4889      	ldr	r0, [pc, #548]	; (8000b7c <CS_read+0x2b4>)
 8000958:	f001 fe92 	bl	8002680 <HAL_ADC_PollForConversion>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <CS_read+0x9e>
 8000962:	f000 fefb 	bl	800175c <Error_Handler>
				IN1_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000966:	4884      	ldr	r0, [pc, #528]	; (8000b78 <CS_read+0x2b0>)
 8000968:	f002 f8cd 	bl	8002b06 <HAL_ADC_GetValue>
 800096c:	4603      	mov	r3, r0
 800096e:	b299      	uxth	r1, r3
 8000970:	4a83      	ldr	r2, [pc, #524]	; (8000b80 <CS_read+0x2b8>)
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000978:	4880      	ldr	r0, [pc, #512]	; (8000b7c <CS_read+0x2b4>)
 800097a:	f002 f8c4 	bl	8002b06 <HAL_ADC_GetValue>
 800097e:	4603      	mov	r3, r0
 8000980:	b299      	uxth	r1, r3
 8000982:	4a80      	ldr	r2, [pc, #512]	; (8000b84 <CS_read+0x2bc>)
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800098a:	487b      	ldr	r0, [pc, #492]	; (8000b78 <CS_read+0x2b0>)
 800098c:	f002 f880 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <CS_read+0xd2>
 8000996:	f000 fee1 	bl	800175c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 800099a:	4878      	ldr	r0, [pc, #480]	; (8000b7c <CS_read+0x2b4>)
 800099c:	f002 f878 	bl	8002a90 <HAL_ADC_Stop_IT>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <CS_read+0xe2>
 80009a6:	f000 fed9 	bl	800175c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	3301      	adds	r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	2b1f      	cmp	r3, #31
 80009b4:	ddb5      	ble.n	8000922 <CS_read+0x5a>
			}
			break;
 80009b6:	e13a      	b.n	8000c2e <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 80009b8:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <CS_read+0x2a8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 80009be:	4b6c      	ldr	r3, [pc, #432]	; (8000b70 <CS_read+0x2a8>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 80009c4:	4b6a      	ldr	r3, [pc, #424]	; (8000b70 <CS_read+0x2a8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4869      	ldr	r0, [pc, #420]	; (8000b74 <CS_read+0x2ac>)
 80009ce:	f003 fb21 	bl	8004014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 80009d2:	4b67      	ldr	r3, [pc, #412]	; (8000b70 <CS_read+0x2a8>)
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	461a      	mov	r2, r3
 80009d8:	2120      	movs	r1, #32
 80009da:	4866      	ldr	r0, [pc, #408]	; (8000b74 <CS_read+0x2ac>)
 80009dc:	f003 fb1a 	bl	8004014 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e046      	b.n	8000a74 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80009e6:	4864      	ldr	r0, [pc, #400]	; (8000b78 <CS_read+0x2b0>)
 80009e8:	f001 ff22 	bl	8002830 <HAL_ADC_Start_IT>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <CS_read+0x12e>
 80009f2:	f000 feb3 	bl	800175c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80009f6:	4861      	ldr	r0, [pc, #388]	; (8000b7c <CS_read+0x2b4>)
 80009f8:	f001 ff1a 	bl	8002830 <HAL_ADC_Start_IT>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <CS_read+0x13e>
 8000a02:	f000 feab 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000a06:	210a      	movs	r1, #10
 8000a08:	485b      	ldr	r0, [pc, #364]	; (8000b78 <CS_read+0x2b0>)
 8000a0a:	f001 fe39 	bl	8002680 <HAL_ADC_PollForConversion>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <CS_read+0x150>
 8000a14:	f000 fea2 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000a18:	210a      	movs	r1, #10
 8000a1a:	4858      	ldr	r0, [pc, #352]	; (8000b7c <CS_read+0x2b4>)
 8000a1c:	f001 fe30 	bl	8002680 <HAL_ADC_PollForConversion>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <CS_read+0x162>
 8000a26:	f000 fe99 	bl	800175c <Error_Handler>
				IN2_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000a2a:	4853      	ldr	r0, [pc, #332]	; (8000b78 <CS_read+0x2b0>)
 8000a2c:	f002 f86b 	bl	8002b06 <HAL_ADC_GetValue>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b299      	uxth	r1, r3
 8000a34:	4a54      	ldr	r2, [pc, #336]	; (8000b88 <CS_read+0x2c0>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000a3c:	484f      	ldr	r0, [pc, #316]	; (8000b7c <CS_read+0x2b4>)
 8000a3e:	f002 f862 	bl	8002b06 <HAL_ADC_GetValue>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b299      	uxth	r1, r3
 8000a46:	4a51      	ldr	r2, [pc, #324]	; (8000b8c <CS_read+0x2c4>)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000a4e:	484a      	ldr	r0, [pc, #296]	; (8000b78 <CS_read+0x2b0>)
 8000a50:	f002 f81e 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <CS_read+0x196>
 8000a5a:	f000 fe7f 	bl	800175c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000a5e:	4847      	ldr	r0, [pc, #284]	; (8000b7c <CS_read+0x2b4>)
 8000a60:	f002 f816 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <CS_read+0x1a6>
 8000a6a:	f000 fe77 	bl	800175c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b1f      	cmp	r3, #31
 8000a78:	ddb5      	ble.n	80009e6 <CS_read+0x11e>
			}
			break;
 8000a7a:	e0d8      	b.n	8000c2e <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <CS_read+0x2a8>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <CS_read+0x2a8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <CS_read+0x2a8>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4838      	ldr	r0, [pc, #224]	; (8000b74 <CS_read+0x2ac>)
 8000a92:	f003 fabf 	bl	8004014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <CS_read+0x2a8>)
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4835      	ldr	r0, [pc, #212]	; (8000b74 <CS_read+0x2ac>)
 8000aa0:	f003 fab8 	bl	8004014 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	e046      	b.n	8000b38 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000aaa:	4833      	ldr	r0, [pc, #204]	; (8000b78 <CS_read+0x2b0>)
 8000aac:	f001 fec0 	bl	8002830 <HAL_ADC_Start_IT>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <CS_read+0x1f2>
 8000ab6:	f000 fe51 	bl	800175c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000aba:	4830      	ldr	r0, [pc, #192]	; (8000b7c <CS_read+0x2b4>)
 8000abc:	f001 feb8 	bl	8002830 <HAL_ADC_Start_IT>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <CS_read+0x202>
 8000ac6:	f000 fe49 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000aca:	210a      	movs	r1, #10
 8000acc:	482a      	ldr	r0, [pc, #168]	; (8000b78 <CS_read+0x2b0>)
 8000ace:	f001 fdd7 	bl	8002680 <HAL_ADC_PollForConversion>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <CS_read+0x214>
 8000ad8:	f000 fe40 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000adc:	210a      	movs	r1, #10
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <CS_read+0x2b4>)
 8000ae0:	f001 fdce 	bl	8002680 <HAL_ADC_PollForConversion>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <CS_read+0x226>
 8000aea:	f000 fe37 	bl	800175c <Error_Handler>
				IN3_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000aee:	4822      	ldr	r0, [pc, #136]	; (8000b78 <CS_read+0x2b0>)
 8000af0:	f002 f809 	bl	8002b06 <HAL_ADC_GetValue>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b299      	uxth	r1, r3
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <CS_read+0x2c8>)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000b00:	481e      	ldr	r0, [pc, #120]	; (8000b7c <CS_read+0x2b4>)
 8000b02:	f002 f800 	bl	8002b06 <HAL_ADC_GetValue>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <CS_read+0x2cc>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <CS_read+0x2b0>)
 8000b14:	f001 ffbc 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <CS_read+0x25a>
 8000b1e:	f000 fe1d 	bl	800175c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000b22:	4816      	ldr	r0, [pc, #88]	; (8000b7c <CS_read+0x2b4>)
 8000b24:	f001 ffb4 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <CS_read+0x26a>
 8000b2e:	f000 fe15 	bl	800175c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	3301      	adds	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	ddb5      	ble.n	8000aaa <CS_read+0x1e2>
			}
			break;
 8000b3e:	e076      	b.n	8000c2e <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <CS_read+0x2a8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <CS_read+0x2a8>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <CS_read+0x2a8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <CS_read+0x2ac>)
 8000b56:	f003 fa5d 	bl	8004014 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <CS_read+0x2a8>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2120      	movs	r1, #32
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <CS_read+0x2ac>)
 8000b64:	f003 fa56 	bl	8004014 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	e05b      	b.n	8000c26 <CS_read+0x35e>
 8000b6e:	bf00      	nop
 8000b70:	2000069c 	.word	0x2000069c
 8000b74:	48000400 	.word	0x48000400
 8000b78:	2000007c 	.word	0x2000007c
 8000b7c:	200000e8 	.word	0x200000e8
 8000b80:	2000045c 	.word	0x2000045c
 8000b84:	2000055c 	.word	0x2000055c
 8000b88:	2000049c 	.word	0x2000049c
 8000b8c:	2000059c 	.word	0x2000059c
 8000b90:	200004dc 	.word	0x200004dc
 8000b94:	200005dc 	.word	0x200005dc
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000b98:	482b      	ldr	r0, [pc, #172]	; (8000c48 <CS_read+0x380>)
 8000b9a:	f001 fe49 	bl	8002830 <HAL_ADC_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <CS_read+0x2e0>
 8000ba4:	f000 fdda 	bl	800175c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ba8:	4828      	ldr	r0, [pc, #160]	; (8000c4c <CS_read+0x384>)
 8000baa:	f001 fe41 	bl	8002830 <HAL_ADC_Start_IT>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <CS_read+0x2f0>
 8000bb4:	f000 fdd2 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000bb8:	210a      	movs	r1, #10
 8000bba:	4823      	ldr	r0, [pc, #140]	; (8000c48 <CS_read+0x380>)
 8000bbc:	f001 fd60 	bl	8002680 <HAL_ADC_PollForConversion>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <CS_read+0x302>
 8000bc6:	f000 fdc9 	bl	800175c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000bca:	210a      	movs	r1, #10
 8000bcc:	481f      	ldr	r0, [pc, #124]	; (8000c4c <CS_read+0x384>)
 8000bce:	f001 fd57 	bl	8002680 <HAL_ADC_PollForConversion>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <CS_read+0x314>
 8000bd8:	f000 fdc0 	bl	800175c <Error_Handler>
				IN4_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000bdc:	481a      	ldr	r0, [pc, #104]	; (8000c48 <CS_read+0x380>)
 8000bde:	f001 ff92 	bl	8002b06 <HAL_ADC_GetValue>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b299      	uxth	r1, r3
 8000be6:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <CS_read+0x388>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <CS_read+0x384>)
 8000bf0:	f001 ff89 	bl	8002b06 <HAL_ADC_GetValue>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b299      	uxth	r1, r3
 8000bf8:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <CS_read+0x38c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <CS_read+0x380>)
 8000c02:	f001 ff45 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <CS_read+0x348>
 8000c0c:	f000 fda6 	bl	800175c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <CS_read+0x384>)
 8000c12:	f001 ff3d 	bl	8002a90 <HAL_ADC_Stop_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <CS_read+0x358>
 8000c1c:	f000 fd9e 	bl	800175c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	ddb5      	ble.n	8000b98 <CS_read+0x2d0>
			}
			break;
 8000c2c:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	f77f ae4c 	ble.w	80008d4 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000007c 	.word	0x2000007c
 8000c4c:	200000e8 	.word	0x200000e8
 8000c50:	2000051c 	.word	0x2000051c
 8000c54:	2000061c 	.word	0x2000061c

08000c58 <print_out>:

void print_out(uint32_t data, const char *text, uint8_t out_mode){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)+sizeof(data_buffer)+4+2+4] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	821a      	strh	r2, [r3, #16]
	if(data == -1){
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d107      	bne.n	8000c9e <print_out+0x46>
		sprintf(msg, "\r\n%s \r\n", buffer);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c94:	4916      	ldr	r1, [pc, #88]	; (8000cf0 <print_out+0x98>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f006 fa82 	bl	80071a0 <siprintf>
 8000c9c:	e006      	b.n	8000cac <print_out+0x54>
	}else{
		sprintf(msg, "\r\n%s %lu\r\n", buffer, data_buffer);
 8000c9e:	f107 0010 	add.w	r0, r7, #16
 8000ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca6:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <print_out+0x9c>)
 8000ca8:	f006 fa7a 	bl	80071a0 <siprintf>
	}

	switch(out_mode){
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d00f      	beq.n	8000cd2 <print_out+0x7a>
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	dc17      	bgt.n	8000ce6 <print_out+0x8e>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d001      	beq.n	8000cbe <print_out+0x66>
 8000cba:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
			  text = "";
			  break;
		  case 0b10: //output only through CAN
			  //TODO implement CAN
			  break;
 8000cbc:	e013      	b.n	8000ce6 <print_out+0x8e>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8000cbe:	f107 0110 	add.w	r1, r7, #16
 8000cc2:	23ff      	movs	r3, #255	; 0xff
 8000cc4:	2216      	movs	r2, #22
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <print_out+0xa0>)
 8000cc8:	f005 fc50 	bl	800656c <HAL_UART_Transmit>
			  text = "";
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <print_out+0xa4>)
 8000cce:	60bb      	str	r3, [r7, #8]
			  break;
 8000cd0:	e009      	b.n	8000ce6 <print_out+0x8e>
		  case 0b11://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8000cd2:	f107 0110 	add.w	r1, r7, #16
 8000cd6:	23ff      	movs	r3, #255	; 0xff
 8000cd8:	2216      	movs	r2, #22
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <print_out+0xa0>)
 8000cdc:	f005 fc46 	bl	800656c <HAL_UART_Transmit>
			  text = "";
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <print_out+0xa4>)
 8000ce2:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 8000ce4:	bf00      	nop
		  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08007bc0 	.word	0x08007bc0
 8000cf4:	08007bc8 	.word	0x08007bc8
 8000cf8:	200003cc 	.word	0x200003cc
 8000cfc:	08007bd4 	.word	0x08007bd4

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f001 f820 	bl	8001d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f85d 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fc91 	bl	8001634 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d12:	f000 f8a5 	bl	8000e60 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000d16:	f000 f985 	bl	8001024 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000d1a:	f000 f9c9 	bl	80010b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d1e:	f000 fa75 	bl	800120c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d22:	f000 fac1 	bl	80012a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d26:	f000 fb33 	bl	8001390 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000d2a:	f000 fba5 	bl	8001478 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000d2e:	f000 fbd9 	bl	80014e4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000d32:	f000 fc0d 	bl	8001550 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000d36:	f000 fc31 	bl	800159c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000d3a:	f000 f90b 	bl	8000f54 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000d3e:	4819      	ldr	r0, [pc, #100]	; (8000da4 <main+0xa4>)
 8000d40:	f004 fa1a 	bl	8005178 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim1); //PWM
 8000d44:	4817      	ldr	r0, [pc, #92]	; (8000da4 <main+0xa4>)
 8000d46:	f004 f9ad 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //PWM
 8000d4a:	4817      	ldr	r0, [pc, #92]	; (8000da8 <main+0xa8>)
 8000d4c:	f004 f9aa 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //PWM
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <main+0xac>)
 8000d52:	f004 f9a7 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); //PWM
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <main+0xb0>)
 8000d58:	f004 f9a4 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <main+0xb4>)
 8000d5e:	f004 f9a1 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <main+0xb8>)
 8000d64:	f004 f99e 	bl	80050a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000d68:	4814      	ldr	r0, [pc, #80]	; (8000dbc <main+0xbc>)
 8000d6a:	f004 f99b 	bl	80050a4 <HAL_TIM_Base_Start_IT>

  Config_Setup();
 8000d6e:	f7ff fc25 	bl	80005bc <Config_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CS_read();
 8000d72:	f7ff fda9 	bl	80008c8 <CS_read>
	  CS_process();
 8000d76:	f7ff fce3 	bl	8000740 <CS_process>
	  //check_warnings();
	   __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <main+0xa8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_Delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f001 f851 	bl	8001e2c <HAL_Delay>
	  uint16_t timer_val = __HAL_TIM_GET_COUNTER(&htim2);
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <main+0xa8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	80fb      	strh	r3, [r7, #6]
	  print_out(timer_val,"TIME",data_output_switch);
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <main+0xc0>)
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <main+0xc4>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff5c 	bl	8000c58 <print_out>
  {
 8000da0:	e7e7      	b.n	8000d72 <main+0x72>
 8000da2:	bf00      	nop
 8000da4:	200001b8 	.word	0x200001b8
 8000da8:	20000204 	.word	0x20000204
 8000dac:	20000250 	.word	0x20000250
 8000db0:	2000029c 	.word	0x2000029c
 8000db4:	200002e8 	.word	0x200002e8
 8000db8:	20000334 	.word	0x20000334
 8000dbc:	20000380 	.word	0x20000380
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	08007bd8 	.word	0x08007bd8

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0318 	add.w	r3, r7, #24
 8000dd2:	2238      	movs	r2, #56	; 0x38
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f006 fa02 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dee:	f003 f929 	bl	8004044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2340      	movs	r3, #64	; 0x40
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000e0c:	234b      	movs	r3, #75	; 0x4b
 8000e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 f9c3 	bl	80041ac <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e2c:	f000 fc96 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2303      	movs	r3, #3
 8000e36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2104      	movs	r1, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fcc7 	bl	80047dc <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e54:	f000 fc82 	bl	800175c <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2220      	movs	r2, #32
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 f9b1 	bl	80071e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000e88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee8:	4817      	ldr	r0, [pc, #92]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000eea:	f001 fa3f 	bl	800236c <HAL_ADC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ef4:	f000 fc32 	bl	800175c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000f04:	f002 fba0 	bl	8003648 <HAL_ADCEx_MultiModeConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f0e:	f000 fc25 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_ADC1_Init+0xec>)
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f16:	2306      	movs	r3, #6
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_ADC1_Init+0xf0>)
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f22:	2304      	movs	r3, #4
 8000f24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_ADC1_Init+0xe8>)
 8000f30:	f001 fdf6 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f3a:	f000 fc0f 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000007c 	.word	0x2000007c
 8000f4c:	04300002 	.word	0x04300002
 8000f50:	407f0000 	.word	0x407f0000

08000f54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 f93d 	bl	80071e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f68:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <MX_ADC2_Init+0xc4>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000fd0:	f001 f9cc 	bl	800236c <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fda:	f000 fbbf 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ADC2_Init+0xc8>)
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_ADC2_Init+0xcc>)
 8000fec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC2_Init+0xc0>)
 8000ffc:	f001 fd90 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001006:	f000 fba9 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000e8 	.word	0x200000e8
 8001018:	50000100 	.word	0x50000100
 800101c:	0c900008 	.word	0x0c900008
 8001020:	407f0000 	.word	0x407f0000

08001024 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800102a:	4a20      	ldr	r2, [pc, #128]	; (80010ac <MX_FDCAN1_Init+0x88>)
 800102c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001042:	2200      	movs	r2, #0
 8001044:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001048:	2200      	movs	r2, #0
 800104a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800104e:	2200      	movs	r2, #0
 8001050:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001054:	2210      	movs	r2, #16
 8001056:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800105a:	2201      	movs	r2, #1
 800105c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001060:	2202      	movs	r2, #2
 8001062:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001066:	2202      	movs	r2, #2
 8001068:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800106c:	2201      	movs	r2, #1
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001072:	2201      	movs	r2, #1
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001078:	2201      	movs	r2, #1
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800107e:	2201      	movs	r2, #1
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001084:	2200      	movs	r2, #0
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 800108a:	2200      	movs	r2, #0
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_FDCAN1_Init+0x84>)
 8001096:	f002 fc8b 	bl	80039b0 <HAL_FDCAN_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010a0:	f000 fb5c 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000154 	.word	0x20000154
 80010ac:	40006400 	.word	0x40006400

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09c      	sub	sp, #112	; 0x70
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 f878 	bl	80071e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <MX_TIM1_Init+0x158>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <MX_TIM1_Init+0x154>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_TIM1_Init+0x154>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <MX_TIM1_Init+0x154>)
 8001104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_TIM1_Init+0x154>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001110:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <MX_TIM1_Init+0x154>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <MX_TIM1_Init+0x154>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111c:	4839      	ldr	r0, [pc, #228]	; (8001204 <MX_TIM1_Init+0x154>)
 800111e:	f003 ff69 	bl	8004ff4 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 fb18 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	4619      	mov	r1, r3
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <MX_TIM1_Init+0x154>)
 800113a:	f004 fb11 	bl	8005760 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001144:	f000 fb0a 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001148:	482e      	ldr	r0, [pc, #184]	; (8001204 <MX_TIM1_Init+0x154>)
 800114a:	f004 f815 	bl	8005178 <HAL_TIM_PWM_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001154:	f000 fb02 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001168:	4619      	mov	r1, r3
 800116a:	4826      	ldr	r0, [pc, #152]	; (8001204 <MX_TIM1_Init+0x154>)
 800116c:	f005 f846 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001176:	f000 faf1 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001182:	2300      	movs	r3, #0
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4819      	ldr	r0, [pc, #100]	; (8001204 <MX_TIM1_Init+0x154>)
 80011a0:	f004 f9ca 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011aa:	f000 fad7 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM1_Init+0x154>)
 80011ec:	f005 f888 	bl	8006300 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80011f6:	f000 fab1 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3770      	adds	r7, #112	; 0x70
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001b8 	.word	0x200001b8
 8001208:	40012c00 	.word	0x40012c00

0800120c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM2_Init+0x98>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001234:	2295      	movs	r2, #149	; 0x95
 8001236:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967294E9;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001240:	f06f 0201 	mvn.w	r2, #1
 8001244:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM2_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001254:	f003 fece 	bl	8004ff4 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800125e:	f000 fa7d 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001270:	f004 fa76 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800127a:	f000 fa6f 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_TIM2_Init+0x98>)
 800128c:	f004 ffb6 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001296:	f000 fa61 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000204 	.word	0x20000204

080012a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012dc:	4a2b      	ldr	r2, [pc, #172]	; (800138c <MX_TIM3_Init+0xe4>)
 80012de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_TIM3_Init+0xe0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001300:	4821      	ldr	r0, [pc, #132]	; (8001388 <MX_TIM3_Init+0xe0>)
 8001302:	f003 fe77 	bl	8004ff4 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800130c:	f000 fa26 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	4619      	mov	r1, r3
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <MX_TIM3_Init+0xe0>)
 800131e:	f004 fa1f 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001328:	f000 fa18 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_TIM3_Init+0xe0>)
 800132e:	f003 ff23 	bl	8005178 <HAL_TIM_PWM_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 fa10 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <MX_TIM3_Init+0xe0>)
 800134c:	f004 ff56 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 fa01 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM3_Init+0xe0>)
 8001372:	f004 f8e1 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800137c:	f000 f9ee 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3738      	adds	r7, #56	; 0x38
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000250 	.word	0x20000250
 800138c:	40000400 	.word	0x40000400

08001390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e8:	4821      	ldr	r0, [pc, #132]	; (8001470 <MX_TIM4_Init+0xe0>)
 80013ea:	f003 fe03 	bl	8004ff4 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013f4:	f000 f9b2 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4619      	mov	r1, r3
 8001404:	481a      	ldr	r0, [pc, #104]	; (8001470 <MX_TIM4_Init+0xe0>)
 8001406:	f004 f9ab 	bl	8005760 <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001410:	f000 f9a4 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001414:	4816      	ldr	r0, [pc, #88]	; (8001470 <MX_TIM4_Init+0xe0>)
 8001416:	f003 feaf 	bl	8005178 <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 f99c 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	480f      	ldr	r0, [pc, #60]	; (8001470 <MX_TIM4_Init+0xe0>)
 8001434:	f004 fee2 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800143e:	f000 f98d 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM4_Init+0xe0>)
 800145a:	f004 f86d 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001464:	f000 f97a 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000029c 	.word	0x2000029c
 8001474:	40000800 	.word	0x40000800

08001478 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_TIM6_Init+0x64>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_TIM6_Init+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_TIM6_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_TIM6_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_TIM6_Init+0x64>)
 800149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_TIM6_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM6_Init+0x64>)
 80014aa:	f003 fda3 	bl	8004ff4 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 f952 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM6_Init+0x64>)
 80014c6:	f004 fe99 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 f944 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200002e8 	.word	0x200002e8
 80014e0:	40001000 	.word	0x40001000

080014e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_TIM7_Init+0x64>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_TIM7_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_TIM7_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_TIM7_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_TIM7_Init+0x64>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM7_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <MX_TIM7_Init+0x64>)
 8001516:	f003 fd6d 	bl	8004ff4 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001520:	f000 f91c 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_TIM7_Init+0x64>)
 8001532:	f004 fe63 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800153c:	f000 f90e 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000334 	.word	0x20000334
 800154c:	40001400 	.word	0x40001400

08001550 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_TIM16_Init+0x44>)
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <MX_TIM16_Init+0x48>)
 8001558:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_TIM16_Init+0x44>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_TIM16_Init+0x44>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_TIM16_Init+0x44>)
 8001568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_TIM16_Init+0x44>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_TIM16_Init+0x44>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_TIM16_Init+0x44>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_TIM16_Init+0x44>)
 8001582:	f003 fd37 	bl	8004ff4 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800158c:	f000 f8e6 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000380 	.word	0x20000380
 8001598:	40014400 	.word	0x40014400

0800159c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <MX_USART2_UART_Init+0x94>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015e6:	f004 ff71 	bl	80064cc <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015f0:	f000 f8b4 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_USART2_UART_Init+0x90>)
 80015f8:	f005 fd08 	bl	800700c <HAL_UARTEx_SetTxFifoThreshold>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001602:	f000 f8ab 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x90>)
 800160a:	f005 fd3d 	bl	8007088 <HAL_UARTEx_SetRxFifoThreshold>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001614:	f000 f8a2 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART2_UART_Init+0x90>)
 800161a:	f005 fcbe 	bl	8006f9a <HAL_UARTEx_DisableFifoMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f89a 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200003cc 	.word	0x200003cc
 8001630:	40004400 	.word	0x40004400

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <MX_GPIO_Init+0x11c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_GPIO_Init+0x11c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a34      	ldr	r2, [pc, #208]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <MX_GPIO_Init+0x11c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	482e      	ldr	r0, [pc, #184]	; (8001754 <MX_GPIO_Init+0x120>)
 800169a:	f002 fcbb 	bl	8004014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f248 6110 	movw	r1, #34320	; 0x8610
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f002 fcb4 	bl	8004014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80016b2:	4829      	ldr	r0, [pc, #164]	; (8001758 <MX_GPIO_Init+0x124>)
 80016b4:	f002 fcae 	bl	8004014 <HAL_GPIO_WritePin>
                          |IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 80016b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4820      	ldr	r0, [pc, #128]	; (8001754 <MX_GPIO_Init+0x120>)
 80016d2:	f002 fb1d 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 80016d6:	f248 6310 	movw	r3, #34320	; 0x8610
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f002 fb0d 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL1_READ_Pin */
  GPIO_InitStruct.Pin = SEL1_READ_Pin;
 80016f6:	2320      	movs	r3, #32
 80016f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016fe:	2302      	movs	r3, #2
 8001700:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL1_READ_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 fb00 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL0_READ_Pin */
  GPIO_InitStruct.Pin = SEL0_READ_Pin;
 8001710:	2301      	movs	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL0_READ_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_GPIO_Init+0x124>)
 8001724:	f002 faf4 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN3_2_Pin SEL1_Pin SEL0_Pin
                           IN2_2_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 8001728:	f44f 73bc 	mov.w	r3, #376	; 0x178
 800172c:	60fb      	str	r3, [r7, #12]
                          |IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_GPIO_Init+0x124>)
 8001742:	f002 fae5 	bl	8003d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	48001800 	.word	0x48001800
 8001758:	48000400 	.word	0x48000400

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x44>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x44>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6613      	str	r3, [r2, #96]	; 0x60
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x44>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x44>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x44>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x44>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800179e:	f002 fcf5 	bl	800418c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09c      	sub	sp, #112	; 0x70
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	2244      	movs	r2, #68	; 0x44
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fd05 	bl	80071e0 <memset>
  if(hadc->Instance==ADC1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017de:	d13e      	bne.n	800185e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fa0f 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017fc:	f7ff ffae 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a39      	ldr	r2, [pc, #228]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 8001808:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10b      	bne.n	800182a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a36      	ldr	r2, [pc, #216]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 8001818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001842:	2303      	movs	r3, #3
 8001844:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f002 fa5a 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800185c:	e042      	b.n	80018e4 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <HAL_ADC_MspInit+0x144>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d13d      	bne.n	80018e4 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800186e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001872:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f9cb 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001884:	f7ff ff6a 	bl	800175c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 8001890:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_ADC_MspInit+0x13c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10b      	bne.n	80018b2 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 80018a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_ADC_MspInit+0x140>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f002 fa16 	bl	8003d10 <HAL_GPIO_Init>
}
 80018e4:	bf00      	nop
 80018e6:	3770      	adds	r7, #112	; 0x70
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200006b0 	.word	0x200006b0
 80018f0:	40021000 	.word	0x40021000
 80018f4:	50000100 	.word	0x50000100

080018f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09a      	sub	sp, #104	; 0x68
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fc61 	bl	80071e0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_FDCAN_MspInit+0xac>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d139      	bne.n	800199c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800192e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4618      	mov	r0, r3
 800193a:	f003 f96b 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001944:	f7ff ff0a 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_FDCAN_MspInit+0xb0>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001978:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800198a:	2309      	movs	r3, #9
 800198c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f002 f9ba 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3768      	adds	r7, #104	; 0x68
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40006400 	.word	0x40006400
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_TIM_Base_MspInit+0x14c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10c      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019be:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019d6:	e08a      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d114      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201c      	movs	r0, #28
 8001a00:	f001 ffa1 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a04:	201c      	movs	r0, #28
 8001a06:	f001 ffb8 	bl	800397a <HAL_NVIC_EnableIRQ>
}
 8001a0a:	e070      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <HAL_TIM_Base_MspInit+0x154>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d114      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a38      	ldr	r2, [pc, #224]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	201d      	movs	r0, #29
 8001a34:	f001 ff87 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a38:	201d      	movs	r0, #29
 8001a3a:	f001 ff9e 	bl	800397a <HAL_NVIC_EnableIRQ>
}
 8001a3e:	e056      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_TIM_Base_MspInit+0x158>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d114      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201e      	movs	r0, #30
 8001a68:	f001 ff6d 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a6c:	201e      	movs	r0, #30
 8001a6e:	f001 ff84 	bl	800397a <HAL_NVIC_EnableIRQ>
}
 8001a72:	e03c      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_TIM_Base_MspInit+0x15c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10c      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
}
 8001a96:	e02a      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_TIM_Base_MspInit+0x160>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d114      	bne.n	8001acc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001aa8:	f043 0320 	orr.w	r3, r3, #32
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2037      	movs	r0, #55	; 0x37
 8001ac0:	f001 ff41 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ac4:	2037      	movs	r0, #55	; 0x37
 8001ac6:	f001 ff58 	bl	800397a <HAL_NVIC_EnableIRQ>
}
 8001aca:	e010      	b.n	8001aee <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_TIM_Base_MspInit+0x164>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10b      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_TIM_Base_MspInit+0x150>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40000800 	.word	0x40000800
 8001b08:	40001000 	.word	0x40001000
 8001b0c:	40001400 	.word	0x40001400
 8001b10:	40014400 	.word	0x40014400

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b09a      	sub	sp, #104	; 0x68
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	2244      	movs	r2, #68	; 0x44
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 fb53 	bl	80071e0 <memset>
  if(huart->Instance==USART2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_UART_MspInit+0xa8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d136      	bne.n	8001bb2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 f85f 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b5c:	f7ff fdfe 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_UART_MspInit+0xac>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b90:	230c      	movs	r3, #12
 8001b92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f002 f8af 	bl	8003d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3768      	adds	r7, #104	; 0x68
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f8ee 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f003 fb0c 	bl	800523a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000204 	.word	0x20000204

08001c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM3_IRQHandler+0x10>)
 8001c32:	f003 fb02 	bl	800523a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000250 	.word	0x20000250

08001c40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM4_IRQHandler+0x10>)
 8001c46:	f003 faf8 	bl	800523a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000029c 	.word	0x2000029c

08001c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM7_IRQHandler+0x10>)
 8001c5a:	f003 faee 	bl	800523a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000334 	.word	0x20000334

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f005 faaa 	bl	80071f0 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20008000 	.word	0x20008000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	200006b4 	.word	0x200006b4
 8001cd0:	20000808 	.word	0x20000808

08001cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0b      	ldr	r4, [pc, #44]	; (8001d44 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d22:	f7ff ffd7 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f005 fa69 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2a:	f7fe ffe9 	bl	8000d00 <main>

08001d2e <LoopForever>:

LoopForever:
    b LoopForever
 8001d2e:	e7fe      	b.n	8001d2e <LoopForever>
  ldr   r0, =_estack
 8001d30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d3c:	08007c64 	.word	0x08007c64
  ldr r2, =_sbss
 8001d40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d44:	20000804 	.word	0x20000804

08001d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC1_2_IRQHandler>

08001d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f001 fdeb 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 f80e 	bl	8001d7c <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e001      	b.n	8001d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d6c:	f7ff fcfc 	bl	8001768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d70:	79fb      	ldrb	r3, [r7, #7]

}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_InitTick+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_InitTick+0x6c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_InitTick+0x68>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fdf6 	bl	8003996 <HAL_SYSTICK_Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	d809      	bhi.n	8001dca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	2200      	movs	r2, #0
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbe:	f001 fdc2 	bl	8003946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_InitTick+0x70>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e004      	b.n	8001dda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000000c 	.word	0x2000000c
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x20>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_IncTick+0x1c>)
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	200006b8 	.word	0x200006b8
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200006b8 	.word	0x200006b8

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d004      	beq.n	8001e50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_Delay+0x40>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e50:	bf00      	nop
 8001e52:	f7ff ffdf 	bl	8001e14 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d8f7      	bhi.n	8001e52 <HAL_Delay+0x26>
  {
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000000c 	.word	0x2000000c

08001e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LL_ADC_SetOffset+0x44>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	03fff000 	.word	0x03fff000

08001f20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3360      	adds	r3, #96	; 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3330      	adds	r3, #48	; 0x30
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	211f      	movs	r1, #31
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 011f 	and.w	r1, r3, #31
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3314      	adds	r3, #20
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0e5b      	lsrs	r3, r3, #25
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0d1b      	lsrs	r3, r3, #20
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2107      	movs	r1, #7
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	0d1b      	lsrs	r3, r3, #20
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10a      	bne.n	8002112 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002110:	e00a      	b.n	8002128 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	407f0000 	.word	0x407f0000

08002138 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6093      	str	r3, [r2, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	f043 0202 	orr.w	r2, r3, #2
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <LL_ADC_IsEnabled+0x18>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_ADC_IsEnabled+0x1a>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d101      	bne.n	800229a <LL_ADC_IsDisableOngoing+0x18>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_ADC_IsDisableOngoing+0x1a>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022bc:	f043 0204 	orr.w	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b04      	cmp	r3, #4
 800230a:	d101      	bne.n	8002310 <LL_ADC_REG_IsConversionOngoing+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800232e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d101      	bne.n	800235e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e177      	b.n	8002676 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fa0b 	bl	80017b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fef1 	bl	8002194 <LL_ADC_IsDeepPowerDownEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fed7 	bl	8002170 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff0c 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fef0 	bl	80021bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023dc:	4b9c      	ldr	r3, [pc, #624]	; (8002650 <HAL_ADC_Init+0x2e4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	4a9c      	ldr	r2, [pc, #624]	; (8002654 <HAL_ADC_Init+0x2e8>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff feee 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff62 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 8002434:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8110 	bne.w	8002664 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 810c 	bne.w	8002664 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fefb 	bl	800225c <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002470:	f7ff fef4 	bl	800225c <LL_ADC_IsEnabled>
 8002474:	4604      	mov	r4, r0
 8002476:	4878      	ldr	r0, [pc, #480]	; (8002658 <HAL_ADC_Init+0x2ec>)
 8002478:	f7ff fef0 	bl	800225c <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	4323      	orrs	r3, r4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	4874      	ldr	r0, [pc, #464]	; (800265c <HAL_ADC_Init+0x2f0>)
 800248c:	f7ff fcf0 	bl	8001e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7f5b      	ldrb	r3, [r3, #29]
 8002494:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800249a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	045b      	lsls	r3, r3, #17
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_ADC_Init+0x2f4>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff feee 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 800251c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff0f 	bl	8002346 <LL_ADC_INJ_IsConversionOngoing>
 8002528:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d16d      	bne.n	800260c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d16a      	bne.n	800260c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800253a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002542:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002552:	f023 0302 	bic.w	r3, r3, #2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d017      	beq.n	8002598 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002576:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002580:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6911      	ldr	r1, [r2, #16]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002596:	e013      	b.n	80025c0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d118      	bne.n	80025fc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025ec:	430a      	orrs	r2, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
 80025fa:	e007      	b.n	800260c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10c      	bne.n	800262e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f023 010f 	bic.w	r1, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
 800262c:	e007      	b.n	800263e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020f 	bic.w	r2, r2, #15
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	; 0x5c
 800264e:	e011      	b.n	8002674 <HAL_ADC_Init+0x308>
 8002650:	20000004 	.word	0x20000004
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50000100 	.word	0x50000100
 800265c:	50000300 	.word	0x50000300
 8002660:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f043 0210 	orr.w	r2, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002674:	7ffb      	ldrb	r3, [r7, #31]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop

08002680 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800268a:	4867      	ldr	r0, [pc, #412]	; (8002828 <HAL_ADC_PollForConversion+0x1a8>)
 800268c:	f7ff fd54 	bl	8002138 <LL_ADC_GetMultimode>
 8002690:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d102      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800269a:	2308      	movs	r3, #8
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e02a      	b.n	80026f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d111      	bne.n	80026d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0a6      	b.n	800281e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026d0:	2304      	movs	r3, #4
 80026d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026d4:	e00f      	b.n	80026f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026d6:	4854      	ldr	r0, [pc, #336]	; (8002828 <HAL_ADC_PollForConversion+0x1a8>)
 80026d8:	f7ff fd3c 	bl	8002154 <LL_ADC_GetMultiDMATransfer>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e095      	b.n	800281e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026f2:	2304      	movs	r3, #4
 80026f4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026f6:	f7ff fb8d 	bl	8001e14 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026fc:	e021      	b.n	8002742 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d01d      	beq.n	8002742 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002706:	f7ff fb85 	bl	8001e14 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <HAL_ADC_PollForConversion+0x9c>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d112      	bne.n	8002742 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e06d      	b.n	800281e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0d6      	beq.n	80026fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fc57 	bl	8002014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01c      	beq.n	80027a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7f5b      	ldrb	r3, [r3, #29]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d111      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_ADC_PollForConversion+0x1ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x136>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e001      	b.n	80027ba <HAL_ADC_PollForConversion+0x13a>
 80027b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4293      	cmp	r3, r2
 80027c0:	d008      	beq.n	80027d4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d002      	beq.n	80027d4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d104      	bne.n	80027de <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e00d      	b.n	80027fa <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_ADC_PollForConversion+0x1ac>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d002      	beq.n	80027ee <HAL_ADC_PollForConversion+0x16e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	e001      	b.n	80027f2 <HAL_ADC_PollForConversion+0x172>
 80027ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d104      	bne.n	800280a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2208      	movs	r2, #8
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e008      	b.n	800281c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	220c      	movs	r2, #12
 800281a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	50000300 	.word	0x50000300
 800282c:	50000100 	.word	0x50000100

08002830 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002838:	4893      	ldr	r0, [pc, #588]	; (8002a88 <HAL_ADC_Start_IT+0x258>)
 800283a:	f7ff fc7d 	bl	8002138 <LL_ADC_GetMultimode>
 800283e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fd57 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8113 	bne.w	8002a78 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_Start_IT+0x30>
 800285c:	2302      	movs	r3, #2
 800285e:	e10e      	b.n	8002a7e <HAL_ADC_Start_IT+0x24e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fe05 	bl	8003478 <ADC_Enable>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 80fa 	bne.w	8002a6e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7e      	ldr	r2, [pc, #504]	; (8002a8c <HAL_ADC_Start_IT+0x25c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d002      	beq.n	800289e <HAL_ADC_Start_IT+0x6e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	e001      	b.n	80028a2 <HAL_ADC_Start_IT+0x72>
 800289e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d002      	beq.n	80028b0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f023 0206 	bic.w	r2, r3, #6
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	221c      	movs	r2, #28
 80028e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 021c 	bic.w	r2, r2, #28
 80028fa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d108      	bne.n	8002916 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	605a      	str	r2, [r3, #4]
          break;
 8002914:	e008      	b.n	8002928 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0204 	orr.w	r2, r2, #4
 8002924:	605a      	str	r2, [r3, #4]
          break;
 8002926:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0210 	orr.w	r2, r2, #16
 800293e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_ADC_Start_IT+0x25c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d002      	beq.n	8002950 <HAL_ADC_Start_IT+0x120>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e001      	b.n	8002954 <HAL_ADC_Start_IT+0x124>
 8002950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4293      	cmp	r3, r2
 800295a:	d008      	beq.n	800296e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d002      	beq.n	800296e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b09      	cmp	r3, #9
 800296c:	d13a      	bne.n	80029e4 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02d      	beq.n	80029d8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002984:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d110      	bne.n	80029b6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b2:	605a      	str	r2, [r3, #4]
              break;
 80029b4:	e010      	b.n	80029d8 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	605a      	str	r2, [r3, #4]
              break;
 80029d6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fc63 	bl	80022a8 <LL_ADC_REG_StartConversion>
 80029e2:	e04b      	b.n	8002a7c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_ADC_Start_IT+0x25c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d002      	beq.n	8002a00 <HAL_ADC_Start_IT+0x1d0>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e001      	b.n	8002a04 <HAL_ADC_Start_IT+0x1d4>
 8002a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a04:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d034      	beq.n	8002a7c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d110      	bne.n	8002a4c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0220 	bic.w	r2, r2, #32
 8002a38:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a48:	605a      	str	r2, [r3, #4]
              break;
 8002a4a:	e017      	b.n	8002a7c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	605a      	str	r2, [r3, #4]
              break;
 8002a6c:	e006      	b.n	8002a7c <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a76:	e001      	b.n	8002a7c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	50000300 	.word	0x50000300
 8002a8c:	50000100 	.word	0x50000100

08002a90 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Stop_IT+0x16>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e02b      	b.n	8002afe <HAL_ADC_Stop_IT+0x6e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002aae:	2103      	movs	r1, #3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fc25 	bl	8003300 <ADC_ConversionStop>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d119      	bne.n	8002af4 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 021c 	bic.w	r2, r2, #28
 8002ace:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fd33 	bl	800353c <ADC_Disable>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0b6      	sub	sp, #216	; 0xd8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e3c8      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x7b4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fbd2 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 83ad 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fa66 	bl	800203a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fbc0 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 8002b78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fbe0 	bl	8002346 <LL_ADC_INJ_IsConversionOngoing>
 8002b86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 81d9 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 81d4 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff fa6d 	bl	8002092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fa14 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>
 8002bc6:	e00e      	b.n	8002be6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fa5c 	bl	8002092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fa04 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d022      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6919      	ldr	r1, [r3, #16]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c18:	f7ff f95e 	bl	8001ed8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6919      	ldr	r1, [r3, #16]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f7ff f9aa 	bl	8001f82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x124>
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x126>
 8002c44:	2300      	movs	r3, #0
 8002c46:	461a      	mov	r2, r3
 8002c48:	f7ff f9b6 	bl	8001fb8 <LL_ADC_SetOffsetSaturation>
 8002c4c:	e17b      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f963 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x15a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f958 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	e01e      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x198>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f94d 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e004      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1b0>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	e018      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1e2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f91c 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f900 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x220>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f8f5 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	e01e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x25e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f8ea 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x276>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	e018      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x2a8>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d106      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f8b9 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f89d 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x2e6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f892 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	e01e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f887 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x33c>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	e016      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x36a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e004      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2102      	movs	r1, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f858 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f83c 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x3a8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f831 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	e017      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x3d8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2103      	movs	r1, #3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f826 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x3f0>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	e011      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x414>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d106      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2103      	movs	r1, #3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f803 	bl	8001f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f986 	bl	800225c <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 8140 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f7ff f8bf 	bl	80020e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4a8f      	ldr	r2, [pc, #572]	; (80031ac <HAL_ADC_ConfigChannel+0x68c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	f040 8131 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x47e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	bf94      	ite	ls
 8002f96:	2301      	movls	r3, #1
 8002f98:	2300      	movhi	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e019      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x4b2>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	bf94      	ite	ls
 8002fcc:	2301      	movls	r3, #1
 8002fce:	2300      	movhi	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d079      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x4d2>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	3301      	adds	r3, #1
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff0:	e015      	b.n	800301e <HAL_ADC_ConfigChannel+0x4fe>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e003      	b.n	8003016 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	069b      	lsls	r3, r3, #26
 800301a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_ADC_ConfigChannel+0x51e>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	3301      	adds	r3, #1
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	e017      	b.n	800306e <HAL_ADC_ConfigChannel+0x54e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	ea42 0103 	orr.w	r1, r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x574>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	e018      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x5a6>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 021f 	and.w	r2, r3, #31
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c6:	430b      	orrs	r3, r1
 80030c8:	e081      	b.n	80031ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x5c6>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	3301      	adds	r3, #1
 80030de:	069b      	lsls	r3, r3, #26
 80030e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e4:	e015      	b.n	8003112 <HAL_ADC_ConfigChannel+0x5f2>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	069b      	lsls	r3, r3, #26
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x612>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	3301      	adds	r3, #1
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	e017      	b.n	8003162 <HAL_ADC_ConfigChannel+0x642>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
  return result;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	ea42 0103 	orr.w	r1, r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_ADC_ConfigChannel+0x66e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 021f 	and.w	r2, r3, #31
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	051b      	lsls	r3, r3, #20
 8003188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318c:	e01e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x6ac>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	613b      	str	r3, [r7, #16]
  return result;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e006      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x698>
 80031aa:	bf00      	nop
 80031ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 021f 	and.w	r2, r3, #31
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	3b1e      	subs	r3, #30
 80031c6:	051b      	lsls	r3, r3, #20
 80031c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031cc:	430b      	orrs	r3, r1
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7fe ff5d 	bl	8002092 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b3f      	ldr	r3, [pc, #252]	; (80032dc <HAL_ADC_ConfigChannel+0x7bc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d071      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e4:	483e      	ldr	r0, [pc, #248]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80031e6:	f7fe fe69 	bl	8001ebc <LL_ADC_GetCommonPathInternalCh>
 80031ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x6e2>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d127      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d121      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003216:	d157      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003220:	4619      	mov	r1, r3
 8003222:	482f      	ldr	r0, [pc, #188]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003224:	f7fe fe37 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_ADC_ConfigChannel+0x7cc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003242:	e002      	b.n	800324a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003250:	e03a      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d113      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x764>
 800325c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02a      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327a:	4619      	mov	r1, r3
 800327c:	4818      	ldr	r0, [pc, #96]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800327e:	f7fe fe0a 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003282:	e021      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_ADC_ConfigChannel+0x7dc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11c      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d011      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ac:	4619      	mov	r1, r3
 80032ae:	480c      	ldr	r0, [pc, #48]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b0:	f7fe fdf1 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
 80032b4:	e008      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	37d8      	adds	r7, #216	; 0xd8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	80080000 	.word	0x80080000
 80032e0:	50000300 	.word	0x50000300
 80032e4:	c3210000 	.word	0xc3210000
 80032e8:	90c00010 	.word	0x90c00010
 80032ec:	20000004 	.word	0x20000004
 80032f0:	053e2d63 	.word	0x053e2d63
 80032f4:	c7520000 	.word	0xc7520000
 80032f8:	50000100 	.word	0x50000100
 80032fc:	cb840000 	.word	0xcb840000

08003300 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ffee 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 800331c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f80f 	bl	8002346 <LL_ADC_INJ_IsConversionOngoing>
 8003328:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8098 	beq.w	8003468 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02a      	beq.n	800339c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7f5b      	ldrb	r3, [r3, #29]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d126      	bne.n	800339c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7f1b      	ldrb	r3, [r3, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d122      	bne.n	800339c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800335a:	e014      	b.n	8003386 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <ADC_ConversionStop+0x174>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d90d      	bls.n	8003380 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e074      	b.n	800346a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3301      	adds	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d1e3      	bne.n	800335c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2240      	movs	r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d014      	beq.n	80033cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe ffa6 	bl	80022f8 <LL_ADC_REG_IsConversionOngoing>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe ff63 	bl	8002282 <LL_ADC_IsDisableOngoing>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ff82 	bl	80022d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d014      	beq.n	80033fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe ffb5 	bl	8002346 <LL_ADC_INJ_IsConversionOngoing>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff4b 	bl	8002282 <LL_ADC_IsDisableOngoing>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d104      	bne.n	80033fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe ff91 	bl	800231e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d005      	beq.n	800340e <ADC_ConversionStop+0x10e>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d105      	bne.n	8003414 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003408:	230c      	movs	r3, #12
 800340a:	617b      	str	r3, [r7, #20]
        break;
 800340c:	e005      	b.n	800341a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800340e:	2308      	movs	r3, #8
 8003410:	617b      	str	r3, [r7, #20]
        break;
 8003412:	e002      	b.n	800341a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003414:	2304      	movs	r3, #4
 8003416:	617b      	str	r3, [r7, #20]
        break;
 8003418:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800341a:	f7fe fcfb 	bl	8001e14 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003420:	e01b      	b.n	800345a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003422:	f7fe fcf7 	bl	8001e14 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b05      	cmp	r3, #5
 800342e:	d914      	bls.n	800345a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1dc      	bne.n	8003422 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	a33fffff 	.word	0xa33fffff

08003478 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fee9 	bl	800225c <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d14d      	bne.n	800352c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <ADC_Enable+0xc0>)
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e039      	b.n	800352e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fea4 	bl	800220c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fca6 	bl	8001e14 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ca:	e028      	b.n	800351e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fec3 	bl	800225c <LL_ADC_IsEnabled>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fe93 	bl	800220c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034e6:	f7fe fc95 	bl	8001e14 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d914      	bls.n	800351e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00d      	beq.n	800351e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d1cf      	bne.n	80034cc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	8000003f 	.word	0x8000003f

0800353c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fe9a 	bl	8002282 <LL_ADC_IsDisableOngoing>
 800354e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe81 	bl	800225c <LL_ADC_IsEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d047      	beq.n	80035f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d144      	bne.n	80035f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030d 	and.w	r3, r3, #13
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10c      	bne.n	800358e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fe5b 	bl	8002234 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2203      	movs	r2, #3
 8003584:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003586:	f7fe fc45 	bl	8001e14 <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800358c:	e029      	b.n	80035e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e023      	b.n	80035f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035aa:	f7fe fc33 	bl	8001e14 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d914      	bls.n	80035e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	f043 0210 	orr.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e007      	b.n	80035f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1dc      	bne.n	80035aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <LL_ADC_IsEnabled>:
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <LL_ADC_IsEnabled+0x18>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_IsEnabled+0x1a>
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_REG_IsConversionOngoing>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d101      	bne.n	8003638 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b0a1      	sub	sp, #132	; 0x84
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003662:	2302      	movs	r3, #2
 8003664:	e08b      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800366e:	2300      	movs	r3, #0
 8003670:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003672:	2300      	movs	r3, #0
 8003674:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367e:	d102      	bne.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	e001      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e06a      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ffb8 	bl	8003620 <LL_ADC_REG_IsConversionOngoing>
 80036b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ffb2 	bl	8003620 <LL_ADC_REG_IsConversionOngoing>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14c      	bne.n	800375c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d149      	bne.n	800375c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036c8:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80036ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d028      	beq.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036e6:	035b      	lsls	r3, r3, #13
 80036e8:	430b      	orrs	r3, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036f4:	f7ff ff81 	bl	80035fa <LL_ADC_IsEnabled>
 80036f8:	4604      	mov	r4, r0
 80036fa:	4823      	ldr	r0, [pc, #140]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036fc:	f7ff ff7d 	bl	80035fa <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	4323      	orrs	r3, r4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d133      	bne.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003710:	f023 030f 	bic.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	6811      	ldr	r1, [r2, #0]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	6892      	ldr	r2, [r2, #8]
 800371c:	430a      	orrs	r2, r1
 800371e:	431a      	orrs	r2, r3
 8003720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003722:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003724:	e024      	b.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003730:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003732:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003736:	f7ff ff60 	bl	80035fa <LL_ADC_IsEnabled>
 800373a:	4604      	mov	r4, r0
 800373c:	4812      	ldr	r0, [pc, #72]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800373e:	f7ff ff5c 	bl	80035fa <LL_ADC_IsEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	4323      	orrs	r3, r4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d112      	bne.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800374a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003752:	f023 030f 	bic.w	r3, r3, #15
 8003756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003758:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800375a:	e009      	b.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800376e:	e000      	b.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800377a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800377e:	4618      	mov	r0, r3
 8003780:	3784      	adds	r7, #132	; 0x84
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	50000100 	.word	0x50000100
 800378c:	50000300 	.word	0x50000300

08003790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
         );
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f7ff ff8e 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff29 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003954:	f7ff ff40 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 8003958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff90 	bl	8003884 <NVIC_EncodePriority>
 8003964:	4602      	mov	r2, r0
 8003966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff5f 	bl	8003830 <__NVIC_SetPriority>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff33 	bl	80037f4 <__NVIC_EnableIRQ>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffa4 	bl	80038ec <SysTick_Config>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e147      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd ff8e 	bl	80018f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0210 	bic.w	r2, r2, #16
 80039ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ec:	f7fe fa12 	bl	8001e14 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039f2:	e012      	b.n	8003a1a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039f4:	f7fe fa0e 	bl	8001e14 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b0a      	cmp	r3, #10
 8003a00:	d90b      	bls.n	8003a1a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e11b      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d0e5      	beq.n	80039f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7fe f9ec 	bl	8001e14 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a3e:	e012      	b.n	8003a66 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a40:	f7fe f9e8 	bl	8001e14 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b0a      	cmp	r3, #10
 8003a4c:	d90b      	bls.n	8003a66 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0f5      	b.n	8003c52 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0e5      	beq.n	8003a40 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0202 	orr.w	r2, r2, #2
 8003a82:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a74      	ldr	r2, [pc, #464]	; (8003c5c <HAL_FDCAN_Init+0x2ac>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d103      	bne.n	8003a96 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a8e:	4a74      	ldr	r2, [pc, #464]	; (8003c60 <HAL_FDCAN_Init+0x2b0>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7c1b      	ldrb	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	619a      	str	r2, [r3, #24]
 8003aae:	e007      	b.n	8003ac0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003abe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7c5b      	ldrb	r3, [r3, #17]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad6:	619a      	str	r2, [r3, #24]
 8003ad8:	e007      	b.n	8003aea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ae8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7c9b      	ldrb	r3, [r3, #18]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	e007      	b.n	8003b14 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b12:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b38:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0210 	bic.w	r2, r2, #16
 8003b48:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d108      	bne.n	8003b64 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0204 	orr.w	r2, r2, #4
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e02c      	b.n	8003bbe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d028      	beq.n	8003bbe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d01c      	beq.n	8003bae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b82:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0210 	orr.w	r2, r2, #16
 8003b92:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d110      	bne.n	8003bbe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0220 	orr.w	r2, r2, #32
 8003baa:	619a      	str	r2, [r3, #24]
 8003bac:	e007      	b.n	8003bbe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003be6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003be8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d115      	bne.n	8003c20 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c02:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	3b01      	subs	r3, #1
 8003c16:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c1c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c1e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f814 	bl	8003c64 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40006400 	.word	0x40006400
 8003c60:	40006500 	.word	0x40006500

08003c64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003c6e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	041a      	lsls	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	061a      	lsls	r2, r3, #24
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e005      	b.n	8003cf2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3f3      	bcc.n	8003ce6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	4000a400 	.word	0x4000a400

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d1e:	e15a      	b.n	8003fd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 814c 	beq.w	8003fd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d005      	beq.n	8003d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d130      	bne.n	8003db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d86:	2201      	movs	r2, #1
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0201 	and.w	r2, r3, #1
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d017      	beq.n	8003dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d123      	bne.n	8003e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	08da      	lsrs	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3208      	adds	r2, #8
 8003e3c:	6939      	ldr	r1, [r7, #16]
 8003e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80a6 	beq.w	8003fd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e84:	4b5b      	ldr	r3, [pc, #364]	; (8003ff4 <HAL_GPIO_Init+0x2e4>)
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	4a5a      	ldr	r2, [pc, #360]	; (8003ff4 <HAL_GPIO_Init+0x2e4>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8003e90:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <HAL_GPIO_Init+0x2e4>)
 8003e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9c:	4a56      	ldr	r2, [pc, #344]	; (8003ff8 <HAL_GPIO_Init+0x2e8>)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ec6:	d01f      	beq.n	8003f08 <HAL_GPIO_Init+0x1f8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a4c      	ldr	r2, [pc, #304]	; (8003ffc <HAL_GPIO_Init+0x2ec>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d019      	beq.n	8003f04 <HAL_GPIO_Init+0x1f4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a4b      	ldr	r2, [pc, #300]	; (8004000 <HAL_GPIO_Init+0x2f0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_GPIO_Init+0x1f0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <HAL_GPIO_Init+0x2f4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00d      	beq.n	8003efc <HAL_GPIO_Init+0x1ec>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a49      	ldr	r2, [pc, #292]	; (8004008 <HAL_GPIO_Init+0x2f8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <HAL_GPIO_Init+0x1e8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a48      	ldr	r2, [pc, #288]	; (800400c <HAL_GPIO_Init+0x2fc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_GPIO_Init+0x1e4>
 8003ef0:	2305      	movs	r3, #5
 8003ef2:	e00a      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003ef4:	2306      	movs	r3, #6
 8003ef6:	e008      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e006      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003efc:	2303      	movs	r3, #3
 8003efe:	e004      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e002      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <HAL_GPIO_Init+0x1fa>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	f002 0203 	and.w	r2, r2, #3
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	4093      	lsls	r3, r2
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1a:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_GPIO_Init+0x2e8>)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	3302      	adds	r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f4c:	4a30      	ldr	r2, [pc, #192]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f52:	4b2f      	ldr	r3, [pc, #188]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fca:	4a11      	ldr	r2, [pc, #68]	; (8004010 <HAL_GPIO_Init+0x300>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f ae9d 	bne.w	8003d20 <HAL_GPIO_Init+0x10>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	48000400 	.word	0x48000400
 8004000:	48000800 	.word	0x48000800
 8004004:	48000c00 	.word	0x48000c00
 8004008:	48001000 	.word	0x48001000
 800400c:	48001400 	.word	0x48001400
 8004010:	40010400 	.word	0x40010400

08004014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	807b      	strh	r3, [r7, #2]
 8004020:	4613      	mov	r3, r2
 8004022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004024:	787b      	ldrb	r3, [r7, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004030:	e002      	b.n	8004038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d141      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d131      	bne.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	4a46      	ldr	r2, [pc, #280]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004070:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004078:	4a41      	ldr	r2, [pc, #260]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800407e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2232      	movs	r2, #50	; 0x32
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	0c9b      	lsrs	r3, r3, #18
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004096:	e002      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3b01      	subs	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409e:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d102      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f2      	bne.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d158      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e057      	b.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c4:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040d4:	e04d      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040dc:	d141      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d131      	bne.n	8004150 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2232      	movs	r2, #50	; 0x32
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0c9b      	lsrs	r3, r3, #18
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004122:	e002      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b01      	subs	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d102      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f2      	bne.n	8004124 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d112      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e011      	b.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004160:	e007      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004170:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40007000 	.word	0x40007000
 8004184:	20000004 	.word	0x20000004
 8004188:	431bde83 	.word	0x431bde83

0800418c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419a:	6093      	str	r3, [r2, #8]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e306      	b.n	80047cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d075      	beq.n	80042b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ca:	4b97      	ldr	r3, [pc, #604]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d4:	4b94      	ldr	r3, [pc, #592]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_OscConfig+0x3e>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_OscConfig+0x44>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x108>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e2e1      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x74>
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a84      	ldr	r2, [pc, #528]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x98>
 800422a:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7e      	ldr	r2, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b7c      	ldr	r3, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7b      	ldr	r2, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fdd6 	bl	8001e14 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fdd2 	bl	8001e14 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e2a6      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xc0>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fdc2 	bl	8001e14 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fdbe 	bl	8001e14 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e292      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a6:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0xe8>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d075      	beq.n	80043ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_OscConfig+0x136>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_OscConfig+0x13c>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11f      	bne.n	8004328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e8:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_OscConfig+0x154>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e265      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	4946      	ldr	r1, [pc, #280]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_RCC_OscConfig+0x280>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd fd2f 	bl	8001d7c <HAL_InitTick>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d043      	beq.n	80043ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e251      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d023      	beq.n	8004378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fd6a 	bl	8001e14 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd fd66 	bl	8001e14 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e23a      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e01a      	b.n	80043ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800437e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fd46 	bl	8001e14 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd fd42 	bl	8001e14 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e216      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1e0>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d041      	beq.n	800443e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01c      	beq.n	80043fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd fd1f 	bl	8001e14 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7fd fd1b 	bl	8001e14 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1ef      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ef      	beq.n	80043da <HAL_RCC_OscConfig+0x22e>
 80043fa:	e020      	b.n	800443e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd fd02 	bl	8001e14 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004412:	e00d      	b.n	8004430 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd fcfe 	bl	8001e14 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d906      	bls.n	8004430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1d2      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ea      	bne.n	8004414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004450:	4b84      	ldr	r3, [pc, #528]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_OscConfig+0x2b4>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x2b6>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
 8004472:	4b7c      	ldr	r3, [pc, #496]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	4b79      	ldr	r3, [pc, #484]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a75      	ldr	r2, [pc, #468]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fd fcbb 	bl	8001e14 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fd fcb7 	bl	8001e14 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e18b      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d108      	bne.n	80044da <HAL_RCC_OscConfig+0x32e>
 80044c8:	4b66      	ldr	r3, [pc, #408]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	4a65      	ldr	r2, [pc, #404]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d8:	e024      	b.n	8004524 <HAL_RCC_OscConfig+0x378>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d110      	bne.n	8004504 <HAL_RCC_OscConfig+0x358>
 80044e2:	4b60      	ldr	r3, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	4a5e      	ldr	r2, [pc, #376]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f2:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	4a5a      	ldr	r2, [pc, #360]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004502:	e00f      	b.n	8004524 <HAL_RCC_OscConfig+0x378>
 8004504:	4b57      	ldr	r3, [pc, #348]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fc72 	bl	8001e14 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fc6e 	bl	8001e14 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e140      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ed      	beq.n	8004534 <HAL_RCC_OscConfig+0x388>
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fc5b 	bl	8001e14 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fd fc57 	bl	8001e14 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e129      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ed      	bne.n	8004562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4a34      	ldr	r2, [pc, #208]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ac:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fc2a 	bl	8001e14 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fd fc26 	bl	8001e14 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0fa      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCC_OscConfig+0x418>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fc0d 	bl	8001e14 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd fc09 	bl	8001e14 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0dd      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80d1 	beq.w	80047ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b0c      	cmp	r3, #12
 8004632:	f000 808b 	beq.w	800474c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d15e      	bne.n	80046fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fbe3 	bl	8001e14 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004650:	e00c      	b.n	800466c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004652:	f7fd fbdf 	bl	8001e14 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d905      	bls.n	800466c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0b3      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ec      	bne.n	8004652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004678:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <HAL_RCC_OscConfig+0x62c>)
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a11      	ldr	r1, [r2, #32]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004688:	3a01      	subs	r2, #1
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004692:	0212      	lsls	r2, r2, #8
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0552      	lsls	r2, r2, #21
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046a6:	0852      	lsrs	r2, r2, #1
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0652      	lsls	r2, r2, #25
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046b2:	06d2      	lsls	r2, r2, #27
 80046b4:	430a      	orrs	r2, r1
 80046b6:	4947      	ldr	r1, [pc, #284]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a44      	ldr	r2, [pc, #272]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c8:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a41      	ldr	r2, [pc, #260]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fb9e 	bl	8001e14 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fb9a 	bl	8001e14 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e06e      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x530>
 80046fa:	e066      	b.n	80047ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004714:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800471a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800471e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fb76 	bl	8001e14 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd fb72 	bl	8001e14 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e046      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473e:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x580>
 800474a:	e03e      	b.n	80047ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e039      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCC_OscConfig+0x628>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0203 	and.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	429a      	cmp	r2, r3
 800476a:	d12c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	3b01      	subs	r3, #1
 8004778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d123      	bne.n	80047c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d11b      	bne.n	80047c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d113      	bne.n	80047c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	019f800c 	.word	0x019f800c

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e11e      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b91      	ldr	r3, [pc, #580]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d910      	bls.n	8004824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b8e      	ldr	r3, [pc, #568]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	498c      	ldr	r1, [pc, #560]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b8a      	ldr	r3, [pc, #552]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e106      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d073      	beq.n	8004918 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d129      	bne.n	800488c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	4b81      	ldr	r3, [pc, #516]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0f4      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004848:	f000 f99e 	bl	8004b88 <RCC_GetSysClockFreqFromPLLSource>
 800484c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4a7c      	ldr	r2, [pc, #496]	; (8004a44 <HAL_RCC_ClockConfig+0x268>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d93f      	bls.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004856:	4b7a      	ldr	r3, [pc, #488]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d033      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004872:	2b00      	cmp	r3, #0
 8004874:	d12f      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800487e:	4a70      	ldr	r2, [pc, #448]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e024      	b.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004894:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0c6      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0be      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b4:	f000 f8ce 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a61      	ldr	r2, [pc, #388]	; (8004a44 <HAL_RCC_ClockConfig+0x268>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d909      	bls.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048c2:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ca:	4a5d      	ldr	r2, [pc, #372]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4957      	ldr	r1, [pc, #348]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd fa94 	bl	8001e14 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fd fa90 	bl	8001e14 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e095      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d023      	beq.n	800496c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004930:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800493a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004948:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004950:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4936      	ldr	r1, [pc, #216]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	e008      	b.n	800497e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d105      	bne.n	800497e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d21d      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 020f 	bic.w	r2, r3, #15
 8004994:	4929      	ldr	r1, [pc, #164]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800499c:	f7fd fa3a 	bl	8001e14 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fd fa36 	bl	8001e14 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e03b      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCC_ClockConfig+0x260>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1ed      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4917      	ldr	r1, [pc, #92]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	490f      	ldr	r1, [pc, #60]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a06:	f000 f825 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490c      	ldr	r1, [pc, #48]	; (8004a48 <HAL_RCC_ClockConfig+0x26c>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x270>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_RCC_ClockConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd f9a6 	bl	8001d7c <HAL_InitTick>
 8004a30:	4603      	mov	r3, r0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	04c4b400 	.word	0x04c4b400
 8004a48:	08007be0 	.word	0x08007be0
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	20000008 	.word	0x20000008

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a66:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e047      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e03e      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a7e:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d136      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab2:	68d2      	ldr	r2, [r2, #12]
 8004ab4:	0a12      	lsrs	r2, r2, #8
 8004ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	617b      	str	r3, [r7, #20]
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	0a12      	lsrs	r2, r2, #8
 8004ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
      break;
 8004ada:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e001      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004afc:	693b      	ldr	r3, [r7, #16]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000004 	.word	0x20000004

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	08007bf0 	.word	0x08007bf0

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b60:	f7ff ffda 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	08007bf0 	.word	0x08007bf0

08004b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d10c      	bne.n	8004bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bac:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bb6:	68d2      	ldr	r2, [r2, #12]
 8004bb8:	0a12      	lsrs	r2, r2, #8
 8004bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
    break;
 8004bc4:	e00c      	b.n	8004be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	4a0e      	ldr	r2, [pc, #56]	; (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd0:	68d2      	ldr	r2, [r2, #12]
 8004bd2:	0a12      	lsrs	r2, r2, #8
 8004bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
    break;
 8004bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0e5b      	lsrs	r3, r3, #25
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bfa:	687b      	ldr	r3, [r7, #4]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	007a1200 	.word	0x007a1200
 8004c10:	00f42400 	.word	0x00f42400

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c20:	2300      	movs	r3, #0
 8004c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8098 	beq.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a39      	ldr	r2, [pc, #228]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6a:	f7fd f8d3 	bl	8001e14 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c70:	e009      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c72:	f7fd f8cf 	bl	8001e14 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d902      	bls.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	74fb      	strb	r3, [r7, #19]
        break;
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c86:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d159      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c98:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01e      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d019      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cb4:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fd f88f 	bl	8001e14 <HAL_GetTick>
 8004cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fd f88b 	bl	8001e14 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d902      	bls.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ec      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	4903      	ldr	r1, [pc, #12]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3e:	7cfb      	ldrb	r3, [r7, #19]
 8004d40:	74bb      	strb	r3, [r7, #18]
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d50:	7c7b      	ldrb	r3, [r7, #17]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d56:	4ba6      	ldr	r3, [pc, #664]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	4aa5      	ldr	r2, [pc, #660]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6e:	4ba0      	ldr	r3, [pc, #640]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f023 0203 	bic.w	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	499c      	ldr	r1, [pc, #624]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d90:	4b97      	ldr	r3, [pc, #604]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f023 020c 	bic.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4994      	ldr	r1, [pc, #592]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004db2:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	498b      	ldr	r1, [pc, #556]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd4:	4b86      	ldr	r3, [pc, #536]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4983      	ldr	r1, [pc, #524]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004df6:	4b7e      	ldr	r3, [pc, #504]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	497a      	ldr	r1, [pc, #488]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e18:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	4972      	ldr	r1, [pc, #456]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4969      	ldr	r1, [pc, #420]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4961      	ldr	r1, [pc, #388]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4958      	ldr	r1, [pc, #352]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	4950      	ldr	r1, [pc, #320]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d105      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	4942      	ldr	r1, [pc, #264]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef8:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f10:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4934      	ldr	r1, [pc, #208]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f30:	4b2f      	ldr	r3, [pc, #188]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f68:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4918      	ldr	r1, [pc, #96]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e049      	b.n	800509a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc fcc6 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f000 fcc0 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e04a      	b.n	8005152 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_TIM_Base_Start_IT+0xbc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x6c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x6c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_TIM_Base_Start_IT+0xc0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x6c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_TIM_Base_Start_IT+0xc4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x6c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <HAL_TIM_Base_Start_IT+0xc8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x6c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_TIM_Base_Start_IT+0xcc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d115      	bne.n	800513c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_TIM_Base_Start_IT+0xd0>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d015      	beq.n	800514e <HAL_TIM_Base_Start_IT+0xaa>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d011      	beq.n	800514e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	e008      	b.n	800514e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e000      	b.n	8005150 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40012c00 	.word	0x40012c00
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40013400 	.word	0x40013400
 8005170:	40014000 	.word	0x40014000
 8005174:	00010007 	.word	0x00010007

08005178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e049      	b.n	800521e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f841 	bl	8005226 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 fbfe 	bl	80059b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d122      	bne.n	8005296 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d11b      	bne.n	8005296 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f06f 0202 	mvn.w	r2, #2
 8005266:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb7d 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 8005282:	e005      	b.n	8005290 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb6f 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb80 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d122      	bne.n	80052ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d11b      	bne.n	80052ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0204 	mvn.w	r2, #4
 80052ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fb53 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 80052d6:	e005      	b.n	80052e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb45 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb56 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d122      	bne.n	800533e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d11b      	bne.n	800533e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f06f 0208 	mvn.w	r2, #8
 800530e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2204      	movs	r2, #4
 8005314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb29 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 800532a:	e005      	b.n	8005338 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fb1b 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fb2c 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d122      	bne.n	8005392 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b10      	cmp	r3, #16
 8005358:	d11b      	bne.n	8005392 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0210 	mvn.w	r2, #16
 8005362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2208      	movs	r2, #8
 8005368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 faff 	bl	800597c <HAL_TIM_IC_CaptureCallback>
 800537e:	e005      	b.n	800538c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 faf1 	bl	8005968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fb02 	bl	8005990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10e      	bne.n	80053be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0201 	mvn.w	r2, #1
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 facb 	bl	8005954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b80      	cmp	r3, #128	; 0x80
 80053ca:	d10e      	bne.n	80053ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b80      	cmp	r3, #128	; 0x80
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 f835 	bl	8006454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 f828 	bl	8006468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d10e      	bne.n	8005444 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d107      	bne.n	8005444 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fab0 	bl	80059a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b20      	cmp	r3, #32
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b20      	cmp	r3, #32
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0220 	mvn.w	r2, #32
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 ffe8 	bl	8006440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d10f      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800548a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 ffee 	bl	800647c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ae:	d10f      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 ffe0 	bl	8006490 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054de:	d10f      	bne.n	8005500 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ffd2 	bl	80064a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800550a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800550e:	d10f      	bne.n	8005530 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 ffc4 	bl	80064b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005552:	2302      	movs	r3, #2
 8005554:	e0ff      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b14      	cmp	r3, #20
 8005562:	f200 80f0 	bhi.w	8005746 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	080055c1 	.word	0x080055c1
 8005570:	08005747 	.word	0x08005747
 8005574:	08005747 	.word	0x08005747
 8005578:	08005747 	.word	0x08005747
 800557c:	08005601 	.word	0x08005601
 8005580:	08005747 	.word	0x08005747
 8005584:	08005747 	.word	0x08005747
 8005588:	08005747 	.word	0x08005747
 800558c:	08005643 	.word	0x08005643
 8005590:	08005747 	.word	0x08005747
 8005594:	08005747 	.word	0x08005747
 8005598:	08005747 	.word	0x08005747
 800559c:	08005683 	.word	0x08005683
 80055a0:	08005747 	.word	0x08005747
 80055a4:	08005747 	.word	0x08005747
 80055a8:	08005747 	.word	0x08005747
 80055ac:	080056c5 	.word	0x080056c5
 80055b0:	08005747 	.word	0x08005747
 80055b4:	08005747 	.word	0x08005747
 80055b8:	08005747 	.word	0x08005747
 80055bc:	08005705 	.word	0x08005705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa86 	bl	8005ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0204 	bic.w	r2, r2, #4
 80055ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6999      	ldr	r1, [r3, #24]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	619a      	str	r2, [r3, #24]
      break;
 80055fe:	e0a5      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 faf6 	bl	8005bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6999      	ldr	r1, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]
      break;
 8005640:	e084      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fb5f 	bl	8005d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0208 	orr.w	r2, r2, #8
 800565c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0204 	bic.w	r2, r2, #4
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69d9      	ldr	r1, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	61da      	str	r2, [r3, #28]
      break;
 8005680:	e064      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbc7 	bl	8005e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	021a      	lsls	r2, r3, #8
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	61da      	str	r2, [r3, #28]
      break;
 80056c2:	e043      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fc30 	bl	8005f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005702:	e023      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fc74 	bl	8005ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005744:	e002      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
      break;
 800574a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop

08005760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIM_ConfigClockSource+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e0de      	b.n	800593a <HAL_TIM_ConfigClockSource+0x1da>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800579a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a63      	ldr	r2, [pc, #396]	; (8005944 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f000 80a9 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 80057bc:	4a61      	ldr	r2, [pc, #388]	; (8005944 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f200 80ae 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 80057c4:	4a60      	ldr	r2, [pc, #384]	; (8005948 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f000 80a1 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 80057cc:	4a5e      	ldr	r2, [pc, #376]	; (8005948 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f200 80a6 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 80057d4:	4a5d      	ldr	r2, [pc, #372]	; (800594c <HAL_TIM_ConfigClockSource+0x1ec>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	f000 8099 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 80057dc:	4a5b      	ldr	r2, [pc, #364]	; (800594c <HAL_TIM_ConfigClockSource+0x1ec>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f200 809e 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 80057e4:	4a5a      	ldr	r2, [pc, #360]	; (8005950 <HAL_TIM_ConfigClockSource+0x1f0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 8091 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 80057ec:	4a58      	ldr	r2, [pc, #352]	; (8005950 <HAL_TIM_ConfigClockSource+0x1f0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	f200 8096 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 80057f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057f8:	f000 8089 	beq.w	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 80057fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005800:	f200 808e 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005808:	d03e      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0x128>
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580e:	f200 8087 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	f000 8086 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x1c6>
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d87f      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005820:	2b70      	cmp	r3, #112	; 0x70
 8005822:	d01a      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xfa>
 8005824:	2b70      	cmp	r3, #112	; 0x70
 8005826:	d87b      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005828:	2b60      	cmp	r3, #96	; 0x60
 800582a:	d050      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d877      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005830:	2b50      	cmp	r3, #80	; 0x50
 8005832:	d03c      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x14e>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d873      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d058      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x18e>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d86f      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005840:	2b30      	cmp	r3, #48	; 0x30
 8005842:	d064      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d86b      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d060      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d867      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05c      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 8005854:	2b10      	cmp	r3, #16
 8005856:	d05a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x1ae>
 8005858:	e062      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6899      	ldr	r1, [r3, #8]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f000 fca7 	bl	80061bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800587c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
      break;
 8005886:	e04f      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6899      	ldr	r1, [r3, #8]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f000 fc90 	bl	80061bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058aa:	609a      	str	r2, [r3, #8]
      break;
 80058ac:	e03c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 fc02 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2150      	movs	r1, #80	; 0x50
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fc5b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e02c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	461a      	mov	r2, r3
 80058dc:	f000 fc21 	bl	8006122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2160      	movs	r1, #96	; 0x60
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fc4b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 80058ec:	e01c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f000 fbe2 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2140      	movs	r1, #64	; 0x40
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fc3b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 800590c:	e00c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f000 fc32 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 800591e:	e003      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
      break;
 8005924:	e000      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	00100070 	.word	0x00100070
 8005948:	00100040 	.word	0x00100040
 800594c:	00100030 	.word	0x00100030
 8005950:	00100020 	.word	0x00100020

08005954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3c      	ldr	r2, [pc, #240]	; (8005abc <TIM_Base_SetConfig+0x104>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a39      	ldr	r2, [pc, #228]	; (8005ac0 <TIM_Base_SetConfig+0x108>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a38      	ldr	r2, [pc, #224]	; (8005ac4 <TIM_Base_SetConfig+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x38>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a37      	ldr	r2, [pc, #220]	; (8005ac8 <TIM_Base_SetConfig+0x110>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2d      	ldr	r2, [pc, #180]	; (8005abc <TIM_Base_SetConfig+0x104>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01b      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d017      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <TIM_Base_SetConfig+0x108>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <TIM_Base_SetConfig+0x10c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00f      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a28      	ldr	r2, [pc, #160]	; (8005ac8 <TIM_Base_SetConfig+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a27      	ldr	r2, [pc, #156]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_Base_SetConfig+0x8a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d108      	bne.n	8005a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a10      	ldr	r2, [pc, #64]	; (8005abc <TIM_Base_SetConfig+0x104>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_Base_SetConfig+0xe8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <TIM_Base_SetConfig+0x110>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0xe8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a10      	ldr	r2, [pc, #64]	; (8005acc <TIM_Base_SetConfig+0x114>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0xe8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0xe8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d103      	bne.n	8005aa8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	615a      	str	r2, [r3, #20]
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800

08005ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f023 0302 	bic.w	r3, r3, #2
 8005b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a2c      	ldr	r2, [pc, #176]	; (8005be4 <TIM_OC1_SetConfig+0x10c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00f      	beq.n	8005b58 <TIM_OC1_SetConfig+0x80>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <TIM_OC1_SetConfig+0x110>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_OC1_SetConfig+0x80>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <TIM_OC1_SetConfig+0x114>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_OC1_SetConfig+0x80>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <TIM_OC1_SetConfig+0x118>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC1_SetConfig+0x80>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <TIM_OC1_SetConfig+0x11c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10c      	bne.n	8005b72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0308 	bic.w	r3, r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <TIM_OC1_SetConfig+0x10c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00f      	beq.n	8005b9a <TIM_OC1_SetConfig+0xc2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1a      	ldr	r2, [pc, #104]	; (8005be8 <TIM_OC1_SetConfig+0x110>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <TIM_OC1_SetConfig+0xc2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <TIM_OC1_SetConfig+0x114>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_OC1_SetConfig+0xc2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <TIM_OC1_SetConfig+0x118>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_OC1_SetConfig+0xc2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <TIM_OC1_SetConfig+0x11c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800

08005bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0210 	bic.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <TIM_OC2_SetConfig+0x100>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC2_SetConfig+0x6c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <TIM_OC2_SetConfig+0x104>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d10d      	bne.n	8005c80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <TIM_OC2_SetConfig+0x100>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_OC2_SetConfig+0xb0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <TIM_OC2_SetConfig+0x104>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_OC2_SetConfig+0xb0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <TIM_OC2_SetConfig+0x108>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_OC2_SetConfig+0xb0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1a      	ldr	r2, [pc, #104]	; (8005d04 <TIM_OC2_SetConfig+0x10c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC2_SetConfig+0xb0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <TIM_OC2_SetConfig+0x110>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d113      	bne.n	8005cd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <TIM_OC3_SetConfig+0xfc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC3_SetConfig+0x6a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <TIM_OC3_SetConfig+0x100>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10d      	bne.n	8005d92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <TIM_OC3_SetConfig+0xfc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_OC3_SetConfig+0xae>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <TIM_OC3_SetConfig+0x100>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_OC3_SetConfig+0xae>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <TIM_OC3_SetConfig+0x104>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_OC3_SetConfig+0xae>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <TIM_OC3_SetConfig+0x108>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_OC3_SetConfig+0xae>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <TIM_OC3_SetConfig+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d113      	bne.n	8005de2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	621a      	str	r2, [r3, #32]
}
 8005dfc:	bf00      	nop
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	031b      	lsls	r3, r3, #12
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_OC4_SetConfig+0x100>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_OC4_SetConfig+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <TIM_OC4_SetConfig+0x104>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d10d      	bne.n	8005ea4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <TIM_OC4_SetConfig+0x100>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_OC4_SetConfig+0xb0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <TIM_OC4_SetConfig+0x104>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC4_SetConfig+0xb0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <TIM_OC4_SetConfig+0x108>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC4_SetConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <TIM_OC4_SetConfig+0x10c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC4_SetConfig+0xb0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <TIM_OC4_SetConfig+0x110>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eda:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <TIM_OC5_SetConfig+0xb4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_OC5_SetConfig+0x7a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <TIM_OC5_SetConfig+0xb8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_OC5_SetConfig+0x7a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a15      	ldr	r2, [pc, #84]	; (8005fec <TIM_OC5_SetConfig+0xbc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_OC5_SetConfig+0x7a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <TIM_OC5_SetConfig+0xc0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC5_SetConfig+0x7a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <TIM_OC5_SetConfig+0xc4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d109      	bne.n	8005fbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800

08005ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800603e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	051b      	lsls	r3, r3, #20
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <TIM_OC6_SetConfig+0xb8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_OC6_SetConfig+0x7c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a17      	ldr	r2, [pc, #92]	; (80060b4 <TIM_OC6_SetConfig+0xbc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_OC6_SetConfig+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <TIM_OC6_SetConfig+0xc0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_OC6_SetConfig+0x7c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <TIM_OC6_SetConfig+0xc4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC6_SetConfig+0x7c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <TIM_OC6_SetConfig+0xc8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d109      	bne.n	8006088 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	029b      	lsls	r3, r3, #10
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40013400 	.word	0x40013400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800

080060c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 030a 	bic.w	r3, r3, #10
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006122:	b480      	push	{r7}
 8006124:	b087      	sub	sp, #28
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f043 0307 	orr.w	r3, r3, #7
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	021a      	lsls	r2, r3, #8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	431a      	orrs	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	609a      	str	r2, [r3, #8]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e065      	b.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2c      	ldr	r2, [pc, #176]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2b      	ldr	r2, [pc, #172]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800624e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d013      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a13      	ldr	r2, [pc, #76]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10c      	bne.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40014000 	.word	0x40014000

08006300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e087      	b.n	800642c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a27      	ldr	r2, [pc, #156]	; (8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d106      	bne.n	80063b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	; (800643c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d126      	bne.n	800641a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d6:	051b      	lsls	r3, r3, #20
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a0e      	ldr	r2, [pc, #56]	; (8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a0d      	ldr	r2, [pc, #52]	; (800643c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d106      	bne.n	800641a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400

08006440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e042      	b.n	8006564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fb fb0f 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8c2 	bl	8006698 <UART_SetConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e022      	b.n	8006564 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb82 	bl	8006c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fc09 	bl	8006d74 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	2b20      	cmp	r3, #32
 8006584:	f040 8083 	bne.w	800668e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Transmit+0x28>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e07b      	b.n	8006690 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Transmit+0x3a>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e074      	b.n	8006690 <HAL_UART_Transmit+0x124>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2221      	movs	r2, #33	; 0x21
 80065ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065be:	f7fb fc29 	bl	8001e14 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d108      	bne.n	80065f0 <HAL_UART_Transmit+0x84>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	e003      	b.n	80065f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006600:	e02c      	b.n	800665c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fbfc 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e039      	b.n	8006690 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006630:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	3302      	adds	r3, #2
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e007      	b.n	800664a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	3301      	adds	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1cc      	bne.n	8006602 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2200      	movs	r2, #0
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fbc9 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e006      	b.n	8006690 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800669c:	b08c      	sub	sp, #48	; 0x30
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	4313      	orrs	r3, r2
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4bab      	ldr	r3, [pc, #684]	; (8006974 <UART_SetConfig+0x2dc>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4aa0      	ldr	r2, [pc, #640]	; (8006978 <UART_SetConfig+0x2e0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006700:	4313      	orrs	r3, r2
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800670e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006718:	430b      	orrs	r3, r1
 800671a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f023 010f 	bic.w	r1, r3, #15
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a91      	ldr	r2, [pc, #580]	; (800697c <UART_SetConfig+0x2e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d125      	bne.n	8006788 <UART_SetConfig+0xf0>
 800673c:	4b90      	ldr	r3, [pc, #576]	; (8006980 <UART_SetConfig+0x2e8>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b03      	cmp	r3, #3
 8006748:	d81a      	bhi.n	8006780 <UART_SetConfig+0xe8>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <UART_SetConfig+0xb8>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006761 	.word	0x08006761
 8006754:	08006771 	.word	0x08006771
 8006758:	08006769 	.word	0x08006769
 800675c:	08006779 	.word	0x08006779
 8006760:	2301      	movs	r3, #1
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e0d6      	b.n	8006916 <UART_SetConfig+0x27e>
 8006768:	2302      	movs	r3, #2
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676e:	e0d2      	b.n	8006916 <UART_SetConfig+0x27e>
 8006770:	2304      	movs	r3, #4
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006776:	e0ce      	b.n	8006916 <UART_SetConfig+0x27e>
 8006778:	2308      	movs	r3, #8
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677e:	e0ca      	b.n	8006916 <UART_SetConfig+0x27e>
 8006780:	2310      	movs	r3, #16
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e0c6      	b.n	8006916 <UART_SetConfig+0x27e>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7d      	ldr	r2, [pc, #500]	; (8006984 <UART_SetConfig+0x2ec>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d138      	bne.n	8006804 <UART_SetConfig+0x16c>
 8006792:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <UART_SetConfig+0x2e8>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f003 030c 	and.w	r3, r3, #12
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d82d      	bhi.n	80067fc <UART_SetConfig+0x164>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0x110>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e2:	e098      	b.n	8006916 <UART_SetConfig+0x27e>
 80067e4:	2302      	movs	r3, #2
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e094      	b.n	8006916 <UART_SetConfig+0x27e>
 80067ec:	2304      	movs	r3, #4
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e090      	b.n	8006916 <UART_SetConfig+0x27e>
 80067f4:	2308      	movs	r3, #8
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e08c      	b.n	8006916 <UART_SetConfig+0x27e>
 80067fc:	2310      	movs	r3, #16
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006802:	e088      	b.n	8006916 <UART_SetConfig+0x27e>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a5f      	ldr	r2, [pc, #380]	; (8006988 <UART_SetConfig+0x2f0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d125      	bne.n	800685a <UART_SetConfig+0x1c2>
 800680e:	4b5c      	ldr	r3, [pc, #368]	; (8006980 <UART_SetConfig+0x2e8>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006818:	2b30      	cmp	r3, #48	; 0x30
 800681a:	d016      	beq.n	800684a <UART_SetConfig+0x1b2>
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d818      	bhi.n	8006852 <UART_SetConfig+0x1ba>
 8006820:	2b20      	cmp	r3, #32
 8006822:	d00a      	beq.n	800683a <UART_SetConfig+0x1a2>
 8006824:	2b20      	cmp	r3, #32
 8006826:	d814      	bhi.n	8006852 <UART_SetConfig+0x1ba>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <UART_SetConfig+0x19a>
 800682c:	2b10      	cmp	r3, #16
 800682e:	d008      	beq.n	8006842 <UART_SetConfig+0x1aa>
 8006830:	e00f      	b.n	8006852 <UART_SetConfig+0x1ba>
 8006832:	2300      	movs	r3, #0
 8006834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006838:	e06d      	b.n	8006916 <UART_SetConfig+0x27e>
 800683a:	2302      	movs	r3, #2
 800683c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006840:	e069      	b.n	8006916 <UART_SetConfig+0x27e>
 8006842:	2304      	movs	r3, #4
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006848:	e065      	b.n	8006916 <UART_SetConfig+0x27e>
 800684a:	2308      	movs	r3, #8
 800684c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006850:	e061      	b.n	8006916 <UART_SetConfig+0x27e>
 8006852:	2310      	movs	r3, #16
 8006854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006858:	e05d      	b.n	8006916 <UART_SetConfig+0x27e>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4b      	ldr	r2, [pc, #300]	; (800698c <UART_SetConfig+0x2f4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d125      	bne.n	80068b0 <UART_SetConfig+0x218>
 8006864:	4b46      	ldr	r3, [pc, #280]	; (8006980 <UART_SetConfig+0x2e8>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800686e:	2bc0      	cmp	r3, #192	; 0xc0
 8006870:	d016      	beq.n	80068a0 <UART_SetConfig+0x208>
 8006872:	2bc0      	cmp	r3, #192	; 0xc0
 8006874:	d818      	bhi.n	80068a8 <UART_SetConfig+0x210>
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d00a      	beq.n	8006890 <UART_SetConfig+0x1f8>
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d814      	bhi.n	80068a8 <UART_SetConfig+0x210>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <UART_SetConfig+0x1f0>
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d008      	beq.n	8006898 <UART_SetConfig+0x200>
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x210>
 8006888:	2300      	movs	r3, #0
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e042      	b.n	8006916 <UART_SetConfig+0x27e>
 8006890:	2302      	movs	r3, #2
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e03e      	b.n	8006916 <UART_SetConfig+0x27e>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689e:	e03a      	b.n	8006916 <UART_SetConfig+0x27e>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a6:	e036      	b.n	8006916 <UART_SetConfig+0x27e>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ae:	e032      	b.n	8006916 <UART_SetConfig+0x27e>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a30      	ldr	r2, [pc, #192]	; (8006978 <UART_SetConfig+0x2e0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d12a      	bne.n	8006910 <UART_SetConfig+0x278>
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <UART_SetConfig+0x2e8>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c8:	d01a      	beq.n	8006900 <UART_SetConfig+0x268>
 80068ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ce:	d81b      	bhi.n	8006908 <UART_SetConfig+0x270>
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d4:	d00c      	beq.n	80068f0 <UART_SetConfig+0x258>
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068da:	d815      	bhi.n	8006908 <UART_SetConfig+0x270>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <UART_SetConfig+0x250>
 80068e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e4:	d008      	beq.n	80068f8 <UART_SetConfig+0x260>
 80068e6:	e00f      	b.n	8006908 <UART_SetConfig+0x270>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e012      	b.n	8006916 <UART_SetConfig+0x27e>
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e00e      	b.n	8006916 <UART_SetConfig+0x27e>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e00a      	b.n	8006916 <UART_SetConfig+0x27e>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e006      	b.n	8006916 <UART_SetConfig+0x27e>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690e:	e002      	b.n	8006916 <UART_SetConfig+0x27e>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <UART_SetConfig+0x2e0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	f040 80a8 	bne.w	8006a72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006926:	2b08      	cmp	r3, #8
 8006928:	d834      	bhi.n	8006994 <UART_SetConfig+0x2fc>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x298>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	08006995 	.word	0x08006995
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006995 	.word	0x08006995
 8006940:	08006963 	.word	0x08006963
 8006944:	08006995 	.word	0x08006995
 8006948:	08006995 	.word	0x08006995
 800694c:	08006995 	.word	0x08006995
 8006950:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fe f8ec 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695a:	e021      	b.n	80069a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <UART_SetConfig+0x2f8>)
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006960:	e01e      	b.n	80069a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe f877 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006968:	e01a      	b.n	80069a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006970:	e016      	b.n	80069a0 <UART_SetConfig+0x308>
 8006972:	bf00      	nop
 8006974:	cfff69f3 	.word	0xcfff69f3
 8006978:	40008000 	.word	0x40008000
 800697c:	40013800 	.word	0x40013800
 8006980:	40021000 	.word	0x40021000
 8006984:	40004400 	.word	0x40004400
 8006988:	40004800 	.word	0x40004800
 800698c:	40004c00 	.word	0x40004c00
 8006990:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800699e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 812a 	beq.w	8006bfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	4a9e      	ldr	r2, [pc, #632]	; (8006c28 <UART_SetConfig+0x590>)
 80069ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d305      	bcc.n	80069d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d903      	bls.n	80069e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069de:	e10d      	b.n	8006bfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2200      	movs	r2, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	60fa      	str	r2, [r7, #12]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	4a8e      	ldr	r2, [pc, #568]	; (8006c28 <UART_SetConfig+0x590>)
 80069ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2200      	movs	r2, #0
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a02:	f7f9 fc5d 	bl	80002c0 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	020b      	lsls	r3, r1, #8
 8006a18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a1c:	0202      	lsls	r2, r0, #8
 8006a1e:	6979      	ldr	r1, [r7, #20]
 8006a20:	6849      	ldr	r1, [r1, #4]
 8006a22:	0849      	lsrs	r1, r1, #1
 8006a24:	2000      	movs	r0, #0
 8006a26:	460c      	mov	r4, r1
 8006a28:	4605      	mov	r5, r0
 8006a2a:	eb12 0804 	adds.w	r8, r2, r4
 8006a2e:	eb43 0905 	adc.w	r9, r3, r5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	469a      	mov	sl, r3
 8006a3a:	4693      	mov	fp, r2
 8006a3c:	4652      	mov	r2, sl
 8006a3e:	465b      	mov	r3, fp
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fc3c 	bl	80002c0 <__aeabi_uldivmod>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a56:	d308      	bcc.n	8006a6a <UART_SetConfig+0x3d2>
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5e:	d204      	bcs.n	8006a6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a3a      	ldr	r2, [r7, #32]
 8006a66:	60da      	str	r2, [r3, #12]
 8006a68:	e0c8      	b.n	8006bfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a70:	e0c4      	b.n	8006bfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7a:	d167      	bne.n	8006b4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d828      	bhi.n	8006ad6 <UART_SetConfig+0x43e>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x3f4>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ad7 	.word	0x08006ad7
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
 8006aac:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fe f83e 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ab6:	e014      	b.n	8006ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fe f850 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006abe:	e010      	b.n	8006ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b5a      	ldr	r3, [pc, #360]	; (8006c2c <UART_SetConfig+0x594>)
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ac4:	e00d      	b.n	8006ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fd ffc5 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8006aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006acc:	e009      	b.n	8006ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad4:	e005      	b.n	8006ae2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8089 	beq.w	8006bfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	4a4e      	ldr	r2, [pc, #312]	; (8006c28 <UART_SetConfig+0x590>)
 8006af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afc:	005a      	lsls	r2, r3, #1
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	441a      	add	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d916      	bls.n	8006b44 <UART_SetConfig+0x4ac>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1c:	d212      	bcs.n	8006b44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f023 030f 	bic.w	r3, r3, #15
 8006b26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	8bfb      	ldrh	r3, [r7, #30]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	8bfa      	ldrh	r2, [r7, #30]
 8006b40:	60da      	str	r2, [r3, #12]
 8006b42:	e05b      	b.n	8006bfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b4a:	e057      	b.n	8006bfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d828      	bhi.n	8006ba6 <UART_SetConfig+0x50e>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x4c4>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba7 	.word	0x08006ba7
 8006b6c:	08006b97 	.word	0x08006b97
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006ba7 	.word	0x08006ba7
 8006b78:	08006ba7 	.word	0x08006ba7
 8006b7c:	08006b9f 	.word	0x08006b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b80:	f7fd ffd6 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8006b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b86:	e014      	b.n	8006bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fd ffe8 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b8e:	e010      	b.n	8006bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b90:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <UART_SetConfig+0x594>)
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b94:	e00d      	b.n	8006bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b96:	f7fd ff5d 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8006b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b9c:	e009      	b.n	8006bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba4:	e005      	b.n	8006bb2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d021      	beq.n	8006bfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <UART_SetConfig+0x590>)
 8006bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	441a      	add	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d909      	bls.n	8006bf6 <UART_SetConfig+0x55e>
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be8:	d205      	bcs.n	8006bf6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60da      	str	r2, [r3, #12]
 8006bf4:	e002      	b.n	8006bfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c26:	bf00      	nop
 8006c28:	08007bf8 	.word	0x08007bf8
 8006c2c:	00f42400 	.word	0x00f42400

08006c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2e:	d10a      	bne.n	8006d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d84:	f7fb f846 	bl	8001e14 <HAL_GetTick>
 8006d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d10e      	bne.n	8006db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f82f 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e025      	b.n	8006e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d10e      	bne.n	8006de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f819 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e00f      	b.n	8006e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b09c      	sub	sp, #112	; 0x70
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	603b      	str	r3, [r7, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1a:	e0a9      	b.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	f000 80a5 	beq.w	8006f70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e26:	f7fa fff5 	bl	8001e14 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d140      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e50:	667b      	str	r3, [r7, #100]	; 0x64
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e6      	bne.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	663b      	str	r3, [r7, #96]	; 0x60
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e069      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d051      	beq.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eda:	d149      	bne.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
 8006f06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e6      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	613b      	str	r3, [r7, #16]
   return(result);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f38:	623a      	str	r2, [r7, #32]
 8006f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	6a3a      	ldr	r2, [r7, #32]
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e010      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	f43f af46 	beq.w	8006e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3770      	adds	r7, #112	; 0x70
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e027      	b.n	8007000 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	; 0x24
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007020:	2302      	movs	r3, #2
 8007022:	e02d      	b.n	8007080 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2224      	movs	r2, #36	; 0x24
 8007030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f84f 	bl	8007104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800709c:	2302      	movs	r3, #2
 800709e:	e02d      	b.n	80070fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0201 	bic.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f811 	bl	8007104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007110:	2b00      	cmp	r3, #0
 8007112:	d108      	bne.n	8007126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007124:	e031      	b.n	800718a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007126:	2308      	movs	r3, #8
 8007128:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800712a:	2308      	movs	r3, #8
 800712c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	0e5b      	lsrs	r3, r3, #25
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	0f5b      	lsrs	r3, r3, #29
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	7b3a      	ldrb	r2, [r7, #12]
 8007152:	4911      	ldr	r1, [pc, #68]	; (8007198 <UARTEx_SetNbDataToProcess+0x94>)
 8007154:	5c8a      	ldrb	r2, [r1, r2]
 8007156:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800715a:	7b3a      	ldrb	r2, [r7, #12]
 800715c:	490f      	ldr	r1, [pc, #60]	; (800719c <UARTEx_SetNbDataToProcess+0x98>)
 800715e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007160:	fb93 f3f2 	sdiv	r3, r3, r2
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	7b7a      	ldrb	r2, [r7, #13]
 8007170:	4909      	ldr	r1, [pc, #36]	; (8007198 <UARTEx_SetNbDataToProcess+0x94>)
 8007172:	5c8a      	ldrb	r2, [r1, r2]
 8007174:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007178:	7b7a      	ldrb	r2, [r7, #13]
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <UARTEx_SetNbDataToProcess+0x98>)
 800717c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800717e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	08007c10 	.word	0x08007c10
 800719c:	08007c18 	.word	0x08007c18

080071a0 <siprintf>:
 80071a0:	b40e      	push	{r1, r2, r3}
 80071a2:	b500      	push	{lr}
 80071a4:	b09c      	sub	sp, #112	; 0x70
 80071a6:	ab1d      	add	r3, sp, #116	; 0x74
 80071a8:	9002      	str	r0, [sp, #8]
 80071aa:	9006      	str	r0, [sp, #24]
 80071ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071b0:	4809      	ldr	r0, [pc, #36]	; (80071d8 <siprintf+0x38>)
 80071b2:	9107      	str	r1, [sp, #28]
 80071b4:	9104      	str	r1, [sp, #16]
 80071b6:	4909      	ldr	r1, [pc, #36]	; (80071dc <siprintf+0x3c>)
 80071b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071bc:	9105      	str	r1, [sp, #20]
 80071be:	6800      	ldr	r0, [r0, #0]
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	a902      	add	r1, sp, #8
 80071c4:	f000 f992 	bl	80074ec <_svfiprintf_r>
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	b01c      	add	sp, #112	; 0x70
 80071d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d4:	b003      	add	sp, #12
 80071d6:	4770      	bx	lr
 80071d8:	2000005c 	.word	0x2000005c
 80071dc:	ffff0208 	.word	0xffff0208

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <__errno>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	; (80071f8 <__errno+0x8>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	2000005c 	.word	0x2000005c

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	; (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	; (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	; (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	; (8007240 <__libc_init_array+0x44>)
 8007210:	f000 fc6a 	bl	8007ae8 <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	08007c5c 	.word	0x08007c5c
 8007238:	08007c5c 	.word	0x08007c5c
 800723c:	08007c5c 	.word	0x08007c5c
 8007240:	08007c60 	.word	0x08007c60

08007244 <__retarget_lock_acquire_recursive>:
 8007244:	4770      	bx	lr

08007246 <__retarget_lock_release_recursive>:
 8007246:	4770      	bx	lr

08007248 <_free_r>:
 8007248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724a:	2900      	cmp	r1, #0
 800724c:	d044      	beq.n	80072d8 <_free_r+0x90>
 800724e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007252:	9001      	str	r0, [sp, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f1a1 0404 	sub.w	r4, r1, #4
 800725a:	bfb8      	it	lt
 800725c:	18e4      	addlt	r4, r4, r3
 800725e:	f000 f8df 	bl	8007420 <__malloc_lock>
 8007262:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <_free_r+0x94>)
 8007264:	9801      	ldr	r0, [sp, #4]
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	b933      	cbnz	r3, 8007278 <_free_r+0x30>
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	6014      	str	r4, [r2, #0]
 800726e:	b003      	add	sp, #12
 8007270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007274:	f000 b8da 	b.w	800742c <__malloc_unlock>
 8007278:	42a3      	cmp	r3, r4
 800727a:	d908      	bls.n	800728e <_free_r+0x46>
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1961      	adds	r1, r4, r5
 8007280:	428b      	cmp	r3, r1
 8007282:	bf01      	itttt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	1949      	addeq	r1, r1, r5
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	e7ed      	b.n	800726a <_free_r+0x22>
 800728e:	461a      	mov	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b10b      	cbz	r3, 8007298 <_free_r+0x50>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x46>
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	1855      	adds	r5, r2, r1
 800729c:	42a5      	cmp	r5, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x70>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	4421      	add	r1, r4
 80072a4:	1854      	adds	r4, r2, r1
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	d1e0      	bne.n	800726e <_free_r+0x26>
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6053      	str	r3, [r2, #4]
 80072b2:	440c      	add	r4, r1
 80072b4:	6014      	str	r4, [r2, #0]
 80072b6:	e7da      	b.n	800726e <_free_r+0x26>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x78>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	e7d6      	b.n	800726e <_free_r+0x26>
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	1961      	adds	r1, r4, r5
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1949      	addeq	r1, r1, r5
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6054      	str	r4, [r2, #4]
 80072d6:	e7ca      	b.n	800726e <_free_r+0x26>
 80072d8:	b003      	add	sp, #12
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	200007fc 	.word	0x200007fc

080072e0 <sbrk_aligned>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4e0e      	ldr	r6, [pc, #56]	; (800731c <sbrk_aligned+0x3c>)
 80072e4:	460c      	mov	r4, r1
 80072e6:	6831      	ldr	r1, [r6, #0]
 80072e8:	4605      	mov	r5, r0
 80072ea:	b911      	cbnz	r1, 80072f2 <sbrk_aligned+0x12>
 80072ec:	f000 fba6 	bl	8007a3c <_sbrk_r>
 80072f0:	6030      	str	r0, [r6, #0]
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 fba1 	bl	8007a3c <_sbrk_r>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d00a      	beq.n	8007314 <sbrk_aligned+0x34>
 80072fe:	1cc4      	adds	r4, r0, #3
 8007300:	f024 0403 	bic.w	r4, r4, #3
 8007304:	42a0      	cmp	r0, r4
 8007306:	d007      	beq.n	8007318 <sbrk_aligned+0x38>
 8007308:	1a21      	subs	r1, r4, r0
 800730a:	4628      	mov	r0, r5
 800730c:	f000 fb96 	bl	8007a3c <_sbrk_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d101      	bne.n	8007318 <sbrk_aligned+0x38>
 8007314:	f04f 34ff 	mov.w	r4, #4294967295
 8007318:	4620      	mov	r0, r4
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	20000800 	.word	0x20000800

08007320 <_malloc_r>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	1ccd      	adds	r5, r1, #3
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	2d00      	cmp	r5, #0
 8007334:	4607      	mov	r7, r0
 8007336:	db01      	blt.n	800733c <_malloc_r+0x1c>
 8007338:	42a9      	cmp	r1, r5
 800733a:	d905      	bls.n	8007348 <_malloc_r+0x28>
 800733c:	230c      	movs	r3, #12
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	2600      	movs	r6, #0
 8007342:	4630      	mov	r0, r6
 8007344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007348:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800741c <_malloc_r+0xfc>
 800734c:	f000 f868 	bl	8007420 <__malloc_lock>
 8007350:	f8d8 3000 	ldr.w	r3, [r8]
 8007354:	461c      	mov	r4, r3
 8007356:	bb5c      	cbnz	r4, 80073b0 <_malloc_r+0x90>
 8007358:	4629      	mov	r1, r5
 800735a:	4638      	mov	r0, r7
 800735c:	f7ff ffc0 	bl	80072e0 <sbrk_aligned>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	4604      	mov	r4, r0
 8007364:	d155      	bne.n	8007412 <_malloc_r+0xf2>
 8007366:	f8d8 4000 	ldr.w	r4, [r8]
 800736a:	4626      	mov	r6, r4
 800736c:	2e00      	cmp	r6, #0
 800736e:	d145      	bne.n	80073fc <_malloc_r+0xdc>
 8007370:	2c00      	cmp	r4, #0
 8007372:	d048      	beq.n	8007406 <_malloc_r+0xe6>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	4631      	mov	r1, r6
 8007378:	4638      	mov	r0, r7
 800737a:	eb04 0903 	add.w	r9, r4, r3
 800737e:	f000 fb5d 	bl	8007a3c <_sbrk_r>
 8007382:	4581      	cmp	r9, r0
 8007384:	d13f      	bne.n	8007406 <_malloc_r+0xe6>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	1a6d      	subs	r5, r5, r1
 800738a:	4629      	mov	r1, r5
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff ffa7 	bl	80072e0 <sbrk_aligned>
 8007392:	3001      	adds	r0, #1
 8007394:	d037      	beq.n	8007406 <_malloc_r+0xe6>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	442b      	add	r3, r5
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	f8d8 3000 	ldr.w	r3, [r8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d038      	beq.n	8007416 <_malloc_r+0xf6>
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	42a2      	cmp	r2, r4
 80073a8:	d12b      	bne.n	8007402 <_malloc_r+0xe2>
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	e00f      	b.n	80073d0 <_malloc_r+0xb0>
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	1b52      	subs	r2, r2, r5
 80073b4:	d41f      	bmi.n	80073f6 <_malloc_r+0xd6>
 80073b6:	2a0b      	cmp	r2, #11
 80073b8:	d917      	bls.n	80073ea <_malloc_r+0xca>
 80073ba:	1961      	adds	r1, r4, r5
 80073bc:	42a3      	cmp	r3, r4
 80073be:	6025      	str	r5, [r4, #0]
 80073c0:	bf18      	it	ne
 80073c2:	6059      	strne	r1, [r3, #4]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	bf08      	it	eq
 80073c8:	f8c8 1000 	streq.w	r1, [r8]
 80073cc:	5162      	str	r2, [r4, r5]
 80073ce:	604b      	str	r3, [r1, #4]
 80073d0:	4638      	mov	r0, r7
 80073d2:	f104 060b 	add.w	r6, r4, #11
 80073d6:	f000 f829 	bl	800742c <__malloc_unlock>
 80073da:	f026 0607 	bic.w	r6, r6, #7
 80073de:	1d23      	adds	r3, r4, #4
 80073e0:	1af2      	subs	r2, r6, r3
 80073e2:	d0ae      	beq.n	8007342 <_malloc_r+0x22>
 80073e4:	1b9b      	subs	r3, r3, r6
 80073e6:	50a3      	str	r3, [r4, r2]
 80073e8:	e7ab      	b.n	8007342 <_malloc_r+0x22>
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	d1dd      	bne.n	80073ac <_malloc_r+0x8c>
 80073f0:	f8c8 2000 	str.w	r2, [r8]
 80073f4:	e7ec      	b.n	80073d0 <_malloc_r+0xb0>
 80073f6:	4623      	mov	r3, r4
 80073f8:	6864      	ldr	r4, [r4, #4]
 80073fa:	e7ac      	b.n	8007356 <_malloc_r+0x36>
 80073fc:	4634      	mov	r4, r6
 80073fe:	6876      	ldr	r6, [r6, #4]
 8007400:	e7b4      	b.n	800736c <_malloc_r+0x4c>
 8007402:	4613      	mov	r3, r2
 8007404:	e7cc      	b.n	80073a0 <_malloc_r+0x80>
 8007406:	230c      	movs	r3, #12
 8007408:	603b      	str	r3, [r7, #0]
 800740a:	4638      	mov	r0, r7
 800740c:	f000 f80e 	bl	800742c <__malloc_unlock>
 8007410:	e797      	b.n	8007342 <_malloc_r+0x22>
 8007412:	6025      	str	r5, [r4, #0]
 8007414:	e7dc      	b.n	80073d0 <_malloc_r+0xb0>
 8007416:	605b      	str	r3, [r3, #4]
 8007418:	deff      	udf	#255	; 0xff
 800741a:	bf00      	nop
 800741c:	200007fc 	.word	0x200007fc

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_lock+0x8>)
 8007422:	f7ff bf0f 	b.w	8007244 <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	200007f8 	.word	0x200007f8

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__malloc_unlock+0x8>)
 800742e:	f7ff bf0a 	b.w	8007246 <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	200007f8 	.word	0x200007f8

08007438 <__ssputs_r>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	688e      	ldr	r6, [r1, #8]
 800743e:	461f      	mov	r7, r3
 8007440:	42be      	cmp	r6, r7
 8007442:	680b      	ldr	r3, [r1, #0]
 8007444:	4682      	mov	sl, r0
 8007446:	460c      	mov	r4, r1
 8007448:	4690      	mov	r8, r2
 800744a:	d82c      	bhi.n	80074a6 <__ssputs_r+0x6e>
 800744c:	898a      	ldrh	r2, [r1, #12]
 800744e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007452:	d026      	beq.n	80074a2 <__ssputs_r+0x6a>
 8007454:	6965      	ldr	r5, [r4, #20]
 8007456:	6909      	ldr	r1, [r1, #16]
 8007458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800745c:	eba3 0901 	sub.w	r9, r3, r1
 8007460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007464:	1c7b      	adds	r3, r7, #1
 8007466:	444b      	add	r3, r9
 8007468:	106d      	asrs	r5, r5, #1
 800746a:	429d      	cmp	r5, r3
 800746c:	bf38      	it	cc
 800746e:	461d      	movcc	r5, r3
 8007470:	0553      	lsls	r3, r2, #21
 8007472:	d527      	bpl.n	80074c4 <__ssputs_r+0x8c>
 8007474:	4629      	mov	r1, r5
 8007476:	f7ff ff53 	bl	8007320 <_malloc_r>
 800747a:	4606      	mov	r6, r0
 800747c:	b360      	cbz	r0, 80074d8 <__ssputs_r+0xa0>
 800747e:	6921      	ldr	r1, [r4, #16]
 8007480:	464a      	mov	r2, r9
 8007482:	f000 faeb 	bl	8007a5c <memcpy>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800748c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	6126      	str	r6, [r4, #16]
 8007494:	6165      	str	r5, [r4, #20]
 8007496:	444e      	add	r6, r9
 8007498:	eba5 0509 	sub.w	r5, r5, r9
 800749c:	6026      	str	r6, [r4, #0]
 800749e:	60a5      	str	r5, [r4, #8]
 80074a0:	463e      	mov	r6, r7
 80074a2:	42be      	cmp	r6, r7
 80074a4:	d900      	bls.n	80074a8 <__ssputs_r+0x70>
 80074a6:	463e      	mov	r6, r7
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	4632      	mov	r2, r6
 80074ac:	4641      	mov	r1, r8
 80074ae:	f000 faab 	bl	8007a08 <memmove>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	1b9b      	subs	r3, r3, r6
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	4433      	add	r3, r6
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2000      	movs	r0, #0
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	462a      	mov	r2, r5
 80074c6:	f000 fad7 	bl	8007a78 <_realloc_r>
 80074ca:	4606      	mov	r6, r0
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1e0      	bne.n	8007492 <__ssputs_r+0x5a>
 80074d0:	6921      	ldr	r1, [r4, #16]
 80074d2:	4650      	mov	r0, sl
 80074d4:	f7ff feb8 	bl	8007248 <_free_r>
 80074d8:	230c      	movs	r3, #12
 80074da:	f8ca 3000 	str.w	r3, [sl]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ea:	e7e9      	b.n	80074c0 <__ssputs_r+0x88>

080074ec <_svfiprintf_r>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	4698      	mov	r8, r3
 80074f2:	898b      	ldrh	r3, [r1, #12]
 80074f4:	061b      	lsls	r3, r3, #24
 80074f6:	b09d      	sub	sp, #116	; 0x74
 80074f8:	4607      	mov	r7, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	d50e      	bpl.n	800751e <_svfiprintf_r+0x32>
 8007500:	690b      	ldr	r3, [r1, #16]
 8007502:	b963      	cbnz	r3, 800751e <_svfiprintf_r+0x32>
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	f7ff ff0b 	bl	8007320 <_malloc_r>
 800750a:	6028      	str	r0, [r5, #0]
 800750c:	6128      	str	r0, [r5, #16]
 800750e:	b920      	cbnz	r0, 800751a <_svfiprintf_r+0x2e>
 8007510:	230c      	movs	r3, #12
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e0d0      	b.n	80076bc <_svfiprintf_r+0x1d0>
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	616b      	str	r3, [r5, #20]
 800751e:	2300      	movs	r3, #0
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	2320      	movs	r3, #32
 8007524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007528:	f8cd 800c 	str.w	r8, [sp, #12]
 800752c:	2330      	movs	r3, #48	; 0x30
 800752e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076d4 <_svfiprintf_r+0x1e8>
 8007532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007536:	f04f 0901 	mov.w	r9, #1
 800753a:	4623      	mov	r3, r4
 800753c:	469a      	mov	sl, r3
 800753e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007542:	b10a      	cbz	r2, 8007548 <_svfiprintf_r+0x5c>
 8007544:	2a25      	cmp	r2, #37	; 0x25
 8007546:	d1f9      	bne.n	800753c <_svfiprintf_r+0x50>
 8007548:	ebba 0b04 	subs.w	fp, sl, r4
 800754c:	d00b      	beq.n	8007566 <_svfiprintf_r+0x7a>
 800754e:	465b      	mov	r3, fp
 8007550:	4622      	mov	r2, r4
 8007552:	4629      	mov	r1, r5
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ff6f 	bl	8007438 <__ssputs_r>
 800755a:	3001      	adds	r0, #1
 800755c:	f000 80a9 	beq.w	80076b2 <_svfiprintf_r+0x1c6>
 8007560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007562:	445a      	add	r2, fp
 8007564:	9209      	str	r2, [sp, #36]	; 0x24
 8007566:	f89a 3000 	ldrb.w	r3, [sl]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80a1 	beq.w	80076b2 <_svfiprintf_r+0x1c6>
 8007570:	2300      	movs	r3, #0
 8007572:	f04f 32ff 	mov.w	r2, #4294967295
 8007576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800757a:	f10a 0a01 	add.w	sl, sl, #1
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	9307      	str	r3, [sp, #28]
 8007582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007586:	931a      	str	r3, [sp, #104]	; 0x68
 8007588:	4654      	mov	r4, sl
 800758a:	2205      	movs	r2, #5
 800758c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007590:	4850      	ldr	r0, [pc, #320]	; (80076d4 <_svfiprintf_r+0x1e8>)
 8007592:	f7f8 fe45 	bl	8000220 <memchr>
 8007596:	9a04      	ldr	r2, [sp, #16]
 8007598:	b9d8      	cbnz	r0, 80075d2 <_svfiprintf_r+0xe6>
 800759a:	06d0      	lsls	r0, r2, #27
 800759c:	bf44      	itt	mi
 800759e:	2320      	movmi	r3, #32
 80075a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a4:	0711      	lsls	r1, r2, #28
 80075a6:	bf44      	itt	mi
 80075a8:	232b      	movmi	r3, #43	; 0x2b
 80075aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ae:	f89a 3000 	ldrb.w	r3, [sl]
 80075b2:	2b2a      	cmp	r3, #42	; 0x2a
 80075b4:	d015      	beq.n	80075e2 <_svfiprintf_r+0xf6>
 80075b6:	9a07      	ldr	r2, [sp, #28]
 80075b8:	4654      	mov	r4, sl
 80075ba:	2000      	movs	r0, #0
 80075bc:	f04f 0c0a 	mov.w	ip, #10
 80075c0:	4621      	mov	r1, r4
 80075c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c6:	3b30      	subs	r3, #48	; 0x30
 80075c8:	2b09      	cmp	r3, #9
 80075ca:	d94d      	bls.n	8007668 <_svfiprintf_r+0x17c>
 80075cc:	b1b0      	cbz	r0, 80075fc <_svfiprintf_r+0x110>
 80075ce:	9207      	str	r2, [sp, #28]
 80075d0:	e014      	b.n	80075fc <_svfiprintf_r+0x110>
 80075d2:	eba0 0308 	sub.w	r3, r0, r8
 80075d6:	fa09 f303 	lsl.w	r3, r9, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	46a2      	mov	sl, r4
 80075e0:	e7d2      	b.n	8007588 <_svfiprintf_r+0x9c>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	1d19      	adds	r1, r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9103      	str	r1, [sp, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfbb      	ittet	lt
 80075ee:	425b      	neglt	r3, r3
 80075f0:	f042 0202 	orrlt.w	r2, r2, #2
 80075f4:	9307      	strge	r3, [sp, #28]
 80075f6:	9307      	strlt	r3, [sp, #28]
 80075f8:	bfb8      	it	lt
 80075fa:	9204      	strlt	r2, [sp, #16]
 80075fc:	7823      	ldrb	r3, [r4, #0]
 80075fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007600:	d10c      	bne.n	800761c <_svfiprintf_r+0x130>
 8007602:	7863      	ldrb	r3, [r4, #1]
 8007604:	2b2a      	cmp	r3, #42	; 0x2a
 8007606:	d134      	bne.n	8007672 <_svfiprintf_r+0x186>
 8007608:	9b03      	ldr	r3, [sp, #12]
 800760a:	1d1a      	adds	r2, r3, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	9203      	str	r2, [sp, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfb8      	it	lt
 8007614:	f04f 33ff 	movlt.w	r3, #4294967295
 8007618:	3402      	adds	r4, #2
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80076e4 <_svfiprintf_r+0x1f8>
 8007620:	7821      	ldrb	r1, [r4, #0]
 8007622:	2203      	movs	r2, #3
 8007624:	4650      	mov	r0, sl
 8007626:	f7f8 fdfb 	bl	8000220 <memchr>
 800762a:	b138      	cbz	r0, 800763c <_svfiprintf_r+0x150>
 800762c:	9b04      	ldr	r3, [sp, #16]
 800762e:	eba0 000a 	sub.w	r0, r0, sl
 8007632:	2240      	movs	r2, #64	; 0x40
 8007634:	4082      	lsls	r2, r0
 8007636:	4313      	orrs	r3, r2
 8007638:	3401      	adds	r4, #1
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	4825      	ldr	r0, [pc, #148]	; (80076d8 <_svfiprintf_r+0x1ec>)
 8007642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007646:	2206      	movs	r2, #6
 8007648:	f7f8 fdea 	bl	8000220 <memchr>
 800764c:	2800      	cmp	r0, #0
 800764e:	d038      	beq.n	80076c2 <_svfiprintf_r+0x1d6>
 8007650:	4b22      	ldr	r3, [pc, #136]	; (80076dc <_svfiprintf_r+0x1f0>)
 8007652:	bb1b      	cbnz	r3, 800769c <_svfiprintf_r+0x1b0>
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	3307      	adds	r3, #7
 8007658:	f023 0307 	bic.w	r3, r3, #7
 800765c:	3308      	adds	r3, #8
 800765e:	9303      	str	r3, [sp, #12]
 8007660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007662:	4433      	add	r3, r6
 8007664:	9309      	str	r3, [sp, #36]	; 0x24
 8007666:	e768      	b.n	800753a <_svfiprintf_r+0x4e>
 8007668:	fb0c 3202 	mla	r2, ip, r2, r3
 800766c:	460c      	mov	r4, r1
 800766e:	2001      	movs	r0, #1
 8007670:	e7a6      	b.n	80075c0 <_svfiprintf_r+0xd4>
 8007672:	2300      	movs	r3, #0
 8007674:	3401      	adds	r4, #1
 8007676:	9305      	str	r3, [sp, #20]
 8007678:	4619      	mov	r1, r3
 800767a:	f04f 0c0a 	mov.w	ip, #10
 800767e:	4620      	mov	r0, r4
 8007680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007684:	3a30      	subs	r2, #48	; 0x30
 8007686:	2a09      	cmp	r2, #9
 8007688:	d903      	bls.n	8007692 <_svfiprintf_r+0x1a6>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0c6      	beq.n	800761c <_svfiprintf_r+0x130>
 800768e:	9105      	str	r1, [sp, #20]
 8007690:	e7c4      	b.n	800761c <_svfiprintf_r+0x130>
 8007692:	fb0c 2101 	mla	r1, ip, r1, r2
 8007696:	4604      	mov	r4, r0
 8007698:	2301      	movs	r3, #1
 800769a:	e7f0      	b.n	800767e <_svfiprintf_r+0x192>
 800769c:	ab03      	add	r3, sp, #12
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	462a      	mov	r2, r5
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <_svfiprintf_r+0x1f4>)
 80076a4:	a904      	add	r1, sp, #16
 80076a6:	4638      	mov	r0, r7
 80076a8:	f3af 8000 	nop.w
 80076ac:	1c42      	adds	r2, r0, #1
 80076ae:	4606      	mov	r6, r0
 80076b0:	d1d6      	bne.n	8007660 <_svfiprintf_r+0x174>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	065b      	lsls	r3, r3, #25
 80076b6:	f53f af2d 	bmi.w	8007514 <_svfiprintf_r+0x28>
 80076ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076bc:	b01d      	add	sp, #116	; 0x74
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c2:	ab03      	add	r3, sp, #12
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	462a      	mov	r2, r5
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <_svfiprintf_r+0x1f4>)
 80076ca:	a904      	add	r1, sp, #16
 80076cc:	4638      	mov	r0, r7
 80076ce:	f000 f879 	bl	80077c4 <_printf_i>
 80076d2:	e7eb      	b.n	80076ac <_svfiprintf_r+0x1c0>
 80076d4:	08007c20 	.word	0x08007c20
 80076d8:	08007c2a 	.word	0x08007c2a
 80076dc:	00000000 	.word	0x00000000
 80076e0:	08007439 	.word	0x08007439
 80076e4:	08007c26 	.word	0x08007c26

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4699      	mov	r9, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bfb8      	it	lt
 80076fc:	4613      	movlt	r3, r2
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007704:	4607      	mov	r7, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc26      	bgt.n	800777e <_printf_common+0x96>
 8007730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007734:	1e13      	subs	r3, r2, #0
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d42b      	bmi.n	8007798 <_printf_common+0xb0>
 8007740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007744:	4649      	mov	r1, r9
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d01e      	beq.n	800778c <_printf_common+0xa4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	f003 0306 	and.w	r3, r3, #6
 8007756:	2b04      	cmp	r3, #4
 8007758:	bf02      	ittt	eq
 800775a:	68e5      	ldreq	r5, [r4, #12]
 800775c:	6833      	ldreq	r3, [r6, #0]
 800775e:	1aed      	subeq	r5, r5, r3
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	bf0c      	ite	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	2500      	movne	r5, #0
 800776a:	4293      	cmp	r3, r2
 800776c:	bfc4      	itt	gt
 800776e:	1a9b      	subgt	r3, r3, r2
 8007770:	18ed      	addgt	r5, r5, r3
 8007772:	2600      	movs	r6, #0
 8007774:	341a      	adds	r4, #26
 8007776:	42b5      	cmp	r5, r6
 8007778:	d11a      	bne.n	80077b0 <_printf_common+0xc8>
 800777a:	2000      	movs	r0, #0
 800777c:	e008      	b.n	8007790 <_printf_common+0xa8>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4649      	mov	r1, r9
 8007784:	4638      	mov	r0, r7
 8007786:	47c0      	blx	r8
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xac>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c6      	b.n	8007726 <_printf_common+0x3e>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	; 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c7      	b.n	8007740 <_printf_common+0x58>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4649      	mov	r1, r9
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xa4>
 80077be:	3601      	adds	r6, #1
 80077c0:	e7d9      	b.n	8007776 <_printf_common+0x8e>
	...

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	7e0f      	ldrb	r7, [r1, #24]
 80077ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077cc:	2f78      	cmp	r7, #120	; 0x78
 80077ce:	4691      	mov	r9, r2
 80077d0:	4680      	mov	r8, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	469a      	mov	sl, r3
 80077d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	; 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d4 	beq.w	800798e <_printf_i+0x1ca>
 80077e6:	2f58      	cmp	r7, #88	; 0x58
 80077e8:	f000 80c0 	beq.w	800796c <_printf_i+0x1a8>
 80077ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a101      	add	r1, pc, #4	; (adr r1, 8007804 <_printf_i+0x40>)
 8007800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	08007975 	.word	0x08007975
 8007834:	0800789d 	.word	0x0800789d
 8007838:	0800792f 	.word	0x0800792f
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	08007997 	.word	0x08007997
 8007848:	080077ed 	.word	0x080077ed
 800784c:	0800789d 	.word	0x0800789d
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007937 	.word	0x08007937
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	602a      	str	r2, [r5, #0]
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e09f      	b.n	80079b0 <_printf_i+0x1ec>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	0607      	lsls	r7, r0, #24
 8007876:	f103 0104 	add.w	r1, r3, #4
 800787a:	6029      	str	r1, [r5, #0]
 800787c:	d501      	bpl.n	8007882 <_printf_i+0xbe>
 800787e:	681e      	ldr	r6, [r3, #0]
 8007880:	e003      	b.n	800788a <_printf_i+0xc6>
 8007882:	0646      	lsls	r6, r0, #25
 8007884:	d5fb      	bpl.n	800787e <_printf_i+0xba>
 8007886:	f9b3 6000 	ldrsh.w	r6, [r3]
 800788a:	2e00      	cmp	r6, #0
 800788c:	da03      	bge.n	8007896 <_printf_i+0xd2>
 800788e:	232d      	movs	r3, #45	; 0x2d
 8007890:	4276      	negs	r6, r6
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007896:	485a      	ldr	r0, [pc, #360]	; (8007a00 <_printf_i+0x23c>)
 8007898:	230a      	movs	r3, #10
 800789a:	e012      	b.n	80078c2 <_printf_i+0xfe>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	6820      	ldr	r0, [r4, #0]
 80078a0:	1d19      	adds	r1, r3, #4
 80078a2:	6029      	str	r1, [r5, #0]
 80078a4:	0605      	lsls	r5, r0, #24
 80078a6:	d501      	bpl.n	80078ac <_printf_i+0xe8>
 80078a8:	681e      	ldr	r6, [r3, #0]
 80078aa:	e002      	b.n	80078b2 <_printf_i+0xee>
 80078ac:	0641      	lsls	r1, r0, #25
 80078ae:	d5fb      	bpl.n	80078a8 <_printf_i+0xe4>
 80078b0:	881e      	ldrh	r6, [r3, #0]
 80078b2:	4853      	ldr	r0, [pc, #332]	; (8007a00 <_printf_i+0x23c>)
 80078b4:	2f6f      	cmp	r7, #111	; 0x6f
 80078b6:	bf0c      	ite	eq
 80078b8:	2308      	moveq	r3, #8
 80078ba:	230a      	movne	r3, #10
 80078bc:	2100      	movs	r1, #0
 80078be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078c2:	6865      	ldr	r5, [r4, #4]
 80078c4:	60a5      	str	r5, [r4, #8]
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	bfa2      	ittt	ge
 80078ca:	6821      	ldrge	r1, [r4, #0]
 80078cc:	f021 0104 	bicge.w	r1, r1, #4
 80078d0:	6021      	strge	r1, [r4, #0]
 80078d2:	b90e      	cbnz	r6, 80078d8 <_printf_i+0x114>
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	d04b      	beq.n	8007970 <_printf_i+0x1ac>
 80078d8:	4615      	mov	r5, r2
 80078da:	fbb6 f1f3 	udiv	r1, r6, r3
 80078de:	fb03 6711 	mls	r7, r3, r1, r6
 80078e2:	5dc7      	ldrb	r7, [r0, r7]
 80078e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078e8:	4637      	mov	r7, r6
 80078ea:	42bb      	cmp	r3, r7
 80078ec:	460e      	mov	r6, r1
 80078ee:	d9f4      	bls.n	80078da <_printf_i+0x116>
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d10b      	bne.n	800790c <_printf_i+0x148>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07de      	lsls	r6, r3, #31
 80078f8:	d508      	bpl.n	800790c <_printf_i+0x148>
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	6861      	ldr	r1, [r4, #4]
 80078fe:	4299      	cmp	r1, r3
 8007900:	bfde      	ittt	le
 8007902:	2330      	movle	r3, #48	; 0x30
 8007904:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007908:	f105 35ff 	addle.w	r5, r5, #4294967295
 800790c:	1b52      	subs	r2, r2, r5
 800790e:	6122      	str	r2, [r4, #16]
 8007910:	f8cd a000 	str.w	sl, [sp]
 8007914:	464b      	mov	r3, r9
 8007916:	aa03      	add	r2, sp, #12
 8007918:	4621      	mov	r1, r4
 800791a:	4640      	mov	r0, r8
 800791c:	f7ff fee4 	bl	80076e8 <_printf_common>
 8007920:	3001      	adds	r0, #1
 8007922:	d14a      	bne.n	80079ba <_printf_i+0x1f6>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	b004      	add	sp, #16
 800792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f043 0320 	orr.w	r3, r3, #32
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	4833      	ldr	r0, [pc, #204]	; (8007a04 <_printf_i+0x240>)
 8007938:	2778      	movs	r7, #120	; 0x78
 800793a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	6829      	ldr	r1, [r5, #0]
 8007942:	061f      	lsls	r7, r3, #24
 8007944:	f851 6b04 	ldr.w	r6, [r1], #4
 8007948:	d402      	bmi.n	8007950 <_printf_i+0x18c>
 800794a:	065f      	lsls	r7, r3, #25
 800794c:	bf48      	it	mi
 800794e:	b2b6      	uxthmi	r6, r6
 8007950:	07df      	lsls	r7, r3, #31
 8007952:	bf48      	it	mi
 8007954:	f043 0320 	orrmi.w	r3, r3, #32
 8007958:	6029      	str	r1, [r5, #0]
 800795a:	bf48      	it	mi
 800795c:	6023      	strmi	r3, [r4, #0]
 800795e:	b91e      	cbnz	r6, 8007968 <_printf_i+0x1a4>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	f023 0320 	bic.w	r3, r3, #32
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	2310      	movs	r3, #16
 800796a:	e7a7      	b.n	80078bc <_printf_i+0xf8>
 800796c:	4824      	ldr	r0, [pc, #144]	; (8007a00 <_printf_i+0x23c>)
 800796e:	e7e4      	b.n	800793a <_printf_i+0x176>
 8007970:	4615      	mov	r5, r2
 8007972:	e7bd      	b.n	80078f0 <_printf_i+0x12c>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	6826      	ldr	r6, [r4, #0]
 8007978:	6961      	ldr	r1, [r4, #20]
 800797a:	1d18      	adds	r0, r3, #4
 800797c:	6028      	str	r0, [r5, #0]
 800797e:	0635      	lsls	r5, r6, #24
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	d501      	bpl.n	8007988 <_printf_i+0x1c4>
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	e002      	b.n	800798e <_printf_i+0x1ca>
 8007988:	0670      	lsls	r0, r6, #25
 800798a:	d5fb      	bpl.n	8007984 <_printf_i+0x1c0>
 800798c:	8019      	strh	r1, [r3, #0]
 800798e:	2300      	movs	r3, #0
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	4615      	mov	r5, r2
 8007994:	e7bc      	b.n	8007910 <_printf_i+0x14c>
 8007996:	682b      	ldr	r3, [r5, #0]
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	681d      	ldr	r5, [r3, #0]
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	2100      	movs	r1, #0
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7f8 fc3c 	bl	8000220 <memchr>
 80079a8:	b108      	cbz	r0, 80079ae <_printf_i+0x1ea>
 80079aa:	1b40      	subs	r0, r0, r5
 80079ac:	6060      	str	r0, [r4, #4]
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	2300      	movs	r3, #0
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b8:	e7aa      	b.n	8007910 <_printf_i+0x14c>
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	462a      	mov	r2, r5
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	47d0      	blx	sl
 80079c4:	3001      	adds	r0, #1
 80079c6:	d0ad      	beq.n	8007924 <_printf_i+0x160>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	079b      	lsls	r3, r3, #30
 80079cc:	d413      	bmi.n	80079f6 <_printf_i+0x232>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	4298      	cmp	r0, r3
 80079d4:	bfb8      	it	lt
 80079d6:	4618      	movlt	r0, r3
 80079d8:	e7a6      	b.n	8007928 <_printf_i+0x164>
 80079da:	2301      	movs	r3, #1
 80079dc:	4632      	mov	r2, r6
 80079de:	4649      	mov	r1, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	47d0      	blx	sl
 80079e4:	3001      	adds	r0, #1
 80079e6:	d09d      	beq.n	8007924 <_printf_i+0x160>
 80079e8:	3501      	adds	r5, #1
 80079ea:	68e3      	ldr	r3, [r4, #12]
 80079ec:	9903      	ldr	r1, [sp, #12]
 80079ee:	1a5b      	subs	r3, r3, r1
 80079f0:	42ab      	cmp	r3, r5
 80079f2:	dcf2      	bgt.n	80079da <_printf_i+0x216>
 80079f4:	e7eb      	b.n	80079ce <_printf_i+0x20a>
 80079f6:	2500      	movs	r5, #0
 80079f8:	f104 0619 	add.w	r6, r4, #25
 80079fc:	e7f5      	b.n	80079ea <_printf_i+0x226>
 80079fe:	bf00      	nop
 8007a00:	08007c31 	.word	0x08007c31
 8007a04:	08007c42 	.word	0x08007c42

08007a08 <memmove>:
 8007a08:	4288      	cmp	r0, r1
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	eb01 0402 	add.w	r4, r1, r2
 8007a10:	d902      	bls.n	8007a18 <memmove+0x10>
 8007a12:	4284      	cmp	r4, r0
 8007a14:	4623      	mov	r3, r4
 8007a16:	d807      	bhi.n	8007a28 <memmove+0x20>
 8007a18:	1e43      	subs	r3, r0, #1
 8007a1a:	42a1      	cmp	r1, r4
 8007a1c:	d008      	beq.n	8007a30 <memmove+0x28>
 8007a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a26:	e7f8      	b.n	8007a1a <memmove+0x12>
 8007a28:	4402      	add	r2, r0
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	d100      	bne.n	8007a32 <memmove+0x2a>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a3a:	e7f7      	b.n	8007a2c <memmove+0x24>

08007a3c <_sbrk_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d06      	ldr	r5, [pc, #24]	; (8007a58 <_sbrk_r+0x1c>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7fa f90e 	bl	8001c68 <_sbrk>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_sbrk_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_sbrk_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	200007f4 	.word	0x200007f4

08007a5c <memcpy>:
 8007a5c:	440a      	add	r2, r1
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a64:	d100      	bne.n	8007a68 <memcpy+0xc>
 8007a66:	4770      	bx	lr
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a72:	4291      	cmp	r1, r2
 8007a74:	d1f9      	bne.n	8007a6a <memcpy+0xe>
 8007a76:	bd10      	pop	{r4, pc}

08007a78 <_realloc_r>:
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4614      	mov	r4, r2
 8007a80:	460e      	mov	r6, r1
 8007a82:	b921      	cbnz	r1, 8007a8e <_realloc_r+0x16>
 8007a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a88:	4611      	mov	r1, r2
 8007a8a:	f7ff bc49 	b.w	8007320 <_malloc_r>
 8007a8e:	b92a      	cbnz	r2, 8007a9c <_realloc_r+0x24>
 8007a90:	f7ff fbda 	bl	8007248 <_free_r>
 8007a94:	4625      	mov	r5, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9c:	f000 f81b 	bl	8007ad6 <_malloc_usable_size_r>
 8007aa0:	4284      	cmp	r4, r0
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	d802      	bhi.n	8007aac <_realloc_r+0x34>
 8007aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007aaa:	d812      	bhi.n	8007ad2 <_realloc_r+0x5a>
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7ff fc36 	bl	8007320 <_malloc_r>
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0ed      	beq.n	8007a96 <_realloc_r+0x1e>
 8007aba:	42bc      	cmp	r4, r7
 8007abc:	4622      	mov	r2, r4
 8007abe:	4631      	mov	r1, r6
 8007ac0:	bf28      	it	cs
 8007ac2:	463a      	movcs	r2, r7
 8007ac4:	f7ff ffca 	bl	8007a5c <memcpy>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fbbc 	bl	8007248 <_free_r>
 8007ad0:	e7e1      	b.n	8007a96 <_realloc_r+0x1e>
 8007ad2:	4635      	mov	r5, r6
 8007ad4:	e7df      	b.n	8007a96 <_realloc_r+0x1e>

08007ad6 <_malloc_usable_size_r>:
 8007ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ada:	1f18      	subs	r0, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bfbc      	itt	lt
 8007ae0:	580b      	ldrlt	r3, [r1, r0]
 8007ae2:	18c0      	addlt	r0, r0, r3
 8007ae4:	4770      	bx	lr
	...

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
