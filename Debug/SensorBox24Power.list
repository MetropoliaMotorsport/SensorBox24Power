
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080067a0  080067a0  000077a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c0  080067c0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  080067c0  080067c0  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067c0  080067c0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c0  080067c0  000077c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  2000000c  080067d4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  080067d4  00008604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e8  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1c  00000000  00000000  0001d724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00020240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f63  00000000  00000000  00021640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020764  00000000  00000000  000225a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001504d  00000000  00000000  00042d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da4e0  00000000  00000000  00057d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d8  00000000  00000000  00132278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00137850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006788 	.word	0x08006788

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006788 	.word	0x08006788

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim, uint16_t value){
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
	  TIM_OC_InitTypeDef sConfigOC;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000224:	2360      	movs	r3, #96	@ 0x60
 8000226:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = value;
 8000228:	887b      	ldrh	r3, [r7, #2]
 800022a:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f005 fa8f 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f005 f83b 	bl	80052c0 <HAL_TIM_PWM_Start>
}
 800024a:	bf00      	nop
 800024c:	3728      	adds	r7, #40	@ 0x28
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <set_pwm_freq>:

void set_pwm_freq(TIM_HandleTypeDef *htim, uint16_t value){
 8000252:	b480      	push	{r7}
 8000254:	b083      	sub	sp, #12
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	460b      	mov	r3, r1
 800025c:	807b      	strh	r3, [r7, #2]

}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 800026e:	f000 f803 	bl	8000278 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <Config_1>:

void Config_1(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	CAN_ID = 3;
 800027c:	4b60      	ldr	r3, [pc, #384]	@ (8000400 <Config_1+0x188>)
 800027e:	2203      	movs	r2, #3
 8000280:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 8000282:	4b60      	ldr	r3, [pc, #384]	@ (8000404 <Config_1+0x18c>)
 8000284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000288:	801a      	strh	r2, [r3, #0]

	//OUTPUT 1 in mA
	WC[0] = 1900;
 800028a:	4b5f      	ldr	r3, [pc, #380]	@ (8000408 <Config_1+0x190>)
 800028c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000290:	801a      	strh	r2, [r3, #0]
	OC[0] = 2050;
 8000292:	4b5e      	ldr	r3, [pc, #376]	@ (800040c <Config_1+0x194>)
 8000294:	f640 0202 	movw	r2, #2050	@ 0x802
 8000298:	801a      	strh	r2, [r3, #0]
	UC[0] = 1800;
 800029a:	4b5d      	ldr	r3, [pc, #372]	@ (8000410 <Config_1+0x198>)
 800029c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002a0:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC[1] = 1900;
 80002a2:	4b59      	ldr	r3, [pc, #356]	@ (8000408 <Config_1+0x190>)
 80002a4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002a8:	805a      	strh	r2, [r3, #2]
	OC[1] = 2050;
 80002aa:	4b58      	ldr	r3, [pc, #352]	@ (800040c <Config_1+0x194>)
 80002ac:	f640 0202 	movw	r2, #2050	@ 0x802
 80002b0:	805a      	strh	r2, [r3, #2]
	UC[1] = 1800;
 80002b2:	4b57      	ldr	r3, [pc, #348]	@ (8000410 <Config_1+0x198>)
 80002b4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002b8:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	WC[2] = 1900;
 80002ba:	4b53      	ldr	r3, [pc, #332]	@ (8000408 <Config_1+0x190>)
 80002bc:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002c0:	809a      	strh	r2, [r3, #4]
	OC[2] = 2050;
 80002c2:	4b52      	ldr	r3, [pc, #328]	@ (800040c <Config_1+0x194>)
 80002c4:	f640 0202 	movw	r2, #2050	@ 0x802
 80002c8:	809a      	strh	r2, [r3, #4]
	UC[2] = 1800;
 80002ca:	4b51      	ldr	r3, [pc, #324]	@ (8000410 <Config_1+0x198>)
 80002cc:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002d0:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	WC[3] = 1900;
 80002d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000408 <Config_1+0x190>)
 80002d4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002d8:	80da      	strh	r2, [r3, #6]
	OC[3] = 2050;
 80002da:	4b4c      	ldr	r3, [pc, #304]	@ (800040c <Config_1+0x194>)
 80002dc:	f640 0202 	movw	r2, #2050	@ 0x802
 80002e0:	80da      	strh	r2, [r3, #6]
	UC[3] = 1800;
 80002e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000410 <Config_1+0x198>)
 80002e4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002e8:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	WC[4] = 1900;
 80002ea:	4b47      	ldr	r3, [pc, #284]	@ (8000408 <Config_1+0x190>)
 80002ec:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002f0:	811a      	strh	r2, [r3, #8]
	OC[4] = 2050;
 80002f2:	4b46      	ldr	r3, [pc, #280]	@ (800040c <Config_1+0x194>)
 80002f4:	f640 0202 	movw	r2, #2050	@ 0x802
 80002f8:	811a      	strh	r2, [r3, #8]
	UC[4] = 1800;
 80002fa:	4b45      	ldr	r3, [pc, #276]	@ (8000410 <Config_1+0x198>)
 80002fc:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000300:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	WC[5] = 1900;
 8000302:	4b41      	ldr	r3, [pc, #260]	@ (8000408 <Config_1+0x190>)
 8000304:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000308:	815a      	strh	r2, [r3, #10]
	OC[5] = 2050;
 800030a:	4b40      	ldr	r3, [pc, #256]	@ (800040c <Config_1+0x194>)
 800030c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000310:	815a      	strh	r2, [r3, #10]
	UC[5] = 1800;
 8000312:	4b3f      	ldr	r3, [pc, #252]	@ (8000410 <Config_1+0x198>)
 8000314:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000318:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	WC[6] = 1900;
 800031a:	4b3b      	ldr	r3, [pc, #236]	@ (8000408 <Config_1+0x190>)
 800031c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000320:	819a      	strh	r2, [r3, #12]
	OC[6] = 2050;
 8000322:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <Config_1+0x194>)
 8000324:	f640 0202 	movw	r2, #2050	@ 0x802
 8000328:	819a      	strh	r2, [r3, #12]
	UC[6] = 1800;
 800032a:	4b39      	ldr	r3, [pc, #228]	@ (8000410 <Config_1+0x198>)
 800032c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000330:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	WC[7] = 1900;
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <Config_1+0x190>)
 8000334:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000338:	81da      	strh	r2, [r3, #14]
	OC[7] = 2050;
 800033a:	4b34      	ldr	r3, [pc, #208]	@ (800040c <Config_1+0x194>)
 800033c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000340:	81da      	strh	r2, [r3, #14]
	UC[7] = 1800;
 8000342:	4b33      	ldr	r3, [pc, #204]	@ (8000410 <Config_1+0x198>)
 8000344:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000348:	81da      	strh	r2, [r3, #14]

	Default_Switch_State = 0b00011011; //each bit represent one output [8,7,6,5,4,3,2,1]
 800034a:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <Config_1+0x19c>)
 800034c:	221b      	movs	r2, #27
 800034e:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <Config_1+0x1a0>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 8000356:	4b31      	ldr	r3, [pc, #196]	@ (800041c <Config_1+0x1a4>)
 8000358:	2200      	movs	r2, #0
 800035a:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 800035c:	4b2f      	ldr	r3, [pc, #188]	@ (800041c <Config_1+0x1a4>)
 800035e:	2200      	movs	r2, #0
 8000360:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 8000362:	4b2d      	ldr	r3, [pc, #180]	@ (8000418 <Config_1+0x1a0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	089b      	lsrs	r3, r3, #2
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d00c      	beq.n	8000388 <Config_1+0x110>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <Config_1+0x1a4>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	2364      	movs	r3, #100	@ 0x64
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	4a29      	ldr	r2, [pc, #164]	@ (8000420 <Config_1+0x1a8>)
 800037c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000380:	b29a      	uxth	r2, r3
 8000382:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <Config_1+0x1ac>)
 8000384:	801a      	strh	r2, [r3, #0]
 8000386:	e002      	b.n	800038e <Config_1+0x116>
	}else{
		PWM_speed[0] = 0;
 8000388:	4b26      	ldr	r3, [pc, #152]	@ (8000424 <Config_1+0x1ac>)
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 800038e:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <Config_1+0x1a0>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	085b      	lsrs	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d00c      	beq.n	80003b4 <Config_1+0x13c>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 800039a:	4b20      	ldr	r3, [pc, #128]	@ (800041c <Config_1+0x1a4>)
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	461a      	mov	r2, r3
 80003a0:	2364      	movs	r3, #100	@ 0x64
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <Config_1+0x1a8>)
 80003a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <Config_1+0x1ac>)
 80003b0:	805a      	strh	r2, [r3, #2]
 80003b2:	e002      	b.n	80003ba <Config_1+0x142>
	}else{
		PWM_speed[1] = 0;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <Config_1+0x1ac>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <Config_1+0x1b0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <Config_1+0x1b0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	805a      	strh	r2, [r3, #2]

	set_pwm_duty_cycle(&htim1,PWM_width[0]);
 80003c6:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <Config_1+0x1b0>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4817      	ldr	r0, [pc, #92]	@ (800042c <Config_1+0x1b4>)
 80003ce:	f7ff ff23 	bl	8000218 <set_pwm_duty_cycle>
	set_pwm_duty_cycle(&htim2,PWM_width[1]);
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <Config_1+0x1b0>)
 80003d4:	885b      	ldrh	r3, [r3, #2]
 80003d6:	4619      	mov	r1, r3
 80003d8:	4815      	ldr	r0, [pc, #84]	@ (8000430 <Config_1+0x1b8>)
 80003da:	f7ff ff1d 	bl	8000218 <set_pwm_duty_cycle>

	set_pwm_freq(&htim1,PWM_speed[0]);
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <Config_1+0x1ac>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	4619      	mov	r1, r3
 80003e4:	4811      	ldr	r0, [pc, #68]	@ (800042c <Config_1+0x1b4>)
 80003e6:	f7ff ff34 	bl	8000252 <set_pwm_freq>
	set_pwm_freq(&htim2,PWM_speed[1]);
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <Config_1+0x1ac>)
 80003ec:	885b      	ldrh	r3, [r3, #2]
 80003ee:	4619      	mov	r1, r3
 80003f0:	480f      	ldr	r0, [pc, #60]	@ (8000430 <Config_1+0x1b8>)
 80003f2:	f7ff ff2e 	bl	8000252 <set_pwm_freq>

	output();
 80003f6:	f000 f88f 	bl	8000518 <output>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200005f8 	.word	0x200005f8
 8000404:	200005fa 	.word	0x200005fa
 8000408:	200005b4 	.word	0x200005b4
 800040c:	200005c4 	.word	0x200005c4
 8000410:	200005d4 	.word	0x200005d4
 8000414:	200005ea 	.word	0x200005ea
 8000418:	200005eb 	.word	0x200005eb
 800041c:	200005ec 	.word	0x200005ec
 8000420:	08f0d180 	.word	0x08f0d180
 8000424:	200005f4 	.word	0x200005f4
 8000428:	200005f0 	.word	0x200005f0
 800042c:	20000190 	.word	0x20000190
 8000430:	200001dc 	.word	0x200001dc

08000434 <CAN_switch_state>:
void CanSend(uint8_t *TxData){
	TxHeader.Identifier = CAN_ID;
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){ Error_Handler(); }
}

void CAN_switch_state(){
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
	TxHeader.Identifier = CAN_ID;
 800043a:	4b32      	ldr	r3, [pc, #200]	@ (8000504 <CAN_switch_state+0xd0>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b31      	ldr	r3, [pc, #196]	@ (8000508 <CAN_switch_state+0xd4>)
 8000442:	601a      	str	r2, [r3, #0]
	TxData[0] = 11;
 8000444:	4b31      	ldr	r3, [pc, #196]	@ (800050c <CAN_switch_state+0xd8>)
 8000446:	220b      	movs	r2, #11
 8000448:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 800044a:	2301      	movs	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	e013      	b.n	8000478 <CAN_switch_state+0x44>
		TxData[i] = check_bit(Default_Switch_State,i-1);
 8000450:	4b2f      	ldr	r3, [pc, #188]	@ (8000510 <CAN_switch_state+0xdc>)
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	3b01      	subs	r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	4610      	mov	r0, r2
 8000460:	f000 fb56 	bl	8000b10 <check_bit>
 8000464:	4603      	mov	r3, r0
 8000466:	4619      	mov	r1, r3
 8000468:	4a28      	ldr	r2, [pc, #160]	@ (800050c <CAN_switch_state+0xd8>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	460a      	mov	r2, r1
 8000470:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b04      	cmp	r3, #4
 800047c:	dde8      	ble.n	8000450 <CAN_switch_state+0x1c>
	}
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){ Error_Handler(); }
 800047e:	e001      	b.n	8000484 <CAN_switch_state+0x50>
 8000480:	f001 f82a 	bl	80014d8 <Error_Handler>
 8000484:	4823      	ldr	r0, [pc, #140]	@ (8000514 <CAN_switch_state+0xe0>)
 8000486:	f003 faf9 	bl	8003a7c <HAL_FDCAN_GetTxFifoFreeLevel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d007      	beq.n	80004a0 <CAN_switch_state+0x6c>
 8000490:	4a1e      	ldr	r2, [pc, #120]	@ (800050c <CAN_switch_state+0xd8>)
 8000492:	491d      	ldr	r1, [pc, #116]	@ (8000508 <CAN_switch_state+0xd4>)
 8000494:	481f      	ldr	r0, [pc, #124]	@ (8000514 <CAN_switch_state+0xe0>)
 8000496:	f003 faad 	bl	80039f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1ef      	bne.n	8000480 <CAN_switch_state+0x4c>
	TxData[0] = 12;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <CAN_switch_state+0xd8>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 80004a6:	2301      	movs	r3, #1
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	e013      	b.n	80004d4 <CAN_switch_state+0xa0>
		TxData[i] = check_bit(Default_Switch_State,i+3);
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <CAN_switch_state+0xdc>)
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3303      	adds	r3, #3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	4610      	mov	r0, r2
 80004bc:	f000 fb28 	bl	8000b10 <check_bit>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4619      	mov	r1, r3
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <CAN_switch_state+0xd8>)
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	460a      	mov	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	dde8      	ble.n	80004ac <CAN_switch_state+0x78>
	}
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){ Error_Handler(); }
 80004da:	e001      	b.n	80004e0 <CAN_switch_state+0xac>
 80004dc:	f000 fffc 	bl	80014d8 <Error_Handler>
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <CAN_switch_state+0xe0>)
 80004e2:	f003 facb 	bl	8003a7c <HAL_FDCAN_GetTxFifoFreeLevel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d007      	beq.n	80004fc <CAN_switch_state+0xc8>
 80004ec:	4a07      	ldr	r2, [pc, #28]	@ (800050c <CAN_switch_state+0xd8>)
 80004ee:	4906      	ldr	r1, [pc, #24]	@ (8000508 <CAN_switch_state+0xd4>)
 80004f0:	4808      	ldr	r0, [pc, #32]	@ (8000514 <CAN_switch_state+0xe0>)
 80004f2:	f003 fa7f 	bl	80039f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1ef      	bne.n	80004dc <CAN_switch_state+0xa8>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200005f8 	.word	0x200005f8
 8000508:	2000016c 	.word	0x2000016c
 800050c:	20000028 	.word	0x20000028
 8000510:	200005ea 	.word	0x200005ea
 8000514:	20000108 	.word	0x20000108

08000518 <output>:



void output(){
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e069      	b.n	8000600 <output+0xe8>
		bit = check_bit(Default_Switch_State, i);
 800052c:	4b38      	ldr	r3, [pc, #224]	@ (8000610 <output+0xf8>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	79fa      	ldrb	r2, [r7, #7]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 faeb 	bl	8000b10 <check_bit>
 800053a:	4603      	mov	r3, r0
 800053c:	71bb      	strb	r3, [r7, #6]
		switch(i){
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b07      	cmp	r3, #7
 8000542:	d857      	bhi.n	80005f4 <output+0xdc>
 8000544:	a201      	add	r2, pc, #4	@ (adr r2, 800054c <output+0x34>)
 8000546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054a:	bf00      	nop
 800054c:	0800056d 	.word	0x0800056d
 8000550:	0800057d 	.word	0x0800057d
 8000554:	0800058f 	.word	0x0800058f
 8000558:	080005a1 	.word	0x080005a1
 800055c:	080005b3 	.word	0x080005b3
 8000560:	080005c3 	.word	0x080005c3
 8000564:	080005d5 	.word	0x080005d5
 8000568:	080005e5 	.word	0x080005e5
		case 0:
			HAL_GPIO_WritePin(GPIOA,IN0_Pin,bit);
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	461a      	mov	r2, r3
 8000570:	2108      	movs	r1, #8
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f003 fdcd 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 800057a:	e03e      	b.n	80005fa <output+0xe2>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	461a      	mov	r2, r3
 8000580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f003 fdc4 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 800058c:	e035      	b.n	80005fa <output+0xe2>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f003 fdbb 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 800059e:	e02c      	b.n	80005fa <output+0xe2>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	461a      	mov	r2, r3
 80005a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f003 fdb2 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 80005b0:	e023      	b.n	80005fa <output+0xe2>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2110      	movs	r1, #16
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f003 fdaa 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 80005c0:	e01b      	b.n	80005fa <output+0xe2>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	461a      	mov	r2, r3
 80005c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f003 fda1 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 80005d2:	e012      	b.n	80005fa <output+0xe2>
		case 6:
			HAL_GPIO_WritePin(GPIOA,IN2_2_Pin,bit);
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	461a      	mov	r2, r3
 80005d8:	2180      	movs	r1, #128	@ 0x80
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f003 fd99 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 80005e2:	e00a      	b.n	80005fa <output+0xe2>
		case 7:
			HAL_GPIO_WritePin(GPIOA,IN3_2_Pin,bit);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2110      	movs	r1, #16
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f003 fd91 	bl	8004114 <HAL_GPIO_WritePin>
			break;
 80005f2:	e002      	b.n	80005fa <output+0xe2>
		default:
			Error_Handler();
 80005f4:	f000 ff70 	bl	80014d8 <Error_Handler>
			break;
 80005f8:	bf00      	nop
	for(i = 0; i < 8;i++){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	3301      	adds	r3, #1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b07      	cmp	r3, #7
 8000604:	d992      	bls.n	800052c <output+0x14>
		}
	}
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200005ea 	.word	0x200005ea

08000614 <CS_process>:
	}
}



void CS_process(){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	PROC[0] = IN1_1_CS[0];
 800061a:	4b50      	ldr	r3, [pc, #320]	@ (800075c <CS_process+0x148>)
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	4b50      	ldr	r3, [pc, #320]	@ (8000760 <CS_process+0x14c>)
 8000620:	801a      	strh	r2, [r3, #0]
	PROC[1] = IN2_1_CS[0];
 8000622:	4b50      	ldr	r3, [pc, #320]	@ (8000764 <CS_process+0x150>)
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	4b4e      	ldr	r3, [pc, #312]	@ (8000760 <CS_process+0x14c>)
 8000628:	805a      	strh	r2, [r3, #2]
	PROC[2] = IN3_1_CS[0];
 800062a:	4b4f      	ldr	r3, [pc, #316]	@ (8000768 <CS_process+0x154>)
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	4b4c      	ldr	r3, [pc, #304]	@ (8000760 <CS_process+0x14c>)
 8000630:	809a      	strh	r2, [r3, #4]
	PROC[3] = IN4_1_CS[0];
 8000632:	4b4e      	ldr	r3, [pc, #312]	@ (800076c <CS_process+0x158>)
 8000634:	881a      	ldrh	r2, [r3, #0]
 8000636:	4b4a      	ldr	r3, [pc, #296]	@ (8000760 <CS_process+0x14c>)
 8000638:	80da      	strh	r2, [r3, #6]
	PROC[4] = IN1_2_CS[0];
 800063a:	4b4d      	ldr	r3, [pc, #308]	@ (8000770 <CS_process+0x15c>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b48      	ldr	r3, [pc, #288]	@ (8000760 <CS_process+0x14c>)
 8000640:	811a      	strh	r2, [r3, #8]
	PROC[5] = IN2_2_CS[0];
 8000642:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <CS_process+0x160>)
 8000644:	881a      	ldrh	r2, [r3, #0]
 8000646:	4b46      	ldr	r3, [pc, #280]	@ (8000760 <CS_process+0x14c>)
 8000648:	815a      	strh	r2, [r3, #10]
	PROC[6] = IN3_2_CS[0];
 800064a:	4b4b      	ldr	r3, [pc, #300]	@ (8000778 <CS_process+0x164>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	4b44      	ldr	r3, [pc, #272]	@ (8000760 <CS_process+0x14c>)
 8000650:	819a      	strh	r2, [r3, #12]
	PROC[7] = IN4_2_CS[0];
 8000652:	4b4a      	ldr	r3, [pc, #296]	@ (800077c <CS_process+0x168>)
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	4b42      	ldr	r3, [pc, #264]	@ (8000760 <CS_process+0x14c>)
 8000658:	81da      	strh	r2, [r3, #14]
	for(int i = 1; i < I_AVERAGE; i++){
 800065a:	2301      	movs	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e072      	b.n	8000746 <CS_process+0x132>
		PROC[0] = (PROC[0] + IN1_1_CS[i])/2;
 8000660:	4b3f      	ldr	r3, [pc, #252]	@ (8000760 <CS_process+0x14c>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4a3d      	ldr	r2, [pc, #244]	@ (800075c <CS_process+0x148>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800066e:	440b      	add	r3, r1
 8000670:	0fda      	lsrs	r2, r3, #31
 8000672:	4413      	add	r3, r2
 8000674:	105b      	asrs	r3, r3, #1
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b39      	ldr	r3, [pc, #228]	@ (8000760 <CS_process+0x14c>)
 800067a:	801a      	strh	r2, [r3, #0]
		PROC[1] = (PROC[1] + IN2_1_CS[i])/2;
 800067c:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <CS_process+0x14c>)
 800067e:	885b      	ldrh	r3, [r3, #2]
 8000680:	4619      	mov	r1, r3
 8000682:	4a38      	ldr	r2, [pc, #224]	@ (8000764 <CS_process+0x150>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068a:	440b      	add	r3, r1
 800068c:	0fda      	lsrs	r2, r3, #31
 800068e:	4413      	add	r3, r2
 8000690:	105b      	asrs	r3, r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b32      	ldr	r3, [pc, #200]	@ (8000760 <CS_process+0x14c>)
 8000696:	805a      	strh	r2, [r3, #2]
		PROC[2] = (PROC[2] + IN3_1_CS[i])/2;
 8000698:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <CS_process+0x14c>)
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	4619      	mov	r1, r3
 800069e:	4a32      	ldr	r2, [pc, #200]	@ (8000768 <CS_process+0x154>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a6:	440b      	add	r3, r1
 80006a8:	0fda      	lsrs	r2, r3, #31
 80006aa:	4413      	add	r3, r2
 80006ac:	105b      	asrs	r3, r3, #1
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <CS_process+0x14c>)
 80006b2:	809a      	strh	r2, [r3, #4]
		PROC[3] = (PROC[3] + IN4_1_CS[i])/2;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <CS_process+0x14c>)
 80006b6:	88db      	ldrh	r3, [r3, #6]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <CS_process+0x158>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	440b      	add	r3, r1
 80006c4:	0fda      	lsrs	r2, r3, #31
 80006c6:	4413      	add	r3, r2
 80006c8:	105b      	asrs	r3, r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <CS_process+0x14c>)
 80006ce:	80da      	strh	r2, [r3, #6]
		PROC[4] = (PROC[4] + IN1_2_CS[i])/2;
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <CS_process+0x14c>)
 80006d2:	891b      	ldrh	r3, [r3, #8]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4a26      	ldr	r2, [pc, #152]	@ (8000770 <CS_process+0x15c>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006de:	440b      	add	r3, r1
 80006e0:	0fda      	lsrs	r2, r3, #31
 80006e2:	4413      	add	r3, r2
 80006e4:	105b      	asrs	r3, r3, #1
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <CS_process+0x14c>)
 80006ea:	811a      	strh	r2, [r3, #8]
		PROC[5] = (PROC[5] + IN2_2_CS[i])/2;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <CS_process+0x14c>)
 80006ee:	895b      	ldrh	r3, [r3, #10]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <CS_process+0x160>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fa:	440b      	add	r3, r1
 80006fc:	0fda      	lsrs	r2, r3, #31
 80006fe:	4413      	add	r3, r2
 8000700:	105b      	asrs	r3, r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <CS_process+0x14c>)
 8000706:	815a      	strh	r2, [r3, #10]
		PROC[6] = (PROC[6] + IN3_2_CS[i])/2;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <CS_process+0x14c>)
 800070a:	899b      	ldrh	r3, [r3, #12]
 800070c:	4619      	mov	r1, r3
 800070e:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <CS_process+0x164>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000716:	440b      	add	r3, r1
 8000718:	0fda      	lsrs	r2, r3, #31
 800071a:	4413      	add	r3, r2
 800071c:	105b      	asrs	r3, r3, #1
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <CS_process+0x14c>)
 8000722:	819a      	strh	r2, [r3, #12]
		PROC[7] = (PROC[7] + IN4_2_CS[i])/2;
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <CS_process+0x14c>)
 8000726:	89db      	ldrh	r3, [r3, #14]
 8000728:	4619      	mov	r1, r3
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <CS_process+0x168>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000732:	440b      	add	r3, r1
 8000734:	0fda      	lsrs	r2, r3, #31
 8000736:	4413      	add	r3, r2
 8000738:	105b      	asrs	r3, r3, #1
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <CS_process+0x14c>)
 800073e:	81da      	strh	r2, [r3, #14]
	for(int i = 1; i < I_AVERAGE; i++){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	dd89      	ble.n	8000660 <CS_process+0x4c>
	}

}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200003a4 	.word	0x200003a4
 8000760:	200005a4 	.word	0x200005a4
 8000764:	200003e4 	.word	0x200003e4
 8000768:	20000424 	.word	0x20000424
 800076c:	20000464 	.word	0x20000464
 8000770:	200004a4 	.word	0x200004a4
 8000774:	200004e4 	.word	0x200004e4
 8000778:	20000524 	.word	0x20000524
 800077c:	20000564 	.word	0x20000564

08000780 <CS_read>:
			Under_current(x);
		}
	}
}

void CS_read(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e1af      	b.n	8000aec <CS_read+0x36c>
		switch(x){
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b03      	cmp	r3, #3
 8000790:	f200 81a9 	bhi.w	8000ae6 <CS_read+0x366>
 8000794:	a201      	add	r2, pc, #4	@ (adr r2, 800079c <CS_read+0x1c>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	08000871 	.word	0x08000871
 80007a4:	08000935 	.word	0x08000935
 80007a8:	080009f9 	.word	0x080009f9
		case 0:
			CS_SEL[0] = 0;
 80007ac:	4b9e      	ldr	r3, [pc, #632]	@ (8000a28 <CS_read+0x2a8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 80007b2:	4b9d      	ldr	r3, [pc, #628]	@ (8000a28 <CS_read+0x2a8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 80007b8:	4b9b      	ldr	r3, [pc, #620]	@ (8000a28 <CS_read+0x2a8>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	2140      	movs	r1, #64	@ 0x40
 80007c0:	489a      	ldr	r0, [pc, #616]	@ (8000a2c <CS_read+0x2ac>)
 80007c2:	f003 fca7 	bl	8004114 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 80007c6:	4b98      	ldr	r3, [pc, #608]	@ (8000a28 <CS_read+0x2a8>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	461a      	mov	r2, r3
 80007cc:	2120      	movs	r1, #32
 80007ce:	4897      	ldr	r0, [pc, #604]	@ (8000a2c <CS_read+0x2ac>)
 80007d0:	f003 fca0 	bl	8004114 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	e046      	b.n	8000868 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80007da:	4895      	ldr	r0, [pc, #596]	@ (8000a30 <CS_read+0x2b0>)
 80007dc:	f001 fea4 	bl	8002528 <HAL_ADC_Start_IT>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <CS_read+0x6a>
 80007e6:	f000 fe77 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80007ea:	4892      	ldr	r0, [pc, #584]	@ (8000a34 <CS_read+0x2b4>)
 80007ec:	f001 fe9c 	bl	8002528 <HAL_ADC_Start_IT>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <CS_read+0x7a>
 80007f6:	f000 fe6f 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80007fa:	210a      	movs	r1, #10
 80007fc:	488c      	ldr	r0, [pc, #560]	@ (8000a30 <CS_read+0x2b0>)
 80007fe:	f001 fdbb 	bl	8002378 <HAL_ADC_PollForConversion>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <CS_read+0x8c>
 8000808:	f000 fe66 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 800080c:	210a      	movs	r1, #10
 800080e:	4889      	ldr	r0, [pc, #548]	@ (8000a34 <CS_read+0x2b4>)
 8000810:	f001 fdb2 	bl	8002378 <HAL_ADC_PollForConversion>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <CS_read+0x9e>
 800081a:	f000 fe5d 	bl	80014d8 <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 800081e:	4884      	ldr	r0, [pc, #528]	@ (8000a30 <CS_read+0x2b0>)
 8000820:	f001 ffed 	bl	80027fe <HAL_ADC_GetValue>
 8000824:	4603      	mov	r3, r0
 8000826:	b299      	uxth	r1, r3
 8000828:	4a83      	ldr	r2, [pc, #524]	@ (8000a38 <CS_read+0x2b8>)
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000830:	4880      	ldr	r0, [pc, #512]	@ (8000a34 <CS_read+0x2b4>)
 8000832:	f001 ffe4 	bl	80027fe <HAL_ADC_GetValue>
 8000836:	4603      	mov	r3, r0
 8000838:	b299      	uxth	r1, r3
 800083a:	4a80      	ldr	r2, [pc, #512]	@ (8000a3c <CS_read+0x2bc>)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000842:	487b      	ldr	r0, [pc, #492]	@ (8000a30 <CS_read+0x2b0>)
 8000844:	f001 ffa0 	bl	8002788 <HAL_ADC_Stop_IT>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <CS_read+0xd2>
 800084e:	f000 fe43 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000852:	4878      	ldr	r0, [pc, #480]	@ (8000a34 <CS_read+0x2b4>)
 8000854:	f001 ff98 	bl	8002788 <HAL_ADC_Stop_IT>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CS_read+0xe2>
 800085e:	f000 fe3b 	bl	80014d8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3301      	adds	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	2b1f      	cmp	r3, #31
 800086c:	ddb5      	ble.n	80007da <CS_read+0x5a>
			}
			break;
 800086e:	e13a      	b.n	8000ae6 <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000870:	4b6d      	ldr	r3, [pc, #436]	@ (8000a28 <CS_read+0x2a8>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000876:	4b6c      	ldr	r3, [pc, #432]	@ (8000a28 <CS_read+0x2a8>)
 8000878:	2201      	movs	r2, #1
 800087a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 800087c:	4b6a      	ldr	r3, [pc, #424]	@ (8000a28 <CS_read+0x2a8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	2140      	movs	r1, #64	@ 0x40
 8000884:	4869      	ldr	r0, [pc, #420]	@ (8000a2c <CS_read+0x2ac>)
 8000886:	f003 fc45 	bl	8004114 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 800088a:	4b67      	ldr	r3, [pc, #412]	@ (8000a28 <CS_read+0x2a8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	461a      	mov	r2, r3
 8000890:	2120      	movs	r1, #32
 8000892:	4866      	ldr	r0, [pc, #408]	@ (8000a2c <CS_read+0x2ac>)
 8000894:	f003 fc3e 	bl	8004114 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e046      	b.n	800092c <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800089e:	4864      	ldr	r0, [pc, #400]	@ (8000a30 <CS_read+0x2b0>)
 80008a0:	f001 fe42 	bl	8002528 <HAL_ADC_Start_IT>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <CS_read+0x12e>
 80008aa:	f000 fe15 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80008ae:	4861      	ldr	r0, [pc, #388]	@ (8000a34 <CS_read+0x2b4>)
 80008b0:	f001 fe3a 	bl	8002528 <HAL_ADC_Start_IT>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <CS_read+0x13e>
 80008ba:	f000 fe0d 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80008be:	210a      	movs	r1, #10
 80008c0:	485b      	ldr	r0, [pc, #364]	@ (8000a30 <CS_read+0x2b0>)
 80008c2:	f001 fd59 	bl	8002378 <HAL_ADC_PollForConversion>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <CS_read+0x150>
 80008cc:	f000 fe04 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80008d0:	210a      	movs	r1, #10
 80008d2:	4858      	ldr	r0, [pc, #352]	@ (8000a34 <CS_read+0x2b4>)
 80008d4:	f001 fd50 	bl	8002378 <HAL_ADC_PollForConversion>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <CS_read+0x162>
 80008de:	f000 fdfb 	bl	80014d8 <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 80008e2:	4853      	ldr	r0, [pc, #332]	@ (8000a30 <CS_read+0x2b0>)
 80008e4:	f001 ff8b 	bl	80027fe <HAL_ADC_GetValue>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b299      	uxth	r1, r3
 80008ec:	4a54      	ldr	r2, [pc, #336]	@ (8000a40 <CS_read+0x2c0>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 80008f4:	484f      	ldr	r0, [pc, #316]	@ (8000a34 <CS_read+0x2b4>)
 80008f6:	f001 ff82 	bl	80027fe <HAL_ADC_GetValue>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b299      	uxth	r1, r3
 80008fe:	4a51      	ldr	r2, [pc, #324]	@ (8000a44 <CS_read+0x2c4>)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000906:	484a      	ldr	r0, [pc, #296]	@ (8000a30 <CS_read+0x2b0>)
 8000908:	f001 ff3e 	bl	8002788 <HAL_ADC_Stop_IT>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <CS_read+0x196>
 8000912:	f000 fde1 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000916:	4847      	ldr	r0, [pc, #284]	@ (8000a34 <CS_read+0x2b4>)
 8000918:	f001 ff36 	bl	8002788 <HAL_ADC_Stop_IT>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <CS_read+0x1a6>
 8000922:	f000 fdd9 	bl	80014d8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3301      	adds	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b1f      	cmp	r3, #31
 8000930:	ddb5      	ble.n	800089e <CS_read+0x11e>
			}
			break;
 8000932:	e0d8      	b.n	8000ae6 <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000934:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <CS_read+0x2a8>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 800093a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a28 <CS_read+0x2a8>)
 800093c:	2200      	movs	r2, #0
 800093e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000940:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <CS_read+0x2a8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	4838      	ldr	r0, [pc, #224]	@ (8000a2c <CS_read+0x2ac>)
 800094a:	f003 fbe3 	bl	8004114 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <CS_read+0x2a8>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	461a      	mov	r2, r3
 8000954:	2120      	movs	r1, #32
 8000956:	4835      	ldr	r0, [pc, #212]	@ (8000a2c <CS_read+0x2ac>)
 8000958:	f003 fbdc 	bl	8004114 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	e046      	b.n	80009f0 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000962:	4833      	ldr	r0, [pc, #204]	@ (8000a30 <CS_read+0x2b0>)
 8000964:	f001 fde0 	bl	8002528 <HAL_ADC_Start_IT>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <CS_read+0x1f2>
 800096e:	f000 fdb3 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000972:	4830      	ldr	r0, [pc, #192]	@ (8000a34 <CS_read+0x2b4>)
 8000974:	f001 fdd8 	bl	8002528 <HAL_ADC_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <CS_read+0x202>
 800097e:	f000 fdab 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000982:	210a      	movs	r1, #10
 8000984:	482a      	ldr	r0, [pc, #168]	@ (8000a30 <CS_read+0x2b0>)
 8000986:	f001 fcf7 	bl	8002378 <HAL_ADC_PollForConversion>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <CS_read+0x214>
 8000990:	f000 fda2 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000994:	210a      	movs	r1, #10
 8000996:	4827      	ldr	r0, [pc, #156]	@ (8000a34 <CS_read+0x2b4>)
 8000998:	f001 fcee 	bl	8002378 <HAL_ADC_PollForConversion>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <CS_read+0x226>
 80009a2:	f000 fd99 	bl	80014d8 <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 80009a6:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <CS_read+0x2b0>)
 80009a8:	f001 ff29 	bl	80027fe <HAL_ADC_GetValue>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b299      	uxth	r1, r3
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <CS_read+0x2c8>)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 80009b8:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <CS_read+0x2b4>)
 80009ba:	f001 ff20 	bl	80027fe <HAL_ADC_GetValue>
 80009be:	4603      	mov	r3, r0
 80009c0:	b299      	uxth	r1, r3
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <CS_read+0x2cc>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80009ca:	4819      	ldr	r0, [pc, #100]	@ (8000a30 <CS_read+0x2b0>)
 80009cc:	f001 fedc 	bl	8002788 <HAL_ADC_Stop_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <CS_read+0x25a>
 80009d6:	f000 fd7f 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80009da:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <CS_read+0x2b4>)
 80009dc:	f001 fed4 	bl	8002788 <HAL_ADC_Stop_IT>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <CS_read+0x26a>
 80009e6:	f000 fd77 	bl	80014d8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b1f      	cmp	r3, #31
 80009f4:	ddb5      	ble.n	8000962 <CS_read+0x1e2>
			}
			break;
 80009f6:	e076      	b.n	8000ae6 <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <CS_read+0x2a8>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <CS_read+0x2a8>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <CS_read+0x2a8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2140      	movs	r1, #64	@ 0x40
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <CS_read+0x2ac>)
 8000a0e:	f003 fb81 	bl	8004114 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <CS_read+0x2a8>)
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	461a      	mov	r2, r3
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <CS_read+0x2ac>)
 8000a1c:	f003 fb7a 	bl	8004114 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	e05b      	b.n	8000ade <CS_read+0x35e>
 8000a26:	bf00      	nop
 8000a28:	200005e8 	.word	0x200005e8
 8000a2c:	48000400 	.word	0x48000400
 8000a30:	20000030 	.word	0x20000030
 8000a34:	2000009c 	.word	0x2000009c
 8000a38:	200003a4 	.word	0x200003a4
 8000a3c:	200004a4 	.word	0x200004a4
 8000a40:	200003e4 	.word	0x200003e4
 8000a44:	200004e4 	.word	0x200004e4
 8000a48:	20000424 	.word	0x20000424
 8000a4c:	20000524 	.word	0x20000524
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000a50:	482b      	ldr	r0, [pc, #172]	@ (8000b00 <CS_read+0x380>)
 8000a52:	f001 fd69 	bl	8002528 <HAL_ADC_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <CS_read+0x2e0>
 8000a5c:	f000 fd3c 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000a60:	4828      	ldr	r0, [pc, #160]	@ (8000b04 <CS_read+0x384>)
 8000a62:	f001 fd61 	bl	8002528 <HAL_ADC_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <CS_read+0x2f0>
 8000a6c:	f000 fd34 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000a70:	210a      	movs	r1, #10
 8000a72:	4823      	ldr	r0, [pc, #140]	@ (8000b00 <CS_read+0x380>)
 8000a74:	f001 fc80 	bl	8002378 <HAL_ADC_PollForConversion>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <CS_read+0x302>
 8000a7e:	f000 fd2b 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000a82:	210a      	movs	r1, #10
 8000a84:	481f      	ldr	r0, [pc, #124]	@ (8000b04 <CS_read+0x384>)
 8000a86:	f001 fc77 	bl	8002378 <HAL_ADC_PollForConversion>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <CS_read+0x314>
 8000a90:	f000 fd22 	bl	80014d8 <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000a94:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <CS_read+0x380>)
 8000a96:	f001 feb2 	bl	80027fe <HAL_ADC_GetValue>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <CS_read+0x388>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000aa6:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <CS_read+0x384>)
 8000aa8:	f001 fea9 	bl	80027fe <HAL_ADC_GetValue>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b299      	uxth	r1, r3
 8000ab0:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <CS_read+0x38c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000ab8:	4811      	ldr	r0, [pc, #68]	@ (8000b00 <CS_read+0x380>)
 8000aba:	f001 fe65 	bl	8002788 <HAL_ADC_Stop_IT>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <CS_read+0x348>
 8000ac4:	f000 fd08 	bl	80014d8 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ac8:	480e      	ldr	r0, [pc, #56]	@ (8000b04 <CS_read+0x384>)
 8000aca:	f001 fe5d 	bl	8002788 <HAL_ADC_Stop_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <CS_read+0x358>
 8000ad4:	f000 fd00 	bl	80014d8 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3301      	adds	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b1f      	cmp	r3, #31
 8000ae2:	ddb5      	ble.n	8000a50 <CS_read+0x2d0>
			}
			break;
 8000ae4:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	f77f ae4c 	ble.w	800078c <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000af4:	f7ff fd8e 	bl	8000614 <CS_process>
}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000030 	.word	0x20000030
 8000b04:	2000009c 	.word	0x2000009c
 8000b08:	20000464 	.word	0x20000464
 8000b0c:	20000564 	.word	0x20000564

08000b10 <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2201      	movs	r2, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <check_bit+0x2a>
		return 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <check_bit+0x2c>
	}else{
		return 0;
 8000b3a:	2300      	movs	r3, #0
	}
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 ffa5 	bl	8001a9a <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000b50:	f7ff fb8b 	bl	800026a <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f84e 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fc3a 	bl	80013d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b5c:	f000 f896 	bl	8000c8c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000b60:	f000 f976 	bl	8000e50 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000b64:	f000 f9ba 	bl	8000edc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b68:	f000 fa68 	bl	800103c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b6c:	f000 fadc 	bl	8001128 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b70:	f000 fb28 	bl	80011c4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000b74:	f000 fb9a 	bl	80012ac <MX_TIM6_Init>
  MX_TIM7_Init();
 8000b78:	f000 fbce 	bl	8001318 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000b7c:	f000 fc02 	bl	8001384 <MX_TIM16_Init>
  MX_ADC2_Init();
 8000b80:	f000 f8fe 	bl	8000d80 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000b84:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <main+0x94>)
 8000b86:	f004 fb39 	bl	80051fc <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000b8a:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <main+0x98>)
 8000b8c:	f004 fb36 	bl	80051fc <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b90:	4814      	ldr	r0, [pc, #80]	@ (8000be4 <main+0x9c>)
 8000b92:	f004 fac9 	bl	8005128 <HAL_TIM_Base_Start_IT>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }
 8000b96:	4814      	ldr	r0, [pc, #80]	@ (8000be8 <main+0xa0>)
 8000b98:	f002 ff04 	bl	80039a4 <HAL_FDCAN_Start>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <main+0x5e>
 8000ba2:	f000 fc99 	bl	80014d8 <Error_Handler>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2101      	movs	r1, #1
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <main+0xa0>)
 8000bac:	f002 ff78 	bl	8003aa0 <HAL_FDCAN_ActivateNotification>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <main+0x72>
 8000bb6:	f000 fc8f 	bl	80014d8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(millis % 100 == 0){
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <main+0xa4>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <main+0xa8>)
 8000bc0:	fba2 1203 	umull	r1, r2, r2, r3
 8000bc4:	0952      	lsrs	r2, r2, #5
 8000bc6:	2164      	movs	r1, #100	@ 0x64
 8000bc8:	fb01 f202 	mul.w	r2, r1, r2
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f2      	bne.n	8000bba <main+0x72>
		  CS_read();
 8000bd4:	f7ff fdd4 	bl	8000780 <CS_read>
	  if(millis % 100 == 0){
 8000bd8:	e7ef      	b.n	8000bba <main+0x72>
 8000bda:	bf00      	nop
 8000bdc:	20000190 	.word	0x20000190
 8000be0:	200001dc 	.word	0x200001dc
 8000be4:	20000228 	.word	0x20000228
 8000be8:	20000108 	.word	0x20000108
 8000bec:	200005e4 	.word	0x200005e4
 8000bf0:	51eb851f 	.word	0x51eb851f

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	@ 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2238      	movs	r2, #56	@ 0x38
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fd94 	bl	8006730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1a:	f003 fa93 	bl	8004144 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c28:	2340      	movs	r3, #64	@ 0x40
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fb2d 	bl	80042ac <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c58:	f000 fc3e 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2303      	movs	r3, #3
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fe2b 	bl	80048d0 <HAL_RCC_ClockConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c80:	f000 fc2a 	bl	80014d8 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3750      	adds	r7, #80	@ 0x50
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fd43 	bl	8006730 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000caa:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb2:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cde:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cea:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d14:	4817      	ldr	r0, [pc, #92]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d16:	f001 f9ab 	bl	8002070 <HAL_ADC_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d20:	f000 fbda 	bl	80014d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d30:	f002 fb2a 	bl	8003388 <HAL_ADCEx_MultiModeConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d3a:	f000 fbcd 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_ADC1_Init+0xec>)
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d42:	2306      	movs	r3, #6
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_ADC1_Init+0xf0>)
 8000d4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <MX_ADC1_Init+0xe8>)
 8000d5c:	f001 fd5c 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d66:	f000 fbb7 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	@ 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000030 	.word	0x20000030
 8000d78:	04300002 	.word	0x04300002
 8000d7c:	407f0000 	.word	0x407f0000

08000d80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2220      	movs	r2, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 fccf 	bl	8006730 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000d94:	4a2b      	ldr	r2, [pc, #172]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000d96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d98:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000d9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000da0:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db8:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dfa:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000dfc:	f001 f938 	bl	8002070 <HAL_ADC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e06:	f000 fb67 	bl	80014d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_ADC2_Init+0xc8>)
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <MX_ADC2_Init+0xcc>)
 8000e18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_ADC2_Init+0xc0>)
 8000e28:	f001 fcf6 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e32:	f000 fb51 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000009c 	.word	0x2000009c
 8000e44:	50000100 	.word	0x50000100
 8000e48:	0c900008 	.word	0x0c900008
 8000e4c:	407f0000 	.word	0x407f0000

08000e50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e56:	4a20      	ldr	r2, [pc, #128]	@ (8000ed8 <MX_FDCAN1_Init+0x88>)
 8000e58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e8c:	220d      	movs	r2, #13
 8000e8e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <MX_FDCAN1_Init+0x84>)
 8000ec2:	f002 fc15 	bl	80036f0 <HAL_FDCAN_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000ecc:	f000 fb04 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000108 	.word	0x20000108
 8000ed8:	40006400 	.word	0x40006400

08000edc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09c      	sub	sp, #112	@ 0x70
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2234      	movs	r2, #52	@ 0x34
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 fc0a 	bl	8006730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f1c:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f1e:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <MX_TIM1_Init+0x15c>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b42      	ldr	r3, [pc, #264]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f2e:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f48:	483a      	ldr	r0, [pc, #232]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f4a:	f004 f895 	bl	8005078 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 fac0 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f62:	4619      	mov	r1, r3
 8000f64:	4833      	ldr	r0, [pc, #204]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f66:	f004 fd0f 	bl	8005988 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f70:	f000 fab2 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f74:	482f      	ldr	r0, [pc, #188]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f76:	f004 f941 	bl	80051fc <HAL_TIM_PWM_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f80:	f000 faaa 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f94:	4619      	mov	r1, r3
 8000f96:	4827      	ldr	r0, [pc, #156]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000f98:	f005 fa76 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fa2:	f000 fa99 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	@ 0x60
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	@ (8001034 <MX_TIM1_Init+0x158>)
 8000fcc:	f004 fbc8 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fd6:	f000 fa7f 	bl	80014d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001000:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM1_Init+0x158>)
 8001018:	f005 fab8 	bl	800658c <HAL_TIMEx_ConfigBreakDeadTime>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001022:	f000 fa59 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM1_Init+0x158>)
 8001028:	f000 fc32 	bl	8001890 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3770      	adds	r7, #112	@ 0x70
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000190 	.word	0x20000190
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001070:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001074:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001078:	2295      	movs	r2, #149	@ 0x95
 800107a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <MX_TIM2_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001084:	f06f 0201 	mvn.w	r2, #1
 8001088:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <MX_TIM2_Init+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001096:	4823      	ldr	r0, [pc, #140]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001098:	f003 ffee 	bl	8005078 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 fa19 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	481c      	ldr	r0, [pc, #112]	@ (8001124 <MX_TIM2_Init+0xe8>)
 80010b4:	f004 fc68 	bl	8005988 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010be:	f000 fa0b 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c2:	4818      	ldr	r0, [pc, #96]	@ (8001124 <MX_TIM2_Init+0xe8>)
 80010c4:	f004 f89a 	bl	80051fc <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ce:	f000 fa03 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4810      	ldr	r0, [pc, #64]	@ (8001124 <MX_TIM2_Init+0xe8>)
 80010e2:	f005 f9d1 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010ec:	f000 f9f4 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f0:	2360      	movs	r3, #96	@ 0x60
 80010f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001108:	f004 fb2a 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001112:	f000 f9e1 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <MX_TIM2_Init+0xe8>)
 8001118:	f000 fbba 	bl	8001890 <HAL_TIM_MspPostInit>

}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	@ 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001dc 	.word	0x200001dc

08001128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_TIM3_Init+0x94>)
 8001148:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <MX_TIM3_Init+0x98>)
 800114a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_TIM3_Init+0x94>)
 800114e:	223f      	movs	r2, #63	@ 0x3f
 8001150:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_TIM3_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_TIM3_Init+0x94>)
 800115a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800115e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_TIM3_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_TIM3_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800116c:	4813      	ldr	r0, [pc, #76]	@ (80011bc <MX_TIM3_Init+0x94>)
 800116e:	f003 ff83 	bl	8005078 <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001178:	f000 f9ae 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001180:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_TIM3_Init+0x94>)
 800118a:	f004 fbfd 	bl	8005988 <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 f9a0 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_TIM3_Init+0x94>)
 80011a6:	f005 f96f 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f000 f992 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000228 	.word	0x20000228
 80011c0:	40000400 	.word	0x40000400

080011c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	@ 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 80011f8:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <MX_TIM4_Init+0xe4>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011fc:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001208:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 800120a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800120e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800121c:	4821      	ldr	r0, [pc, #132]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 800121e:	f003 ff2b 	bl	8005078 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001228:	f000 f956 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 800123a:	f004 fba5 	bl	8005988 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001244:	f000 f948 	bl	80014d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001248:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 800124a:	f003 ffd7 	bl	80051fc <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001254:	f000 f940 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 8001268:	f005 f90e 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001272:	f000 f931 	bl	80014d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	@ 0x60
 8001278:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_TIM4_Init+0xe0>)
 800128e:	f004 fa67 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001298:	f000 f91e 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	@ 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000274 	.word	0x20000274
 80012a8:	40000800 	.word	0x40000800

080012ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_TIM6_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012de:	f003 fecb 	bl	8005078 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e8:	f000 f8f6 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_TIM6_Init+0x64>)
 80012fa:	f005 f8c5 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001304:	f000 f8e8 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002c0 	.word	0x200002c0
 8001314:	40001000 	.word	0x40001000

08001318 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_TIM7_Init+0x64>)
 800132a:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <MX_TIM7_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_TIM7_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_TIM7_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_TIM7_Init+0x64>)
 800133c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM7_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM7_Init+0x64>)
 800134a:	f003 fe95 	bl	8005078 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001354:	f000 f8c0 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_TIM7_Init+0x64>)
 8001366:	f005 f88f 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 f8b2 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000030c 	.word	0x2000030c
 8001380:	40001400 	.word	0x40001400

08001384 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_TIM16_Init+0x44>)
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <MX_TIM16_Init+0x48>)
 800138c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_TIM16_Init+0x44>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <MX_TIM16_Init+0x44>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <MX_TIM16_Init+0x44>)
 800139c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_TIM16_Init+0x44>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <MX_TIM16_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <MX_TIM16_Init+0x44>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_TIM16_Init+0x44>)
 80013b6:	f003 fe5f 	bl	8005078 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80013c0:	f000 f88a 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000358 	.word	0x20000358
 80013cc:	40014400 	.word	0x40014400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <MX_GPIO_Init+0xfc>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <MX_GPIO_Init+0xfc>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <MX_GPIO_Init+0xfc>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	4a26      	ldr	r2, [pc, #152]	@ (80014cc <MX_GPIO_Init+0xfc>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_GPIO_Init+0xfc>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144c:	4820      	ldr	r0, [pc, #128]	@ (80014d0 <MX_GPIO_Init+0x100>)
 800144e:	f002 fe61 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f248 6110 	movw	r1, #34320	@ 0x8610
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f002 fe5a 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001460:	2200      	movs	r2, #0
 8001462:	21f9      	movs	r1, #249	@ 0xf9
 8001464:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <MX_GPIO_Init+0x104>)
 8001466:	f002 fe55 	bl	8004114 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <MX_GPIO_Init+0x100>)
 8001484:	f002 fcc4 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001488:	f248 6310 	movw	r3, #34320	@ 0x8610
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f002 fcb4 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 80014a8:	23f9      	movs	r3, #249	@ 0xf9
 80014aa:	617b      	str	r3, [r7, #20]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_GPIO_Init+0x104>)
 80014c0:	f002 fca6 	bl	8003e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48001800 	.word	0x48001800
 80014d4:	48000400 	.word	0x48000400

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_MspInit+0x44>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x44>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	@ 0x58
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800151a:	f002 feb7 	bl	800428c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09c      	sub	sp, #112	@ 0x70
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	2244      	movs	r2, #68	@ 0x44
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f005 f8ef 	bl	8006730 <memset>
  if(hadc->Instance==ADC1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800155a:	d13e      	bne.n	80015da <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800155c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001560:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001562:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001566:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fb93 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001578:	f7ff ffae 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800157c:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	4a39      	ldr	r2, [pc, #228]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 8001584:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10b      	bne.n	80015a6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800158e:	4b37      	ldr	r3, [pc, #220]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a36      	ldr	r2, [pc, #216]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_ADC_MspInit+0x140>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_ADC_MspInit+0x140>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a30      	ldr	r2, [pc, #192]	@ (800166c <HAL_ADC_MspInit+0x140>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_ADC_MspInit+0x140>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin|AC1_2_pos_Pin|ADC1_2_neg_Pin;
 80015be:	230f      	movs	r3, #15
 80015c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d4:	f002 fc1c 	bl	8003e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015d8:	e042      	b.n	8001660 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <HAL_ADC_MspInit+0x144>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d13d      	bne.n	8001660 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80015ee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fb4f 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001600:	f7ff ff6a 	bl	80014d8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a17      	ldr	r2, [pc, #92]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 800160c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_ADC_MspInit+0x13c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d10b      	bne.n	800162e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_ADC_MspInit+0x140>)
 800161c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <HAL_ADC_MspInit+0x140>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_ADC_MspInit+0x140>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001646:	23c0      	movs	r3, #192	@ 0xc0
 8001648:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165c:	f002 fbd8 	bl	8003e10 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3770      	adds	r7, #112	@ 0x70
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200005fc 	.word	0x200005fc
 800166c:	40021000 	.word	0x40021000
 8001670:	50000100 	.word	0x50000100

08001674 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	@ 0x68
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2244      	movs	r2, #68	@ 0x44
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f005 f84b 	bl	8006730 <memset>
  if(hfdcan->Instance==FDCAN1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a20      	ldr	r2, [pc, #128]	@ (8001720 <HAL_FDCAN_MspInit+0xac>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d139      	bne.n	8001718 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 faef 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80016c0:	f7ff ff0a 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_FDCAN_MspInit+0xb0>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001706:	2309      	movs	r3, #9
 8001708:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f002 fb7c 	bl	8003e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3768      	adds	r7, #104	@ 0x68
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40006400 	.word	0x40006400
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a4f      	ldr	r2, [pc, #316]	@ (8001874 <HAL_TIM_Base_MspInit+0x14c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10c      	bne.n	8001754 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173a:	4b4f      	ldr	r3, [pc, #316]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	4a4e      	ldr	r2, [pc, #312]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001740:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001744:	6613      	str	r3, [r2, #96]	@ 0x60
 8001746:	4b4c      	ldr	r3, [pc, #304]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001752:	e08a      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175c:	d114      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	4b46      	ldr	r3, [pc, #280]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a45      	ldr	r2, [pc, #276]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58
 800176a:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	201c      	movs	r0, #28
 800177c:	f001 ff83 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001780:	201c      	movs	r0, #28
 8001782:	f001 ff9a 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8001786:	e070      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3b      	ldr	r2, [pc, #236]	@ (800187c <HAL_TIM_Base_MspInit+0x154>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d114      	bne.n	80017bc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	4a38      	ldr	r2, [pc, #224]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6593      	str	r3, [r2, #88]	@ 0x58
 800179e:	4b36      	ldr	r3, [pc, #216]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201d      	movs	r0, #29
 80017b0:	f001 ff69 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017b4:	201d      	movs	r0, #29
 80017b6:	f001 ff80 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 80017ba:	e056      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001880 <HAL_TIM_Base_MspInit+0x158>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d114      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d2:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201e      	movs	r0, #30
 80017e4:	f001 ff4f 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017e8:	201e      	movs	r0, #30
 80017ea:	f001 ff66 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 80017ee:	e03c      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a23      	ldr	r2, [pc, #140]	@ (8001884 <HAL_TIM_Base_MspInit+0x15c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10c      	bne.n	8001814 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	e02a      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <HAL_TIM_Base_MspInit+0x160>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d114      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	4a15      	ldr	r2, [pc, #84]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	6593      	str	r3, [r2, #88]	@ 0x58
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2037      	movs	r0, #55	@ 0x37
 800183c:	f001 ff23 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001840:	2037      	movs	r0, #55	@ 0x37
 8001842:	f001 ff3a 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8001846:	e010      	b.n	800186a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0f      	ldr	r2, [pc, #60]	@ (800188c <HAL_TIM_Base_MspInit+0x164>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10b      	bne.n	800186a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	6613      	str	r3, [r2, #96]	@ 0x60
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_TIM_Base_MspInit+0x150>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	@ 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40021000 	.word	0x40021000
 800187c:	40000400 	.word	0x40000400
 8001880:	40000800 	.word	0x40000800
 8001884:	40001000 	.word	0x40001000
 8001888:	40001400 	.word	0x40001400
 800188c:	40014400 	.word	0x40014400

08001890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_TIM_MspPostInit+0xac>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11e      	bne.n	80018f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a22      	ldr	r2, [pc, #136]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018dc:	2306      	movs	r3, #6
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f002 fa91 	bl	8003e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ee:	e021      	b.n	8001934 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f8:	d11c      	bne.n	8001934 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	4a10      	ldr	r2, [pc, #64]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_TIM_MspPostInit+0xb0>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001912:	2320      	movs	r3, #32
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001922:	2301      	movs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001930:	f002 fa6e 	bl	8003e10 <HAL_GPIO_Init>
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	@ 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 f8d1 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <TIM2_IRQHandler+0x10>)
 80019aa:	f003 fd89 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001dc 	.word	0x200001dc

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <TIM3_IRQHandler+0x38>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <TIM3_IRQHandler+0x38>)
 80019c6:	801a      	strh	r2, [r3, #0]
	if(millis % CAN_interval == 0){
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <TIM3_IRQHandler+0x38>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <TIM3_IRQHandler+0x3c>)
 80019ce:	8812      	ldrh	r2, [r2, #0]
 80019d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80019d4:	fb01 f202 	mul.w	r2, r1, r2
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <TIM3_IRQHandler+0x2c>
		  CAN_switch_state();
 80019e0:	f7fe fd28 	bl	8000434 <CAN_switch_state>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <TIM3_IRQHandler+0x40>)
 80019e6:	f003 fd6b 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200005e4 	.word	0x200005e4
 80019f4:	200005fa 	.word	0x200005fa
 80019f8:	20000228 	.word	0x20000228

080019fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM4_IRQHandler+0x10>)
 8001a02:	f003 fd5d 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000274 	.word	0x20000274

08001a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM7_IRQHandler+0x10>)
 8001a16:	f003 fd53 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000030c 	.word	0x2000030c

08001a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a48:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4e:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a50:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a64:	4c0b      	ldr	r4, [pc, #44]	@ (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a72:	f7ff ffd7 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f004 fe63 	bl	8006740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff f865 	bl	8000b48 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   r0, =_estack
 8001a80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a8c:	080067c8 	.word	0x080067c8
  ldr r2, =_sbss
 8001a90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a94:	20000604 	.word	0x20000604

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>

08001a9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f001 fde3 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f80e 	bl	8001acc <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	e001      	b.n	8001ac0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001abc:	f7ff fd12 	bl	80014e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d022      	beq.n	8001b26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_InitTick+0x6c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fdee 	bl	80036d6 <HAL_SYSTICK_Config>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d809      	bhi.n	8001b1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	2200      	movs	r2, #0
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f001 fdba 	bl	8003686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <HAL_InitTick+0x70>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e004      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a03      	ldr	r2, [pc, #12]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000600 	.word	0x20000600
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000600 	.word	0x20000600

08001b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3360      	adds	r3, #96	@ 0x60
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <LL_ADC_SetOffset+0x44>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	03fff000 	.word	0x03fff000

08001c2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3360      	adds	r3, #96	@ 0x60
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b087      	sub	sp, #28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3360      	adds	r3, #96	@ 0x60
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3360      	adds	r3, #96	@ 0x60
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3330      	adds	r3, #48	@ 0x30
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	4413      	add	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	211f      	movs	r1, #31
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	401a      	ands	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0e9b      	lsrs	r3, r3, #26
 8001d7e:	f003 011f 	and.w	r1, r3, #31
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b087      	sub	sp, #28
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3314      	adds	r3, #20
 8001dae:	461a      	mov	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	0e5b      	lsrs	r3, r3, #25
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0d1b      	lsrs	r3, r3, #20
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2107      	movs	r1, #7
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	0d1b      	lsrs	r3, r3, #20
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0318 	and.w	r3, r3, #24
 8001e16:	4908      	ldr	r1, [pc, #32]	@ (8001e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	0007ffff 	.word	0x0007ffff

08001e3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6093      	str	r3, [r2, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_IsEnabled+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_IsEnabled+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsDisableOngoing+0x18>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsDisableOngoing+0x1a>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc0:	f043 0204 	orr.w	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe8:	f043 0210 	orr.w	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d101      	bne.n	8002014 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002032:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d101      	bne.n	8002062 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e167      	b.n	800235a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fa47 	bl	800152c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fef1 	bl	8001e98 <LL_ADC_IsDeepPowerDownEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fed7 	bl	8001e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff0c 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fef0 	bl	8001ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002364 <HAL_ADC_Init+0x2f4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	4aa0      	ldr	r2, [pc, #640]	@ (8002368 <HAL_ADC_Init+0x2f8>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff feee 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff62 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 8002138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8100 	bne.w	8002348 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 80fc 	bne.w	8002348 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002158:	f043 0202 	orr.w	r2, r3, #2
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fefb 	bl	8001f60 <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002174:	f7ff fef4 	bl	8001f60 <LL_ADC_IsEnabled>
 8002178:	4604      	mov	r4, r0
 800217a:	487c      	ldr	r0, [pc, #496]	@ (800236c <HAL_ADC_Init+0x2fc>)
 800217c:	f7ff fef0 	bl	8001f60 <LL_ADC_IsEnabled>
 8002180:	4603      	mov	r3, r0
 8002182:	4323      	orrs	r3, r4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4619      	mov	r1, r3
 800218e:	4878      	ldr	r0, [pc, #480]	@ (8002370 <HAL_ADC_Init+0x300>)
 8002190:	f7ff fcf4 	bl	8001b7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7f5b      	ldrb	r3, [r3, #29]
 8002198:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800219e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	045b      	lsls	r3, r3, #17
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b60      	ldr	r3, [pc, #384]	@ (8002374 <HAL_ADC_Init+0x304>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff15 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 8002220:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d16d      	bne.n	8002304 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d16a      	bne.n	8002304 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002232:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800223a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800224a:	f023 0302 	bic.w	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	430b      	orrs	r3, r1
 8002256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d017      	beq.n	8002290 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800226e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002278:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800227c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6911      	ldr	r1, [r2, #16]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800228e:	e013      	b.n	80022b8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800229e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d118      	bne.n	80022f4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022e4:	430a      	orrs	r2, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	e007      	b.n	8002304 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10c      	bne.n	8002326 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f023 010f 	bic.w	r1, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
 8002324:	e007      	b.n	8002336 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 020f 	bic.w	r2, r2, #15
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002346:	e007      	b.n	8002358 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002358:	7ffb      	ldrb	r3, [r7, #31]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	@ 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
 8002362:	bf00      	nop
 8002364:	20000000 	.word	0x20000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	50000100 	.word	0x50000100
 8002370:	50000300 	.word	0x50000300
 8002374:	fff04007 	.word	0xfff04007

08002378 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002382:	4867      	ldr	r0, [pc, #412]	@ (8002520 <HAL_ADC_PollForConversion+0x1a8>)
 8002384:	f7ff fd5a 	bl	8001e3c <LL_ADC_GetMultimode>
 8002388:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b08      	cmp	r3, #8
 8002390:	d102      	bne.n	8002398 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002392:	2308      	movs	r3, #8
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e02a      	b.n	80023ee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	d111      	bne.n	80023ce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0a6      	b.n	8002516 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023c8:	2304      	movs	r3, #4
 80023ca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023cc:	e00f      	b.n	80023ee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023ce:	4854      	ldr	r0, [pc, #336]	@ (8002520 <HAL_ADC_PollForConversion+0x1a8>)
 80023d0:	f7ff fd42 	bl	8001e58 <LL_ADC_GetMultiDMATransfer>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f043 0220 	orr.w	r2, r3, #32
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e095      	b.n	8002516 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023ea:	2304      	movs	r3, #4
 80023ec:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023ee:	f7ff fbb9 	bl	8001b64 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023f4:	e021      	b.n	800243a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d01d      	beq.n	800243a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023fe:	f7ff fbb1 	bl	8001b64 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <HAL_ADC_PollForConversion+0x9c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d112      	bne.n	800243a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e06d      	b.n	8002516 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0d6      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fc61 	bl	8001d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01c      	beq.n	800249e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7f5b      	ldrb	r3, [r3, #29]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d111      	bne.n	800249e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_ADC_PollForConversion+0x1ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d002      	beq.n	80024ae <HAL_ADC_PollForConversion+0x136>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	e001      	b.n	80024b2 <HAL_ADC_PollForConversion+0x13a>
 80024ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d008      	beq.n	80024cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d104      	bne.n	80024d6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e00d      	b.n	80024f2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <HAL_ADC_PollForConversion+0x1ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d002      	beq.n	80024e6 <HAL_ADC_PollForConversion+0x16e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	e001      	b.n	80024ea <HAL_ADC_PollForConversion+0x172>
 80024e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d104      	bne.n	8002502 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e008      	b.n	8002514 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	220c      	movs	r2, #12
 8002512:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	50000300 	.word	0x50000300
 8002524:	50000100 	.word	0x50000100

08002528 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002530:	4893      	ldr	r0, [pc, #588]	@ (8002780 <HAL_ADC_Start_IT+0x258>)
 8002532:	f7ff fc83 	bl	8001e3c <LL_ADC_GetMultimode>
 8002536:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fd5d 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 8113 	bne.w	8002770 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_ADC_Start_IT+0x30>
 8002554:	2302      	movs	r3, #2
 8002556:	e10e      	b.n	8002776 <HAL_ADC_Start_IT+0x24e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fe05 	bl	8003170 <ADC_Enable>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 80fa 	bne.w	8002766 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7e      	ldr	r2, [pc, #504]	@ (8002784 <HAL_ADC_Start_IT+0x25c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d002      	beq.n	8002596 <HAL_ADC_Start_IT+0x6e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	e001      	b.n	800259a <HAL_ADC_Start_IT+0x72>
 8002596:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4293      	cmp	r3, r2
 80025a0:	d002      	beq.n	80025a8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c4:	f023 0206 	bic.w	r2, r3, #6
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	221c      	movs	r2, #28
 80025da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 021c 	bic.w	r2, r2, #28
 80025f2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d108      	bne.n	800260e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0208 	orr.w	r2, r2, #8
 800260a:	605a      	str	r2, [r3, #4]
          break;
 800260c:	e008      	b.n	8002620 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0204 	orr.w	r2, r2, #4
 800261c:	605a      	str	r2, [r3, #4]
          break;
 800261e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0210 	orr.w	r2, r2, #16
 8002636:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	@ (8002784 <HAL_ADC_Start_IT+0x25c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d002      	beq.n	8002648 <HAL_ADC_Start_IT+0x120>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e001      	b.n	800264c <HAL_ADC_Start_IT+0x124>
 8002648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	4293      	cmp	r3, r2
 8002652:	d008      	beq.n	8002666 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d002      	beq.n	8002666 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b09      	cmp	r3, #9
 8002664:	d13a      	bne.n	80026dc <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02d      	beq.n	80026d0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800267c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d110      	bne.n	80026ae <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0220 	bic.w	r2, r2, #32
 800269a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026aa:	605a      	str	r2, [r3, #4]
              break;
 80026ac:	e010      	b.n	80026d0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026bc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	605a      	str	r2, [r3, #4]
              break;
 80026ce:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fc69 	bl	8001fac <LL_ADC_REG_StartConversion>
 80026da:	e04b      	b.n	8002774 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_ADC_Start_IT+0x25c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d002      	beq.n	80026f8 <HAL_ADC_Start_IT+0x1d0>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Start_IT+0x1d4>
 80026f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d034      	beq.n	8002774 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002712:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d110      	bne.n	8002744 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0220 	bic.w	r2, r2, #32
 8002730:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002740:	605a      	str	r2, [r3, #4]
              break;
 8002742:	e017      	b.n	8002774 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0220 	orr.w	r2, r2, #32
 8002762:	605a      	str	r2, [r3, #4]
              break;
 8002764:	e006      	b.n	8002774 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800276e:	e001      	b.n	8002774 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	50000300 	.word	0x50000300
 8002784:	50000100 	.word	0x50000100

08002788 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_Stop_IT+0x16>
 800279a:	2302      	movs	r3, #2
 800279c:	e02b      	b.n	80027f6 <HAL_ADC_Stop_IT+0x6e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027a6:	2103      	movs	r1, #3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fc25 	bl	8002ff8 <ADC_ConversionStop>
 80027ae:	4603      	mov	r3, r0
 80027b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d119      	bne.n	80027ec <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 021c 	bic.w	r2, r2, #28
 80027c6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fd57 	bl	800327c <ADC_Disable>
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0b6      	sub	sp, #216	@ 0xd8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x22>
 8002836:	2302      	movs	r3, #2
 8002838:	e3c8      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x7b4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fbd8 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 83ad 	bne.w	8002fae <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	f7ff fa70 	bl	8001d46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fbc6 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 8002870:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fbe6 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 800287e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002882:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 81d9 	bne.w	8002c3e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81d4 	bne.w	8002c3e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800289e:	d10f      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7ff fa77 	bl	8001d9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fa1e 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>
 80028be:	e00e      	b.n	80028de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff fa66 	bl	8001d9e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fa0e 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d022      	beq.n	8002946 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002910:	f7ff f968 	bl	8001be4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6919      	ldr	r1, [r3, #16]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	461a      	mov	r2, r3
 8002922:	f7ff f9b4 	bl	8001c8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_ADC_ConfigChannel+0x124>
 8002936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800293a:	e000      	b.n	800293e <HAL_ADC_ConfigChannel+0x126>
 800293c:	2300      	movs	r3, #0
 800293e:	461a      	mov	r2, r3
 8002940:	f7ff f9c0 	bl	8001cc4 <LL_ADC_SetOffsetSaturation>
 8002944:	e17b      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f96d 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x15a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f962 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	e01e      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x198>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f957 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e004      	b.n	80029ae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1b0>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	e018      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1e2>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80029f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f926 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f90a 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x220>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2101      	movs	r1, #1
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f8ff 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	e01e      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x25e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f8f4 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e004      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x276>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	e018      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x2a8>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f8c3 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f8a7 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x2e6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2102      	movs	r1, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f89c 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	e01e      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f891 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e004      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x33c>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	e016      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x36a>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e004      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f862 	bl	8001c58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2103      	movs	r1, #3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f846 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x3a8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f83b 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	e017      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x3d8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f830 	bl	8001c2c <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bda:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e003      	b.n	8002bee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002be6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x3f0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e011      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x414>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2103      	movs	r1, #3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f80d 	bl	8001c58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f98c 	bl	8001f60 <LL_ADC_IsEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8140 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f7ff f8c9 	bl	8001df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a8f      	ldr	r2, [pc, #572]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x68c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	f040 8131 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x47e>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	bf94      	ite	ls
 8002c8e:	2301      	movls	r3, #1
 8002c90:	2300      	movhi	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e019      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4b2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ca6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e003      	b.n	8002cba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d079      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x4d2>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ce8:	e015      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x4fe>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x51e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	e017      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x54e>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	ea42 0103 	orr.w	r1, r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x574>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 021f 	and.w	r2, r3, #31
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	051b      	lsls	r3, r3, #20
 8002d8a:	e018      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x5a6>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 021f 	and.w	r2, r3, #31
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	e081      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x5c6>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	069b      	lsls	r3, r3, #26
 8002dd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ddc:	e015      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x5f2>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e003      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	069b      	lsls	r3, r3, #26
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x612>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0e9b      	lsrs	r3, r3, #26
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	e017      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x642>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
  return result;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	ea42 0103 	orr.w	r1, r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x66e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	e01e      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x6ac>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	613b      	str	r3, [r7, #16]
  return result;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e006      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x698>
 8002ea2:	bf00      	nop
 8002ea4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 021f 	and.w	r2, r3, #31
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b1e      	subs	r3, #30
 8002ebe:	051b      	lsls	r3, r3, #20
 8002ec0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fe ff67 	bl	8001d9e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d071      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002edc:	483e      	ldr	r0, [pc, #248]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ede:	f7fe fe73 	bl	8001bc8 <LL_ADC_GetCommonPathInternalCh>
 8002ee2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3c      	ldr	r2, [pc, #240]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x6e2>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d127      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0e:	d157      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f18:	4619      	mov	r1, r3
 8002f1a:	482f      	ldr	r0, [pc, #188]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f1c:	f7fe fe41 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f20:	4b30      	ldr	r3, [pc, #192]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	4a30      	ldr	r2, [pc, #192]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3a:	e002      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f48:	e03a      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <HAL_ADC_ConfigChannel+0x7d4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d113      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10d      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02a      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	4619      	mov	r1, r3
 8002f74:	4818      	ldr	r0, [pc, #96]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f76:	f7fe fe14 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f7a:	e021      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11c      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d011      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fa8:	f7fe fdfb 	bl	8001ba2 <LL_ADC_SetCommonPathInternalCh>
 8002fac:	e008      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fc8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	37d8      	adds	r7, #216	@ 0xd8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	80080000 	.word	0x80080000
 8002fd8:	50000300 	.word	0x50000300
 8002fdc:	c3210000 	.word	0xc3210000
 8002fe0:	90c00010 	.word	0x90c00010
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	c7520000 	.word	0xc7520000
 8002ff0:	50000100 	.word	0x50000100
 8002ff4:	cb840000 	.word	0xcb840000

08002ff8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fff4 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 8003014:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f815 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 8003020:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8098 	beq.w	8003160 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02a      	beq.n	8003094 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7f5b      	ldrb	r3, [r3, #29]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d126      	bne.n	8003094 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7f1b      	ldrb	r3, [r3, #28]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d122      	bne.n	8003094 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800304e:	2301      	movs	r3, #1
 8003050:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003052:	e014      	b.n	800307e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4a45      	ldr	r2, [pc, #276]	@ (800316c <ADC_ConversionStop+0x174>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d90d      	bls.n	8003078 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e074      	b.n	8003162 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b40      	cmp	r3, #64	@ 0x40
 800308a:	d1e3      	bne.n	8003054 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d014      	beq.n	80030c4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe ffac 	bl	8001ffc <LL_ADC_REG_IsConversionOngoing>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe ff69 	bl	8001f86 <LL_ADC_IsDisableOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe ff88 	bl	8001fd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d014      	beq.n	80030f4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe ffbb 	bl	800204a <LL_ADC_INJ_IsConversionOngoing>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe ff51 	bl	8001f86 <LL_ADC_IsDisableOngoing>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff97 	bl	8002022 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d005      	beq.n	8003106 <ADC_ConversionStop+0x10e>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d105      	bne.n	800310c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003100:	230c      	movs	r3, #12
 8003102:	617b      	str	r3, [r7, #20]
        break;
 8003104:	e005      	b.n	8003112 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003106:	2308      	movs	r3, #8
 8003108:	617b      	str	r3, [r7, #20]
        break;
 800310a:	e002      	b.n	8003112 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800310c:	2304      	movs	r3, #4
 800310e:	617b      	str	r3, [r7, #20]
        break;
 8003110:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003112:	f7fe fd27 	bl	8001b64 <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003118:	e01b      	b.n	8003152 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800311a:	f7fe fd23 	bl	8001b64 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b05      	cmp	r3, #5
 8003126:	d914      	bls.n	8003152 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e007      	b.n	8003162 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1dc      	bne.n	800311a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	a33fffff 	.word	0xa33fffff

08003170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe feed 	bl	8001f60 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d169      	bne.n	8003260 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b36      	ldr	r3, [pc, #216]	@ (800326c <ADC_Enable+0xfc>)
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e055      	b.n	8003262 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fea8 	bl	8001f10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031c0:	482b      	ldr	r0, [pc, #172]	@ (8003270 <ADC_Enable+0x100>)
 80031c2:	f7fe fd01 	bl	8001bc8 <LL_ADC_GetCommonPathInternalCh>
 80031c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d0:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <ADC_Enable+0x104>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <ADC_Enable+0x108>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031ea:	e002      	b.n	80031f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fcb4 	bl	8001b64 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fe:	e028      	b.n	8003252 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe feab 	bl	8001f60 <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fe7b 	bl	8001f10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321a:	f7fe fca3 	bl	8001b64 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d914      	bls.n	8003252 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00d      	beq.n	8003252 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d1cf      	bne.n	8003200 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	8000003f 	.word	0x8000003f
 8003270:	50000300 	.word	0x50000300
 8003274:	20000000 	.word	0x20000000
 8003278:	053e2d63 	.word	0x053e2d63

0800327c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fe7c 	bl	8001f86 <LL_ADC_IsDisableOngoing>
 800328e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fe63 	bl	8001f60 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d047      	beq.n	8003330 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d144      	bne.n	8003330 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030d 	and.w	r3, r3, #13
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10c      	bne.n	80032ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fe3d 	bl	8001f38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2203      	movs	r2, #3
 80032c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032c6:	f7fe fc4d 	bl	8001b64 <HAL_GetTick>
 80032ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032cc:	e029      	b.n	8003322 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e023      	b.n	8003332 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ea:	f7fe fc3b 	bl	8001b64 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d914      	bls.n	8003322 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1dc      	bne.n	80032ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <LL_ADC_IsEnabled>:
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <LL_ADC_IsEnabled+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_ADC_IsEnabled+0x1a>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_REG_IsConversionOngoing>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d101      	bne.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b0a1      	sub	sp, #132	@ 0x84
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e08b      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ae:	2300      	movs	r3, #0
 80033b0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033b2:	2300      	movs	r3, #0
 80033b4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033be:	d102      	bne.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033c0:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e001      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e06a      	b.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ffb8 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ffb2 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d14c      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003404:	2b00      	cmp	r3, #0
 8003406:	d149      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003408:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800340a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d028      	beq.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003426:	035b      	lsls	r3, r3, #13
 8003428:	430b      	orrs	r3, r1
 800342a:	431a      	orrs	r2, r3
 800342c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003430:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003434:	f7ff ff81 	bl	800333a <LL_ADC_IsEnabled>
 8003438:	4604      	mov	r4, r0
 800343a:	4823      	ldr	r0, [pc, #140]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800343c:	f7ff ff7d 	bl	800333a <LL_ADC_IsEnabled>
 8003440:	4603      	mov	r3, r0
 8003442:	4323      	orrs	r3, r4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d133      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6811      	ldr	r1, [r2, #0]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	430a      	orrs	r2, r1
 800345e:	431a      	orrs	r2, r3
 8003460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003462:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003464:	e024      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800346e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003470:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003472:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003476:	f7ff ff60 	bl	800333a <LL_ADC_IsEnabled>
 800347a:	4604      	mov	r4, r0
 800347c:	4812      	ldr	r0, [pc, #72]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800347e:	f7ff ff5c 	bl	800333a <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	4323      	orrs	r3, r4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d112      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800348a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003492:	f023 030f 	bic.w	r3, r3, #15
 8003496:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003498:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800349a:	e009      	b.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034ae:	e000      	b.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3784      	adds	r7, #132	@ 0x84
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000300 	.word	0x50000300

080034d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db0b      	blt.n	800355e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4907      	ldr	r1, [pc, #28]	@ (800356c <__NVIC_EnableIRQ+0x38>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	@ (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800363c:	d301      	bcc.n	8003642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <SysTick_Config+0x40>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364a:	210f      	movs	r1, #15
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	f7ff ff8e 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <SysTick_Config+0x40>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <SysTick_Config+0x40>)
 800365c:	2207      	movs	r2, #7
 800365e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff29 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003694:	f7ff ff40 	bl	8003518 <__NVIC_GetPriorityGrouping>
 8003698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff90 	bl	80035c4 <NVIC_EncodePriority>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff5f 	bl	8003570 <__NVIC_SetPriority>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff33 	bl	8003534 <__NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffa4 	bl	800362c <SysTick_Config>
 80036e4:	4603      	mov	r3, r0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e147      	b.n	8003992 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd ffac 	bl	8001674 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800372c:	f7fe fa1a 	bl	8001b64 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003732:	e012      	b.n	800375a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003734:	f7fe fa16 	bl	8001b64 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d90b      	bls.n	800375a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2203      	movs	r2, #3
 8003752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e11b      	b.n	8003992 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d0e5      	beq.n	8003734 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003778:	f7fe f9f4 	bl	8001b64 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800377e:	e012      	b.n	80037a6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003780:	f7fe f9f0 	bl	8001b64 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b0a      	cmp	r3, #10
 800378c:	d90b      	bls.n	80037a6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f5      	b.n	8003992 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0e5      	beq.n	8003780 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0202 	orr.w	r2, r2, #2
 80037c2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a74      	ldr	r2, [pc, #464]	@ (800399c <HAL_FDCAN_Init+0x2ac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d103      	bne.n	80037d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80037ce:	4a74      	ldr	r2, [pc, #464]	@ (80039a0 <HAL_FDCAN_Init+0x2b0>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7c1b      	ldrb	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ec:	619a      	str	r2, [r3, #24]
 80037ee:	e007      	b.n	8003800 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7c5b      	ldrb	r3, [r3, #17]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d108      	bne.n	800381a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003816:	619a      	str	r2, [r3, #24]
 8003818:	e007      	b.n	800382a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699a      	ldr	r2, [r3, #24]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003828:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7c9b      	ldrb	r3, [r3, #18]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003840:	619a      	str	r2, [r3, #24]
 8003842:	e007      	b.n	8003854 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003852:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003878:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0210 	bic.w	r2, r2, #16
 8003888:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d108      	bne.n	80038a4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0204 	orr.w	r2, r2, #4
 80038a0:	619a      	str	r2, [r3, #24]
 80038a2:	e02c      	b.n	80038fe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d028      	beq.n	80038fe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d01c      	beq.n	80038ee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038c2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0210 	orr.w	r2, r2, #16
 80038d2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d110      	bne.n	80038fe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	619a      	str	r2, [r3, #24]
 80038ec:	e007      	b.n	80038fe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0220 	orr.w	r2, r2, #32
 80038fc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	3b01      	subs	r3, #1
 8003904:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	3b01      	subs	r3, #1
 800390c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800390e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003916:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	3b01      	subs	r3, #1
 8003920:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003926:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003928:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003932:	d115      	bne.n	8003960 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	3b01      	subs	r3, #1
 8003940:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003942:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	3b01      	subs	r3, #1
 800394a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800394c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	3b01      	subs	r3, #1
 8003956:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800395c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800395e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f978 	bl	8003c6c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40006400 	.word	0x40006400
 80039a0:	40006500 	.word	0x40006500

080039a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d110      	bne.n	80039da <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e006      	b.n	80039e8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d12c      	bne.n	8003a66 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e023      	b.n	8003a74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f968 	bl	8003d18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e006      	b.n	8003a74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ab2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d003      	beq.n	8003ac2 <HAL_FDCAN_ActivateNotification+0x22>
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	f040 80c8 	bne.w	8003c52 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03b      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d031      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d027      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00c      	beq.n	8003b66 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d13b      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d131      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d127      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d113      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0202 	orr.w	r2, r2, #2
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e006      	b.n	8003c60 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c74:	4b27      	ldr	r3, [pc, #156]	@ (8003d14 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003c76:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c86:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8e:	041a      	lsls	r2, r3, #16
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	061a      	lsls	r2, r3, #24
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e005      	b.n	8003cfa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3f3      	bcc.n	8003cee <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	4000a400 	.word	0x4000a400

08003d18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	@ 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003d36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	e00a      	b.n	8003d5a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003d4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003d52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d58:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d64:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003d6a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003d70:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	440b      	add	r3, r1
 8003d8c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	3304      	adds	r3, #4
 8003d98:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3304      	adds	r3, #4
 8003da4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e020      	b.n	8003dee <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3303      	adds	r3, #3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3302      	adds	r3, #2
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	440b      	add	r3, r1
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003dc4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	440b      	add	r3, r1
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003dd2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	440a      	add	r2, r1
 8003dda:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ddc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3304      	adds	r3, #4
 8003de6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3304      	adds	r3, #4
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a06      	ldr	r2, [pc, #24]	@ (8003e0c <FDCAN_CopyMessageToRAM+0xf4>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	461a      	mov	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d3d6      	bcc.n	8003dac <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	3724      	adds	r7, #36	@ 0x24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	080067b0 	.word	0x080067b0

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e1e:	e15a      	b.n	80040d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 814c 	beq.w	80040d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d005      	beq.n	8003e50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d130      	bne.n	8003eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e86:	2201      	movs	r2, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0201 	and.w	r2, r3, #1
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d017      	beq.n	8003eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d123      	bne.n	8003f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	6939      	ldr	r1, [r7, #16]
 8003f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80a6 	beq.w	80040d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f84:	4b5b      	ldr	r3, [pc, #364]	@ (80040f4 <HAL_GPIO_Init+0x2e4>)
 8003f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f88:	4a5a      	ldr	r2, [pc, #360]	@ (80040f4 <HAL_GPIO_Init+0x2e4>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f90:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_GPIO_Init+0x2e4>)
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f9c:	4a56      	ldr	r2, [pc, #344]	@ (80040f8 <HAL_GPIO_Init+0x2e8>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	220f      	movs	r2, #15
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fc6:	d01f      	beq.n	8004008 <HAL_GPIO_Init+0x1f8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a4c      	ldr	r2, [pc, #304]	@ (80040fc <HAL_GPIO_Init+0x2ec>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d019      	beq.n	8004004 <HAL_GPIO_Init+0x1f4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8004100 <HAL_GPIO_Init+0x2f0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <HAL_GPIO_Init+0x1f0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a4a      	ldr	r2, [pc, #296]	@ (8004104 <HAL_GPIO_Init+0x2f4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00d      	beq.n	8003ffc <HAL_GPIO_Init+0x1ec>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a49      	ldr	r2, [pc, #292]	@ (8004108 <HAL_GPIO_Init+0x2f8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <HAL_GPIO_Init+0x1e8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a48      	ldr	r2, [pc, #288]	@ (800410c <HAL_GPIO_Init+0x2fc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_GPIO_Init+0x1e4>
 8003ff0:	2305      	movs	r3, #5
 8003ff2:	e00a      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	e008      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e006      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e004      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8004000:	2302      	movs	r3, #2
 8004002:	e002      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_GPIO_Init+0x1fa>
 8004008:	2300      	movs	r3, #0
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	f002 0203 	and.w	r2, r2, #3
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	4093      	lsls	r3, r2
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800401a:	4937      	ldr	r1, [pc, #220]	@ (80040f8 <HAL_GPIO_Init+0x2e8>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004028:	4b39      	ldr	r3, [pc, #228]	@ (8004110 <HAL_GPIO_Init+0x300>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800404c:	4a30      	ldr	r2, [pc, #192]	@ (8004110 <HAL_GPIO_Init+0x300>)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004052:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <HAL_GPIO_Init+0x300>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004076:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <HAL_GPIO_Init+0x300>)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800407c:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_GPIO_Init+0x300>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_GPIO_Init+0x300>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <HAL_GPIO_Init+0x300>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ca:	4a11      	ldr	r2, [pc, #68]	@ (8004110 <HAL_GPIO_Init+0x300>)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f ae9d 	bne.w	8003e20 <HAL_GPIO_Init+0x10>
  }
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40010000 	.word	0x40010000
 80040fc:	48000400 	.word	0x48000400
 8004100:	48000800 	.word	0x48000800
 8004104:	48000c00 	.word	0x48000c00
 8004108:	48001000 	.word	0x48001000
 800410c:	48001400 	.word	0x48001400
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004130:	e002      	b.n	8004138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d141      	bne.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004152:	4b4b      	ldr	r3, [pc, #300]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d131      	bne.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004160:	4b47      	ldr	r3, [pc, #284]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004166:	4a46      	ldr	r2, [pc, #280]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800416c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004170:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004178:	4a41      	ldr	r2, [pc, #260]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800417e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004180:	4b40      	ldr	r3, [pc, #256]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2232      	movs	r2, #50	@ 0x32
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	4a3f      	ldr	r2, [pc, #252]	@ (8004288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	0c9b      	lsrs	r3, r3, #18
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004196:	e002      	b.n	800419e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419e:	4b38      	ldr	r3, [pc, #224]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041aa:	d102      	bne.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f2      	bne.n	8004198 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b2:	4b33      	ldr	r3, [pc, #204]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041be:	d158      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e057      	b.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041d4:	e04d      	b.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041dc:	d141      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041de:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ea:	d131      	bne.n	8004250 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041ec:	4b24      	ldr	r3, [pc, #144]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f2:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041fc:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004204:	4a1e      	ldr	r2, [pc, #120]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800420a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800420c:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2232      	movs	r2, #50	@ 0x32
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	0c9b      	lsrs	r3, r3, #18
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004222:	e002      	b.n	800422a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d102      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f2      	bne.n	8004224 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424a:	d112      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e011      	b.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004256:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004260:	e007      	b.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004262:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800426a:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004270:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40007000 	.word	0x40007000
 8004284:	20000000 	.word	0x20000000
 8004288:	431bde83 	.word	0x431bde83

0800428c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800429a:	6093      	str	r3, [r2, #8]
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40007000 	.word	0x40007000

080042ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e2fe      	b.n	80048bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d075      	beq.n	80043b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ca:	4b97      	ldr	r3, [pc, #604]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d4:	4b94      	ldr	r3, [pc, #592]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_OscConfig+0x3e>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d002      	beq.n	80042f0 <HAL_RCC_OscConfig+0x44>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10b      	bne.n	8004308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05b      	beq.n	80043b4 <HAL_RCC_OscConfig+0x108>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d157      	bne.n	80043b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e2d9      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d106      	bne.n	8004320 <HAL_RCC_OscConfig+0x74>
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a84      	ldr	r2, [pc, #528]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e01d      	b.n	800435c <HAL_RCC_OscConfig+0xb0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x98>
 800432a:	4b7f      	ldr	r3, [pc, #508]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a7e      	ldr	r2, [pc, #504]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b7c      	ldr	r3, [pc, #496]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7b      	ldr	r2, [pc, #492]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0xb0>
 8004344:	4b78      	ldr	r3, [pc, #480]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a77      	ldr	r2, [pc, #476]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 800434a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b75      	ldr	r3, [pc, #468]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a74      	ldr	r2, [pc, #464]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd fbfe 	bl	8001b64 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436c:	f7fd fbfa 	bl	8001b64 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	@ 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e29e      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0xc0>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd fbea 	bl	8001b64 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004394:	f7fd fbe6 	bl	8001b64 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	@ 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e28a      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a6:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0xe8>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d075      	beq.n	80044ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043cc:	4b56      	ldr	r3, [pc, #344]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_OscConfig+0x136>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d002      	beq.n	80043e8 <HAL_RCC_OscConfig+0x13c>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11f      	bne.n	8004428 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_OscConfig+0x154>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e25d      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004400:	4b49      	ldr	r3, [pc, #292]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	4946      	ldr	r1, [pc, #280]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004414:	4b45      	ldr	r3, [pc, #276]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fb57 	bl	8001acc <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d043      	beq.n	80044ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e249      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3c      	ldr	r2, [pc, #240]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fb92 	bl	8001b64 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004444:	f7fd fb8e 	bl	8001b64 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e232      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004456:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004462:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	492d      	ldr	r1, [pc, #180]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
 8004476:	e01a      	b.n	80044ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004478:	4b2b      	ldr	r3, [pc, #172]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2a      	ldr	r2, [pc, #168]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 800447e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fb6e 	bl	8001b64 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448c:	f7fd fb6a 	bl	8001b64 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e20e      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800449e:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1e0>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d041      	beq.n	800453e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01c      	beq.n	80044fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c2:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c8:	4a17      	ldr	r2, [pc, #92]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fd fb47 	bl	8001b64 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044da:	f7fd fb43 	bl	8001b64 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1e7      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ef      	beq.n	80044da <HAL_RCC_OscConfig+0x22e>
 80044fa:	e020      	b.n	800453e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004502:	4a09      	ldr	r2, [pc, #36]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fb2a 	bl	8001b64 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004512:	e00d      	b.n	8004530 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fb26 	bl	8001b64 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d906      	bls.n	8004530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ca      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004530:	4b8c      	ldr	r3, [pc, #560]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ea      	bne.n	8004514 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80a6 	beq.w	8004698 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454c:	2300      	movs	r3, #0
 800454e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004550:	4b84      	ldr	r3, [pc, #528]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x2b4>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x2b6>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b7f      	ldr	r3, [pc, #508]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	4a7e      	ldr	r2, [pc, #504]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	@ 0x58
 8004572:	4b7c      	ldr	r3, [pc, #496]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b79      	ldr	r3, [pc, #484]	@ (8004768 <HAL_RCC_OscConfig+0x4bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458e:	4b76      	ldr	r3, [pc, #472]	@ (8004768 <HAL_RCC_OscConfig+0x4bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	@ (8004768 <HAL_RCC_OscConfig+0x4bc>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fd fae3 	bl	8001b64 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fd fadf 	bl	8001b64 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e183      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004768 <HAL_RCC_OscConfig+0x4bc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <HAL_RCC_OscConfig+0x32e>
 80045c8:	4b66      	ldr	r3, [pc, #408]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	4a65      	ldr	r2, [pc, #404]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d8:	e024      	b.n	8004624 <HAL_RCC_OscConfig+0x378>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d110      	bne.n	8004604 <HAL_RCC_OscConfig+0x358>
 80045e2:	4b60      	ldr	r3, [pc, #384]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004602:	e00f      	b.n	8004624 <HAL_RCC_OscConfig+0x378>
 8004604:	4b57      	ldr	r3, [pc, #348]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a56      	ldr	r2, [pc, #344]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004614:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd fa9a 	bl	8001b64 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd fa96 	bl	8001b64 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e138      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b46      	ldr	r3, [pc, #280]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ed      	beq.n	8004634 <HAL_RCC_OscConfig+0x388>
 8004658:	e015      	b.n	8004686 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fa83 	bl	8001b64 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fa7f 	bl	8001b64 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e121      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004678:	4b3a      	ldr	r3, [pc, #232]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ed      	bne.n	8004662 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004686:	7ffb      	ldrb	r3, [r7, #31]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	4a34      	ldr	r2, [pc, #208]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004696:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03c      	beq.n	800471e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80046ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fd fa52 	bl	8001b64 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c4:	f7fd fa4e 	bl	8001b64 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0f2      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d6:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ef      	beq.n	80046c4 <HAL_RCC_OscConfig+0x418>
 80046e4:	e01b      	b.n	800471e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fd fa35 	bl	8001b64 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fe:	f7fd fa31 	bl	8001b64 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0d5      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004710:	4b14      	ldr	r3, [pc, #80]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ef      	bne.n	80046fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80c9 	beq.w	80048ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004728:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b0c      	cmp	r3, #12
 8004732:	f000 8083 	beq.w	800483c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d15e      	bne.n	80047fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fa0b 	bl	8001b64 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004750:	e00c      	b.n	800476c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fd fa07 	bl	8001b64 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d905      	bls.n	800476c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0ab      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
 8004764:	40021000 	.word	0x40021000
 8004768:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476c:	4b55      	ldr	r3, [pc, #340]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ec      	bne.n	8004752 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004778:	4b52      	ldr	r3, [pc, #328]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4b52      	ldr	r3, [pc, #328]	@ (80048c8 <HAL_RCC_OscConfig+0x61c>)
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a11      	ldr	r1, [r2, #32]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004788:	3a01      	subs	r2, #1
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	4311      	orrs	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004792:	0212      	lsls	r2, r2, #8
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800479a:	0852      	lsrs	r2, r2, #1
 800479c:	3a01      	subs	r2, #1
 800479e:	0552      	lsls	r2, r2, #21
 80047a0:	4311      	orrs	r1, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047a6:	0852      	lsrs	r2, r2, #1
 80047a8:	3a01      	subs	r2, #1
 80047aa:	0652      	lsls	r2, r2, #25
 80047ac:	4311      	orrs	r1, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047b2:	06d2      	lsls	r2, r2, #27
 80047b4:	430a      	orrs	r2, r1
 80047b6:	4943      	ldr	r1, [pc, #268]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b41      	ldr	r3, [pc, #260]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a40      	ldr	r2, [pc, #256]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047c8:	4b3e      	ldr	r3, [pc, #248]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a3d      	ldr	r2, [pc, #244]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd f9c6 	bl	8001b64 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd f9c2 	bl	8001b64 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e066      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	4b35      	ldr	r3, [pc, #212]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x530>
 80047fa:	e05e      	b.n	80048ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a30      	ldr	r2, [pc, #192]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd f9ac 	bl	8001b64 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd f9a8 	bl	8001b64 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e04c      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	4924      	ldr	r1, [pc, #144]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 8004834:	4b25      	ldr	r3, [pc, #148]	@ (80048cc <HAL_RCC_OscConfig+0x620>)
 8004836:	4013      	ands	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]
 800483a:	e03e      	b.n	80048ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e039      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004848:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <HAL_RCC_OscConfig+0x618>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	429a      	cmp	r2, r3
 800485a:	d12c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d123      	bne.n	80048b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d11b      	bne.n	80048b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d113      	bne.n	80048b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	019f800c 	.word	0x019f800c
 80048cc:	feeefffc 	.word	0xfeeefffc

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e11e      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b91      	ldr	r3, [pc, #580]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d910      	bls.n	8004918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b8e      	ldr	r3, [pc, #568]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 020f 	bic.w	r2, r3, #15
 80048fe:	498c      	ldr	r1, [pc, #560]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b8a      	ldr	r3, [pc, #552]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e106      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d073      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d129      	bne.n	8004980 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492c:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0f4      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800493c:	f000 f966 	bl	8004c0c <RCC_GetSysClockFreqFromPLLSource>
 8004940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4a7c      	ldr	r2, [pc, #496]	@ (8004b38 <HAL_RCC_ClockConfig+0x268>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d93f      	bls.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800494a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d033      	beq.n	80049ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004966:	2b00      	cmp	r3, #0
 8004968:	d12f      	bne.n	80049ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800496a:	4b72      	ldr	r3, [pc, #456]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004972:	4a70      	ldr	r2, [pc, #448]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004978:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e024      	b.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004988:	4b6a      	ldr	r3, [pc, #424]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0c6      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004998:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0be      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049a8:	f000 f8ce 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4a61      	ldr	r2, [pc, #388]	@ (8004b38 <HAL_RCC_ClockConfig+0x268>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d909      	bls.n	80049ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049be:	4a5d      	ldr	r2, [pc, #372]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4957      	ldr	r1, [pc, #348]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049dc:	f7fd f8c2 	bl	8001b64 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fd f8be 	bl	8001b64 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e095      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d023      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b43      	ldr	r3, [pc, #268]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a42      	ldr	r2, [pc, #264]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a44:	4a3b      	ldr	r2, [pc, #236]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4936      	ldr	r1, [pc, #216]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b80      	cmp	r3, #128	@ 0x80
 8004a64:	d105      	bne.n	8004a72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a66:	4b33      	ldr	r3, [pc, #204]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004a6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a72:	4b2f      	ldr	r3, [pc, #188]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d21d      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 020f 	bic.w	r2, r3, #15
 8004a88:	4929      	ldr	r1, [pc, #164]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a90:	f7fd f868 	bl	8001b64 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fd f864 	bl	8001b64 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e03b      	b.n	8004b26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	@ (8004b30 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1ed      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4917      	ldr	r1, [pc, #92]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae6:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490f      	ldr	r1, [pc, #60]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004afa:	f000 f825 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <HAL_RCC_ClockConfig+0x264>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490c      	ldr	r1, [pc, #48]	@ (8004b3c <HAL_RCC_ClockConfig+0x26c>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a0a      	ldr	r2, [pc, #40]	@ (8004b40 <HAL_RCC_ClockConfig+0x270>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <HAL_RCC_ClockConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc ffd4 	bl	8001acc <HAL_InitTick>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	04c4b400 	.word	0x04c4b400
 8004b3c:	080067a0 	.word	0x080067a0
 8004b40:	20000000 	.word	0x20000000
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e047      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b60:	4b27      	ldr	r3, [pc, #156]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b6c:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e03e      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b72:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d136      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7e:	4b20      	ldr	r3, [pc, #128]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	4a16      	ldr	r2, [pc, #88]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	0a12      	lsrs	r2, r2, #8
 8004baa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
      break;
 8004bb4:	e00c      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb6:	4a13      	ldr	r2, [pc, #76]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	4a10      	ldr	r2, [pc, #64]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	0a12      	lsrs	r2, r2, #8
 8004bc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
      break;
 8004bce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0e5b      	lsrs	r3, r3, #25
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e001      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bf0:	693b      	ldr	r3, [r7, #16]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c12:	4b1e      	ldr	r3, [pc, #120]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d10c      	bne.n	8004c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c30:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c3a:	68d2      	ldr	r2, [r2, #12]
 8004c3c:	0a12      	lsrs	r2, r2, #8
 8004c3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	617b      	str	r3, [r7, #20]
    break;
 8004c48:	e00c      	b.n	8004c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c4a:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	4a0e      	ldr	r2, [pc, #56]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	0a12      	lsrs	r2, r2, #8
 8004c58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
    break;
 8004c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0e5b      	lsrs	r3, r3, #25
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c7e:	687b      	ldr	r3, [r7, #4]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	007a1200 	.word	0x007a1200
 8004c94:	00f42400 	.word	0x00f42400

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8098 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b43      	ldr	r3, [pc, #268]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	4b40      	ldr	r3, [pc, #256]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cca:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a39      	ldr	r2, [pc, #228]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cee:	f7fc ff39 	bl	8001b64 <HAL_GetTick>
 8004cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf4:	e009      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7fc ff35 	bl	8001b64 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d902      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	74fb      	strb	r3, [r7, #19]
        break;
 8004d08:	e005      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0a:	4b30      	ldr	r3, [pc, #192]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ef      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d159      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01e      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d019      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d38:	4b23      	ldr	r3, [pc, #140]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d44:	4b20      	ldr	r3, [pc, #128]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d64:	4a18      	ldr	r2, [pc, #96]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fc fef5 	bl	8001b64 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7c:	e00b      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fc fef1 	bl	8001b64 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d902      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	74fb      	strb	r3, [r7, #19]
            break;
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d96:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ec      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004daa:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	4903      	ldr	r1, [pc, #12]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	74bb      	strb	r3, [r7, #18]
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd4:	7c7b      	ldrb	r3, [r7, #17]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d105      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dda:	4ba6      	ldr	r3, [pc, #664]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	4aa5      	ldr	r2, [pc, #660]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004df2:	4ba0      	ldr	r3, [pc, #640]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df8:	f023 0203 	bic.w	r2, r3, #3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	499c      	ldr	r1, [pc, #624]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e14:	4b97      	ldr	r3, [pc, #604]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	f023 020c 	bic.w	r2, r3, #12
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4994      	ldr	r1, [pc, #592]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e36:	4b8f      	ldr	r3, [pc, #572]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	498b      	ldr	r1, [pc, #556]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e58:	4b86      	ldr	r3, [pc, #536]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	4983      	ldr	r1, [pc, #524]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e7a:	4b7e      	ldr	r3, [pc, #504]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	497a      	ldr	r1, [pc, #488]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e9c:	4b75      	ldr	r3, [pc, #468]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	4972      	ldr	r1, [pc, #456]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	4969      	ldr	r1, [pc, #420]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ee0:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4961      	ldr	r1, [pc, #388]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f02:	4b5c      	ldr	r3, [pc, #368]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	4958      	ldr	r1, [pc, #352]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f24:	4b53      	ldr	r3, [pc, #332]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	4950      	ldr	r1, [pc, #320]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f44:	4b4b      	ldr	r3, [pc, #300]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a4a      	ldr	r2, [pc, #296]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f5c:	4b45      	ldr	r3, [pc, #276]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4942      	ldr	r1, [pc, #264]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a3c      	ldr	r2, [pc, #240]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f94:	4b37      	ldr	r3, [pc, #220]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	4934      	ldr	r1, [pc, #208]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fcc:	4b29      	ldr	r3, [pc, #164]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fda:	4926      	ldr	r1, [pc, #152]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fec:	4b21      	ldr	r3, [pc, #132]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	4918      	ldr	r1, [pc, #96]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005024:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800503c:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	490a      	ldr	r1, [pc, #40]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005066:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005068:	7cbb      	ldrb	r3, [r7, #18]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000

08005078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e049      	b.n	800511e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fb42 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 fd92 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04a      	b.n	80051d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a21      	ldr	r2, [pc, #132]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x6c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516a:	d013      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x6c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x6c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ec <HAL_TIM_Base_Start_IT+0xc4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x6c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1a      	ldr	r2, [pc, #104]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x6c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a19      	ldr	r2, [pc, #100]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d115      	bne.n	80051c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b17      	ldr	r3, [pc, #92]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d015      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xaa>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ac:	d011      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e008      	b.n	80051d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	00010007 	.word	0x00010007

080051fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e049      	b.n	80052a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f841 	bl	80052aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f000 fcd0 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x24>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e03c      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start+0x3e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e02f      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x58>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e022      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d109      	bne.n	8005332 <HAL_TIM_PWM_Start+0x72>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e015      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b10      	cmp	r3, #16
 8005336:	d109      	bne.n	800534c <HAL_TIM_PWM_Start+0x8c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_TIM_PWM_Start+0x9e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e097      	b.n	8005496 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xb6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005374:	e023      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xc6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005384:	e01b      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xd6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005394:	e013      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xe6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a4:	e00b      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0xf6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b4:	e003      	b.n	80053be <HAL_TIM_PWM_Start+0xfe>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f838 	bl	800643c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a33      	ldr	r2, [pc, #204]	@ (80054a0 <HAL_TIM_PWM_Start+0x1e0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <HAL_TIM_PWM_Start+0x1e4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a30      	ldr	r2, [pc, #192]	@ (80054a8 <HAL_TIM_PWM_Start+0x1e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	@ (80054ac <HAL_TIM_PWM_Start+0x1ec>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_PWM_Start+0x13e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <HAL_TIM_PWM_Start+0x1f0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_PWM_Start+0x142>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_TIM_PWM_Start+0x144>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005416:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a20      	ldr	r2, [pc, #128]	@ (80054a0 <HAL_TIM_PWM_Start+0x1e0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_TIM_PWM_Start+0x194>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d013      	beq.n	8005454 <HAL_TIM_PWM_Start+0x194>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a20      	ldr	r2, [pc, #128]	@ (80054b4 <HAL_TIM_PWM_Start+0x1f4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_TIM_PWM_Start+0x194>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1f      	ldr	r2, [pc, #124]	@ (80054b8 <HAL_TIM_PWM_Start+0x1f8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_TIM_PWM_Start+0x194>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a17      	ldr	r2, [pc, #92]	@ (80054a4 <HAL_TIM_PWM_Start+0x1e4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_TIM_PWM_Start+0x194>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a16      	ldr	r2, [pc, #88]	@ (80054a8 <HAL_TIM_PWM_Start+0x1e8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d115      	bne.n	8005480 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	4b18      	ldr	r3, [pc, #96]	@ (80054bc <HAL_TIM_PWM_Start+0x1fc>)
 800545c:	4013      	ands	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b06      	cmp	r3, #6
 8005464:	d015      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1d2>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546c:	d011      	beq.n	8005492 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547e:	e008      	b.n	8005492 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	e000      	b.n	8005494 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	00010007 	.word	0x00010007

080054c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0202 	mvn.w	r2, #2
 80054f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb4a 	bl	8005ba4 <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb3c 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb4d 	bl	8005bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d020      	beq.n	8005570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0204 	mvn.w	r2, #4
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fb24 	bl	8005ba4 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb16 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb27 	bl	8005bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01b      	beq.n	80055bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0208 	mvn.w	r2, #8
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fafe 	bl	8005ba4 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 faf0 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb01 	bl	8005bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d020      	beq.n	8005608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01b      	beq.n	8005608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0210 	mvn.w	r2, #16
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2208      	movs	r2, #8
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fad8 	bl	8005ba4 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 faca 	bl	8005b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fadb 	bl	8005bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0201 	mvn.w	r2, #1
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 faa8 	bl	8005b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00c      	beq.n	800565a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 f82f 	bl	80066b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 f827 	bl	80066cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fa95 	bl	8005bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00c      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0220 	mvn.w	r2, #32
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 ffef 	bl	80066a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fffb 	bl	80066e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fff3 	bl	80066f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ffeb 	bl	8006708 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 ffe3 	bl	800671c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577a:	2302      	movs	r3, #2
 800577c:	e0ff      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b14      	cmp	r3, #20
 800578a:	f200 80f0 	bhi.w	800596e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800578e:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057e9 	.word	0x080057e9
 8005798:	0800596f 	.word	0x0800596f
 800579c:	0800596f 	.word	0x0800596f
 80057a0:	0800596f 	.word	0x0800596f
 80057a4:	08005829 	.word	0x08005829
 80057a8:	0800596f 	.word	0x0800596f
 80057ac:	0800596f 	.word	0x0800596f
 80057b0:	0800596f 	.word	0x0800596f
 80057b4:	0800586b 	.word	0x0800586b
 80057b8:	0800596f 	.word	0x0800596f
 80057bc:	0800596f 	.word	0x0800596f
 80057c0:	0800596f 	.word	0x0800596f
 80057c4:	080058ab 	.word	0x080058ab
 80057c8:	0800596f 	.word	0x0800596f
 80057cc:	0800596f 	.word	0x0800596f
 80057d0:	0800596f 	.word	0x0800596f
 80057d4:	080058ed 	.word	0x080058ed
 80057d8:	0800596f 	.word	0x0800596f
 80057dc:	0800596f 	.word	0x0800596f
 80057e0:	0800596f 	.word	0x0800596f
 80057e4:	0800592d 	.word	0x0800592d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa92 	bl	8005d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0208 	orr.w	r2, r2, #8
 8005802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0204 	bic.w	r2, r2, #4
 8005812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	619a      	str	r2, [r3, #24]
      break;
 8005826:	e0a5      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fb02 	bl	8005e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6999      	ldr	r1, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	619a      	str	r2, [r3, #24]
      break;
 8005868:	e084      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fb6b 	bl	8005f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69d9      	ldr	r1, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	61da      	str	r2, [r3, #28]
      break;
 80058a8:	e064      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fbd3 	bl	800605c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	61da      	str	r2, [r3, #28]
      break;
 80058ea:	e043      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fc3c 	bl	8006170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0204 	bic.w	r2, r2, #4
 8005916:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800592a:	e023      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fc80 	bl	8006238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005956:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800596c:	e002      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
      break;
 8005972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop

08005988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_ConfigClockSource+0x1c>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e0de      	b.n	8005b62 <HAL_TIM_ConfigClockSource+0x1da>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80059c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a63      	ldr	r2, [pc, #396]	@ (8005b6c <HAL_TIM_ConfigClockSource+0x1e4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 80a9 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 80059e4:	4a61      	ldr	r2, [pc, #388]	@ (8005b6c <HAL_TIM_ConfigClockSource+0x1e4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f200 80ae 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 80059ec:	4a60      	ldr	r2, [pc, #384]	@ (8005b70 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f000 80a1 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 80059f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b70 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f200 80a6 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 80059fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005b74 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f000 8099 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a04:	4a5b      	ldr	r2, [pc, #364]	@ (8005b74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	f200 809e 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8005b78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	f000 8091 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a14:	4a58      	ldr	r2, [pc, #352]	@ (8005b78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f200 8096 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a20:	f000 8089 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a28:	f200 808e 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a30:	d03e      	beq.n	8005ab0 <HAL_TIM_ConfigClockSource+0x128>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a36:	f200 8087 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_TIM_ConfigClockSource+0x1c6>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a46:	d87f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a48:	2b70      	cmp	r3, #112	@ 0x70
 8005a4a:	d01a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xfa>
 8005a4c:	2b70      	cmp	r3, #112	@ 0x70
 8005a4e:	d87b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a50:	2b60      	cmp	r3, #96	@ 0x60
 8005a52:	d050      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
 8005a54:	2b60      	cmp	r3, #96	@ 0x60
 8005a56:	d877      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a58:	2b50      	cmp	r3, #80	@ 0x50
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x14e>
 8005a5c:	2b50      	cmp	r3, #80	@ 0x50
 8005a5e:	d873      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d058      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x18e>
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d86f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a68:	2b30      	cmp	r3, #48	@ 0x30
 8005a6a:	d064      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	2b30      	cmp	r3, #48	@ 0x30
 8005a6e:	d86b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d060      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d867      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d05a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a80:	e062      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	f000 fcb3 	bl	80063fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      break;
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac0:	f000 fc9c 	bl	80063fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e03c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fc0e 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2150      	movs	r1, #80	@ 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fc67 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005af4:	e02c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fc2d 	bl	8006362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2160      	movs	r1, #96	@ 0x60
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fc57 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e01c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fbee 	bl	8006304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2140      	movs	r1, #64	@ 0x40
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fc47 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 fc3e 	bl	80063c2 <TIM_ITRx_SetConfig>
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	00100070 	.word	0x00100070
 8005b70:	00100040 	.word	0x00100040
 8005b74:	00100030 	.word	0x00100030
 8005b78:	00100020 	.word	0x00100020

08005b7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a42      	ldr	r2, [pc, #264]	@ (8005cfc <TIM_Base_SetConfig+0x11c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00f      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfe:	d00b      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3f      	ldr	r2, [pc, #252]	@ (8005d00 <TIM_Base_SetConfig+0x120>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d04 <TIM_Base_SetConfig+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	@ (8005d08 <TIM_Base_SetConfig+0x128>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d108      	bne.n	8005c2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a33      	ldr	r2, [pc, #204]	@ (8005cfc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01b      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c38:	d017      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	@ (8005d00 <TIM_Base_SetConfig+0x120>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2f      	ldr	r2, [pc, #188]	@ (8005d04 <TIM_Base_SetConfig+0x124>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d08 <TIM_Base_SetConfig+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2d      	ldr	r2, [pc, #180]	@ (8005d0c <TIM_Base_SetConfig+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d10 <TIM_Base_SetConfig+0x130>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2b      	ldr	r2, [pc, #172]	@ (8005d14 <TIM_Base_SetConfig+0x134>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <TIM_Base_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_Base_SetConfig+0xe8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	@ (8005d08 <TIM_Base_SetConfig+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0xe8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	@ (8005d0c <TIM_Base_SetConfig+0x12c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0xe8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <TIM_Base_SetConfig+0x130>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0xe8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a14      	ldr	r2, [pc, #80]	@ (8005d14 <TIM_Base_SetConfig+0x134>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d103      	bne.n	8005cd0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d105      	bne.n	8005cee <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f023 0201 	bic.w	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	611a      	str	r2, [r3, #16]
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800

08005d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f023 0201 	bic.w	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0302 	bic.w	r3, r3, #2
 8005d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <TIM_OC1_SetConfig+0x10c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00f      	beq.n	8005d98 <TIM_OC1_SetConfig+0x80>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <TIM_OC1_SetConfig+0x110>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_OC1_SetConfig+0x80>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a2a      	ldr	r2, [pc, #168]	@ (8005e2c <TIM_OC1_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_OC1_SetConfig+0x80>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a29      	ldr	r2, [pc, #164]	@ (8005e30 <TIM_OC1_SetConfig+0x118>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC1_SetConfig+0x80>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a28      	ldr	r2, [pc, #160]	@ (8005e34 <TIM_OC1_SetConfig+0x11c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d10c      	bne.n	8005db2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0308 	bic.w	r3, r3, #8
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 0304 	bic.w	r3, r3, #4
 8005db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <TIM_OC1_SetConfig+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_OC1_SetConfig+0xc2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e28 <TIM_OC1_SetConfig+0x110>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_OC1_SetConfig+0xc2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <TIM_OC1_SetConfig+0x114>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_OC1_SetConfig+0xc2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <TIM_OC1_SetConfig+0x118>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC1_SetConfig+0xc2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <TIM_OC1_SetConfig+0x11c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d111      	bne.n	8005dfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f023 0210 	bic.w	r2, r3, #16
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0320 	bic.w	r3, r3, #32
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a28      	ldr	r2, [pc, #160]	@ (8005f38 <TIM_OC2_SetConfig+0x100>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC2_SetConfig+0x6c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a27      	ldr	r2, [pc, #156]	@ (8005f3c <TIM_OC2_SetConfig+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <TIM_OC2_SetConfig+0x100>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00f      	beq.n	8005ee8 <TIM_OC2_SetConfig+0xb0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1c      	ldr	r2, [pc, #112]	@ (8005f3c <TIM_OC2_SetConfig+0x104>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00b      	beq.n	8005ee8 <TIM_OC2_SetConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <TIM_OC2_SetConfig+0x108>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d007      	beq.n	8005ee8 <TIM_OC2_SetConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <TIM_OC2_SetConfig+0x10c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC2_SetConfig+0xb0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <TIM_OC2_SetConfig+0x110>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d113      	bne.n	8005f10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a27      	ldr	r2, [pc, #156]	@ (8006048 <TIM_OC3_SetConfig+0xfc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0x6a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a26      	ldr	r2, [pc, #152]	@ (800604c <TIM_OC3_SetConfig+0x100>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10d      	bne.n	8005fd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <TIM_OC3_SetConfig+0xfc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00f      	beq.n	8005ffa <TIM_OC3_SetConfig+0xae>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800604c <TIM_OC3_SetConfig+0x100>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00b      	beq.n	8005ffa <TIM_OC3_SetConfig+0xae>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	@ (8006050 <TIM_OC3_SetConfig+0x104>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d007      	beq.n	8005ffa <TIM_OC3_SetConfig+0xae>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a19      	ldr	r2, [pc, #100]	@ (8006054 <TIM_OC3_SetConfig+0x108>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_OC3_SetConfig+0xae>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	@ (8006058 <TIM_OC3_SetConfig+0x10c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800608a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	031b      	lsls	r3, r3, #12
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a28      	ldr	r2, [pc, #160]	@ (800615c <TIM_OC4_SetConfig+0x100>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC4_SetConfig+0x6c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a27      	ldr	r2, [pc, #156]	@ (8006160 <TIM_OC4_SetConfig+0x104>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	031b      	lsls	r3, r3, #12
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <TIM_OC4_SetConfig+0x100>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC4_SetConfig+0xb0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006160 <TIM_OC4_SetConfig+0x104>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC4_SetConfig+0xb0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006164 <TIM_OC4_SetConfig+0x108>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC4_SetConfig+0xb0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <TIM_OC4_SetConfig+0x10c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC4_SetConfig+0xb0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a19      	ldr	r2, [pc, #100]	@ (800616c <TIM_OC4_SetConfig+0x110>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d113      	bne.n	8006134 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006112:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800611a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800

08006170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a17      	ldr	r2, [pc, #92]	@ (8006224 <TIM_OC5_SetConfig+0xb4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00f      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <TIM_OC5_SetConfig+0xb8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <TIM_OC5_SetConfig+0xbc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a14      	ldr	r2, [pc, #80]	@ (8006230 <TIM_OC5_SetConfig+0xc0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_OC5_SetConfig+0x7a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a13      	ldr	r2, [pc, #76]	@ (8006234 <TIM_OC5_SetConfig+0xc4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d109      	bne.n	80061fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800627e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	051b      	lsls	r3, r3, #20
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <TIM_OC6_SetConfig+0xb8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a17      	ldr	r2, [pc, #92]	@ (80062f4 <TIM_OC6_SetConfig+0xbc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC6_SetConfig+0xc0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <TIM_OC6_SetConfig+0xc4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC6_SetConfig+0x7c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_OC6_SetConfig+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 030a 	bic.w	r3, r3, #10
 8006340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f023 0210 	bic.w	r2, r3, #16
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800638c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	031b      	lsls	r3, r3, #12
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800639e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e065      	b.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2b      	ldr	r2, [pc, #172]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1b      	ldr	r2, [pc, #108]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d018      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006516:	d013      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a12      	ldr	r2, [pc, #72]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a13      	ldr	r2, [pc, #76]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10c      	bne.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40014000 	.word	0x40014000

0800658c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e073      	b.n	8006690 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a19      	ldr	r2, [pc, #100]	@ (800669c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d11c      	bne.n	800667e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	051b      	lsls	r3, r3, #20
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40013400 	.word	0x40013400

080066a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <memset>:
 8006730:	4402      	add	r2, r0
 8006732:	4603      	mov	r3, r0
 8006734:	4293      	cmp	r3, r2
 8006736:	d100      	bne.n	800673a <memset+0xa>
 8006738:	4770      	bx	lr
 800673a:	f803 1b01 	strb.w	r1, [r3], #1
 800673e:	e7f9      	b.n	8006734 <memset+0x4>

08006740 <__libc_init_array>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4d0d      	ldr	r5, [pc, #52]	@ (8006778 <__libc_init_array+0x38>)
 8006744:	4c0d      	ldr	r4, [pc, #52]	@ (800677c <__libc_init_array+0x3c>)
 8006746:	1b64      	subs	r4, r4, r5
 8006748:	10a4      	asrs	r4, r4, #2
 800674a:	2600      	movs	r6, #0
 800674c:	42a6      	cmp	r6, r4
 800674e:	d109      	bne.n	8006764 <__libc_init_array+0x24>
 8006750:	4d0b      	ldr	r5, [pc, #44]	@ (8006780 <__libc_init_array+0x40>)
 8006752:	4c0c      	ldr	r4, [pc, #48]	@ (8006784 <__libc_init_array+0x44>)
 8006754:	f000 f818 	bl	8006788 <_init>
 8006758:	1b64      	subs	r4, r4, r5
 800675a:	10a4      	asrs	r4, r4, #2
 800675c:	2600      	movs	r6, #0
 800675e:	42a6      	cmp	r6, r4
 8006760:	d105      	bne.n	800676e <__libc_init_array+0x2e>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	f855 3b04 	ldr.w	r3, [r5], #4
 8006768:	4798      	blx	r3
 800676a:	3601      	adds	r6, #1
 800676c:	e7ee      	b.n	800674c <__libc_init_array+0xc>
 800676e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006772:	4798      	blx	r3
 8006774:	3601      	adds	r6, #1
 8006776:	e7f2      	b.n	800675e <__libc_init_array+0x1e>
 8006778:	080067c0 	.word	0x080067c0
 800677c:	080067c0 	.word	0x080067c0
 8006780:	080067c0 	.word	0x080067c0
 8006784:	080067c4 	.word	0x080067c4

08006788 <_init>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr

08006794 <_fini>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr
