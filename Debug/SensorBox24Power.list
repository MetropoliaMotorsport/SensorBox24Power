
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080074a0  080074a0  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a0  080074a0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080074a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000000c  080074b4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  080074b4  0000969c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e01  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6e  00000000  00000000  0001ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000219b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7b  00000000  00000000  00022dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020728  00000000  00000000  00023d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001513f  00000000  00000000  00044473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da471  00000000  00000000  000595b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133a23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00133a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001390cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007468 	.word	0x08007468

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007468 	.word	0x08007468

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim, uint16_t value){
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
	  TIM_OC_InitTypeDef sConfigOC;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000224:	2360      	movs	r3, #96	@ 0x60
 8000226:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = value;
 8000228:	887b      	ldrh	r3, [r7, #2]
 800022a:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f006 f8ff 	bl	8006440 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f005 feab 	bl	8005fa0 <HAL_TIM_PWM_Start>
}
 800024a:	bf00      	nop
 800024c:	3728      	adds	r7, #40	@ 0x28
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <set_pwm_freq>:

void set_pwm_freq(TIM_HandleTypeDef *htim, uint16_t value){
 8000252:	b480      	push	{r7}
 8000254:	b083      	sub	sp, #12
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	460b      	mov	r3, r1
 800025c:	807b      	strh	r3, [r7, #2]

}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 800026e:	f000 f803 	bl	8000278 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <Config_1>:

void Config_1(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	CAN_ID = 17;
 800027c:	4b61      	ldr	r3, [pc, #388]	@ (8000404 <Config_1+0x18c>)
 800027e:	2211      	movs	r2, #17
 8000280:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 8000282:	4b61      	ldr	r3, [pc, #388]	@ (8000408 <Config_1+0x190>)
 8000284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000288:	801a      	strh	r2, [r3, #0]

	//OUTPUT 1 in mA
	WC[0] = 1900;
 800028a:	4b60      	ldr	r3, [pc, #384]	@ (800040c <Config_1+0x194>)
 800028c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000290:	801a      	strh	r2, [r3, #0]
	OC[0] = 2050;
 8000292:	4b5f      	ldr	r3, [pc, #380]	@ (8000410 <Config_1+0x198>)
 8000294:	f640 0202 	movw	r2, #2050	@ 0x802
 8000298:	801a      	strh	r2, [r3, #0]
	UC[0] = 00;
 800029a:	4b5e      	ldr	r3, [pc, #376]	@ (8000414 <Config_1+0x19c>)
 800029c:	2200      	movs	r2, #0
 800029e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC[1] = 1900;
 80002a0:	4b5a      	ldr	r3, [pc, #360]	@ (800040c <Config_1+0x194>)
 80002a2:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002a6:	805a      	strh	r2, [r3, #2]
	OC[1] = 2050;
 80002a8:	4b59      	ldr	r3, [pc, #356]	@ (8000410 <Config_1+0x198>)
 80002aa:	f640 0202 	movw	r2, #2050	@ 0x802
 80002ae:	805a      	strh	r2, [r3, #2]
	UC[1] = 00;
 80002b0:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <Config_1+0x19c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	WC[2] = 1900;
 80002b6:	4b55      	ldr	r3, [pc, #340]	@ (800040c <Config_1+0x194>)
 80002b8:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002bc:	809a      	strh	r2, [r3, #4]
	OC[2] = 2050;
 80002be:	4b54      	ldr	r3, [pc, #336]	@ (8000410 <Config_1+0x198>)
 80002c0:	f640 0202 	movw	r2, #2050	@ 0x802
 80002c4:	809a      	strh	r2, [r3, #4]
	UC[2] = 00;
 80002c6:	4b53      	ldr	r3, [pc, #332]	@ (8000414 <Config_1+0x19c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	WC[3] = 1900;
 80002cc:	4b4f      	ldr	r3, [pc, #316]	@ (800040c <Config_1+0x194>)
 80002ce:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002d2:	80da      	strh	r2, [r3, #6]
	OC[3] = 2050;
 80002d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000410 <Config_1+0x198>)
 80002d6:	f640 0202 	movw	r2, #2050	@ 0x802
 80002da:	80da      	strh	r2, [r3, #6]
	UC[3] = 00;
 80002dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000414 <Config_1+0x19c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	WC[4] = 1900;
 80002e2:	4b4a      	ldr	r3, [pc, #296]	@ (800040c <Config_1+0x194>)
 80002e4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002e8:	811a      	strh	r2, [r3, #8]
	OC[4] = 2050;
 80002ea:	4b49      	ldr	r3, [pc, #292]	@ (8000410 <Config_1+0x198>)
 80002ec:	f640 0202 	movw	r2, #2050	@ 0x802
 80002f0:	811a      	strh	r2, [r3, #8]
	UC[4] = 00;
 80002f2:	4b48      	ldr	r3, [pc, #288]	@ (8000414 <Config_1+0x19c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	WC[5] = 1900;
 80002f8:	4b44      	ldr	r3, [pc, #272]	@ (800040c <Config_1+0x194>)
 80002fa:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002fe:	815a      	strh	r2, [r3, #10]
	OC[5] = 2050;
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <Config_1+0x198>)
 8000302:	f640 0202 	movw	r2, #2050	@ 0x802
 8000306:	815a      	strh	r2, [r3, #10]
	UC[5] = 00;
 8000308:	4b42      	ldr	r3, [pc, #264]	@ (8000414 <Config_1+0x19c>)
 800030a:	2200      	movs	r2, #0
 800030c:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	WC[6] = 1900;
 800030e:	4b3f      	ldr	r3, [pc, #252]	@ (800040c <Config_1+0x194>)
 8000310:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000314:	819a      	strh	r2, [r3, #12]
	OC[6] = 2050;
 8000316:	4b3e      	ldr	r3, [pc, #248]	@ (8000410 <Config_1+0x198>)
 8000318:	f640 0202 	movw	r2, #2050	@ 0x802
 800031c:	819a      	strh	r2, [r3, #12]
	UC[6] = 00;
 800031e:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <Config_1+0x19c>)
 8000320:	2200      	movs	r2, #0
 8000322:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	WC[7] = 1900;
 8000324:	4b39      	ldr	r3, [pc, #228]	@ (800040c <Config_1+0x194>)
 8000326:	f240 726c 	movw	r2, #1900	@ 0x76c
 800032a:	81da      	strh	r2, [r3, #14]
	OC[7] = 2050;
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <Config_1+0x198>)
 800032e:	f640 0202 	movw	r2, #2050	@ 0x802
 8000332:	81da      	strh	r2, [r3, #14]
	UC[7] = 00;
 8000334:	4b37      	ldr	r3, [pc, #220]	@ (8000414 <Config_1+0x19c>)
 8000336:	2200      	movs	r2, #0
 8000338:	81da      	strh	r2, [r3, #14]

	//For analog node
	WC[8] = 2000;
 800033a:	4b34      	ldr	r3, [pc, #208]	@ (800040c <Config_1+0x194>)
 800033c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000340:	821a      	strh	r2, [r3, #16]
	OC[8] = 2000;
 8000342:	4b33      	ldr	r3, [pc, #204]	@ (8000410 <Config_1+0x198>)
 8000344:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000348:	821a      	strh	r2, [r3, #16]
	UC[8] = 0;
 800034a:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <Config_1+0x19c>)
 800034c:	2200      	movs	r2, #0
 800034e:	821a      	strh	r2, [r3, #16]

	Default_Switch_State = 0b11111111; //each bit represent one output [8,7,6,5,4,3,2,1]
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <Config_1+0x1a0>)
 8000352:	22ff      	movs	r2, #255	@ 0xff
 8000354:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 8000356:	4b31      	ldr	r3, [pc, #196]	@ (800041c <Config_1+0x1a4>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 800035c:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <Config_1+0x1a8>)
 800035e:	2200      	movs	r2, #0
 8000360:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 8000362:	4b2f      	ldr	r3, [pc, #188]	@ (8000420 <Config_1+0x1a8>)
 8000364:	2200      	movs	r2, #0
 8000366:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 8000368:	4b2c      	ldr	r3, [pc, #176]	@ (800041c <Config_1+0x1a4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00c      	beq.n	800038e <Config_1+0x116>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 8000374:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <Config_1+0x1a8>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	2364      	movs	r3, #100	@ 0x64
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <Config_1+0x1ac>)
 8000382:	fb92 f3f3 	sdiv	r3, r2, r3
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b27      	ldr	r3, [pc, #156]	@ (8000428 <Config_1+0x1b0>)
 800038a:	801a      	strh	r2, [r3, #0]
 800038c:	e002      	b.n	8000394 <Config_1+0x11c>
	}else{
		PWM_speed[0] = 0;
 800038e:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <Config_1+0x1b0>)
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 8000394:	4b21      	ldr	r3, [pc, #132]	@ (800041c <Config_1+0x1a4>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	085b      	lsrs	r3, r3, #1
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00c      	beq.n	80003ba <Config_1+0x142>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 80003a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <Config_1+0x1a8>)
 80003a2:	885b      	ldrh	r3, [r3, #2]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2364      	movs	r3, #100	@ 0x64
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000424 <Config_1+0x1ac>)
 80003ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <Config_1+0x1b0>)
 80003b6:	805a      	strh	r2, [r3, #2]
 80003b8:	e002      	b.n	80003c0 <Config_1+0x148>
	}else{
		PWM_speed[1] = 0;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <Config_1+0x1b0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <Config_1+0x1b4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 80003c6:	4b19      	ldr	r3, [pc, #100]	@ (800042c <Config_1+0x1b4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	805a      	strh	r2, [r3, #2]

	set_pwm_duty_cycle(&htim1,PWM_width[0]);
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <Config_1+0x1b4>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4817      	ldr	r0, [pc, #92]	@ (8000430 <Config_1+0x1b8>)
 80003d4:	f7ff ff20 	bl	8000218 <set_pwm_duty_cycle>
	set_pwm_duty_cycle(&htim2,PWM_width[1]);
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <Config_1+0x1b4>)
 80003da:	885b      	ldrh	r3, [r3, #2]
 80003dc:	4619      	mov	r1, r3
 80003de:	4815      	ldr	r0, [pc, #84]	@ (8000434 <Config_1+0x1bc>)
 80003e0:	f7ff ff1a 	bl	8000218 <set_pwm_duty_cycle>

	set_pwm_freq(&htim1,PWM_speed[0]);
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <Config_1+0x1b0>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	4811      	ldr	r0, [pc, #68]	@ (8000430 <Config_1+0x1b8>)
 80003ec:	f7ff ff31 	bl	8000252 <set_pwm_freq>
	set_pwm_freq(&htim2,PWM_speed[1]);
 80003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000428 <Config_1+0x1b0>)
 80003f2:	885b      	ldrh	r3, [r3, #2]
 80003f4:	4619      	mov	r1, r3
 80003f6:	480f      	ldr	r0, [pc, #60]	@ (8000434 <Config_1+0x1bc>)
 80003f8:	f7ff ff2b 	bl	8000252 <set_pwm_freq>

	output();
 80003fc:	f000 f8b6 	bl	800056c <output>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000644 	.word	0x20000644
 8000408:	20000646 	.word	0x20000646
 800040c:	20000600 	.word	0x20000600
 8000410:	20000610 	.word	0x20000610
 8000414:	20000620 	.word	0x20000620
 8000418:	20000636 	.word	0x20000636
 800041c:	20000637 	.word	0x20000637
 8000420:	20000638 	.word	0x20000638
 8000424:	08f0d180 	.word	0x08f0d180
 8000428:	20000640 	.word	0x20000640
 800042c:	2000063c 	.word	0x2000063c
 8000430:	20000178 	.word	0x20000178
 8000434:	200001c4 	.word	0x200001c4

08000438 <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d017      	beq.n	800047c <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000450:	2140      	movs	r1, #64	@ 0x40
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f003 feec 	bl	8004230 <HAL_FDCAN_GetRxMessage>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800045e:	f001 fb13 	bl	8001a88 <Error_Handler>
 8000462:	e001      	b.n	8000468 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000464:	f000 f928 	bl	80006b8 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000468:	2200      	movs	r2, #0
 800046a:	2101      	movs	r1, #1
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f003 fff9 	bl	8004464 <HAL_FDCAN_ActivateNotification>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000478:	f001 fb06 	bl	8001a88 <Error_Handler>
		}
	}
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000028 	.word	0x20000028
 8000488:	2000066c 	.word	0x2000066c

0800048c <CanSend>:

void CanSend(uint8_t *TxData){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000494:	e006      	b.n	80004a4 <CanSend+0x18>
		Error_Handler();
 8000496:	f001 faf7 	bl	8001a88 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	480a      	ldr	r0, [pc, #40]	@ (80004c8 <CanSend+0x3c>)
 80004a0:	f004 fca8 	bl	8004df4 <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80004a4:	4809      	ldr	r0, [pc, #36]	@ (80004cc <CanSend+0x40>)
 80004a6:	f003 ffcb 	bl	8004440 <HAL_FDCAN_GetTxFifoFreeLevel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d007      	beq.n	80004c0 <CanSend+0x34>
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4907      	ldr	r1, [pc, #28]	@ (80004d0 <CanSend+0x44>)
 80004b4:	4805      	ldr	r0, [pc, #20]	@ (80004cc <CanSend+0x40>)
 80004b6:	f003 fe77 	bl	80041a8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d1ea      	bne.n	8000496 <CanSend+0xa>
	}
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	48000400 	.word	0x48000400
 80004cc:	20000114 	.word	0x20000114
 80004d0:	20000648 	.word	0x20000648

080004d4 <CAN_switch_state>:

void CAN_switch_state(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
	uint8_t TxData1[5];
	uint8_t TxData2[5];


	TxData1[0] = 11;
 80004da:	230b      	movs	r3, #11
 80004dc:	723b      	strb	r3, [r7, #8]
	for(int i = 1; i < 5;i++){
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	e014      	b.n	800050e <CAN_switch_state+0x3a>
		TxData1[i] = check_bit(Default_Switch_State,i-1);
 80004e4:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <CAN_switch_state+0x94>)
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	4619      	mov	r1, r3
 80004f2:	4610      	mov	r0, r2
 80004f4:	f000 fd22 	bl	8000f3c <check_bit>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4619      	mov	r1, r3
 80004fc:	f107 0208 	add.w	r2, r7, #8
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	4413      	add	r3, r2
 8000504:	460a      	mov	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b04      	cmp	r3, #4
 8000512:	dde7      	ble.n	80004e4 <CAN_switch_state+0x10>
	}
	CanSend(TxData1);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffb7 	bl	800048c <CanSend>

	TxData2[0] = 12;
 800051e:	230c      	movs	r3, #12
 8000520:	703b      	strb	r3, [r7, #0]
	for(int i = 1; i < 5;i++){
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	e013      	b.n	8000550 <CAN_switch_state+0x7c>
		TxData2[i] = check_bit(Default_Switch_State,i+3);
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <CAN_switch_state+0x94>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3303      	adds	r3, #3
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	4610      	mov	r0, r2
 8000538:	f000 fd00 	bl	8000f3c <check_bit>
 800053c:	4603      	mov	r3, r0
 800053e:	4619      	mov	r1, r3
 8000540:	463a      	mov	r2, r7
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	4413      	add	r3, r2
 8000546:	460a      	mov	r2, r1
 8000548:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	3301      	adds	r3, #1
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	2b04      	cmp	r3, #4
 8000554:	dde8      	ble.n	8000528 <CAN_switch_state+0x54>
	}
	CanSend(TxData2);
 8000556:	463b      	mov	r3, r7
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff97 	bl	800048c <CanSend>
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000636 	.word	0x20000636

0800056c <output>:



void output(){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e065      	b.n	800064c <output+0xe0>
		bit = check_bit(Default_Switch_State, i);
 8000580:	4b36      	ldr	r3, [pc, #216]	@ (800065c <output+0xf0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	79fa      	ldrb	r2, [r7, #7]
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fcd7 	bl	8000f3c <check_bit>
 800058e:	4603      	mov	r3, r0
 8000590:	71bb      	strb	r3, [r7, #6]
		switch(i){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d853      	bhi.n	8000640 <output+0xd4>
 8000598:	a201      	add	r2, pc, #4	@ (adr r2, 80005a0 <output+0x34>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	080005cf 	.word	0x080005cf
 80005a8:	080005e1 	.word	0x080005e1
 80005ac:	080005f3 	.word	0x080005f3
 80005b0:	08000605 	.word	0x08000605
 80005b4:	08000615 	.word	0x08000615
 80005b8:	08000625 	.word	0x08000625
 80005bc:	08000633 	.word	0x08000633
		case 0:
			HAL_GPIO_WritePin(GPIOB,IN0_Pin,bit);
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2108      	movs	r1, #8
 80005c6:	4826      	ldr	r0, [pc, #152]	@ (8000660 <output+0xf4>)
 80005c8:	f004 fc14 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 80005cc:	e03b      	b.n	8000646 <output+0xda>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	461a      	mov	r2, r3
 80005d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f004 fc0b 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 80005de:	e032      	b.n	8000646 <output+0xda>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	461a      	mov	r2, r3
 80005e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f004 fc02 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 80005f0:	e029      	b.n	8000646 <output+0xda>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	461a      	mov	r2, r3
 80005f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f004 fbf9 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 8000602:	e020      	b.n	8000646 <output+0xda>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	461a      	mov	r2, r3
 8000608:	2110      	movs	r1, #16
 800060a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060e:	f004 fbf1 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 8000612:	e018      	b.n	8000646 <output+0xda>
		case 5:
			HAL_GPIO_WritePin(IN1_2_GPIO_Port,IN1_2_Pin,bit);
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4811      	ldr	r0, [pc, #68]	@ (8000664 <output+0xf8>)
 800061e:	f004 fbe9 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 8000622:	e010      	b.n	8000646 <output+0xda>
		case 6:
			HAL_GPIO_WritePin(GPIOB,IN2_2_Pin,bit);
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	461a      	mov	r2, r3
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	480d      	ldr	r0, [pc, #52]	@ (8000660 <output+0xf4>)
 800062c:	f004 fbe2 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 8000630:	e009      	b.n	8000646 <output+0xda>
		case 7:
			HAL_GPIO_WritePin(GPIOB,IN3_2_Pin,bit);
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	461a      	mov	r2, r3
 8000636:	2110      	movs	r1, #16
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <output+0xf4>)
 800063a:	f004 fbdb 	bl	8004df4 <HAL_GPIO_WritePin>
			break;
 800063e:	e002      	b.n	8000646 <output+0xda>
		default:
			Error_Handler();
 8000640:	f001 fa22 	bl	8001a88 <Error_Handler>
			break;
 8000644:	bf00      	nop
	for(i = 0; i < 8;i++){
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	3301      	adds	r3, #1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b07      	cmp	r3, #7
 8000650:	d996      	bls.n	8000580 <output+0x14>
		}
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000636 	.word	0x20000636
 8000660:	48000400 	.word	0x48000400
 8000664:	48001800 	.word	0x48001800

08000668 <Over_current>:

void Over_current(uint8_t output_pin){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <Over_current+0x24>)
 8000674:	220f      	movs	r2, #15
 8000676:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000678:	4a04      	ldr	r2, [pc, #16]	@ (800068c <Over_current+0x24>)
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <Over_current+0x24>)
 8000680:	f7ff ff04 	bl	800048c <CanSend>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000030 	.word	0x20000030

08000690 <Warning_current>:

void Warning_current(uint8_t output_pin){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <Warning_current+0x24>)
 800069c:	220e      	movs	r2, #14
 800069e:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <Warning_current+0x24>)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <Warning_current+0x24>)
 80006a8:	f7ff fef0 	bl	800048c <CanSend>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000030 	.word	0x20000030

080006b8 <decode>:
	TxData[0] = 13;
	TxData[1] = output_pin;
	CanSend(TxData);
}

void decode(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <decode+0xcc>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d050      	beq.n	8000766 <decode+0xae>
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	dc57      	bgt.n	8000778 <decode+0xc0>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d002      	beq.n	80006d2 <decode+0x1a>
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d03a      	beq.n	8000746 <decode+0x8e>
 80006d0:	e052      	b.n	8000778 <decode+0xc0>
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <decode+0xcc>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d002      	beq.n	80006e0 <decode+0x28>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d018      	beq.n	8000710 <decode+0x58>
 80006de:	e02f      	b.n	8000740 <decode+0x88>
		case 1:										//PUMPS
			switch(RxData[2]){
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <decode+0xcc>)
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d002      	beq.n	80006ee <decode+0x36>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d007      	beq.n	80006fc <decode+0x44>
 80006ec:	e00d      	b.n	800070a <decode+0x52>
			case 1:
				set_pwm_duty_cycle(&htim1,RxData[3]);
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <decode+0xcc>)
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4824      	ldr	r0, [pc, #144]	@ (8000788 <decode+0xd0>)
 80006f6:	f7ff fd8f 	bl	8000218 <set_pwm_duty_cycle>
				break;
 80006fa:	e009      	b.n	8000710 <decode+0x58>
			case 2:
				set_pwm_freq(&htim1, RxData[3]);
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <decode+0xcc>)
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	4619      	mov	r1, r3
 8000702:	4821      	ldr	r0, [pc, #132]	@ (8000788 <decode+0xd0>)
 8000704:	f7ff fda5 	bl	8000252 <set_pwm_freq>
				break;
 8000708:	e002      	b.n	8000710 <decode+0x58>
			default:
				//decode_error();
				Error_Handler();
 800070a:	f001 f9bd 	bl	8001a88 <Error_Handler>
				break;
 800070e:	bf00      	nop
			}
		case 2:										//FANS
			switch(RxData[2]){
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <decode+0xcc>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d002      	beq.n	800071e <decode+0x66>
 8000718:	2b02      	cmp	r3, #2
 800071a:	d007      	beq.n	800072c <decode+0x74>
 800071c:	e00d      	b.n	800073a <decode+0x82>
			case 1:
				set_pwm_duty_cycle(&htim2,RxData[3]);
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <decode+0xcc>)
 8000720:	78db      	ldrb	r3, [r3, #3]
 8000722:	4619      	mov	r1, r3
 8000724:	4819      	ldr	r0, [pc, #100]	@ (800078c <decode+0xd4>)
 8000726:	f7ff fd77 	bl	8000218 <set_pwm_duty_cycle>
				break;
 800072a:	e009      	b.n	8000740 <decode+0x88>
			case 2:
				set_pwm_freq(&htim2, RxData[3]);
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <decode+0xcc>)
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	4619      	mov	r1, r3
 8000732:	4816      	ldr	r0, [pc, #88]	@ (800078c <decode+0xd4>)
 8000734:	f7ff fd8d 	bl	8000252 <set_pwm_freq>
				break;
 8000738:	e002      	b.n	8000740 <decode+0x88>
			default:
				//decode_error();
				Error_Handler();
 800073a:	f001 f9a5 	bl	8001a88 <Error_Handler>
				break;
 800073e:	bf00      	nop
			}
		default:
			//decode_error(); //TODO: IMPLEMENT
			Error_Handler();
 8000740:	f001 f9a2 	bl	8001a88 <Error_Handler>
			break;
 8000744:	bf00      	nop
		}
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <decode+0xd8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <decode+0xcc>)
 800074c:	7851      	ldrb	r1, [r2, #1]
 800074e:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <decode+0xcc>)
 8000750:	7892      	ldrb	r2, [r2, #2]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fc0e 	bl	8000f74 <set_bit>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <decode+0xd8>)
 800075e:	701a      	strb	r2, [r3, #0]
		output();
 8000760:	f7ff ff04 	bl	800056c <output>
		break;
 8000764:	e00b      	b.n	800077e <decode+0xc6>
	case 3:
		HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,RxData[1]);
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <decode+0xcc>)
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	461a      	mov	r2, r3
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <decode+0xdc>)
 8000772:	f004 fb3f 	bl	8004df4 <HAL_GPIO_WritePin>
		break;
 8000776:	e002      	b.n	800077e <decode+0xc6>
	default:
		Error_Handler();
 8000778:	f001 f986 	bl	8001a88 <Error_Handler>
		break;
 800077c:	bf00      	nop
	}
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028
 8000788:	20000178 	.word	0x20000178
 800078c:	200001c4 	.word	0x200001c4
 8000790:	20000636 	.word	0x20000636
 8000794:	48000400 	.word	0x48000400

08000798 <CS_process>:



void CS_process(){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	PROC[0] = IN1_1_CS[0];
 800079e:	4b86      	ldr	r3, [pc, #536]	@ (80009b8 <CS_process+0x220>)
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	4b86      	ldr	r3, [pc, #536]	@ (80009bc <CS_process+0x224>)
 80007a4:	801a      	strh	r2, [r3, #0]
	PROC[1] = IN2_1_CS[0];
 80007a6:	4b86      	ldr	r3, [pc, #536]	@ (80009c0 <CS_process+0x228>)
 80007a8:	881a      	ldrh	r2, [r3, #0]
 80007aa:	4b84      	ldr	r3, [pc, #528]	@ (80009bc <CS_process+0x224>)
 80007ac:	805a      	strh	r2, [r3, #2]
	PROC[2] = IN3_1_CS[0];
 80007ae:	4b85      	ldr	r3, [pc, #532]	@ (80009c4 <CS_process+0x22c>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	4b82      	ldr	r3, [pc, #520]	@ (80009bc <CS_process+0x224>)
 80007b4:	809a      	strh	r2, [r3, #4]
	PROC[3] = IN4_1_CS[0];
 80007b6:	4b84      	ldr	r3, [pc, #528]	@ (80009c8 <CS_process+0x230>)
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	4b80      	ldr	r3, [pc, #512]	@ (80009bc <CS_process+0x224>)
 80007bc:	80da      	strh	r2, [r3, #6]
	PROC[4] = IN1_2_CS[0];
 80007be:	4b83      	ldr	r3, [pc, #524]	@ (80009cc <CS_process+0x234>)
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	4b7e      	ldr	r3, [pc, #504]	@ (80009bc <CS_process+0x224>)
 80007c4:	811a      	strh	r2, [r3, #8]
	PROC[5] = IN2_2_CS[0];
 80007c6:	4b82      	ldr	r3, [pc, #520]	@ (80009d0 <CS_process+0x238>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	4b7c      	ldr	r3, [pc, #496]	@ (80009bc <CS_process+0x224>)
 80007cc:	815a      	strh	r2, [r3, #10]
	PROC[6] = IN3_2_CS[0];
 80007ce:	4b81      	ldr	r3, [pc, #516]	@ (80009d4 <CS_process+0x23c>)
 80007d0:	881a      	ldrh	r2, [r3, #0]
 80007d2:	4b7a      	ldr	r3, [pc, #488]	@ (80009bc <CS_process+0x224>)
 80007d4:	819a      	strh	r2, [r3, #12]
	PROC[7] = IN4_2_CS[0];
 80007d6:	4b80      	ldr	r3, [pc, #512]	@ (80009d8 <CS_process+0x240>)
 80007d8:	881a      	ldrh	r2, [r3, #0]
 80007da:	4b78      	ldr	r3, [pc, #480]	@ (80009bc <CS_process+0x224>)
 80007dc:	81da      	strh	r2, [r3, #14]
	PROC[8] = Analog_CS[0];
 80007de:	4b7f      	ldr	r3, [pc, #508]	@ (80009dc <CS_process+0x244>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	4b76      	ldr	r3, [pc, #472]	@ (80009bc <CS_process+0x224>)
 80007e4:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	e089      	b.n	8000900 <CS_process+0x168>
		PROC[0] = (PROC[0] + IN1_1_CS[i])/2;
 80007ec:	4b73      	ldr	r3, [pc, #460]	@ (80009bc <CS_process+0x224>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4a71      	ldr	r2, [pc, #452]	@ (80009b8 <CS_process+0x220>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fa:	440b      	add	r3, r1
 80007fc:	0fda      	lsrs	r2, r3, #31
 80007fe:	4413      	add	r3, r2
 8000800:	105b      	asrs	r3, r3, #1
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b6d      	ldr	r3, [pc, #436]	@ (80009bc <CS_process+0x224>)
 8000806:	801a      	strh	r2, [r3, #0]
		PROC[1] = (PROC[1] + IN2_1_CS[i])/2;
 8000808:	4b6c      	ldr	r3, [pc, #432]	@ (80009bc <CS_process+0x224>)
 800080a:	885b      	ldrh	r3, [r3, #2]
 800080c:	4619      	mov	r1, r3
 800080e:	4a6c      	ldr	r2, [pc, #432]	@ (80009c0 <CS_process+0x228>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000816:	440b      	add	r3, r1
 8000818:	0fda      	lsrs	r2, r3, #31
 800081a:	4413      	add	r3, r2
 800081c:	105b      	asrs	r3, r3, #1
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b66      	ldr	r3, [pc, #408]	@ (80009bc <CS_process+0x224>)
 8000822:	805a      	strh	r2, [r3, #2]
		PROC[2] = (PROC[2] + IN3_1_CS[i])/2;
 8000824:	4b65      	ldr	r3, [pc, #404]	@ (80009bc <CS_process+0x224>)
 8000826:	889b      	ldrh	r3, [r3, #4]
 8000828:	4619      	mov	r1, r3
 800082a:	4a66      	ldr	r2, [pc, #408]	@ (80009c4 <CS_process+0x22c>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000832:	440b      	add	r3, r1
 8000834:	0fda      	lsrs	r2, r3, #31
 8000836:	4413      	add	r3, r2
 8000838:	105b      	asrs	r3, r3, #1
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b5f      	ldr	r3, [pc, #380]	@ (80009bc <CS_process+0x224>)
 800083e:	809a      	strh	r2, [r3, #4]
		PROC[3] = (PROC[3] + IN4_1_CS[i])/2;
 8000840:	4b5e      	ldr	r3, [pc, #376]	@ (80009bc <CS_process+0x224>)
 8000842:	88db      	ldrh	r3, [r3, #6]
 8000844:	4619      	mov	r1, r3
 8000846:	4a60      	ldr	r2, [pc, #384]	@ (80009c8 <CS_process+0x230>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084e:	440b      	add	r3, r1
 8000850:	0fda      	lsrs	r2, r3, #31
 8000852:	4413      	add	r3, r2
 8000854:	105b      	asrs	r3, r3, #1
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b58      	ldr	r3, [pc, #352]	@ (80009bc <CS_process+0x224>)
 800085a:	80da      	strh	r2, [r3, #6]
		PROC[4] = (PROC[4] + IN1_2_CS[i])/2;
 800085c:	4b57      	ldr	r3, [pc, #348]	@ (80009bc <CS_process+0x224>)
 800085e:	891b      	ldrh	r3, [r3, #8]
 8000860:	4619      	mov	r1, r3
 8000862:	4a5a      	ldr	r2, [pc, #360]	@ (80009cc <CS_process+0x234>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086a:	440b      	add	r3, r1
 800086c:	0fda      	lsrs	r2, r3, #31
 800086e:	4413      	add	r3, r2
 8000870:	105b      	asrs	r3, r3, #1
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b51      	ldr	r3, [pc, #324]	@ (80009bc <CS_process+0x224>)
 8000876:	811a      	strh	r2, [r3, #8]
		PROC[5] = (PROC[5] + IN2_2_CS[i])/2;
 8000878:	4b50      	ldr	r3, [pc, #320]	@ (80009bc <CS_process+0x224>)
 800087a:	895b      	ldrh	r3, [r3, #10]
 800087c:	4619      	mov	r1, r3
 800087e:	4a54      	ldr	r2, [pc, #336]	@ (80009d0 <CS_process+0x238>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000886:	440b      	add	r3, r1
 8000888:	0fda      	lsrs	r2, r3, #31
 800088a:	4413      	add	r3, r2
 800088c:	105b      	asrs	r3, r3, #1
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b4a      	ldr	r3, [pc, #296]	@ (80009bc <CS_process+0x224>)
 8000892:	815a      	strh	r2, [r3, #10]
		PROC[6] = (PROC[6] + IN3_2_CS[i])/2;
 8000894:	4b49      	ldr	r3, [pc, #292]	@ (80009bc <CS_process+0x224>)
 8000896:	899b      	ldrh	r3, [r3, #12]
 8000898:	4619      	mov	r1, r3
 800089a:	4a4e      	ldr	r2, [pc, #312]	@ (80009d4 <CS_process+0x23c>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	440b      	add	r3, r1
 80008a4:	0fda      	lsrs	r2, r3, #31
 80008a6:	4413      	add	r3, r2
 80008a8:	105b      	asrs	r3, r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b43      	ldr	r3, [pc, #268]	@ (80009bc <CS_process+0x224>)
 80008ae:	819a      	strh	r2, [r3, #12]
		PROC[7] = (PROC[7] + IN4_2_CS[i])/2;
 80008b0:	4b42      	ldr	r3, [pc, #264]	@ (80009bc <CS_process+0x224>)
 80008b2:	89db      	ldrh	r3, [r3, #14]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4a48      	ldr	r2, [pc, #288]	@ (80009d8 <CS_process+0x240>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008be:	440b      	add	r3, r1
 80008c0:	0fda      	lsrs	r2, r3, #31
 80008c2:	4413      	add	r3, r2
 80008c4:	105b      	asrs	r3, r3, #1
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b3c      	ldr	r3, [pc, #240]	@ (80009bc <CS_process+0x224>)
 80008ca:	81da      	strh	r2, [r3, #14]
		if(i % 2 == 0){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d111      	bne.n	80008fa <CS_process+0x162>
			PROC[8] = (PROC[8] + Analog_CS[i/2])/2;
 80008d6:	4b39      	ldr	r3, [pc, #228]	@ (80009bc <CS_process+0x224>)
 80008d8:	8a1b      	ldrh	r3, [r3, #16]
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	0fda      	lsrs	r2, r3, #31
 80008e0:	4413      	add	r3, r2
 80008e2:	105b      	asrs	r3, r3, #1
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <CS_process+0x244>)
 80008e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008ec:	440b      	add	r3, r1
 80008ee:	0fda      	lsrs	r2, r3, #31
 80008f0:	4413      	add	r3, r2
 80008f2:	105b      	asrs	r3, r3, #1
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <CS_process+0x224>)
 80008f8:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < I_AVERAGE; i++){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b1f      	cmp	r3, #31
 8000904:	f77f af72 	ble.w	80007ec <CS_process+0x54>
		}
	}
	PROC[0] = CS_Raw_to_mA(PROC[0]);
 8000908:	4b2c      	ldr	r3, [pc, #176]	@ (80009bc <CS_process+0x224>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fb57 	bl	8000fc0 <CS_Raw_to_mA>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <CS_process+0x224>)
 8000918:	801a      	strh	r2, [r3, #0]
	PROC[1] = CS_Raw_to_mA(PROC[1]);
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <CS_process+0x224>)
 800091c:	885b      	ldrh	r3, [r3, #2]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb4e 	bl	8000fc0 <CS_Raw_to_mA>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <CS_process+0x224>)
 800092a:	805a      	strh	r2, [r3, #2]
	PROC[2] = CS_Raw_to_mA(PROC[2]);
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <CS_process+0x224>)
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fb45 	bl	8000fc0 <CS_Raw_to_mA>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <CS_process+0x224>)
 800093c:	809a      	strh	r2, [r3, #4]
	PROC[3] = CS_Raw_to_mA(PROC[3]);
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <CS_process+0x224>)
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fb3c 	bl	8000fc0 <CS_Raw_to_mA>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <CS_process+0x224>)
 800094e:	80da      	strh	r2, [r3, #6]
	PROC[4] = CS_Raw_to_mA(PROC[4]);
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <CS_process+0x224>)
 8000952:	891b      	ldrh	r3, [r3, #8]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fb33 	bl	8000fc0 <CS_Raw_to_mA>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <CS_process+0x224>)
 8000960:	811a      	strh	r2, [r3, #8]
	PROC[5] = CS_Raw_to_mA(PROC[5]);
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <CS_process+0x224>)
 8000964:	895b      	ldrh	r3, [r3, #10]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fb2a 	bl	8000fc0 <CS_Raw_to_mA>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <CS_process+0x224>)
 8000972:	815a      	strh	r2, [r3, #10]
	PROC[6] = CS_Raw_to_mA(PROC[6]);
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <CS_process+0x224>)
 8000976:	899b      	ldrh	r3, [r3, #12]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb21 	bl	8000fc0 <CS_Raw_to_mA>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <CS_process+0x224>)
 8000984:	819a      	strh	r2, [r3, #12]
	PROC[7] = CS_Raw_to_mA(PROC[7]);
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <CS_process+0x224>)
 8000988:	89db      	ldrh	r3, [r3, #14]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fb18 	bl	8000fc0 <CS_Raw_to_mA>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <CS_process+0x224>)
 8000996:	81da      	strh	r2, [r3, #14]
	PROC[8] = CS_Raw_to_mA(PROC[8]);
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <CS_process+0x224>)
 800099a:	8a1b      	ldrh	r3, [r3, #16]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fb0f 	bl	8000fc0 <CS_Raw_to_mA>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <CS_process+0x224>)
 80009a8:	821a      	strh	r2, [r3, #16]
	check_warnings();
 80009aa:	f000 f819 	bl	80009e0 <check_warnings>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000038c 	.word	0x2000038c
 80009bc:	200005ec 	.word	0x200005ec
 80009c0:	200003cc 	.word	0x200003cc
 80009c4:	2000040c 	.word	0x2000040c
 80009c8:	2000044c 	.word	0x2000044c
 80009cc:	2000048c 	.word	0x2000048c
 80009d0:	200004cc 	.word	0x200004cc
 80009d4:	2000050c 	.word	0x2000050c
 80009d8:	2000054c 	.word	0x2000054c
 80009dc:	200005cc 	.word	0x200005cc

080009e0 <check_warnings>:

void check_warnings(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e02a      	b.n	8000a42 <check_warnings+0x62>
		if(PROC[x] >= WC[x]){
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a25      	ldr	r2, [pc, #148]	@ (8000a84 <check_warnings+0xa4>)
 80009f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4924      	ldr	r1, [pc, #144]	@ (8000a88 <check_warnings+0xa8>)
 80009f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d31d      	bcc.n	8000a3c <check_warnings+0x5c>
			if(PROC[x] >= OC[x]){
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a20      	ldr	r2, [pc, #128]	@ (8000a84 <check_warnings+0xa4>)
 8000a04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4920      	ldr	r1, [pc, #128]	@ (8000a8c <check_warnings+0xac>)
 8000a0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d30f      	bcc.n	8000a34 <check_warnings+0x54>
				Default_Switch_State = set_bit(Default_Switch_State, x, 0);
 8000a14:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <check_warnings+0xb0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	79f9      	ldrb	r1, [r7, #7]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 faa9 	bl	8000f74 <set_bit>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <check_warnings+0xb0>)
 8000a28:	701a      	strb	r2, [r3, #0]
				Over_current(x);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe1b 	bl	8000668 <Over_current>
 8000a32:	e003      	b.n	8000a3c <check_warnings+0x5c>
			}else{
				Warning_current(x);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe2a 	bl	8000690 <Warning_current>
	for(uint8_t x = 0; x < 7; x++){
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b06      	cmp	r3, #6
 8000a46:	d9d1      	bls.n	80009ec <check_warnings+0xc>
		}
	/*	if(PROC[x] < UC[x]){
			Under_current(x);
		}*/
	}
	if(PROC[8] >= WC[8]){
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <check_warnings+0xa4>)
 8000a4a:	8a1a      	ldrh	r2, [r3, #16]
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <check_warnings+0xa8>)
 8000a4e:	8a1b      	ldrh	r3, [r3, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d312      	bcc.n	8000a7a <check_warnings+0x9a>
		if(PROC[8] >= OC[8]){
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <check_warnings+0xa4>)
 8000a56:	8a1a      	ldrh	r2, [r3, #16]
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <check_warnings+0xac>)
 8000a5a:	8a1b      	ldrh	r3, [r3, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d309      	bcc.n	8000a74 <check_warnings+0x94>
			Over_current(8);
 8000a60:	2008      	movs	r0, #8
 8000a62:	f7ff fe01 	bl	8000668 <Over_current>
			HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a6c:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <check_warnings+0xb4>)
 8000a6e:	f004 f9c1 	bl	8004df4 <HAL_GPIO_WritePin>
	}
	/*if(PROC[8] < UC[8]){
		Under_current(8);
	}*/

}
 8000a72:	e002      	b.n	8000a7a <check_warnings+0x9a>
			Warning_current(8);
 8000a74:	2008      	movs	r0, #8
 8000a76:	f7ff fe0b 	bl	8000690 <Warning_current>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200005ec 	.word	0x200005ec
 8000a88:	20000600 	.word	0x20000600
 8000a8c:	20000610 	.word	0x20000610
 8000a90:	20000636 	.word	0x20000636
 8000a94:	48000400 	.word	0x48000400

08000a98 <CS_read>:

void CS_read(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
	for(int x = 0; x < 5; x++){
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e232      	b.n	8000f0a <CS_read+0x472>
		switch(x){
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	f200 822c 	bhi.w	8000f04 <CS_read+0x46c>
 8000aac:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab4 <CS_read+0x1c>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ac9 	.word	0x08000ac9
 8000ab8:	08000b91 	.word	0x08000b91
 8000abc:	08000c59 	.word	0x08000c59
 8000ac0:	08000d21 	.word	0x08000d21
 8000ac4:	08000e13 	.word	0x08000e13
		case 0:
			chip_select_read();
 8000ac8:	f000 fad8 	bl	800107c <chip_select_read>
			CS_SEL[0] = 0;
 8000acc:	4ba1      	ldr	r3, [pc, #644]	@ (8000d54 <CS_read+0x2bc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000ad2:	4ba0      	ldr	r3, [pc, #640]	@ (8000d54 <CS_read+0x2bc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000ad8:	4b9e      	ldr	r3, [pc, #632]	@ (8000d54 <CS_read+0x2bc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	489d      	ldr	r0, [pc, #628]	@ (8000d58 <CS_read+0x2c0>)
 8000ae2:	f004 f987 	bl	8004df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000ae6:	4b9b      	ldr	r3, [pc, #620]	@ (8000d54 <CS_read+0x2bc>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	461a      	mov	r2, r3
 8000aec:	2120      	movs	r1, #32
 8000aee:	489a      	ldr	r0, [pc, #616]	@ (8000d58 <CS_read+0x2c0>)
 8000af0:	f004 f980 	bl	8004df4 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	e046      	b.n	8000b88 <CS_read+0xf0>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000afa:	4898      	ldr	r0, [pc, #608]	@ (8000d5c <CS_read+0x2c4>)
 8000afc:	f001 ff26 	bl	800294c <HAL_ADC_Start>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <CS_read+0x72>
 8000b06:	f000 ffbf 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000b0a:	4895      	ldr	r0, [pc, #596]	@ (8000d60 <CS_read+0x2c8>)
 8000b0c:	f001 ff1e 	bl	800294c <HAL_ADC_Start>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <CS_read+0x82>
 8000b16:	f000 ffb7 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000b1a:	2164      	movs	r1, #100	@ 0x64
 8000b1c:	488f      	ldr	r0, [pc, #572]	@ (8000d5c <CS_read+0x2c4>)
 8000b1e:	f002 f805 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <CS_read+0x94>
 8000b28:	f000 ffae 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000b2c:	2164      	movs	r1, #100	@ 0x64
 8000b2e:	488c      	ldr	r0, [pc, #560]	@ (8000d60 <CS_read+0x2c8>)
 8000b30:	f001 fffc 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <CS_read+0xa6>
 8000b3a:	f000 ffa5 	bl	8001a88 <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000b3e:	4887      	ldr	r0, [pc, #540]	@ (8000d5c <CS_read+0x2c4>)
 8000b40:	f002 fa37 	bl	8002fb2 <HAL_ADC_GetValue>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b299      	uxth	r1, r3
 8000b48:	4a86      	ldr	r2, [pc, #536]	@ (8000d64 <CS_read+0x2cc>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000b50:	4883      	ldr	r0, [pc, #524]	@ (8000d60 <CS_read+0x2c8>)
 8000b52:	f002 fa2e 	bl	8002fb2 <HAL_ADC_GetValue>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b299      	uxth	r1, r3
 8000b5a:	4a83      	ldr	r2, [pc, #524]	@ (8000d68 <CS_read+0x2d0>)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000b62:	487e      	ldr	r0, [pc, #504]	@ (8000d5c <CS_read+0x2c4>)
 8000b64:	f001 ffae 	bl	8002ac4 <HAL_ADC_Stop>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <CS_read+0xda>
 8000b6e:	f000 ff8b 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000b72:	487b      	ldr	r0, [pc, #492]	@ (8000d60 <CS_read+0x2c8>)
 8000b74:	f001 ffa6 	bl	8002ac4 <HAL_ADC_Stop>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <CS_read+0xea>
 8000b7e:	f000 ff83 	bl	8001a88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2b1f      	cmp	r3, #31
 8000b8c:	ddb5      	ble.n	8000afa <CS_read+0x62>
			}
			break;
 8000b8e:	e1b9      	b.n	8000f04 <CS_read+0x46c>
		case 1:
			chip_select_read();
 8000b90:	f000 fa74 	bl	800107c <chip_select_read>
			CS_SEL[0] = 0;
 8000b94:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <CS_read+0x2bc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d54 <CS_read+0x2bc>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <CS_read+0x2bc>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2140      	movs	r1, #64	@ 0x40
 8000ba8:	486b      	ldr	r0, [pc, #428]	@ (8000d58 <CS_read+0x2c0>)
 8000baa:	f004 f923 	bl	8004df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000bae:	4b69      	ldr	r3, [pc, #420]	@ (8000d54 <CS_read+0x2bc>)
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4868      	ldr	r0, [pc, #416]	@ (8000d58 <CS_read+0x2c0>)
 8000bb8:	f004 f91c 	bl	8004df4 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e046      	b.n	8000c50 <CS_read+0x1b8>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000bc2:	4866      	ldr	r0, [pc, #408]	@ (8000d5c <CS_read+0x2c4>)
 8000bc4:	f001 fec2 	bl	800294c <HAL_ADC_Start>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <CS_read+0x13a>
 8000bce:	f000 ff5b 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000bd2:	4863      	ldr	r0, [pc, #396]	@ (8000d60 <CS_read+0x2c8>)
 8000bd4:	f001 feba 	bl	800294c <HAL_ADC_Start>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <CS_read+0x14a>
 8000bde:	f000 ff53 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000be2:	2164      	movs	r1, #100	@ 0x64
 8000be4:	485d      	ldr	r0, [pc, #372]	@ (8000d5c <CS_read+0x2c4>)
 8000be6:	f001 ffa1 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <CS_read+0x15c>
 8000bf0:	f000 ff4a 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000bf4:	2164      	movs	r1, #100	@ 0x64
 8000bf6:	485a      	ldr	r0, [pc, #360]	@ (8000d60 <CS_read+0x2c8>)
 8000bf8:	f001 ff98 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <CS_read+0x16e>
 8000c02:	f000 ff41 	bl	8001a88 <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000c06:	4855      	ldr	r0, [pc, #340]	@ (8000d5c <CS_read+0x2c4>)
 8000c08:	f002 f9d3 	bl	8002fb2 <HAL_ADC_GetValue>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b299      	uxth	r1, r3
 8000c10:	4a56      	ldr	r2, [pc, #344]	@ (8000d6c <CS_read+0x2d4>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000c18:	4851      	ldr	r0, [pc, #324]	@ (8000d60 <CS_read+0x2c8>)
 8000c1a:	f002 f9ca 	bl	8002fb2 <HAL_ADC_GetValue>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b299      	uxth	r1, r3
 8000c22:	4a53      	ldr	r2, [pc, #332]	@ (8000d70 <CS_read+0x2d8>)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000c2a:	484c      	ldr	r0, [pc, #304]	@ (8000d5c <CS_read+0x2c4>)
 8000c2c:	f001 ff4a 	bl	8002ac4 <HAL_ADC_Stop>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <CS_read+0x1a2>
 8000c36:	f000 ff27 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000c3a:	4849      	ldr	r0, [pc, #292]	@ (8000d60 <CS_read+0x2c8>)
 8000c3c:	f001 ff42 	bl	8002ac4 <HAL_ADC_Stop>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <CS_read+0x1b2>
 8000c46:	f000 ff1f 	bl	8001a88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b1f      	cmp	r3, #31
 8000c54:	ddb5      	ble.n	8000bc2 <CS_read+0x12a>
			}
			break;
 8000c56:	e155      	b.n	8000f04 <CS_read+0x46c>
		case 2:
			chip_select_read();
 8000c58:	f000 fa10 	bl	800107c <chip_select_read>
			CS_SEL[0] = 1;
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <CS_read+0x2bc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000c62:	4b3c      	ldr	r3, [pc, #240]	@ (8000d54 <CS_read+0x2bc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000c68:	4b3a      	ldr	r3, [pc, #232]	@ (8000d54 <CS_read+0x2bc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	4839      	ldr	r0, [pc, #228]	@ (8000d58 <CS_read+0x2c0>)
 8000c72:	f004 f8bf 	bl	8004df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000c76:	4b37      	ldr	r3, [pc, #220]	@ (8000d54 <CS_read+0x2bc>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4836      	ldr	r0, [pc, #216]	@ (8000d58 <CS_read+0x2c0>)
 8000c80:	f004 f8b8 	bl	8004df4 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	e046      	b.n	8000d18 <CS_read+0x280>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c8a:	4834      	ldr	r0, [pc, #208]	@ (8000d5c <CS_read+0x2c4>)
 8000c8c:	f002 f826 	bl	8002cdc <HAL_ADC_Start_IT>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <CS_read+0x202>
 8000c96:	f000 fef7 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c9a:	4831      	ldr	r0, [pc, #196]	@ (8000d60 <CS_read+0x2c8>)
 8000c9c:	f002 f81e 	bl	8002cdc <HAL_ADC_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <CS_read+0x212>
 8000ca6:	f000 feef 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000caa:	2164      	movs	r1, #100	@ 0x64
 8000cac:	482b      	ldr	r0, [pc, #172]	@ (8000d5c <CS_read+0x2c4>)
 8000cae:	f001 ff3d 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <CS_read+0x224>
 8000cb8:	f000 fee6 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000cbc:	2164      	movs	r1, #100	@ 0x64
 8000cbe:	4828      	ldr	r0, [pc, #160]	@ (8000d60 <CS_read+0x2c8>)
 8000cc0:	f001 ff34 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <CS_read+0x236>
 8000cca:	f000 fedd 	bl	8001a88 <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000cce:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <CS_read+0x2c4>)
 8000cd0:	f002 f96f 	bl	8002fb2 <HAL_ADC_GetValue>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	4a26      	ldr	r2, [pc, #152]	@ (8000d74 <CS_read+0x2dc>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000ce0:	481f      	ldr	r0, [pc, #124]	@ (8000d60 <CS_read+0x2c8>)
 8000ce2:	f002 f966 	bl	8002fb2 <HAL_ADC_GetValue>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b299      	uxth	r1, r3
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <CS_read+0x2e0>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000cf2:	481a      	ldr	r0, [pc, #104]	@ (8000d5c <CS_read+0x2c4>)
 8000cf4:	f002 f922 	bl	8002f3c <HAL_ADC_Stop_IT>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <CS_read+0x26a>
 8000cfe:	f000 fec3 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d02:	4817      	ldr	r0, [pc, #92]	@ (8000d60 <CS_read+0x2c8>)
 8000d04:	f002 f91a 	bl	8002f3c <HAL_ADC_Stop_IT>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <CS_read+0x27a>
 8000d0e:	f000 febb 	bl	8001a88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3301      	adds	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b1f      	cmp	r3, #31
 8000d1c:	ddb5      	ble.n	8000c8a <CS_read+0x1f2>
			}
			break;
 8000d1e:	e0f1      	b.n	8000f04 <CS_read+0x46c>
		case 3:
			chip_select_read();
 8000d20:	f000 f9ac 	bl	800107c <chip_select_read>
			CS_SEL[0] = 1;
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <CS_read+0x2bc>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <CS_read+0x2bc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <CS_read+0x2bc>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2140      	movs	r1, #64	@ 0x40
 8000d38:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <CS_read+0x2c0>)
 8000d3a:	f004 f85b 	bl	8004df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <CS_read+0x2bc>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	461a      	mov	r2, r3
 8000d44:	2120      	movs	r1, #32
 8000d46:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <CS_read+0x2c0>)
 8000d48:	f004 f854 	bl	8004df4 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	e05b      	b.n	8000e0a <CS_read+0x372>
 8000d52:	bf00      	nop
 8000d54:	20000634 	.word	0x20000634
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	2000003c 	.word	0x2000003c
 8000d60:	200000a8 	.word	0x200000a8
 8000d64:	2000038c 	.word	0x2000038c
 8000d68:	2000048c 	.word	0x2000048c
 8000d6c:	200003cc 	.word	0x200003cc
 8000d70:	200004cc 	.word	0x200004cc
 8000d74:	2000040c 	.word	0x2000040c
 8000d78:	2000050c 	.word	0x2000050c
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d7c:	4868      	ldr	r0, [pc, #416]	@ (8000f20 <CS_read+0x488>)
 8000d7e:	f001 ffad 	bl	8002cdc <HAL_ADC_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <CS_read+0x2f4>
 8000d88:	f000 fe7e 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d8c:	4865      	ldr	r0, [pc, #404]	@ (8000f24 <CS_read+0x48c>)
 8000d8e:	f001 ffa5 	bl	8002cdc <HAL_ADC_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <CS_read+0x304>
 8000d98:	f000 fe76 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000d9c:	2164      	movs	r1, #100	@ 0x64
 8000d9e:	4860      	ldr	r0, [pc, #384]	@ (8000f20 <CS_read+0x488>)
 8000da0:	f001 fec4 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <CS_read+0x316>
 8000daa:	f000 fe6d 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000dae:	2164      	movs	r1, #100	@ 0x64
 8000db0:	485c      	ldr	r0, [pc, #368]	@ (8000f24 <CS_read+0x48c>)
 8000db2:	f001 febb 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <CS_read+0x328>
 8000dbc:	f000 fe64 	bl	8001a88 <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000dc0:	4857      	ldr	r0, [pc, #348]	@ (8000f20 <CS_read+0x488>)
 8000dc2:	f002 f8f6 	bl	8002fb2 <HAL_ADC_GetValue>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	4a57      	ldr	r2, [pc, #348]	@ (8000f28 <CS_read+0x490>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000dd2:	4854      	ldr	r0, [pc, #336]	@ (8000f24 <CS_read+0x48c>)
 8000dd4:	f002 f8ed 	bl	8002fb2 <HAL_ADC_GetValue>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	4a53      	ldr	r2, [pc, #332]	@ (8000f2c <CS_read+0x494>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000de4:	484e      	ldr	r0, [pc, #312]	@ (8000f20 <CS_read+0x488>)
 8000de6:	f002 f8a9 	bl	8002f3c <HAL_ADC_Stop_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <CS_read+0x35c>
 8000df0:	f000 fe4a 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000df4:	484b      	ldr	r0, [pc, #300]	@ (8000f24 <CS_read+0x48c>)
 8000df6:	f002 f8a1 	bl	8002f3c <HAL_ADC_Stop_IT>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <CS_read+0x36c>
 8000e00:	f000 fe42 	bl	8001a88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b1f      	cmp	r3, #31
 8000e0e:	ddb5      	ble.n	8000d7c <CS_read+0x2e4>
			}
			break;
 8000e10:	e078      	b.n	8000f04 <CS_read+0x46c>
		case 4:
			analog_read();
 8000e12:	f000 f8f5 	bl	8001000 <analog_read>
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	e024      	b.n	8000e66 <CS_read+0x3ce>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e1c:	4840      	ldr	r0, [pc, #256]	@ (8000f20 <CS_read+0x488>)
 8000e1e:	f001 fd95 	bl	800294c <HAL_ADC_Start>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <CS_read+0x394>
 8000e28:	f000 fe2e 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e2c:	2164      	movs	r1, #100	@ 0x64
 8000e2e:	483c      	ldr	r0, [pc, #240]	@ (8000f20 <CS_read+0x488>)
 8000e30:	f001 fe7c 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <CS_read+0x3a6>
 8000e3a:	f000 fe25 	bl	8001a88 <Error_Handler>
				Analog_CS_1[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e3e:	4838      	ldr	r0, [pc, #224]	@ (8000f20 <CS_read+0x488>)
 8000e40:	f002 f8b7 	bl	8002fb2 <HAL_ADC_GetValue>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b299      	uxth	r1, r3
 8000e48:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <CS_read+0x498>)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e50:	4833      	ldr	r0, [pc, #204]	@ (8000f20 <CS_read+0x488>)
 8000e52:	f001 fe37 	bl	8002ac4 <HAL_ADC_Stop>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <CS_read+0x3c8>
 8000e5c:	f000 fe14 	bl	8001a88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	ddd7      	ble.n	8000e1c <CS_read+0x384>
			}
			analog_read();
 8000e6c:	f000 f8c8 	bl	8001000 <analog_read>
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	e042      	b.n	8000efc <CS_read+0x464>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e76:	482a      	ldr	r0, [pc, #168]	@ (8000f20 <CS_read+0x488>)
 8000e78:	f001 fd68 	bl	800294c <HAL_ADC_Start>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <CS_read+0x3ee>
 8000e82:	f000 fe01 	bl	8001a88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e86:	2164      	movs	r1, #100	@ 0x64
 8000e88:	4825      	ldr	r0, [pc, #148]	@ (8000f20 <CS_read+0x488>)
 8000e8a:	f001 fe4f 	bl	8002b2c <HAL_ADC_PollForConversion>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <CS_read+0x400>
 8000e94:	f000 fdf8 	bl	8001a88 <Error_Handler>
				Analog_CS_2[i] = (uint16_t)HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e98:	4821      	ldr	r0, [pc, #132]	@ (8000f20 <CS_read+0x488>)
 8000e9a:	f002 f88a 	bl	8002fb2 <HAL_ADC_GetValue>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	4a24      	ldr	r2, [pc, #144]	@ (8000f34 <CS_read+0x49c>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000eaa:	481d      	ldr	r0, [pc, #116]	@ (8000f20 <CS_read+0x488>)
 8000eac:	f001 fe0a 	bl	8002ac4 <HAL_ADC_Stop>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <CS_read+0x422>
 8000eb6:	f000 fde7 	bl	8001a88 <Error_Handler>
				if(Analog_CS_1[i]>Analog_CS_2[i]){
 8000eba:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <CS_read+0x498>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ec2:	491c      	ldr	r1, [pc, #112]	@ (8000f34 <CS_read+0x49c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d90e      	bls.n	8000eec <CS_read+0x454>
					Analog_CS[i] = Analog_CS_1[i] - Analog_CS_2[i];
 8000ece:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <CS_read+0x498>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ed6:	4917      	ldr	r1, [pc, #92]	@ (8000f34 <CS_read+0x49c>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	4a15      	ldr	r2, [pc, #84]	@ (8000f38 <CS_read+0x4a0>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000eea:	e004      	b.n	8000ef6 <CS_read+0x45e>
				}else{
					Analog_CS[i] = 0;
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <CS_read+0x4a0>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < I_AVERAGE/2; i++){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	ddb9      	ble.n	8000e76 <CS_read+0x3de>
				}
			}
			break;
 8000f02:	bf00      	nop
	for(int x = 0; x < 5; x++){
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	f77f adc9 	ble.w	8000aa4 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000f12:	f7ff fc41 	bl	8000798 <CS_process>
}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000003c 	.word	0x2000003c
 8000f24:	200000a8 	.word	0x200000a8
 8000f28:	2000044c 	.word	0x2000044c
 8000f2c:	2000054c 	.word	0x2000054c
 8000f30:	2000058c 	.word	0x2000058c
 8000f34:	200005ac 	.word	0x200005ac
 8000f38:	200005cc 	.word	0x200005cc

08000f3c <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <check_bit+0x2a>
		return 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <check_bit+0x2c>
	}else{
		return 0;
 8000f66:	2300      	movs	r3, #0
	}
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d104      	bne.n	8000fa0 <set_bit+0x2c>
		byte |= mask;
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e008      	b.n	8000fb2 <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4013      	ands	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <CS_Raw_to_mA>:

uint16_t CS_Raw_to_mA(uint16_t raw){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000fca:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000fce:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	817b      	strh	r3, [r7, #10]

	current = raw*max_mA / 4095;
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	fb03 f202 	mul.w	r2, r3, r2
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <CS_Raw_to_mA+0x3c>)
 8000fde:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	0852      	lsrs	r2, r2, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	0adb      	lsrs	r3, r3, #11
 8000fea:	817b      	strh	r3, [r7, #10]

	return current;
 8000fec:	897b      	ldrh	r3, [r7, #10]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	00100101 	.word	0x00100101

08001000 <analog_read>:

void analog_read(){
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f006 f9ff 	bl	8007410 <memset>

	if(toggle == 0){
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <analog_read+0x6c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10d      	bne.n	8001036 <analog_read+0x36>
		sConfig.Channel = ADC_CHANNEL_3;
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <analog_read+0x70>)
 800101c:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800101e:	2306      	movs	r3, #6
 8001020:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001022:	2302      	movs	r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001026:	2304      	movs	r3, #4
 8001028:	613b      	str	r3, [r7, #16]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800102a:	237f      	movs	r3, #127	@ 0x7f
 800102c:	60fb      	str	r3, [r7, #12]
		toggle = 1;
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <analog_read+0x6c>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e00c      	b.n	8001050 <analog_read+0x50>
	}else{
		sConfig.Channel = ADC_CHANNEL_4;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <analog_read+0x74>)
 8001038:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800103a:	2306      	movs	r3, #6
 800103c:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800103e:	2302      	movs	r3, #2
 8001040:	60bb      	str	r3, [r7, #8]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001042:	2304      	movs	r3, #4
 8001044:	613b      	str	r3, [r7, #16]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	@ 0x7f
 8001048:	60fb      	str	r3, [r7, #12]
		toggle = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <analog_read+0x6c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <analog_read+0x78>)
 8001056:	f001 ffb9 	bl	8002fcc <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <analog_read+0x64>
	{
		Error_Handler();
 8001060:	f000 fd12 	bl	8001a88 <Error_Handler>
	}
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000038 	.word	0x20000038
 8001070:	0c900008 	.word	0x0c900008
 8001074:	10c00010 	.word	0x10c00010
 8001078:	2000003c 	.word	0x2000003c

0800107c <chip_select_read>:

void chip_select_read(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f006 f9c1 	bl	8007410 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <chip_select_read+0x48>)
 8001090:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001092:	2306      	movs	r3, #6
 8001094:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109a:	237f      	movs	r3, #127	@ 0x7f
 800109c:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109e:	2304      	movs	r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <chip_select_read+0x4c>)
 80010ac:	f001 ff8e 	bl	8002fcc <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <chip_select_read+0x3e>
	  {
	    Error_Handler();
 80010b6:	f000 fce7 	bl	8001a88 <Error_Handler>
	  }
}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	04300002 	.word	0x04300002
 80010c8:	2000003c 	.word	0x2000003c

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 ffcd 	bl	800206e <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 80010d4:	f7ff f8c9 	bl	800026a <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f85c 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 fc4e 	bl	800197c <MX_GPIO_Init>
  MX_ADC1_Init();
 80010e0:	f000 f8a4 	bl	800122c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80010e4:	f000 f968 	bl	80013b8 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80010e8:	f000 f9ce 	bl	8001488 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ec:	f000 fa7c 	bl	80015e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f0:	f000 faf0 	bl	80016d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f4:	f000 fb3c 	bl	8001770 <MX_TIM4_Init>
  MX_TIM6_Init();
 80010f8:	f000 fbae 	bl	8001858 <MX_TIM6_Init>
  MX_TIM7_Init();
 80010fc:	f000 fbe2 	bl	80018c4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001100:	f000 fc16 	bl	8001930 <MX_TIM16_Init>
  MX_ADC2_Init();
 8001104:	f000 f8f2 	bl	80012ec <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8001108:	481b      	ldr	r0, [pc, #108]	@ (8001178 <main+0xac>)
 800110a:	f004 fee7 	bl	8005edc <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 800110e:	481b      	ldr	r0, [pc, #108]	@ (800117c <main+0xb0>)
 8001110:	f004 fee4 	bl	8005edc <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001114:	481a      	ldr	r0, [pc, #104]	@ (8001180 <main+0xb4>)
 8001116:	f004 fe77 	bl	8005e08 <HAL_TIM_Base_Start_IT>


  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 800111a:	481a      	ldr	r0, [pc, #104]	@ (8001184 <main+0xb8>)
 800111c:	f003 f81c 	bl	8004158 <HAL_FDCAN_Start>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <main+0x60>
 8001126:	f000 fcaf 	bl	8001a88 <Error_Handler>
 800112a:	e004      	b.n	8001136 <main+0x6a>
 800112c:	2201      	movs	r2, #1
 800112e:	2101      	movs	r1, #1
 8001130:	4815      	ldr	r0, [pc, #84]	@ (8001188 <main+0xbc>)
 8001132:	f003 fe5f 	bl	8004df4 <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4812      	ldr	r0, [pc, #72]	@ (8001184 <main+0xb8>)
 800113c:	f003 f992 	bl	8004464 <HAL_FDCAN_ActivateNotification>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <main+0x7e>
 8001146:	f000 fc9f 	bl	8001a88 <Error_Handler>
  HAL_GPIO_WritePin(GPIOB,AnalogPower_EN_Pin,1);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001150:	480d      	ldr	r0, [pc, #52]	@ (8001188 <main+0xbc>)
 8001152:	f003 fe4f 	bl	8004df4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(millis % 100 == 0){
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <main+0xc0>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <main+0xc4>)
 800115c:	fba2 1203 	umull	r1, r2, r2, r3
 8001160:	0952      	lsrs	r2, r2, #5
 8001162:	2164      	movs	r1, #100	@ 0x64
 8001164:	fb01 f202 	mul.w	r2, r1, r2
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	b29b      	uxth	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <main+0x8a>
		  CS_read();
 8001170:	f7ff fc92 	bl	8000a98 <CS_read>
	  if(millis % 100 == 0){
 8001174:	e7ef      	b.n	8001156 <main+0x8a>
 8001176:	bf00      	nop
 8001178:	20000178 	.word	0x20000178
 800117c:	200001c4 	.word	0x200001c4
 8001180:	20000210 	.word	0x20000210
 8001184:	20000114 	.word	0x20000114
 8001188:	48000400 	.word	0x48000400
 800118c:	20000630 	.word	0x20000630
 8001190:	51eb851f 	.word	0x51eb851f

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	@ 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	2238      	movs	r2, #56	@ 0x38
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 f934 	bl	8007410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ba:	f003 fe33 	bl	8004e24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2340      	movs	r3, #64	@ 0x40
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011d8:	2308      	movs	r3, #8
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80011e0:	2308      	movs	r3, #8
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fecd 	bl	8004f8c <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011f8:	f000 fc46 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2303      	movs	r3, #3
 8001202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f9cb 	bl	80055b0 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001220:	f000 fc32 	bl	8001a88 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	@ 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2220      	movs	r2, #32
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f006 f8e3 	bl	8007410 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800124a:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800124c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001254:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800126e:	2201      	movs	r2, #1
 8001270:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001274:	2204      	movs	r2, #4
 8001276:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001280:	2200      	movs	r2, #0
 8001282:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001286:	2201      	movs	r2, #1
 8001288:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 80012b6:	f001 f9c5 	bl	8002644 <HAL_ADC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012c0:	f000 fbe2 	bl	8001a88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <MX_ADC1_Init+0xbc>)
 80012d0:	f002 fc34 	bl	8003b3c <HAL_ADCEx_MultiModeConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012da:	f000 fbd5 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	@ 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000003c 	.word	0x2000003c

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 f889 	bl	8007410 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001300:	4a2b      	ldr	r2, [pc, #172]	@ (80013b0 <MX_ADC2_Init+0xc4>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001306:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800130a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001326:	2204      	movs	r2, #4
 8001328:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001338:	2201      	movs	r2, #1
 800133a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_ADC2_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001366:	4811      	ldr	r0, [pc, #68]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001368:	f001 f96c 	bl	8002644 <HAL_ADC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001372:	f000 fb89 	bl	8001a88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_ADC2_Init+0xc8>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800137e:	2302      	movs	r3, #2
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	237f      	movs	r3, #127	@ 0x7f
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001386:	2304      	movs	r3, #4
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_ADC2_Init+0xc0>)
 8001394:	f001 fe1a 	bl	8002fcc <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800139e:	f000 fb73 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000a8 	.word	0x200000a8
 80013b0:	50000100 	.word	0x50000100
 80013b4:	0c900008 	.word	0x0c900008

080013b8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013be:	4a2f      	ldr	r2, [pc, #188]	@ (800147c <MX_FDCAN1_Init+0xc4>)
 80013c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013d4:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013da:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013f4:	220d      	movs	r2, #13
 80013f6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 8001400:	2201      	movs	r2, #1
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 8001406:	2201      	movs	r2, #1
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 800140c:	2201      	movs	r2, #1
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 8001412:	2201      	movs	r2, #1
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 8001418:	221c      	movs	r2, #28
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 800141e:	2200      	movs	r2, #0
 8001420:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	@ (8001478 <MX_FDCAN1_Init+0xc0>)
 800142a:	f002 fd3b 	bl	8003ea4 <HAL_FDCAN_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001434:	f000 fb28 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_FDCAN1_Init+0xc8>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001440:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001450:	2205      	movs	r2, #5
 8001452:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <MX_FDCAN1_Init+0xcc>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000114 	.word	0x20000114
 800147c:	40006400 	.word	0x40006400
 8001480:	20000644 	.word	0x20000644
 8001484:	20000648 	.word	0x20000648

08001488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b09c      	sub	sp, #112	@ 0x70
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2234      	movs	r2, #52	@ 0x34
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 ffa4 	bl	8007410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c8:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014ca:	4a46      	ldr	r2, [pc, #280]	@ (80015e4 <MX_TIM1_Init+0x15c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b42      	ldr	r3, [pc, #264]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014da:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b3f      	ldr	r3, [pc, #252]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	483a      	ldr	r0, [pc, #232]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80014f6:	f004 fc2f 	bl	8005d58 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 fac2 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001508:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800150e:	4619      	mov	r1, r3
 8001510:	4833      	ldr	r0, [pc, #204]	@ (80015e0 <MX_TIM1_Init+0x158>)
 8001512:	f005 f8a9 	bl	8006668 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800151c:	f000 fab4 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001520:	482f      	ldr	r0, [pc, #188]	@ (80015e0 <MX_TIM1_Init+0x158>)
 8001522:	f004 fcdb 	bl	8005edc <HAL_TIM_PWM_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800152c:	f000 faac 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001540:	4619      	mov	r1, r3
 8001542:	4827      	ldr	r0, [pc, #156]	@ (80015e0 <MX_TIM1_Init+0x158>)
 8001544:	f005 fe10 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800154e:	f000 fa9b 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001552:	2360      	movs	r3, #96	@ 0x60
 8001554:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	@ (80015e0 <MX_TIM1_Init+0x158>)
 8001578:	f004 ff62 	bl	8006440 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001582:	f000 fa81 	bl	8001a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800159a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80015c4:	f005 fe52 	bl	800726c <HAL_TIMEx_ConfigBreakDeadTime>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80015ce:	f000 fa5b 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM1_Init+0x158>)
 80015d4:	f000 fc3c 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3770      	adds	r7, #112	@ 0x70
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000178 	.word	0x20000178
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 800161c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001620:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001624:	2295      	movs	r2, #149	@ 0x95
 8001626:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001630:	f06f 0201 	mvn.w	r2, #1
 8001634:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001642:	4823      	ldr	r0, [pc, #140]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001644:	f004 fb88 	bl	8005d58 <HAL_TIM_Base_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800164e:	f000 fa1b 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001658:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800165c:	4619      	mov	r1, r3
 800165e:	481c      	ldr	r0, [pc, #112]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001660:	f005 f802 	bl	8006668 <HAL_TIM_ConfigClockSource>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800166a:	f000 fa0d 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166e:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 8001670:	f004 fc34 	bl	8005edc <HAL_TIM_PWM_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800167a:	f000 fa05 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4810      	ldr	r0, [pc, #64]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 800168e:	f005 fd6b 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001698:	f000 f9f6 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169c:	2360      	movs	r3, #96	@ 0x60
 800169e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 80016b4:	f004 fec4 	bl	8006440 <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016be:	f000 f9e3 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c2:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <MX_TIM2_Init+0xe8>)
 80016c4:	f000 fbc4 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80016c8:	bf00      	nop
 80016ca:	3738      	adds	r7, #56	@ 0x38
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200001c4 	.word	0x200001c4

080016d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_TIM3_Init+0x94>)
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <MX_TIM3_Init+0x98>)
 80016f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_TIM3_Init+0x94>)
 80016fa:	223f      	movs	r2, #63	@ 0x3f
 80016fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001706:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800170a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_TIM3_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001718:	4813      	ldr	r0, [pc, #76]	@ (8001768 <MX_TIM3_Init+0x94>)
 800171a:	f004 fb1d 	bl	8005d58 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001724:	f000 f9b0 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001736:	f004 ff97 	bl	8006668 <HAL_TIM_ConfigClockSource>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001740:	f000 f9a2 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_TIM3_Init+0x94>)
 8001752:	f005 fd09 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800175c:	f000 f994 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000210 	.word	0x20000210
 800176c:	40000400 	.word	0x40000400

08001770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	@ 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <MX_TIM4_Init+0xe4>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017c8:	4821      	ldr	r0, [pc, #132]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017ca:	f004 fac5 	bl	8005d58 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017d4:	f000 f958 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481a      	ldr	r0, [pc, #104]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017e6:	f004 ff3f 	bl	8006668 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017f0:	f000 f94a 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017f4:	4816      	ldr	r0, [pc, #88]	@ (8001850 <MX_TIM4_Init+0xe0>)
 80017f6:	f004 fb71 	bl	8005edc <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001800:	f000 f942 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	480f      	ldr	r0, [pc, #60]	@ (8001850 <MX_TIM4_Init+0xe0>)
 8001814:	f005 fca8 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800181e:	f000 f933 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	@ 0x60
 8001824:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_TIM4_Init+0xe0>)
 800183a:	f004 fe01 	bl	8006440 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001844:	f000 f920 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3738      	adds	r7, #56	@ 0x38
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000025c 	.word	0x2000025c
 8001854:	40000800 	.word	0x40000800

08001858 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <MX_TIM6_Init+0x64>)
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <MX_TIM6_Init+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <MX_TIM6_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_TIM6_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_TIM6_Init+0x64>)
 800187c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001880:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_TIM6_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <MX_TIM6_Init+0x64>)
 800188a:	f004 fa65 	bl	8005d58 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001894:	f000 f8f8 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_TIM6_Init+0x64>)
 80018a6:	f005 fc5f 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018b0:	f000 f8ea 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002a8 	.word	0x200002a8
 80018c0:	40001000 	.word	0x40001000

080018c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018d6:	4a15      	ldr	r2, [pc, #84]	@ (800192c <MX_TIM7_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <MX_TIM7_Init+0x64>)
 80018f6:	f004 fa2f 	bl	8005d58 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001900:	f000 f8c2 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_TIM7_Init+0x64>)
 8001912:	f005 fc29 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800191c:	f000 f8b4 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002f4 	.word	0x200002f4
 800192c:	40001400 	.word	0x40001400

08001930 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <MX_TIM16_Init+0x48>)
 8001938:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_TIM16_Init+0x44>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_TIM16_Init+0x44>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_TIM16_Init+0x44>)
 8001962:	f004 f9f9 	bl	8005d58 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800196c:	f000 f88c 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000340 	.word	0x20000340
 8001978:	40014400 	.word	0x40014400

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001992:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <MX_GPIO_Init+0x100>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a39      	ldr	r2, [pc, #228]	@ (8001a7c <MX_GPIO_Init+0x100>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019aa:	4b34      	ldr	r3, [pc, #208]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	4a33      	ldr	r2, [pc, #204]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b6:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <MX_GPIO_Init+0x100>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019f8:	4821      	ldr	r0, [pc, #132]	@ (8001a80 <MX_GPIO_Init+0x104>)
 80019fa:	f003 f9fb 	bl	8004df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f248 6110 	movw	r1, #34320	@ 0x8610
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f003 f9f4 	bl	8004df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f240 11f9 	movw	r1, #505	@ 0x1f9
 8001a12:	481c      	ldr	r0, [pc, #112]	@ (8001a84 <MX_GPIO_Init+0x108>)
 8001a14:	f003 f9ee 	bl	8004df4 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 8001a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4813      	ldr	r0, [pc, #76]	@ (8001a80 <MX_GPIO_Init+0x104>)
 8001a32:	f003 f85d 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001a36:	f248 6310 	movw	r3, #34320	@ 0x8610
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a52:	f003 f84d 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin AnalogPower_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001a56:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8001a5a:	617b      	str	r3, [r7, #20]
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_GPIO_Init+0x108>)
 8001a70:	f003 f83e 	bl	8004af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48001800 	.word	0x48001800
 8001a84:	48000400 	.word	0x48000400

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <Error_Handler+0x8>

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001aca:	f003 fa4f 	bl	8004f6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09c      	sub	sp, #112	@ 0x70
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2244      	movs	r2, #68	@ 0x44
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 fc87 	bl	8007410 <memset>
  if(hadc->Instance==ADC1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b0a:	d13e      	bne.n	8001b8a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 ff2b 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b28:	f7ff ffae 	bl	8001a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a39      	ldr	r2, [pc, #228]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001b34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10b      	bne.n	8001b56 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a36      	ldr	r2, [pc, #216]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a30      	ldr	r2, [pc, #192]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001b6e:	230d      	movs	r3, #13
 8001b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	2303      	movs	r3, #3
 8001b74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f002 ffb4 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b88:	e042      	b.n	8001c10 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_ADC_MspInit+0x144>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13d      	bne.n	8001c10 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b9e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fee7 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001bb0:	f7ff ff6a 	bl	8001a88 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001bbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_ADC_MspInit+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10b      	bne.n	8001bde <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_ADC_MspInit+0x140>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf6:	2340      	movs	r3, #64	@ 0x40
 8001bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f002 ff70 	bl	8004af0 <HAL_GPIO_Init>
}
 8001c10:	bf00      	nop
 8001c12:	3770      	adds	r7, #112	@ 0x70
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000694 	.word	0x20000694
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	50000100 	.word	0x50000100

08001c24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09a      	sub	sp, #104	@ 0x68
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2244      	movs	r2, #68	@ 0x44
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f005 fbe3 	bl	8007410 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <HAL_FDCAN_MspInit+0xbc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d141      	bne.n	8001cd8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c5e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fe87 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001c70:	f7ff ff0a 	bl	8001a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c80:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_FDCAN_MspInit+0xc0>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ca4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ca8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc4:	f002 ff14 	bl	8004af0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2015      	movs	r0, #21
 8001cce:	f002 f8b4 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001cd2:	2015      	movs	r0, #21
 8001cd4:	f002 f8cb 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3768      	adds	r7, #104	@ 0x68
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40006400 	.word	0x40006400
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <HAL_TIM_Base_MspInit+0x14c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d06:	4b4c      	ldr	r3, [pc, #304]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d12:	e08a      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	4b46      	ldr	r3, [pc, #280]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	4a45      	ldr	r2, [pc, #276]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	201c      	movs	r0, #28
 8001d3c:	f002 f87d 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d40:	201c      	movs	r0, #28
 8001d42:	f002 f894 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001d46:	e070      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e3c <HAL_TIM_Base_MspInit+0x154>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d114      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a38      	ldr	r2, [pc, #224]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201d      	movs	r0, #29
 8001d70:	f002 f863 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d74:	201d      	movs	r0, #29
 8001d76:	f002 f87a 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001d7a:	e056      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <HAL_TIM_Base_MspInit+0x158>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d114      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d86:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d92:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	201e      	movs	r0, #30
 8001da4:	f002 f849 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001da8:	201e      	movs	r0, #30
 8001daa:	f002 f860 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001dae:	e03c      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_TIM_Base_MspInit+0x15c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10c      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dba:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
}
 8001dd2:	e02a      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_TIM_Base_MspInit+0x160>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d114      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dea:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2037      	movs	r0, #55	@ 0x37
 8001dfc:	f002 f81d 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e00:	2037      	movs	r0, #55	@ 0x37
 8001e02:	f002 f834 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001e06:	e010      	b.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <HAL_TIM_Base_MspInit+0x164>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10b      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_TIM_Base_MspInit+0x150>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	@ 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40001000 	.word	0x40001000
 8001e48:	40001400 	.word	0x40001400
 8001e4c:	40014400 	.word	0x40014400

08001e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <HAL_TIM_MspPostInit+0xac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11e      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eaa:	f002 fe21 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eae:	e021      	b.n	8001ef4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_TIM_MspPostInit+0xb0>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef0:	f002 fdfe 	bl	8004af0 <HAL_GPIO_Init>
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40021000 	.word	0x40021000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <NMI_Handler+0x4>

08001f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5a:	f000 f8db 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <FDCAN1_IT0_IRQHandler+0x10>)
 8001f6a:	f002 fb61 	bl	8004630 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000114 	.word	0x20000114

08001f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <TIM2_IRQHandler+0x10>)
 8001f7e:	f004 f90f 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200001c4 	.word	0x200001c4

08001f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <TIM3_IRQHandler+0x38>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <TIM3_IRQHandler+0x38>)
 8001f9a:	801a      	strh	r2, [r3, #0]
	if(millis % CAN_interval == 0){
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <TIM3_IRQHandler+0x38>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <TIM3_IRQHandler+0x3c>)
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fa8:	fb01 f202 	mul.w	r2, r1, r2
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <TIM3_IRQHandler+0x2c>
		  CAN_switch_state();
 8001fb4:	f7fe fa8e 	bl	80004d4 <CAN_switch_state>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb8:	4804      	ldr	r0, [pc, #16]	@ (8001fcc <TIM3_IRQHandler+0x40>)
 8001fba:	f004 f8f1 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000630 	.word	0x20000630
 8001fc8:	20000646 	.word	0x20000646
 8001fcc:	20000210 	.word	0x20000210

08001fd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <TIM4_IRQHandler+0x10>)
 8001fd6:	f004 f8e3 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000025c 	.word	0x2000025c

08001fe4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <TIM7_IRQHandler+0x10>)
 8001fea:	f004 f8d9 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200002f4 	.word	0x200002f4

08001ff8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800201e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	@ (8002058 <LoopForever+0x6>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	@ (800205c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <LoopForever+0xe>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	@ (8002068 <LoopForever+0x16>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002046:	f7ff ffd7 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f005 f9e9 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7ff f83d 	bl	80010cc <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   r0, =_estack
 8002054:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002060:	080074a8 	.word	0x080074a8
  ldr r2, =_sbss
 8002064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002068:	2000069c 	.word	0x2000069c

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>

0800206e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f001 fed3 	bl	8003e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207e:	200f      	movs	r0, #15
 8002080:	f000 f80e 	bl	80020a0 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	e001      	b.n	8002094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002090:	f7ff fd00 	bl	8001a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002094:	79fb      	ldrb	r3, [r7, #7]

}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020ac:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <HAL_InitTick+0x68>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d022      	beq.n	80020fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020b4:	4b15      	ldr	r3, [pc, #84]	@ (800210c <HAL_InitTick+0x6c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <HAL_InitTick+0x68>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 fede 	bl	8003e8a <HAL_SYSTICK_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	d809      	bhi.n	80020ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020da:	2200      	movs	r2, #0
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	f04f 30ff 	mov.w	r0, #4294967295
 80020e2:	f001 feaa 	bl	8003e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_InitTick+0x70>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e007      	b.n	80020fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e004      	b.n	80020fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e001      	b.n	80020fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000008 	.word	0x20000008
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_IncTick+0x1c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_IncTick+0x20>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4413      	add	r3, r2
 8002122:	4a03      	ldr	r2, [pc, #12]	@ (8002130 <HAL_IncTick+0x1c>)
 8002124:	6013      	str	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000698 	.word	0x20000698
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000698 	.word	0x20000698

08002150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3360      	adds	r3, #96	@ 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <LL_ADC_SetOffset+0x44>)
 80021da:	4013      	ands	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	03fff000 	.word	0x03fff000

08002200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3360      	adds	r3, #96	@ 0x60
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3360      	adds	r3, #96	@ 0x60
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	431a      	orrs	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002262:	b480      	push	{r7}
 8002264:	b087      	sub	sp, #28
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3360      	adds	r3, #96	@ 0x60
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	431a      	orrs	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3360      	adds	r3, #96	@ 0x60
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	615a      	str	r2, [r3, #20]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800231a:	b480      	push	{r7}
 800231c:	b087      	sub	sp, #28
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3330      	adds	r3, #48	@ 0x30
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	211f      	movs	r1, #31
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 011f 	and.w	r1, r3, #31
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3314      	adds	r3, #20
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0e5b      	lsrs	r3, r3, #25
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0d1b      	lsrs	r3, r3, #20
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2107      	movs	r1, #7
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	0d1b      	lsrs	r3, r3, #20
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	431a      	orrs	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0318 	and.w	r3, r3, #24
 80023ea:	4908      	ldr	r1, [pc, #32]	@ (800240c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023ec:	40d9      	lsrs	r1, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	400b      	ands	r3, r1
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	0007ffff 	.word	0x0007ffff

08002410 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6093      	str	r3, [r2, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <LL_ADC_IsEnabled+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_IsEnabled+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d101      	bne.n	8002572 <LL_ADC_IsDisableOngoing+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_IsDisableOngoing+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d101      	bne.n	80025e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d101      	bne.n	8002636 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e167      	b.n	800292e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fa35 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fef1 	bl	800246c <LL_ADC_IsDeepPowerDownEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fed7 	bl	8002448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff0c 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fef0 	bl	8002494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b4:	4ba0      	ldr	r3, [pc, #640]	@ (8002938 <HAL_ADC_Init+0x2f4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	4aa0      	ldr	r2, [pc, #640]	@ (800293c <HAL_ADC_Init+0x2f8>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff feee 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff62 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 800270c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 8100 	bne.w	800291c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80fc 	bne.w	800291c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fefb 	bl	8002534 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002748:	f7ff fef4 	bl	8002534 <LL_ADC_IsEnabled>
 800274c:	4604      	mov	r4, r0
 800274e:	487c      	ldr	r0, [pc, #496]	@ (8002940 <HAL_ADC_Init+0x2fc>)
 8002750:	f7ff fef0 	bl	8002534 <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	4323      	orrs	r3, r4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4619      	mov	r1, r3
 8002762:	4878      	ldr	r0, [pc, #480]	@ (8002944 <HAL_ADC_Init+0x300>)
 8002764:	f7ff fcf4 	bl	8002150 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7f5b      	ldrb	r3, [r3, #29]
 800276c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002772:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002778:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800277e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002786:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002792:	2b01      	cmp	r3, #1
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	045b      	lsls	r3, r3, #17
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	4b60      	ldr	r3, [pc, #384]	@ (8002948 <HAL_ADC_Init+0x304>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff15 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 80027f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d16d      	bne.n	80028d8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d16a      	bne.n	80028d8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002806:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800280e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800281e:	f023 0302 	bic.w	r3, r3, #2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	430b      	orrs	r3, r1
 800282a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002842:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800284c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002850:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6911      	ldr	r1, [r2, #16]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002862:	e013      	b.n	800288c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002872:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002888:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002892:	2b01      	cmp	r3, #1
 8002894:	d118      	bne.n	80028c8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028b8:	430a      	orrs	r2, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	e007      	b.n	80028d8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f023 010f 	bic.w	r1, r3, #15
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028f8:	e007      	b.n	800290a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 020f 	bic.w	r2, r2, #15
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	65da      	str	r2, [r3, #92]	@ 0x5c
 800291a:	e007      	b.n	800292c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f043 0210 	orr.w	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800292c:	7ffb      	ldrb	r3, [r7, #31]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	@ 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	053e2d63 	.word	0x053e2d63
 8002940:	50000100 	.word	0x50000100
 8002944:	50000300 	.word	0x50000300
 8002948:	fff04007 	.word	0xfff04007

0800294c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002954:	4859      	ldr	r0, [pc, #356]	@ (8002abc <HAL_ADC_Start+0x170>)
 8002956:	f7ff fd5b 	bl	8002410 <LL_ADC_GetMultimode>
 800295a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe35 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 809f 	bne.w	8002aac <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADC_Start+0x30>
 8002978:	2302      	movs	r3, #2
 800297a:	e09a      	b.n	8002ab2 <HAL_ADC_Start+0x166>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 ffcd 	bl	8003924 <ADC_Enable>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 8086 	bne.w	8002aa2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a44      	ldr	r2, [pc, #272]	@ (8002ac0 <HAL_ADC_Start+0x174>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d002      	beq.n	80029ba <HAL_ADC_Start+0x6e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	e001      	b.n	80029be <HAL_ADC_Start+0x72>
 80029ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d002      	beq.n	80029cc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ea:	f023 0206 	bic.w	r2, r3, #6
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80029f2:	e002      	b.n	80029fa <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	221c      	movs	r2, #28
 8002a00:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <HAL_ADC_Start+0x174>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d002      	beq.n	8002a1a <HAL_ADC_Start+0xce>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	e001      	b.n	8002a1e <HAL_ADC_Start+0xd2>
 8002a1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d008      	beq.n	8002a38 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d002      	beq.n	8002a38 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d114      	bne.n	8002a62 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fd90 	bl	8002580 <LL_ADC_REG_StartConversion>
 8002a60:	e026      	b.n	8002ab0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <HAL_ADC_Start+0x174>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d002      	beq.n	8002a7e <HAL_ADC_Start+0x132>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e001      	b.n	8002a82 <HAL_ADC_Start+0x136>
 8002a7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00f      	beq.n	8002ab0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa0:	e006      	b.n	8002ab0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002aaa:	e001      	b.n	8002ab0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
 8002aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	50000300 	.word	0x50000300
 8002ac0:	50000100 	.word	0x50000100

08002ac4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Stop+0x16>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e023      	b.n	8002b22 <HAL_ADC_Stop+0x5e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fe61 	bl	80037ac <ADC_ConversionStop>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 ff9b 	bl	8003a30 <ADC_Disable>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b36:	4867      	ldr	r0, [pc, #412]	@ (8002cd4 <HAL_ADC_PollForConversion+0x1a8>)
 8002b38:	f7ff fc6a 	bl	8002410 <LL_ADC_GetMultimode>
 8002b3c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d102      	bne.n	8002b4c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b46:	2308      	movs	r3, #8
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e02a      	b.n	8002ba2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d002      	beq.n	8002b5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	d111      	bne.n	8002b82 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0a6      	b.n	8002cca <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b80:	e00f      	b.n	8002ba2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b82:	4854      	ldr	r0, [pc, #336]	@ (8002cd4 <HAL_ADC_PollForConversion+0x1a8>)
 8002b84:	f7ff fc52 	bl	800242c <LL_ADC_GetMultiDMATransfer>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e095      	b.n	8002cca <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ba2:	f7ff fac9 	bl	8002138 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ba8:	e021      	b.n	8002bee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d01d      	beq.n	8002bee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bb2:	f7ff fac1 	bl	8002138 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <HAL_ADC_PollForConversion+0x9c>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d112      	bne.n	8002bee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06d      	b.n	8002cca <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0d6      	beq.n	8002baa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb71 	bl	80022f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01c      	beq.n	8002c52 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7f5b      	ldrb	r3, [r3, #29]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d118      	bne.n	8002c52 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d111      	bne.n	8002c52 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a20      	ldr	r2, [pc, #128]	@ (8002cd8 <HAL_ADC_PollForConversion+0x1ac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d002      	beq.n	8002c62 <HAL_ADC_PollForConversion+0x136>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e001      	b.n	8002c66 <HAL_ADC_PollForConversion+0x13a>
 8002c62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d008      	beq.n	8002c80 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d002      	beq.n	8002c80 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d104      	bne.n	8002c8a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e00d      	b.n	8002ca6 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_ADC_PollForConversion+0x1ac>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d002      	beq.n	8002c9a <HAL_ADC_PollForConversion+0x16e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	e001      	b.n	8002c9e <HAL_ADC_PollForConversion+0x172>
 8002c9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d104      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e008      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	220c      	movs	r2, #12
 8002cc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	50000100 	.word	0x50000100

08002cdc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce4:	4893      	ldr	r0, [pc, #588]	@ (8002f34 <HAL_ADC_Start_IT+0x258>)
 8002ce6:	f7ff fb93 	bl	8002410 <LL_ADC_GetMultimode>
 8002cea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fc6d 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8113 	bne.w	8002f24 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_Start_IT+0x30>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e10e      	b.n	8002f2a <HAL_ADC_Start_IT+0x24e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fe05 	bl	8003924 <ADC_Enable>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 80fa 	bne.w	8002f1a <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <HAL_ADC_Start_IT+0x25c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d002      	beq.n	8002d4a <HAL_ADC_Start_IT+0x6e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e001      	b.n	8002d4e <HAL_ADC_Start_IT+0x72>
 8002d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d002      	beq.n	8002d5c <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	f023 0206 	bic.w	r2, r3, #6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	221c      	movs	r2, #28
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 021c 	bic.w	r2, r2, #28
 8002da6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d108      	bne.n	8002dc2 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0208 	orr.w	r2, r2, #8
 8002dbe:	605a      	str	r2, [r3, #4]
          break;
 8002dc0:	e008      	b.n	8002dd4 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0204 	orr.w	r2, r2, #4
 8002dd0:	605a      	str	r2, [r3, #4]
          break;
 8002dd2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0210 	orr.w	r2, r2, #16
 8002dea:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a51      	ldr	r2, [pc, #324]	@ (8002f38 <HAL_ADC_Start_IT+0x25c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d002      	beq.n	8002dfc <HAL_ADC_Start_IT+0x120>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	e001      	b.n	8002e00 <HAL_ADC_Start_IT+0x124>
 8002dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d008      	beq.n	8002e1a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d002      	beq.n	8002e1a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d13a      	bne.n	8002e90 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02d      	beq.n	8002e84 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d110      	bne.n	8002e62 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e5e:	605a      	str	r2, [r3, #4]
              break;
 8002e60:	e010      	b.n	8002e84 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e70:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	605a      	str	r2, [r3, #4]
              break;
 8002e82:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fb79 	bl	8002580 <LL_ADC_REG_StartConversion>
 8002e8e:	e04b      	b.n	8002f28 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <HAL_ADC_Start_IT+0x25c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d002      	beq.n	8002eac <HAL_ADC_Start_IT+0x1d0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Start_IT+0x1d4>
 8002eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eb0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d034      	beq.n	8002f28 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ec6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d110      	bne.n	8002ef8 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0220 	bic.w	r2, r2, #32
 8002ee4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef4:	605a      	str	r2, [r3, #4]
              break;
 8002ef6:	e017      	b.n	8002f28 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f06:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	605a      	str	r2, [r3, #4]
              break;
 8002f18:	e006      	b.n	8002f28 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002f22:	e001      	b.n	8002f28 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
 8002f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	50000300 	.word	0x50000300
 8002f38:	50000100 	.word	0x50000100

08002f3c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Stop_IT+0x16>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e02b      	b.n	8002faa <HAL_ADC_Stop_IT+0x6e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fc25 	bl	80037ac <ADC_ConversionStop>
 8002f62:	4603      	mov	r3, r0
 8002f64:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d119      	bne.n	8002fa0 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 021c 	bic.w	r2, r2, #28
 8002f7a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fd57 	bl	8003a30 <ADC_Disable>
 8002f82:	4603      	mov	r3, r0
 8002f84:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0b6      	sub	sp, #216	@ 0xd8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x22>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e3c8      	b.n	8003780 <HAL_ADC_ConfigChannel+0x7b4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fae8 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 83ad 	bne.w	8003762 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	f7ff f980 	bl	800231a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fad6 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8003024:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff faf6 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 8003032:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 81d9 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 81d4 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003052:	d10f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	4619      	mov	r1, r3
 8003060:	f7ff f987 	bl	8002372 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f92e 	bl	80022ce <LL_ADC_SetSamplingTimeCommonConfig>
 8003072:	e00e      	b.n	8003092 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	461a      	mov	r2, r3
 8003082:	f7ff f976 	bl	8002372 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f91e 	bl	80022ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d022      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030c4:	f7ff f878 	bl	80021b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6919      	ldr	r1, [r3, #16]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f7ff f8c4 	bl	8002262 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x124>
 80030ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x126>
 80030f0:	2300      	movs	r3, #0
 80030f2:	461a      	mov	r2, r3
 80030f4:	f7ff f8d0 	bl	8002298 <LL_ADC_SetOffsetSaturation>
 80030f8:	e17b      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f87d 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x15a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f872 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	e01e      	b.n	8003164 <HAL_ADC_ConfigChannel+0x198>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff f867 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800314c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e004      	b.n	8003162 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_ADC_ConfigChannel+0x1b0>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	e018      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1e2>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80031a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f836 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f81a 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x220>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f80f 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 021f 	and.w	r2, r3, #31
 80031ea:	e01e      	b.n	800322a <HAL_ADC_ConfigChannel+0x25e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f804 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800320a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e004      	b.n	8003228 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800321e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x276>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	e018      	b.n	8003274 <HAL_ADC_ConfigChannel+0x2a8>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003256:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800325a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800325e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e004      	b.n	8003274 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800326a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ffd3 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ffb7 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x2e6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ffac 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	e01e      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ffa1 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80032d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80032d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e004      	b.n	80032ee <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80032e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x33c>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	e016      	b.n	8003336 <HAL_ADC_ConfigChannel+0x36a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800331a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800331c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e004      	b.n	8003336 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003336:	429a      	cmp	r2, r3
 8003338:	d106      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe ff72 	bl	800222c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2103      	movs	r1, #3
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ff56 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x3a8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2103      	movs	r1, #3
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ff4b 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e017      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x3d8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ff40 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800338c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800338e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800339a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x3f0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e011      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x414>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80033ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e003      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80033d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2103      	movs	r1, #3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe ff1d 	bl	800222c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f89c 	bl	8002534 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8140 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	461a      	mov	r2, r3
 8003412:	f7fe ffd9 	bl	80023c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4a8f      	ldr	r2, [pc, #572]	@ (8003658 <HAL_ADC_ConfigChannel+0x68c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f040 8131 	bne.w	8003684 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <HAL_ADC_ConfigChannel+0x47e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2b09      	cmp	r3, #9
 8003440:	bf94      	ite	ls
 8003442:	2301      	movls	r3, #1
 8003444:	2300      	movhi	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e019      	b.n	800347e <HAL_ADC_ConfigChannel+0x4b2>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800345a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800345c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b09      	cmp	r3, #9
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347e:	2b00      	cmp	r3, #0
 8003480:	d079      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_ADC_ConfigChannel+0x4d2>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800349c:	e015      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4fe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80034ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x51e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	e017      	b.n	800351a <HAL_ADC_ConfigChannel+0x54e>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x574>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	3301      	adds	r3, #1
 8003532:	f003 021f 	and.w	r2, r3, #31
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	051b      	lsls	r3, r3, #20
 800353e:	e018      	b.n	8003572 <HAL_ADC_ConfigChannel+0x5a6>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800355c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003572:	430b      	orrs	r3, r1
 8003574:	e081      	b.n	800367a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x5c6>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	3301      	adds	r3, #1
 800358a:	069b      	lsls	r3, r3, #26
 800358c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003590:	e015      	b.n	80035be <HAL_ADC_ConfigChannel+0x5f2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_ADC_ConfigChannel+0x612>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	e017      	b.n	800360e <HAL_ADC_ConfigChannel+0x642>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	61fb      	str	r3, [r7, #28]
  return result;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	ea42 0103 	orr.w	r1, r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_ConfigChannel+0x66e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 021f 	and.w	r2, r3, #31
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3b1e      	subs	r3, #30
 8003632:	051b      	lsls	r3, r3, #20
 8003634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003638:	e01e      	b.n	8003678 <HAL_ADC_ConfigChannel+0x6ac>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
  return result;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e006      	b.n	8003664 <HAL_ADC_ConfigChannel+0x698>
 8003656:	bf00      	nop
 8003658:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 021f 	and.w	r2, r3, #31
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	051b      	lsls	r3, r3, #20
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003678:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367e:	4619      	mov	r1, r3
 8003680:	f7fe fe77 	bl	8002372 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b3f      	ldr	r3, [pc, #252]	@ (8003788 <HAL_ADC_ConfigChannel+0x7bc>)
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d071      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003690:	483e      	ldr	r0, [pc, #248]	@ (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 8003692:	f7fe fd83 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 8003696:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3c      	ldr	r2, [pc, #240]	@ (8003790 <HAL_ADC_ConfigChannel+0x7c4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x6e2>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_ADC_ConfigChannel+0x7c8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d127      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d121      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c2:	d157      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036cc:	4619      	mov	r1, r3
 80036ce:	482f      	ldr	r0, [pc, #188]	@ (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 80036d0:	f7fe fd51 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d4:	4b30      	ldr	r3, [pc, #192]	@ (8003798 <HAL_ADC_ConfigChannel+0x7cc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	4a30      	ldr	r2, [pc, #192]	@ (800379c <HAL_ADC_ConfigChannel+0x7d0>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f9      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fc:	e03a      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d113      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a22      	ldr	r2, [pc, #136]	@ (80037a4 <HAL_ADC_ConfigChannel+0x7d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02a      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800371e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003726:	4619      	mov	r1, r3
 8003728:	4818      	ldr	r0, [pc, #96]	@ (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 800372a:	f7fe fd24 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372e:	e021      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d11c      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800373a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800373e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <HAL_ADC_ConfigChannel+0x7d8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d011      	beq.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003754:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003758:	4619      	mov	r1, r3
 800375a:	480c      	ldr	r0, [pc, #48]	@ (800378c <HAL_ADC_ConfigChannel+0x7c0>)
 800375c:	f7fe fd0b 	bl	8002176 <LL_ADC_SetCommonPathInternalCh>
 8003760:	e008      	b.n	8003774 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800377c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003780:	4618      	mov	r0, r3
 8003782:	37d8      	adds	r7, #216	@ 0xd8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	80080000 	.word	0x80080000
 800378c:	50000300 	.word	0x50000300
 8003790:	c3210000 	.word	0xc3210000
 8003794:	90c00010 	.word	0x90c00010
 8003798:	20000000 	.word	0x20000000
 800379c:	053e2d63 	.word	0x053e2d63
 80037a0:	c7520000 	.word	0xc7520000
 80037a4:	50000100 	.word	0x50000100
 80037a8:	cb840000 	.word	0xcb840000

080037ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff04 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 80037c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe ff25 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 80037d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8098 	beq.w	8003914 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02a      	beq.n	8003848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7f5b      	ldrb	r3, [r3, #29]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d126      	bne.n	8003848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7f1b      	ldrb	r3, [r3, #28]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d122      	bne.n	8003848 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003802:	2301      	movs	r3, #1
 8003804:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003806:	e014      	b.n	8003832 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4a45      	ldr	r2, [pc, #276]	@ (8003920 <ADC_ConversionStop+0x174>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d90d      	bls.n	800382c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e074      	b.n	8003916 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d1e3      	bne.n	8003808 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2240      	movs	r2, #64	@ 0x40
 8003846:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d014      	beq.n	8003878 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe febc 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fe79 	bl	800255a <LL_ADC_IsDisableOngoing>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fe98 	bl	80025a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d014      	beq.n	80038a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fecb 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fe61 	bl	800255a <LL_ADC_IsDisableOngoing>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fea7 	bl	80025f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d005      	beq.n	80038ba <ADC_ConversionStop+0x10e>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d105      	bne.n	80038c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80038b4:	230c      	movs	r3, #12
 80038b6:	617b      	str	r3, [r7, #20]
        break;
 80038b8:	e005      	b.n	80038c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80038ba:	2308      	movs	r3, #8
 80038bc:	617b      	str	r3, [r7, #20]
        break;
 80038be:	e002      	b.n	80038c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038c0:	2304      	movs	r3, #4
 80038c2:	617b      	str	r3, [r7, #20]
        break;
 80038c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80038c6:	f7fe fc37 	bl	8002138 <HAL_GetTick>
 80038ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038cc:	e01b      	b.n	8003906 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038ce:	f7fe fc33 	bl	8002138 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d914      	bls.n	8003906 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1dc      	bne.n	80038ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	a33fffff 	.word	0xa33fffff

08003924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fdfd 	bl	8002534 <LL_ADC_IsEnabled>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d169      	bne.n	8003a14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	4b36      	ldr	r3, [pc, #216]	@ (8003a20 <ADC_Enable+0xfc>)
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e055      	b.n	8003a16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fdb8 	bl	80024e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003974:	482b      	ldr	r0, [pc, #172]	@ (8003a24 <ADC_Enable+0x100>)
 8003976:	f7fe fc11 	bl	800219c <LL_ADC_GetCommonPathInternalCh>
 800397a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800397c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003984:	4b28      	ldr	r3, [pc, #160]	@ (8003a28 <ADC_Enable+0x104>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	4a28      	ldr	r2, [pc, #160]	@ (8003a2c <ADC_Enable+0x108>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800399e:	e002      	b.n	80039a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fbc4 	bl	8002138 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b2:	e028      	b.n	8003a06 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fdbb 	bl	8002534 <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fd8b 	bl	80024e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039ce:	f7fe fbb3 	bl	8002138 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d914      	bls.n	8003a06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d00d      	beq.n	8003a06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ee:	f043 0210 	orr.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d1cf      	bne.n	80039b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	8000003f 	.word	0x8000003f
 8003a24:	50000300 	.word	0x50000300
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	053e2d63 	.word	0x053e2d63

08003a30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fd8c 	bl	800255a <LL_ADC_IsDisableOngoing>
 8003a42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fd73 	bl	8002534 <LL_ADC_IsEnabled>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d047      	beq.n	8003ae4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d144      	bne.n	8003ae4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030d 	and.w	r3, r3, #13
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10c      	bne.n	8003a82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fd4d 	bl	800250c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2203      	movs	r2, #3
 8003a78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a7a:	f7fe fb5d 	bl	8002138 <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a80:	e029      	b.n	8003ad6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	f043 0210 	orr.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e023      	b.n	8003ae6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a9e:	f7fe fb4b 	bl	8002138 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d914      	bls.n	8003ad6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1dc      	bne.n	8003a9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <LL_ADC_IsEnabled>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_IsEnabled+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_IsEnabled+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b0a1      	sub	sp, #132	@ 0x84
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e08b      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b62:	2300      	movs	r3, #0
 8003b64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b66:	2300      	movs	r3, #0
 8003b68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b72:	d102      	bne.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e001      	b.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e06a      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ffb8 	bl	8003b14 <LL_ADC_REG_IsConversionOngoing>
 8003ba4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffb2 	bl	8003b14 <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d14c      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d149      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bbc:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003bbe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bda:	035b      	lsls	r3, r3, #13
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003be8:	f7ff ff81 	bl	8003aee <LL_ADC_IsEnabled>
 8003bec:	4604      	mov	r4, r0
 8003bee:	4823      	ldr	r0, [pc, #140]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bf0:	f7ff ff7d 	bl	8003aee <LL_ADC_IsEnabled>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4323      	orrs	r3, r4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d133      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c04:	f023 030f 	bic.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	6892      	ldr	r2, [r2, #8]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c16:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	e024      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c26:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c2a:	f7ff ff60 	bl	8003aee <LL_ADC_IsEnabled>
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4812      	ldr	r0, [pc, #72]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c32:	f7ff ff5c 	bl	8003aee <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4323      	orrs	r3, r4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d112      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c46:	f023 030f 	bic.w	r3, r3, #15
 8003c4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4e:	e009      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c62:	e000      	b.n	8003c66 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3784      	adds	r7, #132	@ 0x84
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000300 	.word	0x50000300

08003c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cb6:	4a04      	ldr	r2, [pc, #16]	@ (8003cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	60d3      	str	r3, [r2, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd0:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 0307 	and.w	r3, r3, #7
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	db0b      	blt.n	8003d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4907      	ldr	r1, [pc, #28]	@ (8003d20 <__NVIC_EnableIRQ+0x38>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2001      	movs	r0, #1
 8003d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e100 	.word	0xe000e100

08003d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	db0a      	blt.n	8003d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	490c      	ldr	r1, [pc, #48]	@ (8003d70 <__NVIC_SetPriority+0x4c>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	440b      	add	r3, r1
 8003d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d4c:	e00a      	b.n	8003d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4908      	ldr	r1, [pc, #32]	@ (8003d74 <__NVIC_SetPriority+0x50>)
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	3b04      	subs	r3, #4
 8003d5c:	0112      	lsls	r2, r2, #4
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	440b      	add	r3, r1
 8003d62:	761a      	strb	r2, [r3, #24]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000e100 	.word	0xe000e100
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	@ 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f1c3 0307 	rsb	r3, r3, #7
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	bf28      	it	cs
 8003d96:	2304      	movcs	r3, #4
 8003d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2b06      	cmp	r3, #6
 8003da0:	d902      	bls.n	8003da8 <NVIC_EncodePriority+0x30>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3b03      	subs	r3, #3
 8003da6:	e000      	b.n	8003daa <NVIC_EncodePriority+0x32>
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	401a      	ands	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	43d9      	mvns	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	4313      	orrs	r3, r2
         );
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	@ 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003df0:	d301      	bcc.n	8003df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00f      	b.n	8003e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <SysTick_Config+0x40>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dfe:	210f      	movs	r1, #15
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	f7ff ff8e 	bl	8003d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e08:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <SysTick_Config+0x40>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e0e:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <SysTick_Config+0x40>)
 8003e10:	2207      	movs	r2, #7
 8003e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000e010 	.word	0xe000e010

08003e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff29 	bl	8003c84 <__NVIC_SetPriorityGrouping>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4603      	mov	r3, r0
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e48:	f7ff ff40 	bl	8003ccc <__NVIC_GetPriorityGrouping>
 8003e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff ff90 	bl	8003d78 <NVIC_EncodePriority>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff5f 	bl	8003d24 <__NVIC_SetPriority>
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff33 	bl	8003ce8 <__NVIC_EnableIRQ>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ffa4 	bl	8003de0 <SysTick_Config>
 8003e98:	4603      	mov	r3, r0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e147      	b.n	8004146 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd feaa 	bl	8001c24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0210 	bic.w	r2, r2, #16
 8003ede:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee0:	f7fe f92a 	bl	8002138 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ee6:	e012      	b.n	8003f0e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ee8:	f7fe f926 	bl	8002138 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b0a      	cmp	r3, #10
 8003ef4:	d90b      	bls.n	8003f0e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2203      	movs	r2, #3
 8003f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e11b      	b.n	8004146 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d0e5      	beq.n	8003ee8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f2c:	f7fe f904 	bl	8002138 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f32:	e012      	b.n	8003f5a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f34:	f7fe f900 	bl	8002138 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b0a      	cmp	r3, #10
 8003f40:	d90b      	bls.n	8003f5a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	f043 0201 	orr.w	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2203      	movs	r2, #3
 8003f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0f5      	b.n	8004146 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0e5      	beq.n	8003f34 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0202 	orr.w	r2, r2, #2
 8003f76:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a74      	ldr	r2, [pc, #464]	@ (8004150 <HAL_FDCAN_Init+0x2ac>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d103      	bne.n	8003f8a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003f82:	4a74      	ldr	r2, [pc, #464]	@ (8004154 <HAL_FDCAN_Init+0x2b0>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7c1b      	ldrb	r3, [r3, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d108      	bne.n	8003fa4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	e007      	b.n	8003fb4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fb2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7c5b      	ldrb	r3, [r3, #17]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d108      	bne.n	8003fce <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e007      	b.n	8003fde <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fdc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7c9b      	ldrb	r3, [r3, #18]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	e007      	b.n	8004008 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004006:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800402c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0210 	bic.w	r2, r2, #16
 800403c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0204 	orr.w	r2, r2, #4
 8004054:	619a      	str	r2, [r3, #24]
 8004056:	e02c      	b.n	80040b2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d01c      	beq.n	80040a2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004076:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0210 	orr.w	r2, r2, #16
 8004086:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d110      	bne.n	80040b2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0220 	orr.w	r2, r2, #32
 800409e:	619a      	str	r2, [r3, #24]
 80040a0:	e007      	b.n	80040b2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	3b01      	subs	r3, #1
 80040c0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040c2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040ca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040da:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040dc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e6:	d115      	bne.n	8004114 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	3b01      	subs	r3, #1
 80040f4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040f6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	3b01      	subs	r3, #1
 80040fe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004100:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	3b01      	subs	r3, #1
 800410a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004110:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004112:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fc0e 	bl	800494c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40006400 	.word	0x40006400
 8004154:	40006500 	.word	0x40006500

08004158 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d110      	bne.n	800418e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e006      	b.n	800419c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004192:	f043 0204 	orr.w	r2, r3, #4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d12c      	bne.n	800421a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e023      	b.n	8004228 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fbfe 	bl	80049f8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800420c:	2201      	movs	r2, #1
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e006      	b.n	8004228 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421e:	f043 0208 	orr.w	r2, r3, #8
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004230:	b480      	push	{r7}
 8004232:	b08b      	sub	sp, #44	@ 0x2c
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004248:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800424a:	7efb      	ldrb	r3, [r7, #27]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f040 80e8 	bne.w	8004422 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d137      	bne.n	80042c8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0db      	b.n	8004430 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10a      	bne.n	80042a0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004292:	0a5b      	lsrs	r3, r3, #9
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	e036      	b.n	8004336 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0a3      	b.n	8004430 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042f0:	0e1b      	lsrs	r3, r3, #24
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10a      	bne.n	8004310 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e005      	b.n	8004366 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	3304      	adds	r3, #4
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 020f 	and.w	r2, r3, #15
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	0fda      	lsrs	r2, r3, #31
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	3304      	adds	r3, #4
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e00a      	b.n	80043f2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	441a      	add	r2, r3
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	440b      	add	r3, r1
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	3301      	adds	r3, #1
 80043f0:	623b      	str	r3, [r7, #32]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a11      	ldr	r2, [pc, #68]	@ (800443c <HAL_FDCAN_GetRxMessage+0x20c>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	4293      	cmp	r3, r2
 8004400:	d3ec      	bcc.n	80043dc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	d105      	bne.n	8004414 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004412:	e004      	b.n	800441e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e006      	b.n	8004430 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	f043 0208 	orr.w	r2, r3, #8
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	372c      	adds	r7, #44	@ 0x2c
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	08007490 	.word	0x08007490

08004440 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004476:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d003      	beq.n	8004486 <HAL_FDCAN_ActivateNotification+0x22>
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 80c8 	bne.w	8004616 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03b      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d031      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d027      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01d      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d13b      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d131      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d127      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d11d      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00c      	beq.n	80045c6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0202 	orr.w	r2, r2, #2
 80045c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	430a      	orrs	r2, r1
 80045e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	430a      	orrs	r2, r1
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e006      	b.n	8004624 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	f043 0202 	orr.w	r2, r3, #2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	@ 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464c:	4013      	ands	r3, r2
 800464e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004664:	4013      	ands	r3, r2
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	4013      	ands	r3, r2
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800468a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	4013      	ands	r3, r2
 8004696:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80046a2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046be:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2240      	movs	r2, #64	@ 0x40
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f916 	bl	800490e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d014      	beq.n	8004720 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046fe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004716:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8d8 	bl	80048d0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800472e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8a2 	bl	800487a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fb fe76 	bl	8000438 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004758:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800475a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f897 	bl	8004890 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f890 	bl	80048a6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d018      	beq.n	80047c2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f87c 	bl	80048ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00c      	beq.n	80047e6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f880 	bl	80048e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004802:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f878 	bl	80048fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004826:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f876 	bl	8004936 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f858 	bl	8004922 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004872:	bf00      	nop
 8004874:	3730      	adds	r7, #48	@ 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004954:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004956:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004966:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	041a      	lsls	r2, r3, #16
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800498c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	061a      	lsls	r2, r3, #24
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e005      	b.n	80049da <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3304      	adds	r3, #4
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3f3      	bcc.n	80049ce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	4000a400 	.word	0x4000a400

080049f8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004a16:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e00a      	b.n	8004a3a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004a2c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004a32:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004a34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a38:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a44:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004a4a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004a50:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	3304      	adds	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	3304      	adds	r3, #4
 8004a84:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e020      	b.n	8004ace <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3303      	adds	r3, #3
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004aa4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	440b      	add	r3, r1
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004ab2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	440a      	add	r2, r1
 8004aba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004abc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3304      	adds	r3, #4
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a06      	ldr	r2, [pc, #24]	@ (8004aec <FDCAN_CopyMessageToRAM+0xf4>)
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d3d6      	bcc.n	8004a8c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3724      	adds	r7, #36	@ 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	08007490 	.word	0x08007490

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004afe:	e15a      	b.n	8004db6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 814c 	beq.w	8004db0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0201 	and.w	r2, r3, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c64:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c68:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c70:	4b58      	ldr	r3, [pc, #352]	@ (8004dd4 <HAL_GPIO_Init+0x2e4>)
 8004c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7c:	4a56      	ldr	r2, [pc, #344]	@ (8004dd8 <HAL_GPIO_Init+0x2e8>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3302      	adds	r3, #2
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ca6:	d01f      	beq.n	8004ce8 <HAL_GPIO_Init+0x1f8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a4c      	ldr	r2, [pc, #304]	@ (8004ddc <HAL_GPIO_Init+0x2ec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d019      	beq.n	8004ce4 <HAL_GPIO_Init+0x1f4>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8004de0 <HAL_GPIO_Init+0x2f0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <HAL_GPIO_Init+0x1f0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a4a      	ldr	r2, [pc, #296]	@ (8004de4 <HAL_GPIO_Init+0x2f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00d      	beq.n	8004cdc <HAL_GPIO_Init+0x1ec>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a49      	ldr	r2, [pc, #292]	@ (8004de8 <HAL_GPIO_Init+0x2f8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <HAL_GPIO_Init+0x1e8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a48      	ldr	r2, [pc, #288]	@ (8004dec <HAL_GPIO_Init+0x2fc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_GPIO_Init+0x1e4>
 8004cd0:	2305      	movs	r3, #5
 8004cd2:	e00a      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cd4:	2306      	movs	r3, #6
 8004cd6:	e008      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e006      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e004      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e002      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_GPIO_Init+0x1fa>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	f002 0203 	and.w	r2, r2, #3
 8004cf0:	0092      	lsls	r2, r2, #2
 8004cf2:	4093      	lsls	r3, r2
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cfa:	4937      	ldr	r1, [pc, #220]	@ (8004dd8 <HAL_GPIO_Init+0x2e8>)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	3302      	adds	r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d08:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d2c:	4a30      	ldr	r2, [pc, #192]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d32:	4b2f      	ldr	r3, [pc, #188]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d56:	4a26      	ldr	r2, [pc, #152]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d5c:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d80:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004daa:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3301      	adds	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f ae9d 	bne.w	8004b00 <HAL_GPIO_Init+0x10>
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	48000400 	.word	0x48000400
 8004de0:	48000800 	.word	0x48000800
 8004de4:	48000c00 	.word	0x48000c00
 8004de8:	48001000 	.word	0x48001000
 8004dec:	48001400 	.word	0x48001400
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
 8004e00:	4613      	mov	r3, r2
 8004e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e04:	787b      	ldrb	r3, [r7, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e10:	e002      	b.n	8004e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d141      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e32:	4b4b      	ldr	r3, [pc, #300]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d131      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e40:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e46:	4a46      	ldr	r2, [pc, #280]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e50:	4b43      	ldr	r3, [pc, #268]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e58:	4a41      	ldr	r2, [pc, #260]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e60:	4b40      	ldr	r3, [pc, #256]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2232      	movs	r2, #50	@ 0x32
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	0c9b      	lsrs	r3, r3, #18
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e76:	e002      	b.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e7e:	4b38      	ldr	r3, [pc, #224]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8a:	d102      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f2      	bne.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e92:	4b33      	ldr	r3, [pc, #204]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9e:	d158      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e057      	b.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004eb4:	e04d      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ebc:	d141      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eca:	d131      	bne.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ecc:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed2:	4a23      	ldr	r2, [pc, #140]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004edc:	4b20      	ldr	r3, [pc, #128]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2232      	movs	r2, #50	@ 0x32
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	0c9b      	lsrs	r3, r3, #18
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f02:	e002      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0a:	4b15      	ldr	r3, [pc, #84]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f16:	d102      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f2      	bne.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1e:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2a:	d112      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e011      	b.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f36:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f40:	e007      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f42:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f4a:	4a05      	ldr	r2, [pc, #20]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40007000 	.word	0x40007000
 8004f64:	20000000 	.word	0x20000000
 8004f68:	431bde83 	.word	0x431bde83

08004f6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a04      	ldr	r2, [pc, #16]	@ (8004f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f7a:	6093      	str	r3, [r2, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40007000 	.word	0x40007000

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e2fe      	b.n	800559c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004faa:	4b97      	ldr	r3, [pc, #604]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb4:	4b94      	ldr	r3, [pc, #592]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d102      	bne.n	8004fca <HAL_RCC_OscConfig+0x3e>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b8d      	ldr	r3, [pc, #564]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e2d9      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b85      	ldr	r3, [pc, #532]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a84      	ldr	r2, [pc, #528]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b7f      	ldr	r3, [pc, #508]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7e      	ldr	r2, [pc, #504]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b7c      	ldr	r3, [pc, #496]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7b      	ldr	r2, [pc, #492]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b78      	ldr	r3, [pc, #480]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a77      	ldr	r2, [pc, #476]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b75      	ldr	r3, [pc, #468]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a74      	ldr	r2, [pc, #464]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd f878 	bl	8002138 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd f874 	bl	8002138 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e29e      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505e:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd f864 	bl	8002138 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd f860 	bl	8002138 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e28a      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005086:	4b60      	ldr	r3, [pc, #384]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d075      	beq.n	800518e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a2:	4b59      	ldr	r3, [pc, #356]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ac:	4b56      	ldr	r3, [pc, #344]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_OscConfig+0x136>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d002      	beq.n	80050c8 <HAL_RCC_OscConfig+0x13c>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d11f      	bne.n	8005108 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_OscConfig+0x154>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e25d      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	4946      	ldr	r1, [pc, #280]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050f4:	4b45      	ldr	r3, [pc, #276]	@ (800520c <HAL_RCC_OscConfig+0x280>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fc ffd1 	bl	80020a0 <HAL_InitTick>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d043      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e249      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d023      	beq.n	8005158 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005110:	4b3d      	ldr	r3, [pc, #244]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3c      	ldr	r2, [pc, #240]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd f80c 	bl	8002138 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005124:	f7fd f808 	bl	8002138 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e232      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005136:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	061b      	lsls	r3, r3, #24
 8005150:	492d      	ldr	r1, [pc, #180]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	604b      	str	r3, [r1, #4]
 8005156:	e01a      	b.n	800518e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005158:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 800515e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc ffe8 	bl	8002138 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fc ffe4 	bl	8002138 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e20e      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800517e:	4b22      	ldr	r3, [pc, #136]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1e0>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d041      	beq.n	800521e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01c      	beq.n	80051dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a2:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a8:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b2:	f7fc ffc1 	bl	8002138 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fc ffbd 	bl	8002138 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e1e7      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ef      	beq.n	80051ba <HAL_RCC_OscConfig+0x22e>
 80051da:	e020      	b.n	800521e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e2:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <HAL_RCC_OscConfig+0x27c>)
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fc ffa4 	bl	8002138 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f2:	e00d      	b.n	8005210 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fc ffa0 	bl	8002138 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d906      	bls.n	8005210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e1ca      	b.n	800559c <HAL_RCC_OscConfig+0x610>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005210:	4b8c      	ldr	r3, [pc, #560]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ea      	bne.n	80051f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80a6 	beq.w	8005378 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522c:	2300      	movs	r3, #0
 800522e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005230:	4b84      	ldr	r3, [pc, #528]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x2b4>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x2b6>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b7f      	ldr	r3, [pc, #508]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524a:	4a7e      	ldr	r2, [pc, #504]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005250:	6593      	str	r3, [r2, #88]	@ 0x58
 8005252:	4b7c      	ldr	r3, [pc, #496]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005262:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <HAL_RCC_OscConfig+0x4bc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526e:	4b76      	ldr	r3, [pc, #472]	@ (8005448 <HAL_RCC_OscConfig+0x4bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a75      	ldr	r2, [pc, #468]	@ (8005448 <HAL_RCC_OscConfig+0x4bc>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fc ff5d 	bl	8002138 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fc ff59 	bl	8002138 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e183      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005294:	4b6c      	ldr	r3, [pc, #432]	@ (8005448 <HAL_RCC_OscConfig+0x4bc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d108      	bne.n	80052ba <HAL_RCC_OscConfig+0x32e>
 80052a8:	4b66      	ldr	r3, [pc, #408]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	4a65      	ldr	r2, [pc, #404]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052b8:	e024      	b.n	8005304 <HAL_RCC_OscConfig+0x378>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d110      	bne.n	80052e4 <HAL_RCC_OscConfig+0x358>
 80052c2:	4b60      	ldr	r3, [pc, #384]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052e2:	e00f      	b.n	8005304 <HAL_RCC_OscConfig+0x378>
 80052e4:	4b57      	ldr	r3, [pc, #348]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	4a56      	ldr	r2, [pc, #344]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052f4:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	4a52      	ldr	r2, [pc, #328]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fc ff14 	bl	8002138 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fc ff10 	bl	8002138 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e138      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532a:	4b46      	ldr	r3, [pc, #280]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ed      	beq.n	8005314 <HAL_RCC_OscConfig+0x388>
 8005338:	e015      	b.n	8005366 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533a:	f7fc fefd 	bl	8002138 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fc fef9 	bl	8002138 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e121      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005358:	4b3a      	ldr	r3, [pc, #232]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ed      	bne.n	8005342 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005366:	7ffb      	ldrb	r3, [r7, #31]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536c:	4b35      	ldr	r3, [pc, #212]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005370:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005376:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d03c      	beq.n	80053fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01c      	beq.n	80053c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800538c:	4b2d      	ldr	r3, [pc, #180]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005392:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fc fecc 	bl	8002138 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a4:	f7fc fec8 	bl	8002138 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0f2      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053b6:	4b23      	ldr	r3, [pc, #140]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ef      	beq.n	80053a4 <HAL_RCC_OscConfig+0x418>
 80053c4:	e01b      	b.n	80053fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d6:	f7fc feaf 	bl	8002138 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053de:	f7fc feab 	bl	8002138 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0d5      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053f0:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 80053f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1ef      	bne.n	80053de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80c9 	beq.w	800559a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b0c      	cmp	r3, #12
 8005412:	f000 8083 	beq.w	800551c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d15e      	bne.n	80054dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541e:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fc fe85 	bl	8002138 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005430:	e00c      	b.n	800544c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005432:	f7fc fe81 	bl	8002138 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d905      	bls.n	800544c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e0ab      	b.n	800559c <HAL_RCC_OscConfig+0x610>
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544c:	4b55      	ldr	r3, [pc, #340]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ec      	bne.n	8005432 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005458:	4b52      	ldr	r3, [pc, #328]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4b52      	ldr	r3, [pc, #328]	@ (80055a8 <HAL_RCC_OscConfig+0x61c>)
 800545e:	4013      	ands	r3, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6a11      	ldr	r1, [r2, #32]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005468:	3a01      	subs	r2, #1
 800546a:	0112      	lsls	r2, r2, #4
 800546c:	4311      	orrs	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005472:	0212      	lsls	r2, r2, #8
 8005474:	4311      	orrs	r1, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800547a:	0852      	lsrs	r2, r2, #1
 800547c:	3a01      	subs	r2, #1
 800547e:	0552      	lsls	r2, r2, #21
 8005480:	4311      	orrs	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	3a01      	subs	r2, #1
 800548a:	0652      	lsls	r2, r2, #25
 800548c:	4311      	orrs	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005492:	06d2      	lsls	r2, r2, #27
 8005494:	430a      	orrs	r2, r1
 8005496:	4943      	ldr	r1, [pc, #268]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 8005498:	4313      	orrs	r3, r2
 800549a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549c:	4b41      	ldr	r3, [pc, #260]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a40      	ldr	r2, [pc, #256]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a8:	4b3e      	ldr	r3, [pc, #248]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a3d      	ldr	r2, [pc, #244]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fc fe40 	bl	8002138 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fc fe3c 	bl	8002138 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e066      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ce:	4b35      	ldr	r3, [pc, #212]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x530>
 80054da:	e05e      	b.n	800559a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054dc:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a30      	ldr	r2, [pc, #192]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 80054e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fc fe26 	bl	8002138 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fc fe22 	bl	8002138 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e04c      	b.n	800559c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005502:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800550e:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	4924      	ldr	r1, [pc, #144]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 8005514:	4b25      	ldr	r3, [pc, #148]	@ (80055ac <HAL_RCC_OscConfig+0x620>)
 8005516:	4013      	ands	r3, r2
 8005518:	60cb      	str	r3, [r1, #12]
 800551a:	e03e      	b.n	800559a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e039      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005528:	4b1e      	ldr	r3, [pc, #120]	@ (80055a4 <HAL_RCC_OscConfig+0x618>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0203 	and.w	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	429a      	cmp	r2, r3
 800553a:	d12c      	bne.n	8005596 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	3b01      	subs	r3, #1
 8005548:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d123      	bne.n	8005596 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d11b      	bne.n	8005596 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d113      	bne.n	8005596 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d109      	bne.n	8005596 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	3b01      	subs	r3, #1
 8005590:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d001      	beq.n	800559a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021000 	.word	0x40021000
 80055a8:	019f800c 	.word	0x019f800c
 80055ac:	feeefffc 	.word	0xfeeefffc

080055b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e11e      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b91      	ldr	r3, [pc, #580]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d910      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 020f 	bic.w	r2, r3, #15
 80055de:	498c      	ldr	r1, [pc, #560]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e106      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d073      	beq.n	80056ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b03      	cmp	r3, #3
 800560a:	d129      	bne.n	8005660 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560c:	4b81      	ldr	r3, [pc, #516]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0f4      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800561c:	f000 f966 	bl	80058ec <RCC_GetSysClockFreqFromPLLSource>
 8005620:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4a7c      	ldr	r2, [pc, #496]	@ (8005818 <HAL_RCC_ClockConfig+0x268>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d93f      	bls.n	80056aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800562a:	4b7a      	ldr	r3, [pc, #488]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d033      	beq.n	80056aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005646:	2b00      	cmp	r3, #0
 8005648:	d12f      	bne.n	80056aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800564a:	4b72      	ldr	r3, [pc, #456]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005652:	4a70      	ldr	r2, [pc, #448]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 8005654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005658:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e024      	b.n	80056aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d107      	bne.n	8005678 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005668:	4b6a      	ldr	r3, [pc, #424]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0c6      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005678:	4b66      	ldr	r3, [pc, #408]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0be      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005688:	f000 f8ce 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 800568c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4a61      	ldr	r2, [pc, #388]	@ (8005818 <HAL_RCC_ClockConfig+0x268>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d909      	bls.n	80056aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005696:	4b5f      	ldr	r3, [pc, #380]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800569e:	4a5d      	ldr	r2, [pc, #372]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80056a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4957      	ldr	r1, [pc, #348]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7fc fd3c 	bl	8002138 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fc fd38 	bl	8002138 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e095      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b4e      	ldr	r3, [pc, #312]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005704:	4b43      	ldr	r3, [pc, #268]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a42      	ldr	r2, [pc, #264]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800570a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800570e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800571c:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005724:	4a3b      	ldr	r2, [pc, #236]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 8005726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800572a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572c:	4b39      	ldr	r3, [pc, #228]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4936      	ldr	r1, [pc, #216]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
 800573e:	e008      	b.n	8005752 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2b80      	cmp	r3, #128	@ 0x80
 8005744:	d105      	bne.n	8005752 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005746:	4b33      	ldr	r3, [pc, #204]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4a32      	ldr	r2, [pc, #200]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 800574c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005750:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005752:	4b2f      	ldr	r3, [pc, #188]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d21d      	bcs.n	800579c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005760:	4b2b      	ldr	r3, [pc, #172]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 020f 	bic.w	r2, r3, #15
 8005768:	4929      	ldr	r1, [pc, #164]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005770:	f7fc fce2 	bl	8002138 <HAL_GetTick>
 8005774:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	e00a      	b.n	800578e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005778:	f7fc fcde 	bl	8002138 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e03b      	b.n	8005806 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b20      	ldr	r3, [pc, #128]	@ (8005810 <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d1ed      	bne.n	8005778 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4917      	ldr	r1, [pc, #92]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057c6:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	490f      	ldr	r1, [pc, #60]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057da:	f000 f825 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 80057de:	4602      	mov	r2, r0
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <HAL_RCC_ClockConfig+0x264>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	490c      	ldr	r1, [pc, #48]	@ (800581c <HAL_RCC_ClockConfig+0x26c>)
 80057ec:	5ccb      	ldrb	r3, [r1, r3]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	fa22 f303 	lsr.w	r3, r2, r3
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <HAL_RCC_ClockConfig+0x270>)
 80057f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <HAL_RCC_ClockConfig+0x274>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fc fc4e 	bl	80020a0 <HAL_InitTick>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40022000 	.word	0x40022000
 8005814:	40021000 	.word	0x40021000
 8005818:	04c4b400 	.word	0x04c4b400
 800581c:	08007480 	.word	0x08007480
 8005820:	20000000 	.word	0x20000000
 8005824:	20000004 	.word	0x20000004

08005828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800582e:	4b2c      	ldr	r3, [pc, #176]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b04      	cmp	r3, #4
 8005838:	d102      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800583a:	4b2a      	ldr	r3, [pc, #168]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e047      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005840:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 030c 	and.w	r3, r3, #12
 8005848:	2b08      	cmp	r3, #8
 800584a:	d102      	bne.n	8005852 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800584c:	4b26      	ldr	r3, [pc, #152]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	e03e      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005852:	4b23      	ldr	r3, [pc, #140]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d136      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800585e:	4b20      	ldr	r3, [pc, #128]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	3301      	adds	r3, #1
 8005874:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d10c      	bne.n	8005896 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800587c:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	4a16      	ldr	r2, [pc, #88]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005886:	68d2      	ldr	r2, [r2, #12]
 8005888:	0a12      	lsrs	r2, r2, #8
 800588a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	617b      	str	r3, [r7, #20]
      break;
 8005894:	e00c      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005896:	4a13      	ldr	r2, [pc, #76]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	0a12      	lsrs	r2, r2, #8
 80058a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]
      break;
 80058ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	0e5b      	lsrs	r3, r3, #25
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	3301      	adds	r3, #1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	e001      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058d0:	693b      	ldr	r3, [r7, #16]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f2:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058fc:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d10c      	bne.n	800592a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005910:	4a17      	ldr	r2, [pc, #92]	@ (8005970 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591a:	68d2      	ldr	r2, [r2, #12]
 800591c:	0a12      	lsrs	r2, r2, #8
 800591e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	617b      	str	r3, [r7, #20]
    break;
 8005928:	e00c      	b.n	8005944 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592a:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	4a0e      	ldr	r2, [pc, #56]	@ (800596c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005934:	68d2      	ldr	r2, [r2, #12]
 8005936:	0a12      	lsrs	r2, r2, #8
 8005938:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
    break;
 8005942:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005944:	4b09      	ldr	r3, [pc, #36]	@ (800596c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	0e5b      	lsrs	r3, r3, #25
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	3301      	adds	r3, #1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800595e:	687b      	ldr	r3, [r7, #4]
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40021000 	.word	0x40021000
 8005970:	007a1200 	.word	0x007a1200
 8005974:	00f42400 	.word	0x00f42400

08005978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005980:	2300      	movs	r3, #0
 8005982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005984:	2300      	movs	r3, #0
 8005986:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8098 	beq.w	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005996:	2300      	movs	r3, #0
 8005998:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599a:	4b43      	ldr	r3, [pc, #268]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	4b40      	ldr	r3, [pc, #256]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059aa:	4a3f      	ldr	r2, [pc, #252]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059b2:	4b3d      	ldr	r3, [pc, #244]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059be:	2301      	movs	r3, #1
 80059c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059c2:	4b3a      	ldr	r3, [pc, #232]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a39      	ldr	r2, [pc, #228]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ce:	f7fc fbb3 	bl	8002138 <HAL_GetTick>
 80059d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d4:	e009      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fc fbaf 	bl	8002138 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d902      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	74fb      	strb	r3, [r7, #19]
        break;
 80059e8:	e005      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ea:	4b30      	ldr	r3, [pc, #192]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0ef      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d159      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059fc:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01e      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d019      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a18:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a24:	4b20      	ldr	r3, [pc, #128]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a34:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a44:	4a18      	ldr	r2, [pc, #96]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fc fb6f 	bl	8002138 <HAL_GetTick>
 8005a5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a5c:	e00b      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5e:	f7fc fb6b 	bl	8002138 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d902      	bls.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	74fb      	strb	r3, [r7, #19]
            break;
 8005a74:	e006      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a76:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0ec      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a8a:	4b07      	ldr	r3, [pc, #28]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	4903      	ldr	r1, [pc, #12]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	74bb      	strb	r3, [r7, #18]
 8005aa6:	e005      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ab4:	7c7b      	ldrb	r3, [r7, #17]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aba:	4ba6      	ldr	r3, [pc, #664]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	4aa5      	ldr	r2, [pc, #660]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad2:	4ba0      	ldr	r3, [pc, #640]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f023 0203 	bic.w	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	499c      	ldr	r1, [pc, #624]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005af4:	4b97      	ldr	r3, [pc, #604]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afa:	f023 020c 	bic.w	r2, r3, #12
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4994      	ldr	r1, [pc, #592]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b16:	4b8f      	ldr	r3, [pc, #572]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	498b      	ldr	r1, [pc, #556]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b38:	4b86      	ldr	r3, [pc, #536]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4983      	ldr	r1, [pc, #524]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b5a:	4b7e      	ldr	r3, [pc, #504]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	497a      	ldr	r1, [pc, #488]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b7c:	4b75      	ldr	r3, [pc, #468]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	4972      	ldr	r1, [pc, #456]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4969      	ldr	r1, [pc, #420]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bc0:	4b64      	ldr	r3, [pc, #400]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	4961      	ldr	r1, [pc, #388]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005be2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	4958      	ldr	r1, [pc, #352]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d015      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c04:	4b53      	ldr	r3, [pc, #332]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	4950      	ldr	r1, [pc, #320]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c22:	d105      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c24:	4b4b      	ldr	r3, [pc, #300]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a4a      	ldr	r2, [pc, #296]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d015      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c3c:	4b45      	ldr	r3, [pc, #276]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	4942      	ldr	r1, [pc, #264]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a3c      	ldr	r2, [pc, #240]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d015      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c74:	4b37      	ldr	r3, [pc, #220]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	4934      	ldr	r1, [pc, #208]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c92:	d105      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c94:	4b2f      	ldr	r3, [pc, #188]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cac:	4b29      	ldr	r3, [pc, #164]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	4926      	ldr	r1, [pc, #152]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ccc:	4b21      	ldr	r3, [pc, #132]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	4a20      	ldr	r2, [pc, #128]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d015      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	4918      	ldr	r1, [pc, #96]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d04:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a12      	ldr	r2, [pc, #72]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d015      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	490a      	ldr	r1, [pc, #40]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e049      	b.n	8005dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb ffb2 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fd92 	bl	80068c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e04a      	b.n	8005eb6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a21      	ldr	r2, [pc, #132]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4a:	d013      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x6c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d115      	bne.n	8005ea0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b06      	cmp	r3, #6
 8005e84:	d015      	beq.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8c:	d011      	beq.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0201 	orr.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e000      	b.n	8005eb4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	00010007 	.word	0x00010007

08005edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e049      	b.n	8005f82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f841 	bl	8005f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 fcd0 	bl	80068c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x24>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e03c      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x3e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e02f      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x58>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e022      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b0c      	cmp	r3, #12
 8005ffc:	d109      	bne.n	8006012 <HAL_TIM_PWM_Start+0x72>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	e015      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b10      	cmp	r3, #16
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x8c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e008      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e097      	b.n	8006176 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xb6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006054:	e023      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xc6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006064:	e01b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xd6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006074:	e013      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xe6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006084:	e00b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xf6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006094:	e003      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2201      	movs	r2, #1
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f838 	bl	800711c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	@ (8006180 <HAL_TIM_PWM_Start+0x1e0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	@ (8006184 <HAL_TIM_PWM_Start+0x1e4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	@ (8006188 <HAL_TIM_PWM_Start+0x1e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2f      	ldr	r2, [pc, #188]	@ (800618c <HAL_TIM_PWM_Start+0x1ec>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_Start+0x13e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006190 <HAL_TIM_PWM_Start+0x1f0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_Start+0x142>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <HAL_TIM_PWM_Start+0x144>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a20      	ldr	r2, [pc, #128]	@ (8006180 <HAL_TIM_PWM_Start+0x1e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	d013      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	@ (8006194 <HAL_TIM_PWM_Start+0x1f4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1f      	ldr	r2, [pc, #124]	@ (8006198 <HAL_TIM_PWM_Start+0x1f8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a17      	ldr	r2, [pc, #92]	@ (8006184 <HAL_TIM_PWM_Start+0x1e4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIM_PWM_Start+0x194>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a16      	ldr	r2, [pc, #88]	@ (8006188 <HAL_TIM_PWM_Start+0x1e8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d115      	bne.n	8006160 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b18      	ldr	r3, [pc, #96]	@ (800619c <HAL_TIM_PWM_Start+0x1fc>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d015      	beq.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614c:	d011      	beq.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e008      	b.n	8006172 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e000      	b.n	8006174 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40013400 	.word	0x40013400
 8006188:	40014000 	.word	0x40014000
 800618c:	40014400 	.word	0x40014400
 8006190:	40014800 	.word	0x40014800
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	00010007 	.word	0x00010007

080061a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0202 	mvn.w	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb4a 	bl	8006884 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb3c 	bl	8006870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb4d 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01b      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb24 	bl	8006884 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fb16 	bl	8006870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb27 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d020      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0208 	mvn.w	r2, #8
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fafe 	bl	8006884 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 faf0 	bl	8006870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb01 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0210 	mvn.w	r2, #16
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2208      	movs	r2, #8
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fad8 	bl	8006884 <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 faca 	bl	8006870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fadb 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0201 	mvn.w	r2, #1
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 faa8 	bl	800685c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00c      	beq.n	800633a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f82f 	bl	8007398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 f827 	bl	80073ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa95 	bl	80068ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0220 	mvn.w	r2, #32
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 ffef 	bl	8007384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fffb 	bl	80073c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fff3 	bl	80073d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 ffeb 	bl	80073e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00c      	beq.n	8006436 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ffe3 	bl	80073fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800645a:	2302      	movs	r3, #2
 800645c:	e0ff      	b.n	800665e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b14      	cmp	r3, #20
 800646a:	f200 80f0 	bhi.w	800664e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064c9 	.word	0x080064c9
 8006478:	0800664f 	.word	0x0800664f
 800647c:	0800664f 	.word	0x0800664f
 8006480:	0800664f 	.word	0x0800664f
 8006484:	08006509 	.word	0x08006509
 8006488:	0800664f 	.word	0x0800664f
 800648c:	0800664f 	.word	0x0800664f
 8006490:	0800664f 	.word	0x0800664f
 8006494:	0800654b 	.word	0x0800654b
 8006498:	0800664f 	.word	0x0800664f
 800649c:	0800664f 	.word	0x0800664f
 80064a0:	0800664f 	.word	0x0800664f
 80064a4:	0800658b 	.word	0x0800658b
 80064a8:	0800664f 	.word	0x0800664f
 80064ac:	0800664f 	.word	0x0800664f
 80064b0:	0800664f 	.word	0x0800664f
 80064b4:	080065cd 	.word	0x080065cd
 80064b8:	0800664f 	.word	0x0800664f
 80064bc:	0800664f 	.word	0x0800664f
 80064c0:	0800664f 	.word	0x0800664f
 80064c4:	0800660d 	.word	0x0800660d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fa92 	bl	80069f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	619a      	str	r2, [r3, #24]
      break;
 8006506:	e0a5      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fb02 	bl	8006b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e084      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fb6b 	bl	8006c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0204 	bic.w	r2, r2, #4
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
      break;
 8006588:	e064      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fbd3 	bl	8006d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	61da      	str	r2, [r3, #28]
      break;
 80065ca:	e043      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fc3c 	bl	8006e50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800660a:	e023      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fc80 	bl	8006f18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006626:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800664c:	e002      	b.n	8006654 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
      break;
 8006652:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop

08006668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIM_ConfigClockSource+0x1c>
 8006680:	2302      	movs	r3, #2
 8006682:	e0de      	b.n	8006842 <HAL_TIM_ConfigClockSource+0x1da>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80066a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a63      	ldr	r2, [pc, #396]	@ (800684c <HAL_TIM_ConfigClockSource+0x1e4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f000 80a9 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 80066c4:	4a61      	ldr	r2, [pc, #388]	@ (800684c <HAL_TIM_ConfigClockSource+0x1e4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f200 80ae 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 80066cc:	4a60      	ldr	r2, [pc, #384]	@ (8006850 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f000 80a1 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 80066d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006850 <HAL_TIM_ConfigClockSource+0x1e8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f200 80a6 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 80066dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006854 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f000 8099 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 80066e4:	4a5b      	ldr	r2, [pc, #364]	@ (8006854 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	f200 809e 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 80066ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006858 <HAL_TIM_ConfigClockSource+0x1f0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f000 8091 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 80066f4:	4a58      	ldr	r2, [pc, #352]	@ (8006858 <HAL_TIM_ConfigClockSource+0x1f0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f200 8096 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 80066fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006700:	f000 8089 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 8006704:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006708:	f200 808e 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006710:	d03e      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0x128>
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006716:	f200 8087 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800671e:	f000 8086 	beq.w	800682e <HAL_TIM_ConfigClockSource+0x1c6>
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006726:	d87f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006728:	2b70      	cmp	r3, #112	@ 0x70
 800672a:	d01a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0xfa>
 800672c:	2b70      	cmp	r3, #112	@ 0x70
 800672e:	d87b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006730:	2b60      	cmp	r3, #96	@ 0x60
 8006732:	d050      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x16e>
 8006734:	2b60      	cmp	r3, #96	@ 0x60
 8006736:	d877      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006738:	2b50      	cmp	r3, #80	@ 0x50
 800673a:	d03c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x14e>
 800673c:	2b50      	cmp	r3, #80	@ 0x50
 800673e:	d873      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006740:	2b40      	cmp	r3, #64	@ 0x40
 8006742:	d058      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x18e>
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d86f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006748:	2b30      	cmp	r3, #48	@ 0x30
 800674a:	d064      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 800674c:	2b30      	cmp	r3, #48	@ 0x30
 800674e:	d86b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d060      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d867      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 800675c:	2b10      	cmp	r3, #16
 800675e:	d05a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x1ae>
 8006760:	e062      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006772:	f000 fcb3 	bl	80070dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
      break;
 800678e:	e04f      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067a0:	f000 fc9c 	bl	80070dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067b2:	609a      	str	r2, [r3, #8]
      break;
 80067b4:	e03c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fc0e 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2150      	movs	r1, #80	@ 0x50
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fc67 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 80067d4:	e02c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fc2d 	bl	8007042 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2160      	movs	r1, #96	@ 0x60
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fc57 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 80067f4:	e01c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fbee 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2140      	movs	r1, #64	@ 0x40
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fc47 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006814:	e00c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 fc3e 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006826:	e003      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e000      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800682e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	00100070 	.word	0x00100070
 8006850:	00100040 	.word	0x00100040
 8006854:	00100030 	.word	0x00100030
 8006858:	00100020 	.word	0x00100020

0800685c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a42      	ldr	r2, [pc, #264]	@ (80069dc <TIM_Base_SetConfig+0x11c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00f      	beq.n	80068f8 <TIM_Base_SetConfig+0x38>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0x38>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3f      	ldr	r2, [pc, #252]	@ (80069e0 <TIM_Base_SetConfig+0x120>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0x38>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3e      	ldr	r2, [pc, #248]	@ (80069e4 <TIM_Base_SetConfig+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0x38>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3d      	ldr	r2, [pc, #244]	@ (80069e8 <TIM_Base_SetConfig+0x128>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d108      	bne.n	800690a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a33      	ldr	r2, [pc, #204]	@ (80069dc <TIM_Base_SetConfig+0x11c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01b      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006918:	d017      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a30      	ldr	r2, [pc, #192]	@ (80069e0 <TIM_Base_SetConfig+0x120>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2f      	ldr	r2, [pc, #188]	@ (80069e4 <TIM_Base_SetConfig+0x124>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2e      	ldr	r2, [pc, #184]	@ (80069e8 <TIM_Base_SetConfig+0x128>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2d      	ldr	r2, [pc, #180]	@ (80069ec <TIM_Base_SetConfig+0x12c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2c      	ldr	r2, [pc, #176]	@ (80069f0 <TIM_Base_SetConfig+0x130>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2b      	ldr	r2, [pc, #172]	@ (80069f4 <TIM_Base_SetConfig+0x134>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <TIM_Base_SetConfig+0x11c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00f      	beq.n	80069a8 <TIM_Base_SetConfig+0xe8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <TIM_Base_SetConfig+0x128>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00b      	beq.n	80069a8 <TIM_Base_SetConfig+0xe8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a16      	ldr	r2, [pc, #88]	@ (80069ec <TIM_Base_SetConfig+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d007      	beq.n	80069a8 <TIM_Base_SetConfig+0xe8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <TIM_Base_SetConfig+0x130>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0xe8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a14      	ldr	r2, [pc, #80]	@ (80069f4 <TIM_Base_SetConfig+0x134>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f023 0201 	bic.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]
  }
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40013400 	.word	0x40013400
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800

080069f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f023 0201 	bic.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 0302 	bic.w	r3, r3, #2
 8006a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	@ (8006b04 <TIM_OC1_SetConfig+0x10c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_OC1_SetConfig+0x80>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006b08 <TIM_OC1_SetConfig+0x110>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_OC1_SetConfig+0x80>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2a      	ldr	r2, [pc, #168]	@ (8006b0c <TIM_OC1_SetConfig+0x114>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC1_SetConfig+0x80>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a29      	ldr	r2, [pc, #164]	@ (8006b10 <TIM_OC1_SetConfig+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC1_SetConfig+0x80>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a28      	ldr	r2, [pc, #160]	@ (8006b14 <TIM_OC1_SetConfig+0x11c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10c      	bne.n	8006a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0308 	bic.w	r3, r3, #8
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1b      	ldr	r2, [pc, #108]	@ (8006b04 <TIM_OC1_SetConfig+0x10c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <TIM_OC1_SetConfig+0xc2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <TIM_OC1_SetConfig+0x110>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00b      	beq.n	8006aba <TIM_OC1_SetConfig+0xc2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <TIM_OC1_SetConfig+0x114>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <TIM_OC1_SetConfig+0xc2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <TIM_OC1_SetConfig+0x118>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_OC1_SetConfig+0xc2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <TIM_OC1_SetConfig+0x11c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	621a      	str	r2, [r3, #32]
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f023 0210 	bic.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0320 	bic.w	r3, r3, #32
 8006b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a28      	ldr	r2, [pc, #160]	@ (8006c18 <TIM_OC2_SetConfig+0x100>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC2_SetConfig+0x6c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a27      	ldr	r2, [pc, #156]	@ (8006c1c <TIM_OC2_SetConfig+0x104>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10d      	bne.n	8006ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <TIM_OC2_SetConfig+0x100>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00f      	beq.n	8006bc8 <TIM_OC2_SetConfig+0xb0>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	@ (8006c1c <TIM_OC2_SetConfig+0x104>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <TIM_OC2_SetConfig+0xb0>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <TIM_OC2_SetConfig+0x108>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_OC2_SetConfig+0xb0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	@ (8006c24 <TIM_OC2_SetConfig+0x10c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC2_SetConfig+0xb0>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <TIM_OC2_SetConfig+0x110>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d113      	bne.n	8006bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a27      	ldr	r2, [pc, #156]	@ (8006d28 <TIM_OC3_SetConfig+0xfc>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_OC3_SetConfig+0x6a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a26      	ldr	r2, [pc, #152]	@ (8006d2c <TIM_OC3_SetConfig+0x100>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d10d      	bne.n	8006cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <TIM_OC3_SetConfig+0xfc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_OC3_SetConfig+0xae>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d2c <TIM_OC3_SetConfig+0x100>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_OC3_SetConfig+0xae>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d30 <TIM_OC3_SetConfig+0x104>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_OC3_SetConfig+0xae>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	@ (8006d34 <TIM_OC3_SetConfig+0x108>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC3_SetConfig+0xae>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a18      	ldr	r2, [pc, #96]	@ (8006d38 <TIM_OC3_SetConfig+0x10c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d113      	bne.n	8006d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800

08006d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a28      	ldr	r2, [pc, #160]	@ (8006e3c <TIM_OC4_SetConfig+0x100>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC4_SetConfig+0x6c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a27      	ldr	r2, [pc, #156]	@ (8006e40 <TIM_OC4_SetConfig+0x104>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10d      	bne.n	8006dc4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e3c <TIM_OC4_SetConfig+0x100>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <TIM_OC4_SetConfig+0xb0>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1c      	ldr	r2, [pc, #112]	@ (8006e40 <TIM_OC4_SetConfig+0x104>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <TIM_OC4_SetConfig+0xb0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e44 <TIM_OC4_SetConfig+0x108>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <TIM_OC4_SetConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1a      	ldr	r2, [pc, #104]	@ (8006e48 <TIM_OC4_SetConfig+0x10c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_OC4_SetConfig+0xb0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a19      	ldr	r2, [pc, #100]	@ (8006e4c <TIM_OC4_SetConfig+0x110>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d113      	bne.n	8006e14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006df2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	019b      	lsls	r3, r3, #6
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40013400 	.word	0x40013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <TIM_OC5_SetConfig+0xb4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00f      	beq.n	8006eca <TIM_OC5_SetConfig+0x7a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a16      	ldr	r2, [pc, #88]	@ (8006f08 <TIM_OC5_SetConfig+0xb8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00b      	beq.n	8006eca <TIM_OC5_SetConfig+0x7a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	@ (8006f0c <TIM_OC5_SetConfig+0xbc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <TIM_OC5_SetConfig+0x7a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a14      	ldr	r2, [pc, #80]	@ (8006f10 <TIM_OC5_SetConfig+0xc0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC5_SetConfig+0x7a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a13      	ldr	r2, [pc, #76]	@ (8006f14 <TIM_OC5_SetConfig+0xc4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d109      	bne.n	8006ede <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40013400 	.word	0x40013400
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800

08006f18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	051b      	lsls	r3, r3, #20
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <TIM_OC6_SetConfig+0xb8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00f      	beq.n	8006f94 <TIM_OC6_SetConfig+0x7c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <TIM_OC6_SetConfig+0xbc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00b      	beq.n	8006f94 <TIM_OC6_SetConfig+0x7c>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a16      	ldr	r2, [pc, #88]	@ (8006fd8 <TIM_OC6_SetConfig+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d007      	beq.n	8006f94 <TIM_OC6_SetConfig+0x7c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <TIM_OC6_SetConfig+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_OC6_SetConfig+0x7c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <TIM_OC6_SetConfig+0xc8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d109      	bne.n	8006fa8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40013400 	.word	0x40013400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 030a 	bic.w	r3, r3, #10
 8007020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007042:	b480      	push	{r7}
 8007044:	b087      	sub	sp, #28
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	f023 0210 	bic.w	r2, r3, #16
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800706c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f043 0307 	orr.w	r3, r3, #7
 80070c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	021a      	lsls	r2, r3, #8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	431a      	orrs	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4313      	orrs	r3, r2
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2201      	movs	r2, #1
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	43db      	mvns	r3, r3
 800713e:	401a      	ands	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1a      	ldr	r2, [r3, #32]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	fa01 f303 	lsl.w	r3, r1, r3
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800717c:	2302      	movs	r3, #2
 800717e:	e065      	b.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2b      	ldr	r2, [pc, #172]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d108      	bne.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d018      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f6:	d013      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a18      	ldr	r2, [pc, #96]	@ (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00e      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a17      	ldr	r2, [pc, #92]	@ (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a12      	ldr	r2, [pc, #72]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a13      	ldr	r2, [pc, #76]	@ (8007268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10c      	bne.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	4313      	orrs	r3, r2
 8007230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40013400 	.word	0x40013400
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40014000 	.word	0x40014000

0800726c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007284:	2302      	movs	r3, #2
 8007286:	e073      	b.n	8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a19      	ldr	r2, [pc, #100]	@ (800737c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d11c      	bne.n	800735e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	051b      	lsls	r3, r3, #20
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40013400 	.word	0x40013400

08007384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <memset>:
 8007410:	4402      	add	r2, r0
 8007412:	4603      	mov	r3, r0
 8007414:	4293      	cmp	r3, r2
 8007416:	d100      	bne.n	800741a <memset+0xa>
 8007418:	4770      	bx	lr
 800741a:	f803 1b01 	strb.w	r1, [r3], #1
 800741e:	e7f9      	b.n	8007414 <memset+0x4>

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	@ (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	@ (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	@ (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	@ (8007464 <__libc_init_array+0x44>)
 8007434:	f000 f818 	bl	8007468 <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	080074a0 	.word	0x080074a0
 800745c:	080074a0 	.word	0x080074a0
 8007460:	080074a0 	.word	0x080074a0
 8007464:	080074a4 	.word	0x080074a4

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
