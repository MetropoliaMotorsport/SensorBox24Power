
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  2000000c  080089fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  080089fc  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aed5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f91  00000000  00000000  0003af54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003dee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120d  00000000  00000000  0003f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021285  00000000  00000000  0004081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f5b  00000000  00000000  00061aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e069f  00000000  00000000  0007b9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064a8  00000000  00000000  0015c09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00162544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080088ac 	.word	0x080088ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080088ac 	.word	0x080088ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 8000518:	f000 f802 	bl	8000520 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <Config_1>:

void Config_1(void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <Config_1+0x124>)
 8000526:	f240 726c 	movw	r2, #1900	; 0x76c
 800052a:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 800052c:	4b46      	ldr	r3, [pc, #280]	; (8000648 <Config_1+0x128>)
 800052e:	f640 0202 	movw	r2, #2050	; 0x802
 8000532:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 8000534:	4b45      	ldr	r3, [pc, #276]	; (800064c <Config_1+0x12c>)
 8000536:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800053a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 800053c:	4b44      	ldr	r3, [pc, #272]	; (8000650 <Config_1+0x130>)
 800053e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000542:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 8000544:	4b43      	ldr	r3, [pc, #268]	; (8000654 <Config_1+0x134>)
 8000546:	f640 0202 	movw	r2, #2050	; 0x802
 800054a:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 800054c:	4b42      	ldr	r3, [pc, #264]	; (8000658 <Config_1+0x138>)
 800054e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000552:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 8000554:	4b41      	ldr	r3, [pc, #260]	; (800065c <Config_1+0x13c>)
 8000556:	f240 726c 	movw	r2, #1900	; 0x76c
 800055a:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 800055c:	4b40      	ldr	r3, [pc, #256]	; (8000660 <Config_1+0x140>)
 800055e:	f640 0202 	movw	r2, #2050	; 0x802
 8000562:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <Config_1+0x144>)
 8000566:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800056a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 800056c:	4b3e      	ldr	r3, [pc, #248]	; (8000668 <Config_1+0x148>)
 800056e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000572:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <Config_1+0x14c>)
 8000576:	f640 0202 	movw	r2, #2050	; 0x802
 800057a:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 800057c:	4b3c      	ldr	r3, [pc, #240]	; (8000670 <Config_1+0x150>)
 800057e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000582:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 8000584:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <Config_1+0x154>)
 8000586:	f240 726c 	movw	r2, #1900	; 0x76c
 800058a:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 800058c:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <Config_1+0x158>)
 800058e:	f640 0202 	movw	r2, #2050	; 0x802
 8000592:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <Config_1+0x15c>)
 8000596:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800059a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <Config_1+0x160>)
 800059e:	f240 726c 	movw	r2, #1900	; 0x76c
 80005a2:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <Config_1+0x164>)
 80005a6:	f640 0202 	movw	r2, #2050	; 0x802
 80005aa:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 80005ac:	4b36      	ldr	r3, [pc, #216]	; (8000688 <Config_1+0x168>)
 80005ae:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005b2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <Config_1+0x16c>)
 80005b6:	f240 726c 	movw	r2, #1900	; 0x76c
 80005ba:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <Config_1+0x170>)
 80005be:	f640 0202 	movw	r2, #2050	; 0x802
 80005c2:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <Config_1+0x174>)
 80005c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005ca:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 80005cc:	4b32      	ldr	r3, [pc, #200]	; (8000698 <Config_1+0x178>)
 80005ce:	f240 726c 	movw	r2, #1900	; 0x76c
 80005d2:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 80005d4:	4b31      	ldr	r3, [pc, #196]	; (800069c <Config_1+0x17c>)
 80005d6:	f640 0202 	movw	r2, #2050	; 0x802
 80005da:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 80005dc:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <Config_1+0x180>)
 80005de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005e2:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b11111111; //each bit represent one output [1,2,3,4,5,6,7,8]
 80005e4:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <Config_1+0x184>)
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <Config_1+0x188>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <Config_1+0x18c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <Config_1+0x18c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	805a      	strh	r2, [r3, #2]

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <Config_1+0x190>)
 80005fe:	2200      	movs	r2, #0
 8000600:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <Config_1+0x190>)
 8000604:	2200      	movs	r2, #0
 8000606:	805a      	strh	r2, [r3, #2]

	CAN_id[0] = 0x01; //CAN ID for output 1
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <Config_1+0x194>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
	CAN_id[1] = 0x02; //CAN ID for output 2
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <Config_1+0x194>)
 8000610:	2202      	movs	r2, #2
 8000612:	705a      	strb	r2, [r3, #1]
	CAN_id[2] = 0x03; //CAN ID for output 3
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <Config_1+0x194>)
 8000616:	2203      	movs	r2, #3
 8000618:	709a      	strb	r2, [r3, #2]
	CAN_id[3] = 0x04; //CAN ID for output 4
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <Config_1+0x194>)
 800061c:	2204      	movs	r2, #4
 800061e:	70da      	strb	r2, [r3, #3]
	CAN_id[4] = 0x05; //CAN ID for output 5
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <Config_1+0x194>)
 8000622:	2205      	movs	r2, #5
 8000624:	711a      	strb	r2, [r3, #4]
	CAN_id[5] = 0x06; //CAN ID for output 6
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <Config_1+0x194>)
 8000628:	2206      	movs	r2, #6
 800062a:	715a      	strb	r2, [r3, #5]
	CAN_id[6] = 0x07; //CAN ID for output 7
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <Config_1+0x194>)
 800062e:	2207      	movs	r2, #7
 8000630:	719a      	strb	r2, [r3, #6]
	CAN_id[7] = 0x08; //CAN ID for output 8
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Config_1+0x194>)
 8000634:	2208      	movs	r2, #8
 8000636:	71da      	strb	r2, [r3, #7]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000618 	.word	0x20000618
 8000648:	2000061a 	.word	0x2000061a
 800064c:	2000061c 	.word	0x2000061c
 8000650:	2000061e 	.word	0x2000061e
 8000654:	20000620 	.word	0x20000620
 8000658:	20000622 	.word	0x20000622
 800065c:	20000624 	.word	0x20000624
 8000660:	20000626 	.word	0x20000626
 8000664:	20000628 	.word	0x20000628
 8000668:	2000062a 	.word	0x2000062a
 800066c:	2000062c 	.word	0x2000062c
 8000670:	2000062e 	.word	0x2000062e
 8000674:	20000630 	.word	0x20000630
 8000678:	20000632 	.word	0x20000632
 800067c:	20000634 	.word	0x20000634
 8000680:	20000636 	.word	0x20000636
 8000684:	20000638 	.word	0x20000638
 8000688:	2000063a 	.word	0x2000063a
 800068c:	2000063c 	.word	0x2000063c
 8000690:	2000063e 	.word	0x2000063e
 8000694:	20000640 	.word	0x20000640
 8000698:	20000642 	.word	0x20000642
 800069c:	20000644 	.word	0x20000644
 80006a0:	20000646 	.word	0x20000646
 80006a4:	20000657 	.word	0x20000657
 80006a8:	20000658 	.word	0x20000658
 80006ac:	2000065c 	.word	0x2000065c
 80006b0:	20000660 	.word	0x20000660
 80006b4:	20000664 	.word	0x20000664

080006b8 <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <CS_process+0x148>)
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <CS_process+0x14c>)
 80006c4:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 80006c6:	4b50      	ldr	r3, [pc, #320]	; (8000808 <CS_process+0x150>)
 80006c8:	881a      	ldrh	r2, [r3, #0]
 80006ca:	4b50      	ldr	r3, [pc, #320]	; (800080c <CS_process+0x154>)
 80006cc:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <CS_process+0x158>)
 80006d0:	881a      	ldrh	r2, [r3, #0]
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <CS_process+0x15c>)
 80006d4:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 80006d6:	4b50      	ldr	r3, [pc, #320]	; (8000818 <CS_process+0x160>)
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	4b50      	ldr	r3, [pc, #320]	; (800081c <CS_process+0x164>)
 80006dc:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <CS_process+0x168>)
 80006e0:	881a      	ldrh	r2, [r3, #0]
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <CS_process+0x16c>)
 80006e4:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 80006e6:	4b50      	ldr	r3, [pc, #320]	; (8000828 <CS_process+0x170>)
 80006e8:	881a      	ldrh	r2, [r3, #0]
 80006ea:	4b50      	ldr	r3, [pc, #320]	; (800082c <CS_process+0x174>)
 80006ec:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 80006ee:	4b50      	ldr	r3, [pc, #320]	; (8000830 <CS_process+0x178>)
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <CS_process+0x17c>)
 80006f4:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <CS_process+0x180>)
 80006f8:	881a      	ldrh	r2, [r3, #0]
 80006fa:	4b50      	ldr	r3, [pc, #320]	; (800083c <CS_process+0x184>)
 80006fc:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e072      	b.n	80007ea <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <CS_process+0x14c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <CS_process+0x148>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000712:	440b      	add	r3, r1
 8000714:	0fda      	lsrs	r2, r3, #31
 8000716:	4413      	add	r3, r2
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b39      	ldr	r3, [pc, #228]	; (8000804 <CS_process+0x14c>)
 800071e:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 8000720:	4b3a      	ldr	r3, [pc, #232]	; (800080c <CS_process+0x154>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4a38      	ldr	r2, [pc, #224]	; (8000808 <CS_process+0x150>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072e:	440b      	add	r3, r1
 8000730:	0fda      	lsrs	r2, r3, #31
 8000732:	4413      	add	r3, r2
 8000734:	105b      	asrs	r3, r3, #1
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <CS_process+0x154>)
 800073a:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <CS_process+0x15c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	4a33      	ldr	r2, [pc, #204]	; (8000810 <CS_process+0x158>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074a:	440b      	add	r3, r1
 800074c:	0fda      	lsrs	r2, r3, #31
 800074e:	4413      	add	r3, r2
 8000750:	105b      	asrs	r3, r3, #1
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <CS_process+0x15c>)
 8000756:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <CS_process+0x164>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <CS_process+0x160>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000766:	440b      	add	r3, r1
 8000768:	0fda      	lsrs	r2, r3, #31
 800076a:	4413      	add	r3, r2
 800076c:	105b      	asrs	r3, r3, #1
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <CS_process+0x164>)
 8000772:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <CS_process+0x16c>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4a29      	ldr	r2, [pc, #164]	; (8000820 <CS_process+0x168>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000782:	440b      	add	r3, r1
 8000784:	0fda      	lsrs	r2, r3, #31
 8000786:	4413      	add	r3, r2
 8000788:	105b      	asrs	r3, r3, #1
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <CS_process+0x16c>)
 800078e:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <CS_process+0x174>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <CS_process+0x170>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079e:	440b      	add	r3, r1
 80007a0:	0fda      	lsrs	r2, r3, #31
 80007a2:	4413      	add	r3, r2
 80007a4:	105b      	asrs	r3, r3, #1
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <CS_process+0x174>)
 80007aa:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <CS_process+0x17c>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <CS_process+0x178>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ba:	440b      	add	r3, r1
 80007bc:	0fda      	lsrs	r2, r3, #31
 80007be:	4413      	add	r3, r2
 80007c0:	105b      	asrs	r3, r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <CS_process+0x17c>)
 80007c6:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <CS_process+0x184>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <CS_process+0x180>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d6:	440b      	add	r3, r1
 80007d8:	0fda      	lsrs	r2, r3, #31
 80007da:	4413      	add	r3, r2
 80007dc:	105b      	asrs	r3, r3, #1
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <CS_process+0x184>)
 80007e2:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b1f      	cmp	r3, #31
 80007ee:	dd89      	ble.n	8000704 <CS_process+0x4c>
	}

}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000408 	.word	0x20000408
 8000804:	20000608 	.word	0x20000608
 8000808:	20000448 	.word	0x20000448
 800080c:	2000060a 	.word	0x2000060a
 8000810:	20000488 	.word	0x20000488
 8000814:	2000060c 	.word	0x2000060c
 8000818:	200004c8 	.word	0x200004c8
 800081c:	2000060e 	.word	0x2000060e
 8000820:	20000508 	.word	0x20000508
 8000824:	20000610 	.word	0x20000610
 8000828:	20000548 	.word	0x20000548
 800082c:	20000612 	.word	0x20000612
 8000830:	20000588 	.word	0x20000588
 8000834:	20000614 	.word	0x20000614
 8000838:	200005c8 	.word	0x200005c8
 800083c:	20000616 	.word	0x20000616

08000840 <CS_read>:
	if(IN4_2_PROC <= UC_4_2){
		print_out(-1,"8_UC",data_output_switch);
	}
}

void CS_read(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e1af      	b.n	8000bac <CS_read+0x36c>
		switch(x){
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	2b03      	cmp	r3, #3
 8000850:	f200 81a9 	bhi.w	8000ba6 <CS_read+0x366>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <CS_read+0x1c>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	0800086d 	.word	0x0800086d
 8000860:	08000931 	.word	0x08000931
 8000864:	080009f5 	.word	0x080009f5
 8000868:	08000ab9 	.word	0x08000ab9
		case 0:
			CS_SEL[0] = 0;
 800086c:	4b9e      	ldr	r3, [pc, #632]	; (8000ae8 <CS_read+0x2a8>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000872:	4b9d      	ldr	r3, [pc, #628]	; (8000ae8 <CS_read+0x2a8>)
 8000874:	2200      	movs	r2, #0
 8000876:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000878:	4b9b      	ldr	r3, [pc, #620]	; (8000ae8 <CS_read+0x2a8>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	2140      	movs	r1, #64	; 0x40
 8000880:	489a      	ldr	r0, [pc, #616]	; (8000aec <CS_read+0x2ac>)
 8000882:	f003 fbfb 	bl	800407c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000886:	4b98      	ldr	r3, [pc, #608]	; (8000ae8 <CS_read+0x2a8>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	461a      	mov	r2, r3
 800088c:	2120      	movs	r1, #32
 800088e:	4897      	ldr	r0, [pc, #604]	; (8000aec <CS_read+0x2ac>)
 8000890:	f003 fbf4 	bl	800407c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	e046      	b.n	8000928 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800089a:	4895      	ldr	r0, [pc, #596]	; (8000af0 <CS_read+0x2b0>)
 800089c:	f001 ff3c 	bl	8002718 <HAL_ADC_Start_IT>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <CS_read+0x6a>
 80008a6:	f000 feb9 	bl	800161c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80008aa:	4892      	ldr	r0, [pc, #584]	; (8000af4 <CS_read+0x2b4>)
 80008ac:	f001 ff34 	bl	8002718 <HAL_ADC_Start_IT>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <CS_read+0x7a>
 80008b6:	f000 feb1 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80008ba:	210a      	movs	r1, #10
 80008bc:	488c      	ldr	r0, [pc, #560]	; (8000af0 <CS_read+0x2b0>)
 80008be:	f001 fe53 	bl	8002568 <HAL_ADC_PollForConversion>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <CS_read+0x8c>
 80008c8:	f000 fea8 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80008cc:	210a      	movs	r1, #10
 80008ce:	4889      	ldr	r0, [pc, #548]	; (8000af4 <CS_read+0x2b4>)
 80008d0:	f001 fe4a 	bl	8002568 <HAL_ADC_PollForConversion>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <CS_read+0x9e>
 80008da:	f000 fe9f 	bl	800161c <Error_Handler>
				IN1_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 80008de:	4884      	ldr	r0, [pc, #528]	; (8000af0 <CS_read+0x2b0>)
 80008e0:	f002 f885 	bl	80029ee <HAL_ADC_GetValue>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b299      	uxth	r1, r3
 80008e8:	4a83      	ldr	r2, [pc, #524]	; (8000af8 <CS_read+0x2b8>)
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 80008f0:	4880      	ldr	r0, [pc, #512]	; (8000af4 <CS_read+0x2b4>)
 80008f2:	f002 f87c 	bl	80029ee <HAL_ADC_GetValue>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b299      	uxth	r1, r3
 80008fa:	4a80      	ldr	r2, [pc, #512]	; (8000afc <CS_read+0x2bc>)
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000902:	487b      	ldr	r0, [pc, #492]	; (8000af0 <CS_read+0x2b0>)
 8000904:	f002 f838 	bl	8002978 <HAL_ADC_Stop_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <CS_read+0xd2>
 800090e:	f000 fe85 	bl	800161c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000912:	4878      	ldr	r0, [pc, #480]	; (8000af4 <CS_read+0x2b4>)
 8000914:	f002 f830 	bl	8002978 <HAL_ADC_Stop_IT>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <CS_read+0xe2>
 800091e:	f000 fe7d 	bl	800161c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3301      	adds	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b1f      	cmp	r3, #31
 800092c:	ddb5      	ble.n	800089a <CS_read+0x5a>
			}
			break;
 800092e:	e13a      	b.n	8000ba6 <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000930:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <CS_read+0x2a8>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000936:	4b6c      	ldr	r3, [pc, #432]	; (8000ae8 <CS_read+0x2a8>)
 8000938:	2201      	movs	r2, #1
 800093a:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 800093c:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <CS_read+0x2a8>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4869      	ldr	r0, [pc, #420]	; (8000aec <CS_read+0x2ac>)
 8000946:	f003 fb99 	bl	800407c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 800094a:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <CS_read+0x2a8>)
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	461a      	mov	r2, r3
 8000950:	2120      	movs	r1, #32
 8000952:	4866      	ldr	r0, [pc, #408]	; (8000aec <CS_read+0x2ac>)
 8000954:	f003 fb92 	bl	800407c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e046      	b.n	80009ec <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800095e:	4864      	ldr	r0, [pc, #400]	; (8000af0 <CS_read+0x2b0>)
 8000960:	f001 feda 	bl	8002718 <HAL_ADC_Start_IT>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <CS_read+0x12e>
 800096a:	f000 fe57 	bl	800161c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 800096e:	4861      	ldr	r0, [pc, #388]	; (8000af4 <CS_read+0x2b4>)
 8000970:	f001 fed2 	bl	8002718 <HAL_ADC_Start_IT>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <CS_read+0x13e>
 800097a:	f000 fe4f 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 800097e:	210a      	movs	r1, #10
 8000980:	485b      	ldr	r0, [pc, #364]	; (8000af0 <CS_read+0x2b0>)
 8000982:	f001 fdf1 	bl	8002568 <HAL_ADC_PollForConversion>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <CS_read+0x150>
 800098c:	f000 fe46 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000990:	210a      	movs	r1, #10
 8000992:	4858      	ldr	r0, [pc, #352]	; (8000af4 <CS_read+0x2b4>)
 8000994:	f001 fde8 	bl	8002568 <HAL_ADC_PollForConversion>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <CS_read+0x162>
 800099e:	f000 fe3d 	bl	800161c <Error_Handler>
				IN2_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 80009a2:	4853      	ldr	r0, [pc, #332]	; (8000af0 <CS_read+0x2b0>)
 80009a4:	f002 f823 	bl	80029ee <HAL_ADC_GetValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b299      	uxth	r1, r3
 80009ac:	4a54      	ldr	r2, [pc, #336]	; (8000b00 <CS_read+0x2c0>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 80009b4:	484f      	ldr	r0, [pc, #316]	; (8000af4 <CS_read+0x2b4>)
 80009b6:	f002 f81a 	bl	80029ee <HAL_ADC_GetValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b299      	uxth	r1, r3
 80009be:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <CS_read+0x2c4>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80009c6:	484a      	ldr	r0, [pc, #296]	; (8000af0 <CS_read+0x2b0>)
 80009c8:	f001 ffd6 	bl	8002978 <HAL_ADC_Stop_IT>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <CS_read+0x196>
 80009d2:	f000 fe23 	bl	800161c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80009d6:	4847      	ldr	r0, [pc, #284]	; (8000af4 <CS_read+0x2b4>)
 80009d8:	f001 ffce 	bl	8002978 <HAL_ADC_Stop_IT>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <CS_read+0x1a6>
 80009e2:	f000 fe1b 	bl	800161c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b1f      	cmp	r3, #31
 80009f0:	ddb5      	ble.n	800095e <CS_read+0x11e>
			}
			break;
 80009f2:	e0d8      	b.n	8000ba6 <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <CS_read+0x2a8>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <CS_read+0x2a8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <CS_read+0x2a8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	4838      	ldr	r0, [pc, #224]	; (8000aec <CS_read+0x2ac>)
 8000a0a:	f003 fb37 	bl	800407c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <CS_read+0x2a8>)
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	461a      	mov	r2, r3
 8000a14:	2120      	movs	r1, #32
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <CS_read+0x2ac>)
 8000a18:	f003 fb30 	bl	800407c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	e046      	b.n	8000ab0 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000a22:	4833      	ldr	r0, [pc, #204]	; (8000af0 <CS_read+0x2b0>)
 8000a24:	f001 fe78 	bl	8002718 <HAL_ADC_Start_IT>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <CS_read+0x1f2>
 8000a2e:	f000 fdf5 	bl	800161c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000a32:	4830      	ldr	r0, [pc, #192]	; (8000af4 <CS_read+0x2b4>)
 8000a34:	f001 fe70 	bl	8002718 <HAL_ADC_Start_IT>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <CS_read+0x202>
 8000a3e:	f000 fded 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000a42:	210a      	movs	r1, #10
 8000a44:	482a      	ldr	r0, [pc, #168]	; (8000af0 <CS_read+0x2b0>)
 8000a46:	f001 fd8f 	bl	8002568 <HAL_ADC_PollForConversion>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <CS_read+0x214>
 8000a50:	f000 fde4 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000a54:	210a      	movs	r1, #10
 8000a56:	4827      	ldr	r0, [pc, #156]	; (8000af4 <CS_read+0x2b4>)
 8000a58:	f001 fd86 	bl	8002568 <HAL_ADC_PollForConversion>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <CS_read+0x226>
 8000a62:	f000 fddb 	bl	800161c <Error_Handler>
				IN3_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000a66:	4822      	ldr	r0, [pc, #136]	; (8000af0 <CS_read+0x2b0>)
 8000a68:	f001 ffc1 	bl	80029ee <HAL_ADC_GetValue>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <CS_read+0x2c8>)
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <CS_read+0x2b4>)
 8000a7a:	f001 ffb8 	bl	80029ee <HAL_ADC_GetValue>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b299      	uxth	r1, r3
 8000a82:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <CS_read+0x2cc>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000a8a:	4819      	ldr	r0, [pc, #100]	; (8000af0 <CS_read+0x2b0>)
 8000a8c:	f001 ff74 	bl	8002978 <HAL_ADC_Stop_IT>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <CS_read+0x25a>
 8000a96:	f000 fdc1 	bl	800161c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <CS_read+0x2b4>)
 8000a9c:	f001 ff6c 	bl	8002978 <HAL_ADC_Stop_IT>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <CS_read+0x26a>
 8000aa6:	f000 fdb9 	bl	800161c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	2b1f      	cmp	r3, #31
 8000ab4:	ddb5      	ble.n	8000a22 <CS_read+0x1e2>
			}
			break;
 8000ab6:	e076      	b.n	8000ba6 <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <CS_read+0x2a8>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <CS_read+0x2a8>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <CS_read+0x2a8>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <CS_read+0x2ac>)
 8000ace:	f003 fad5 	bl	800407c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <CS_read+0x2a8>)
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <CS_read+0x2ac>)
 8000adc:	f003 face 	bl	800407c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	e05b      	b.n	8000b9e <CS_read+0x35e>
 8000ae6:	bf00      	nop
 8000ae8:	20000654 	.word	0x20000654
 8000aec:	48000400 	.word	0x48000400
 8000af0:	20000028 	.word	0x20000028
 8000af4:	20000094 	.word	0x20000094
 8000af8:	20000408 	.word	0x20000408
 8000afc:	20000508 	.word	0x20000508
 8000b00:	20000448 	.word	0x20000448
 8000b04:	20000548 	.word	0x20000548
 8000b08:	20000488 	.word	0x20000488
 8000b0c:	20000588 	.word	0x20000588
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000b10:	482b      	ldr	r0, [pc, #172]	; (8000bc0 <CS_read+0x380>)
 8000b12:	f001 fe01 	bl	8002718 <HAL_ADC_Start_IT>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <CS_read+0x2e0>
 8000b1c:	f000 fd7e 	bl	800161c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000b20:	4828      	ldr	r0, [pc, #160]	; (8000bc4 <CS_read+0x384>)
 8000b22:	f001 fdf9 	bl	8002718 <HAL_ADC_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <CS_read+0x2f0>
 8000b2c:	f000 fd76 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000b30:	210a      	movs	r1, #10
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <CS_read+0x380>)
 8000b34:	f001 fd18 	bl	8002568 <HAL_ADC_PollForConversion>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <CS_read+0x302>
 8000b3e:	f000 fd6d 	bl	800161c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000b42:	210a      	movs	r1, #10
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <CS_read+0x384>)
 8000b46:	f001 fd0f 	bl	8002568 <HAL_ADC_PollForConversion>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <CS_read+0x314>
 8000b50:	f000 fd64 	bl	800161c <Error_Handler>
				IN4_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <CS_read+0x380>)
 8000b56:	f001 ff4a 	bl	80029ee <HAL_ADC_GetValue>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b299      	uxth	r1, r3
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <CS_read+0x388>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8000b66:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <CS_read+0x384>)
 8000b68:	f001 ff41 	bl	80029ee <HAL_ADC_GetValue>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <CS_read+0x38c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <CS_read+0x380>)
 8000b7a:	f001 fefd 	bl	8002978 <HAL_ADC_Stop_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <CS_read+0x348>
 8000b84:	f000 fd4a 	bl	800161c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000b88:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <CS_read+0x384>)
 8000b8a:	f001 fef5 	bl	8002978 <HAL_ADC_Stop_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <CS_read+0x358>
 8000b94:	f000 fd42 	bl	800161c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	ddb5      	ble.n	8000b10 <CS_read+0x2d0>
			}
			break;
 8000ba4:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	f77f ae4c 	ble.w	800084c <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000bb4:	f7ff fd80 	bl	80006b8 <CS_process>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	20000094 	.word	0x20000094
 8000bc8:	200004c8 	.word	0x200004c8
 8000bcc:	200005c8 	.word	0x200005c8

08000bd0 <HAL_UART_RxCpltCallback>:
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 9; i++){
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e00b      	b.n	8000bf6 <HAL_UART_RxCpltCallback+0x26>
		uart_rx_buffer[i] = uart_rx_buffer[i+1];
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_UART_RxCpltCallback+0x6c>)
 8000be4:	5cd1      	ldrb	r1, [r2, r3]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_UART_RxCpltCallback+0x6c>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	460a      	mov	r2, r1
 8000bee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 9; i++){
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	ddf0      	ble.n	8000bde <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Transmit_IT(huart, &uart_receive,1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4910      	ldr	r1, [pc, #64]	; (8000c40 <HAL_UART_RxCpltCallback+0x70>)
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f005 fc7d 	bl	8006500 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(huart, &uart_receive,1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <HAL_UART_RxCpltCallback+0x70>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f005 fd20 	bl	8006650 <HAL_UART_Receive_IT>
	if(uart_receive == 13){
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_UART_RxCpltCallback+0x70>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b0d      	cmp	r3, #13
 8000c16:	d108      	bne.n	8000c2a <HAL_UART_RxCpltCallback+0x5a>
		uint8_t array[2] = {13, 0x0A};
 8000c18:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000c1c:	813b      	strh	r3, [r7, #8]
		HAL_UART_Transmit_IT(huart, "\r\n",2);
 8000c1e:	2202      	movs	r2, #2
 8000c20:	4908      	ldr	r1, [pc, #32]	; (8000c44 <HAL_UART_RxCpltCallback+0x74>)
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f005 fc6c 	bl	8006500 <HAL_UART_Transmit_IT>
	}else{
		uart_rx_buffer[9] = uart_receive;
	}
}
 8000c28:	e003      	b.n	8000c32 <HAL_UART_RxCpltCallback+0x62>
		uart_rx_buffer[9] = uart_receive;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_UART_RxCpltCallback+0x70>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_UART_RxCpltCallback+0x6c>)
 8000c30:	725a      	strb	r2, [r3, #9]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000648 	.word	0x20000648
 8000c40:	20000656 	.word	0x20000656
 8000c44:	0800899c 	.word	0x0800899c

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f001 f813 	bl	8001c76 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000c50:	f7ff fc60 	bl	8000514 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f82e 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 fc66 	bl	8001528 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c5c:	f000 f876 	bl	8000d4c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000c60:	f000 f956 	bl	8000f10 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000c64:	f000 f99a 	bl	8000f9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c68:	f000 fa48 	bl	80010fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c6c:	f000 fabc 	bl	80011e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c70:	f000 fb08 	bl	8001284 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000c74:	f000 fb7a 	bl	800136c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c78:	f000 fbae 	bl	80013d8 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000c7c:	f000 fbe2 	bl	8001444 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000c80:	f000 fc06 	bl	8001490 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000c84:	f000 f8dc 	bl	8000e40 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <main+0x5c>)
 8000c8a:	f004 fa3e 	bl	800510a <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <main+0x60>)
 8000c90:	f004 fa3b 	bl	800510a <HAL_TIM_PWM_Init>

  HAL_UART_Receive_IT(&huart2, &uart_receive, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <main+0x64>)
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <main+0x68>)
 8000c9a:	f005 fcd9 	bl	8006650 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CS_read();
 8000c9e:	f7ff fdcf 	bl	8000840 <CS_read>
 8000ca2:	e7fc      	b.n	8000c9e <main+0x56>
 8000ca4:	20000164 	.word	0x20000164
 8000ca8:	200001b0 	.word	0x200001b0
 8000cac:	20000656 	.word	0x20000656
 8000cb0:	20000378 	.word	0x20000378

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	2238      	movs	r2, #56	; 0x38
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 fdc6 	bl	8008854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cda:	f003 f9e7 	bl	80040ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000cf8:	234b      	movs	r3, #75	; 0x4b
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fa81 	bl	8004214 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d18:	f000 fc80 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2303      	movs	r3, #3
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2104      	movs	r1, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fd85 	bl	8004844 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d40:	f000 fc6c 	bl	800161c <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3750      	adds	r7, #80	; 0x50
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2220      	movs	r2, #32
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 fd75 	bl	8008854 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6a:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000dd6:	f001 fa3d 	bl	8002254 <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000de0:	f000 fc1c 	bl	800161c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000df0:	f002 fb9e 	bl	8003530 <HAL_ADCEx_MultiModeConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dfa:	f000 fc0f 	bl	800161c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_ADC1_Init+0xec>)
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e02:	2306      	movs	r3, #6
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_ADC1_Init+0xf0>)
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <MX_ADC1_Init+0xe8>)
 8000e1c:	f001 fdf4 	bl	8002a08 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e26:	f000 fbf9 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	; 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000028 	.word	0x20000028
 8000e38:	04300002 	.word	0x04300002
 8000e3c:	407f0000 	.word	0x407f0000

08000e40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2220      	movs	r2, #32
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 fd01 	bl	8008854 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e54:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <MX_ADC2_Init+0xc4>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000ebc:	f001 f9ca 	bl	8002254 <HAL_ADC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000ec6:	f000 fba9 	bl	800161c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_ADC2_Init+0xc8>)
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ece:	2306      	movs	r3, #6
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_ADC2_Init+0xcc>)
 8000ed8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eda:	2304      	movs	r3, #4
 8000edc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_ADC2_Init+0xc0>)
 8000ee8:	f001 fd8e 	bl	8002a08 <HAL_ADC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ef2:	f000 fb93 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000094 	.word	0x20000094
 8000f04:	50000100 	.word	0x50000100
 8000f08:	0c900008 	.word	0x0c900008
 8000f0c:	407f0000 	.word	0x407f0000

08000f10 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <MX_FDCAN1_Init+0x88>)
 8000f18:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f40:	2210      	movs	r2, #16
 8000f42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_FDCAN1_Init+0x84>)
 8000f82:	f002 fd49 	bl	8003a18 <HAL_FDCAN_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000f8c:	f000 fb46 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000100 	.word	0x20000100
 8000f98:	40006400 	.word	0x40006400

08000f9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09c      	sub	sp, #112	; 0x70
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2234      	movs	r2, #52	; 0x34
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fc3c 	bl	8008854 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <MX_TIM1_Init+0x15c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_TIM1_Init+0x158>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <MX_TIM1_Init+0x158>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001008:	483a      	ldr	r0, [pc, #232]	; (80010f4 <MX_TIM1_Init+0x158>)
 800100a:	f004 f827 	bl	800505c <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001014:	f000 fb02 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001022:	4619      	mov	r1, r3
 8001024:	4833      	ldr	r0, [pc, #204]	; (80010f4 <MX_TIM1_Init+0x158>)
 8001026:	f004 fb65 	bl	80056f4 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001030:	f000 faf4 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001034:	482f      	ldr	r0, [pc, #188]	; (80010f4 <MX_TIM1_Init+0x158>)
 8001036:	f004 f868 	bl	800510a <HAL_TIM_PWM_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001040:	f000 faec 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001054:	4619      	mov	r1, r3
 8001056:	4827      	ldr	r0, [pc, #156]	; (80010f4 <MX_TIM1_Init+0x158>)
 8001058:	f005 f89a 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001062:	f000 fadb 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001066:	2360      	movs	r3, #96	; 0x60
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001082:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <MX_TIM1_Init+0x158>)
 800108c:	f004 fa1e 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001096:	f000 fac1 	bl	800161c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_TIM1_Init+0x158>)
 80010d8:	f005 f8dc 	bl	8006294 <HAL_TIMEx_ConfigBreakDeadTime>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80010e2:	f000 fa9b 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MX_TIM1_Init+0x158>)
 80010e8:	f000 fc74 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 80010ec:	bf00      	nop
 80010ee:	3770      	adds	r7, #112	; 0x70
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000164 	.word	0x20000164
 80010f8:	40012c00 	.word	0x40012c00

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001138:	2295      	movs	r2, #149	; 0x95
 800113a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_TIM2_Init+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967294E9;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001144:	f06f 0201 	mvn.w	r2, #1
 8001148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_TIM2_Init+0xe8>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001158:	f003 ff80 	bl	800505c <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001162:	f000 fa5b 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	4619      	mov	r1, r3
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001174:	f004 fabe 	bl	80056f4 <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800117e:	f000 fa4d 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_TIM2_Init+0xe8>)
 8001184:	f003 ffc1 	bl	800510a <HAL_TIM_PWM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800118e:	f000 fa45 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <MX_TIM2_Init+0xe8>)
 80011a2:	f004 fff5 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011ac:	f000 fa36 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	; 0x60
 80011b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM2_Init+0xe8>)
 80011c8:	f004 f980 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011d2:	f000 fa23 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM2_Init+0xe8>)
 80011d8:	f000 fbfc 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200001b0 	.word	0x200001b0

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_TIM3_Init+0x94>)
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <MX_TIM3_Init+0x98>)
 800120a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_TIM3_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM3_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_TIM3_Init+0x94>)
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_TIM3_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_TIM3_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_TIM3_Init+0x94>)
 800122e:	f003 ff15 	bl	800505c <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001238:	f000 f9f0 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_TIM3_Init+0x94>)
 800124a:	f004 fa53 	bl	80056f4 <HAL_TIM_ConfigClockSource>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001254:	f000 f9e2 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM3_Init+0x94>)
 8001266:	f004 ff93 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001270:	f000 f9d4 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001fc 	.word	0x200001fc
 8001280:	40000400 	.word	0x40000400

08001284 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <MX_TIM4_Init+0xe4>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012dc:	4821      	ldr	r0, [pc, #132]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012de:	f003 febd 	bl	800505c <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80012e8:	f000 f998 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4619      	mov	r1, r3
 80012f8:	481a      	ldr	r0, [pc, #104]	; (8001364 <MX_TIM4_Init+0xe0>)
 80012fa:	f004 f9fb 	bl	80056f4 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001304:	f000 f98a 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <MX_TIM4_Init+0xe0>)
 800130a:	f003 fefe 	bl	800510a <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001314:	f000 f982 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_TIM4_Init+0xe0>)
 8001328:	f004 ff32 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001332:	f000 f973 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_TIM4_Init+0xe0>)
 800134e:	f004 f8bd 	bl	80054cc <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001358:	f000 f960 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	; 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000248 	.word	0x20000248
 8001368:	40000800 	.word	0x40000800

0800136c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_TIM6_Init+0x64>)
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <MX_TIM6_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_TIM6_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_TIM6_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_TIM6_Init+0x64>)
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_TIM6_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM6_Init+0x64>)
 800139e:	f003 fe5d 	bl	800505c <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013a8:	f000 f938 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM6_Init+0x64>)
 80013ba:	f004 fee9 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 f92a 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000294 	.word	0x20000294
 80013d4:	40001000 	.word	0x40001000

080013d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_TIM7_Init+0x64>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_TIM7_Init+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_TIM7_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_TIM7_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_TIM7_Init+0x64>)
 80013fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001400:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_TIM7_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_TIM7_Init+0x64>)
 800140a:	f003 fe27 	bl	800505c <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001414:	f000 f902 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM7_Init+0x64>)
 8001426:	f004 feb3 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001430:	f000 f8f4 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200002e0 	.word	0x200002e0
 8001440:	40001400 	.word	0x40001400

08001444 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_TIM16_Init+0x44>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <MX_TIM16_Init+0x48>)
 800144c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_TIM16_Init+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_TIM16_Init+0x44>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_TIM16_Init+0x44>)
 800145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001460:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_TIM16_Init+0x44>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_TIM16_Init+0x44>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_TIM16_Init+0x44>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_TIM16_Init+0x44>)
 8001476:	f003 fdf1 	bl	800505c <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001480:	f000 f8cc 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000032c 	.word	0x2000032c
 800148c:	40014400 	.word	0x40014400

08001490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_USART2_UART_Init+0x90>)
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <MX_USART2_UART_Init+0x94>)
 8001498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_USART2_UART_Init+0x90>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014da:	f004 ffc1 	bl	8006460 <HAL_UART_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014e4:	f000 f89a 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014ec:	f007 f8e7 	bl	80086be <HAL_UARTEx_SetTxFifoThreshold>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014f6:	f000 f891 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_USART2_UART_Init+0x90>)
 80014fe:	f007 f91c 	bl	800873a <HAL_UARTEx_SetRxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001508:	f000 f888 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_USART2_UART_Init+0x90>)
 800150e:	f007 f89d 	bl	800864c <HAL_UARTEx_DisableFifoMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001518:	f000 f880 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000378 	.word	0x20000378
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <MX_GPIO_Init+0xe8>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <MX_GPIO_Init+0xe8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <MX_GPIO_Init+0xe8>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_GPIO_Init+0xe8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_GPIO_Init+0xec>)
 800158e:	f002 fd75 	bl	800407c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f248 6110 	movw	r1, #34320	; 0x8610
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f002 fd6e 	bl	800407c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_GPIO_Init+0xf0>)
 80015a8:	f002 fd68 	bl	800407c <HAL_GPIO_WritePin>
                          |IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_GPIO_Init+0xec>)
 80015c6:	f002 fbd7 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 80015ca:	f248 6310 	movw	r3, #34320	; 0x8610
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f002 fbc7 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN3_2_Pin SEL1_Pin SEL0_Pin
                           IN2_2_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 80015ea:	f44f 73bc 	mov.w	r3, #376	; 0x178
 80015ee:	60fb      	str	r3, [r7, #12]
                          |IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_GPIO_Init+0xf0>)
 8001604:	f002 fbb8 	bl	8003d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	48001800 	.word	0x48001800
 8001618:	48000400 	.word	0x48000400

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x44>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x44>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x44>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x44>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6593      	str	r3, [r2, #88]	; 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800165e:	f002 fdc9 	bl	80041f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09c      	sub	sp, #112	; 0x70
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	2244      	movs	r2, #68	; 0x44
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f007 f8df 	bl	8008854 <memset>
  if(hadc->Instance==ADC1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800169e:	d13e      	bne.n	800171e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fae3 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016bc:	f7ff ffae 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a39      	ldr	r2, [pc, #228]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 80016c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10b      	bne.n	80016ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001702:	2303      	movs	r3, #3
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001706:	2303      	movs	r3, #3
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f002 fb2e 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800171c:	e042      	b.n	80017a4 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_ADC_MspInit+0x144>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d13d      	bne.n	80017a4 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800172e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001732:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fa9f 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001744:	f7ff ff6a 	bl	800161c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 8001750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_ADC_MspInit+0x13c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10b      	bne.n	8001772 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 8001760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_ADC_MspInit+0x140>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f002 faea 	bl	8003d78 <HAL_GPIO_Init>
}
 80017a4:	bf00      	nop
 80017a6:	3770      	adds	r7, #112	; 0x70
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000066c 	.word	0x2000066c
 80017b0:	40021000 	.word	0x40021000
 80017b4:	50000100 	.word	0x50000100

080017b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09a      	sub	sp, #104	; 0x68
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2244      	movs	r2, #68	; 0x44
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 f83b 	bl	8008854 <memset>
  if(hfdcan->Instance==FDCAN1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_FDCAN_MspInit+0xac>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d139      	bne.n	800185c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80017ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fa3f 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff ff0a 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 800180e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001812:	6593      	str	r3, [r2, #88]	; 0x58
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_FDCAN_MspInit+0xb0>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001838:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800183c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800184a:	2309      	movs	r3, #9
 800184c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f002 fa8e 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3768      	adds	r7, #104	; 0x68
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40006400 	.word	0x40006400
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_TIM_Base_MspInit+0x14c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001888:	6613      	str	r3, [r2, #96]	; 0x60
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001896:	e08a      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d114      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	4a45      	ldr	r2, [pc, #276]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	201c      	movs	r0, #28
 80018c0:	f001 ffb5 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c4:	201c      	movs	r0, #28
 80018c6:	f001 ffcc 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 80018ca:	e070      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_TIM_Base_MspInit+0x154>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d114      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	201d      	movs	r0, #29
 80018f4:	f001 ff9b 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f8:	201d      	movs	r0, #29
 80018fa:	f001 ffb2 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 80018fe:	e056      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_TIM_Base_MspInit+0x158>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d114      	bne.n	8001934 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190a:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201e      	movs	r0, #30
 8001928:	f001 ff81 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800192c:	201e      	movs	r0, #30
 800192e:	f001 ff98 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8001932:	e03c      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_TIM_Base_MspInit+0x15c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10c      	bne.n	8001958 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
}
 8001956:	e02a      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_TIM_Base_MspInit+0x160>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d114      	bne.n	800198c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	6593      	str	r3, [r2, #88]	; 0x58
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2037      	movs	r0, #55	; 0x37
 8001980:	f001 ff55 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001984:	2037      	movs	r0, #55	; 0x37
 8001986:	f001 ff6c 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 800198a:	e010      	b.n	80019ae <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_TIM_Base_MspInit+0x164>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_TIM_Base_MspInit+0x150>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40000800 	.word	0x40000800
 80019c8:	40001000 	.word	0x40001000
 80019cc:	40001400 	.word	0x40001400
 80019d0:	40014400 	.word	0x40014400

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_TIM_MspPostInit+0xac>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11e      	bne.n	8001a34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a20:	2306      	movs	r3, #6
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f002 f9a3 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a32:	e021      	b.n	8001a78 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d11c      	bne.n	8001a78 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_TIM_MspPostInit+0xb0>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a56:	2320      	movs	r3, #32
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f002 f980 	bl	8003d78 <HAL_GPIO_Init>
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2244      	movs	r2, #68	; 0x44
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f006 fed3 	bl	8008854 <memset>
  if(huart->Instance==USART2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_UART_MspInit+0xb8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d13e      	bne.n	8001b36 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f8d9 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff fda4 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0xbc>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b04:	230c      	movs	r3, #12
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b14:	2307      	movs	r3, #7
 8001b16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f002 f929 	bl	8003d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2026      	movs	r0, #38	; 0x26
 8001b2c:	f001 fe7f 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b30:	2026      	movs	r0, #38	; 0x26
 8001b32:	f001 fe96 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3768      	adds	r7, #104	; 0x68
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40021000 	.word	0x40021000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <NMI_Handler+0x4>

08001b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b94:	f000 f8c2 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM2_IRQHandler+0x10>)
 8001ba2:	f003 fb13 	bl	80051cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200001b0 	.word	0x200001b0

08001bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM3_IRQHandler+0x10>)
 8001bb6:	f003 fb09 	bl	80051cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200001fc 	.word	0x200001fc

08001bc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM4_IRQHandler+0x10>)
 8001bca:	f003 faff 	bl	80051cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000248 	.word	0x20000248

08001bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USART2_IRQHandler+0x10>)
 8001bde:	f004 fd8d 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000378 	.word	0x20000378

08001bec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM7_IRQHandler+0x10>)
 8001bf2:	f003 faeb 	bl	80051cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002e0 	.word	0x200002e0

08001c00 <SystemInit>:
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490e      	ldr	r1, [pc, #56]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff ffd7 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f006 fe07 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c56:	f7fe fff7 	bl	8000c48 <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   r0, =_estack
 8001c5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c68:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 8001c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c70:	20000674 	.word	0x20000674

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>

08001c76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f001 fdc9 	bl	8003818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c86:	200f      	movs	r0, #15
 8001c88:	f000 f80e 	bl	8001ca8 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	e001      	b.n	8001c9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c98:	f7ff fcc6 	bl	8001628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_InitTick+0x68>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d022      	beq.n	8001d02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_InitTick+0x6c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_InitTick+0x68>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fdd4 	bl	800387e <HAL_SYSTICK_Config>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10f      	bne.n	8001cfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d809      	bhi.n	8001cf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cea:	f001 fda0 	bl	800382e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0x70>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e004      	b.n	8001d06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x20>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000670 	.word	0x20000670
 8001d3c:	20000008 	.word	0x20000008

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000670 	.word	0x20000670

08001d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <LL_ADC_SetOffset+0x44>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	03fff000 	.word	0x03fff000

08001e08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3360      	adds	r3, #96	; 0x60
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3360      	adds	r3, #96	; 0x60
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3360      	adds	r3, #96	; 0x60
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	615a      	str	r2, [r3, #20]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	211f      	movs	r1, #31
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 011f 	and.w	r1, r3, #31
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3314      	adds	r3, #20
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0e5b      	lsrs	r3, r3, #25
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0d1b      	lsrs	r3, r3, #20
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2107      	movs	r1, #7
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	0d1b      	lsrs	r3, r3, #20
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10a      	bne.n	8001ffa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001ff8:	e00a      	b.n	8002010 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	43db      	mvns	r3, r3
 8002008:	401a      	ands	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	407f0000 	.word	0x407f0000

08002020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 031f 	and.w	r3, r3, #31
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6093      	str	r3, [r2, #8]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800212c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002130:	f043 0202 	orr.w	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <LL_ADC_IsEnabled+0x18>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <LL_ADC_IsEnabled+0x1a>
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d101      	bne.n	8002182 <LL_ADC_IsDisableOngoing+0x18>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <LL_ADC_IsDisableOngoing+0x1a>
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a4:	f043 0204 	orr.w	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d101      	bne.n	80021f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b08      	cmp	r3, #8
 8002240:	d101      	bne.n	8002246 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e177      	b.n	800255e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff f9f7 	bl	8001670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fef1 	bl	800207c <LL_ADC_IsDeepPowerDownEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fed7 	bl	8002058 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff0c 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fef0 	bl	80020a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c4:	4b9c      	ldr	r3, [pc, #624]	; (8002538 <HAL_ADC_Init+0x2e4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	4a9c      	ldr	r2, [pc, #624]	; (800253c <HAL_ADC_Init+0x2e8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f9      	bne.n	80022da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff feee 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10d      	bne.n	8002312 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff62 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 800231c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8110 	bne.w	800254c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 810c 	bne.w	800254c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fefb 	bl	8002144 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d111      	bne.n	8002378 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002354:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002358:	f7ff fef4 	bl	8002144 <LL_ADC_IsEnabled>
 800235c:	4604      	mov	r4, r0
 800235e:	4878      	ldr	r0, [pc, #480]	; (8002540 <HAL_ADC_Init+0x2ec>)
 8002360:	f7ff fef0 	bl	8002144 <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	4323      	orrs	r3, r4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4619      	mov	r1, r3
 8002372:	4874      	ldr	r0, [pc, #464]	; (8002544 <HAL_ADC_Init+0x2f0>)
 8002374:	f7ff fcf0 	bl	8001d58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7f5b      	ldrb	r3, [r3, #29]
 800237c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800238e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	3b01      	subs	r3, #1
 80023ac:	045b      	lsls	r3, r3, #17
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_ADC_Init+0x2f4>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff feee 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8002404:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff0f 	bl	800222e <LL_ADC_INJ_IsConversionOngoing>
 8002410:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d16d      	bne.n	80024f4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d16a      	bne.n	80024f4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002422:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800242a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	f023 0302 	bic.w	r3, r3, #2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	430b      	orrs	r3, r1
 8002446:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d017      	beq.n	8002480 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800245e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002468:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800246c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6911      	ldr	r1, [r2, #16]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800247e:	e013      	b.n	80024a8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800248e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d118      	bne.n	80024e4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024d4:	430a      	orrs	r2, r1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	611a      	str	r2, [r3, #16]
 80024e2:	e007      	b.n	80024f4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10c      	bne.n	8002516 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f023 010f 	bic.w	r1, r3, #15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
 8002514:	e007      	b.n	8002526 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 020f 	bic.w	r2, r2, #15
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	65da      	str	r2, [r3, #92]	; 0x5c
 8002536:	e011      	b.n	800255c <HAL_ADC_Init+0x308>
 8002538:	20000000 	.word	0x20000000
 800253c:	053e2d63 	.word	0x053e2d63
 8002540:	50000100 	.word	0x50000100
 8002544:	50000300 	.word	0x50000300
 8002548:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800255c:	7ffb      	ldrb	r3, [r7, #31]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	bf00      	nop

08002568 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002572:	4867      	ldr	r0, [pc, #412]	; (8002710 <HAL_ADC_PollForConversion+0x1a8>)
 8002574:	f7ff fd54 	bl	8002020 <LL_ADC_GetMultimode>
 8002578:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d102      	bne.n	8002588 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002582:	2308      	movs	r3, #8
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e02a      	b.n	80025de <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d002      	beq.n	800259a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b09      	cmp	r3, #9
 8002598:	d111      	bne.n	80025be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0a6      	b.n	8002706 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025b8:	2304      	movs	r3, #4
 80025ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025bc:	e00f      	b.n	80025de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025be:	4854      	ldr	r0, [pc, #336]	; (8002710 <HAL_ADC_PollForConversion+0x1a8>)
 80025c0:	f7ff fd3c 	bl	800203c <LL_ADC_GetMultiDMATransfer>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e095      	b.n	8002706 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025da:	2304      	movs	r3, #4
 80025dc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025de:	f7ff fbaf 	bl	8001d40 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025e4:	e021      	b.n	800262a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d01d      	beq.n	800262a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025ee:	f7ff fba7 	bl	8001d40 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <HAL_ADC_PollForConversion+0x9c>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d112      	bne.n	800262a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e06d      	b.n	8002706 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0d6      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fc57 	bl	8001efc <LL_ADC_REG_IsTriggerSourceSWStart>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7f5b      	ldrb	r3, [r3, #29]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d118      	bne.n	800268e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d111      	bne.n	800268e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_ADC_PollForConversion+0x1ac>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d002      	beq.n	800269e <HAL_ADC_PollForConversion+0x136>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	e001      	b.n	80026a2 <HAL_ADC_PollForConversion+0x13a>
 800269e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d008      	beq.n	80026bc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d002      	beq.n	80026bc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d104      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e00d      	b.n	80026e2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_ADC_PollForConversion+0x1ac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d002      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x16e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e001      	b.n	80026da <HAL_ADC_PollForConversion+0x172>
 80026d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2208      	movs	r2, #8
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e008      	b.n	8002704 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	220c      	movs	r2, #12
 8002702:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	50000300 	.word	0x50000300
 8002714:	50000100 	.word	0x50000100

08002718 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002720:	4893      	ldr	r0, [pc, #588]	; (8002970 <HAL_ADC_Start_IT+0x258>)
 8002722:	f7ff fc7d 	bl	8002020 <LL_ADC_GetMultimode>
 8002726:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fd57 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 8113 	bne.w	8002960 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADC_Start_IT+0x30>
 8002744:	2302      	movs	r3, #2
 8002746:	e10e      	b.n	8002966 <HAL_ADC_Start_IT+0x24e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fe05 	bl	8003360 <ADC_Enable>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 80fa 	bne.w	8002956 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7e      	ldr	r2, [pc, #504]	; (8002974 <HAL_ADC_Start_IT+0x25c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d002      	beq.n	8002786 <HAL_ADC_Start_IT+0x6e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e001      	b.n	800278a <HAL_ADC_Start_IT+0x72>
 8002786:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4293      	cmp	r3, r2
 8002790:	d002      	beq.n	8002798 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b4:	f023 0206 	bic.w	r2, r3, #6
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	221c      	movs	r2, #28
 80027ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 021c 	bic.w	r2, r2, #28
 80027e2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d108      	bne.n	80027fe <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	605a      	str	r2, [r3, #4]
          break;
 80027fc:	e008      	b.n	8002810 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0204 	orr.w	r2, r2, #4
 800280c:	605a      	str	r2, [r3, #4]
          break;
 800280e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0210 	orr.w	r2, r2, #16
 8002826:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_ADC_Start_IT+0x25c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d002      	beq.n	8002838 <HAL_ADC_Start_IT+0x120>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e001      	b.n	800283c <HAL_ADC_Start_IT+0x124>
 8002838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4293      	cmp	r3, r2
 8002842:	d008      	beq.n	8002856 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d002      	beq.n	8002856 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b09      	cmp	r3, #9
 8002854:	d13a      	bne.n	80028cc <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02d      	beq.n	80028c0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800286c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d110      	bne.n	800289e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0220 	bic.w	r2, r2, #32
 800288a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289a:	605a      	str	r2, [r3, #4]
              break;
 800289c:	e010      	b.n	80028c0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0220 	orr.w	r2, r2, #32
 80028bc:	605a      	str	r2, [r3, #4]
              break;
 80028be:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fc63 	bl	8002190 <LL_ADC_REG_StartConversion>
 80028ca:	e04b      	b.n	8002964 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_ADC_Start_IT+0x25c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d002      	beq.n	80028e8 <HAL_ADC_Start_IT+0x1d0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	e001      	b.n	80028ec <HAL_ADC_Start_IT+0x1d4>
 80028e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d034      	beq.n	8002964 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002902:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d110      	bne.n	8002934 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0220 	bic.w	r2, r2, #32
 8002920:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002930:	605a      	str	r2, [r3, #4]
              break;
 8002932:	e017      	b.n	8002964 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002942:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	605a      	str	r2, [r3, #4]
              break;
 8002954:	e006      	b.n	8002964 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800295e:	e001      	b.n	8002964 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002960:	2302      	movs	r3, #2
 8002962:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	50000300 	.word	0x50000300
 8002974:	50000100 	.word	0x50000100

08002978 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_Stop_IT+0x16>
 800298a:	2302      	movs	r3, #2
 800298c:	e02b      	b.n	80029e6 <HAL_ADC_Stop_IT+0x6e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002996:	2103      	movs	r1, #3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fc25 	bl	80031e8 <ADC_ConversionStop>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d119      	bne.n	80029dc <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 021c 	bic.w	r2, r2, #28
 80029b6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fd33 	bl	8003424 <ADC_Disable>
 80029be:	4603      	mov	r3, r0
 80029c0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0b6      	sub	sp, #216	; 0xd8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x22>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e3c8      	b.n	80031bc <HAL_ADC_ConfigChannel+0x7b4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fbd2 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 83ad 	bne.w	800319e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	f7ff fa66 	bl	8001f22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fbc0 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8002a60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fbe0 	bl	800222e <LL_ADC_INJ_IsConversionOngoing>
 8002a6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 81d9 	bne.w	8002e2e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 81d4 	bne.w	8002e2e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7ff fa6d 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fa14 	bl	8001ed6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002aae:	e00e      	b.n	8002ace <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f7ff fa5c 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa04 	bl	8001ed6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d022      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b00:	f7ff f95e 	bl	8001dc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6919      	ldr	r1, [r3, #16]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	461a      	mov	r2, r3
 8002b12:	f7ff f9aa 	bl	8001e6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	7f1b      	ldrb	r3, [r3, #28]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x124>
 8002b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x126>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f7ff f9b6 	bl	8001ea0 <LL_ADC_SetOffsetSaturation>
 8002b34:	e17b      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f963 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x15a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f958 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	e01e      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x198>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f94d 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e004      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002b94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1b0>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	e018      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1e2>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e004      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f91c 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f900 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x220>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f8f5 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	e01e      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x25e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f8ea 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e004      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x276>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	e018      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x2a8>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e004      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f8b9 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f89d 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2e6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f892 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x324>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f887 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e004      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x33c>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	e016      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x36a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e004      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d106      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f858 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2103      	movs	r1, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f83c 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x3a8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2103      	movs	r1, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f831 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	e017      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x3d8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f826 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e003      	b.n	8002dde <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x3f0>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	e011      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x414>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d106      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2103      	movs	r1, #3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f803 	bl	8001e34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f986 	bl	8002144 <LL_ADC_IsEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 8140 	bne.w	80030c0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f7ff f8bf 	bl	8001fd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4a8f      	ldr	r2, [pc, #572]	; (8003094 <HAL_ADC_ConfigChannel+0x68c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f040 8131 	bne.w	80030c0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x47e>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2b09      	cmp	r3, #9
 8002e7c:	bf94      	ite	ls
 8002e7e:	2301      	movls	r3, #1
 8002e80:	2300      	movhi	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e019      	b.n	8002eba <HAL_ADC_ConfigChannel+0x4b2>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e96:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d079      	beq.n	8002fb2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x4d2>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	069b      	lsls	r3, r3, #26
 8002ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed8:	e015      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x4fe>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	e003      	b.n	8002efe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	069b      	lsls	r3, r3, #26
 8002f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x51e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	e017      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x54e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	ea42 0103 	orr.w	r1, r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x574>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	e018      	b.n	8002fae <HAL_ADC_ConfigChannel+0x5a6>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e003      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f003 021f 	and.w	r2, r3, #31
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	e081      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x5c6>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fcc:	e015      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x5f2>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	069b      	lsls	r3, r3, #26
 8002ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_ConfigChannel+0x612>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	e017      	b.n	800304a <HAL_ADC_ConfigChannel+0x642>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
  return result;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x66e>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	3b1e      	subs	r3, #30
 800306e:	051b      	lsls	r3, r3, #20
 8003070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003074:	e01e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x6ac>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	613b      	str	r3, [r7, #16]
  return result;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e006      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x698>
 8003092:	bf00      	nop
 8003094:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	f003 021f 	and.w	r2, r3, #31
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	051b      	lsls	r3, r3, #20
 80030b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b4:	430b      	orrs	r3, r1
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	4619      	mov	r1, r3
 80030bc:	f7fe ff5d 	bl	8001f7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d071      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030cc:	483e      	ldr	r0, [pc, #248]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80030ce:	f7fe fe69 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 80030d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3c      	ldr	r2, [pc, #240]	; (80031cc <HAL_ADC_ConfigChannel+0x7c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x6e2>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d127      	bne.n	800313a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d157      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003108:	4619      	mov	r1, r3
 800310a:	482f      	ldr	r0, [pc, #188]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800310c:	f7fe fe37 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800312a:	e002      	b.n	8003132 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3b01      	subs	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003138:	e03a      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_ADC_ConfigChannel+0x7d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d113      	bne.n	800316c <HAL_ADC_ConfigChannel+0x764>
 8003144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10d      	bne.n	800316c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02a      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003162:	4619      	mov	r1, r3
 8003164:	4818      	ldr	r0, [pc, #96]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003166:	f7fe fe0a 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316a:	e021      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11c      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d011      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003194:	4619      	mov	r1, r3
 8003196:	480c      	ldr	r0, [pc, #48]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003198:	f7fe fdf1 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
 800319c:	e008      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37d8      	adds	r7, #216	; 0xd8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	80080000 	.word	0x80080000
 80031c8:	50000300 	.word	0x50000300
 80031cc:	c3210000 	.word	0xc3210000
 80031d0:	90c00010 	.word	0x90c00010
 80031d4:	20000000 	.word	0x20000000
 80031d8:	053e2d63 	.word	0x053e2d63
 80031dc:	c7520000 	.word	0xc7520000
 80031e0:	50000100 	.word	0x50000100
 80031e4:	cb840000 	.word	0xcb840000

080031e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe ffee 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8003204:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f80f 	bl	800222e <LL_ADC_INJ_IsConversionOngoing>
 8003210:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8098 	beq.w	8003350 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02a      	beq.n	8003284 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7f5b      	ldrb	r3, [r3, #29]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d126      	bne.n	8003284 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f1b      	ldrb	r3, [r3, #28]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d122      	bne.n	8003284 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800323e:	2301      	movs	r3, #1
 8003240:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003242:	e014      	b.n	800326e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4a45      	ldr	r2, [pc, #276]	; (800335c <ADC_ConversionStop+0x174>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d90d      	bls.n	8003268 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f043 0210 	orr.w	r2, r3, #16
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e074      	b.n	8003352 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d1e3      	bne.n	8003244 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d014      	beq.n	80032b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ffa6 	bl	80021e0 <LL_ADC_REG_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff63 	bl	800216a <LL_ADC_IsDisableOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ff82 	bl	80021b8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d014      	beq.n	80032e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe ffb5 	bl	800222e <LL_ADC_INJ_IsConversionOngoing>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe ff4b 	bl	800216a <LL_ADC_IsDisableOngoing>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe ff91 	bl	8002206 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d005      	beq.n	80032f6 <ADC_ConversionStop+0x10e>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d105      	bne.n	80032fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80032f0:	230c      	movs	r3, #12
 80032f2:	617b      	str	r3, [r7, #20]
        break;
 80032f4:	e005      	b.n	8003302 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80032f6:	2308      	movs	r3, #8
 80032f8:	617b      	str	r3, [r7, #20]
        break;
 80032fa:	e002      	b.n	8003302 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80032fc:	2304      	movs	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]
        break;
 8003300:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003302:	f7fe fd1d 	bl	8001d40 <HAL_GetTick>
 8003306:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003308:	e01b      	b.n	8003342 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800330a:	f7fe fd19 	bl	8001d40 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b05      	cmp	r3, #5
 8003316:	d914      	bls.n	8003342 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e007      	b.n	8003352 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1dc      	bne.n	800330a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	a33fffff 	.word	0xa33fffff

08003360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fee9 	bl	8002144 <LL_ADC_IsEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d14d      	bne.n	8003414 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	4b28      	ldr	r3, [pc, #160]	; (8003420 <ADC_Enable+0xc0>)
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e039      	b.n	8003416 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fea4 	bl	80020f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033ac:	f7fe fcc8 	bl	8001d40 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b2:	e028      	b.n	8003406 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fec3 	bl	8002144 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fe93 	bl	80020f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ce:	f7fe fcb7 	bl	8001d40 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d914      	bls.n	8003406 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d00d      	beq.n	8003406 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f043 0210 	orr.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e007      	b.n	8003416 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d1cf      	bne.n	80033b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	8000003f 	.word	0x8000003f

08003424 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fe9a 	bl	800216a <LL_ADC_IsDisableOngoing>
 8003436:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fe81 	bl	8002144 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d047      	beq.n	80034d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d144      	bne.n	80034d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030d 	and.w	r3, r3, #13
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10c      	bne.n	8003476 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fe5b 	bl	800211c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2203      	movs	r2, #3
 800346c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800346e:	f7fe fc67 	bl	8001d40 <HAL_GetTick>
 8003472:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003474:	e029      	b.n	80034ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e023      	b.n	80034da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003492:	f7fe fc55 	bl	8001d40 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d914      	bls.n	80034ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1dc      	bne.n	8003492 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <LL_ADC_IsEnabled>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <LL_ADC_IsEnabled+0x18>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <LL_ADC_IsEnabled+0x1a>
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_ADC_REG_IsConversionOngoing>:
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d101      	bne.n	8003520 <LL_ADC_REG_IsConversionOngoing+0x18>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b0a1      	sub	sp, #132	; 0x84
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800354a:	2302      	movs	r3, #2
 800354c:	e08b      	b.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003556:	2300      	movs	r3, #0
 8003558:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800355a:	2300      	movs	r3, #0
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003566:	d102      	bne.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003568:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	e001      	b.n	8003572 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e06a      	b.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ffb8 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8003598:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ffb2 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14c      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d149      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80035b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d028      	beq.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ce:	035b      	lsls	r3, r3, #13
 80035d0:	430b      	orrs	r3, r1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035dc:	f7ff ff81 	bl	80034e2 <LL_ADC_IsEnabled>
 80035e0:	4604      	mov	r4, r0
 80035e2:	4823      	ldr	r0, [pc, #140]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035e4:	f7ff ff7d 	bl	80034e2 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4323      	orrs	r3, r4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d133      	bne.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035f8:	f023 030f 	bic.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	6811      	ldr	r1, [r2, #0]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	430a      	orrs	r2, r1
 8003606:	431a      	orrs	r2, r3
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800360c:	e024      	b.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800360e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800361a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800361e:	f7ff ff60 	bl	80034e2 <LL_ADC_IsEnabled>
 8003622:	4604      	mov	r4, r0
 8003624:	4812      	ldr	r0, [pc, #72]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003626:	f7ff ff5c 	bl	80034e2 <LL_ADC_IsEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	4323      	orrs	r3, r4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d112      	bne.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800363a:	f023 030f 	bic.w	r3, r3, #15
 800363e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003640:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003642:	e009      	b.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003656:	e000      	b.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003658:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003662:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003666:	4618      	mov	r0, r3
 8003668:	3784      	adds	r7, #132	; 0x84
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}
 800366e:	bf00      	nop
 8003670:	50000100 	.word	0x50000100
 8003674:	50000300 	.word	0x50000300

08003678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003694:	4013      	ands	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036aa:	4a04      	ldr	r2, [pc, #16]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	60d3      	str	r3, [r2, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_GetPriorityGrouping+0x18>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 0307 	and.w	r3, r3, #7
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db0b      	blt.n	8003706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__NVIC_EnableIRQ+0x38>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e4:	d301      	bcc.n	80037ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <SysTick_Config+0x40>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f2:	210f      	movs	r1, #15
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f7ff ff8e 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x40>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x40>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff29 	bl	8003678 <__NVIC_SetPriorityGrouping>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff40 	bl	80036c0 <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff90 	bl	800376c <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5f 	bl	8003718 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff33 	bl	80036dc <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa4 	bl	80037d4 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d005      	beq.n	80038ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e037      	b.n	800392a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 021f 	and.w	r2, r3, #31
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003906:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003928:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d00d      	beq.n	800397c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e047      	b.n	8003a0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 020e 	bic.w	r2, r2, #14
 800398a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
    }
  }
  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e147      	b.n	8003cba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd feba 	bl	80017b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0210 	bic.w	r2, r2, #16
 8003a52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a54:	f7fe f974 	bl	8001d40 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a5a:	e012      	b.n	8003a82 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a5c:	f7fe f970 	bl	8001d40 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b0a      	cmp	r3, #10
 8003a68:	d90b      	bls.n	8003a82 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e11b      	b.n	8003cba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d0e5      	beq.n	8003a5c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa0:	f7fe f94e 	bl	8001d40 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aa6:	e012      	b.n	8003ace <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003aa8:	f7fe f94a 	bl	8001d40 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d90b      	bls.n	8003ace <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0f5      	b.n	8003cba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0e5      	beq.n	8003aa8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0202 	orr.w	r2, r2, #2
 8003aea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a74      	ldr	r2, [pc, #464]	; (8003cc4 <HAL_FDCAN_Init+0x2ac>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d103      	bne.n	8003afe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003af6:	4a74      	ldr	r2, [pc, #464]	; (8003cc8 <HAL_FDCAN_Init+0x2b0>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7c1b      	ldrb	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b14:	619a      	str	r2, [r3, #24]
 8003b16:	e007      	b.n	8003b28 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7c5b      	ldrb	r3, [r3, #17]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d108      	bne.n	8003b42 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3e:	619a      	str	r2, [r3, #24]
 8003b40:	e007      	b.n	8003b52 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b50:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7c9b      	ldrb	r3, [r3, #18]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b68:	619a      	str	r2, [r3, #24]
 8003b6a:	e007      	b.n	8003b7c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b7a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003ba0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0210 	bic.w	r2, r2, #16
 8003bb0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0204 	orr.w	r2, r2, #4
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	e02c      	b.n	8003c26 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d028      	beq.n	8003c26 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d01c      	beq.n	8003c16 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0210 	orr.w	r2, r2, #16
 8003bfa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d110      	bne.n	8003c26 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	619a      	str	r2, [r3, #24]
 8003c14:	e007      	b.n	8003c26 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0220 	orr.w	r2, r2, #32
 8003c24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c3e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5a:	d115      	bne.n	8003c88 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	3b01      	subs	r3, #1
 8003c68:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c6a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	3b01      	subs	r3, #1
 8003c72:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c86:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f814 	bl	8003ccc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40006400 	.word	0x40006400
 8003cc8:	40006500 	.word	0x40006500

08003ccc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003cd4:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003cd6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	041a      	lsls	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e005      	b.n	8003d5a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3304      	adds	r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3f3      	bcc.n	8003d4e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	4000a400 	.word	0x4000a400

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d86:	e15a      	b.n	800403e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 814c 	beq.w	8004038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d005      	beq.n	8003db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d130      	bne.n	8003e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dee:	2201      	movs	r2, #1
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0201 	and.w	r2, r3, #1
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d017      	beq.n	8003e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d123      	bne.n	8003eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	6939      	ldr	r1, [r7, #16]
 8003ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0203 	and.w	r2, r3, #3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80a6 	beq.w	8004038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eec:	4b5b      	ldr	r3, [pc, #364]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef8:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_GPIO_Init+0x2e4>)
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f04:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f2e:	d01f      	beq.n	8003f70 <HAL_GPIO_Init+0x1f8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_GPIO_Init+0x2ec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d019      	beq.n	8003f6c <HAL_GPIO_Init+0x1f4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <HAL_GPIO_Init+0x2f0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x1f0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a4a      	ldr	r2, [pc, #296]	; (800406c <HAL_GPIO_Init+0x2f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1ec>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a49      	ldr	r2, [pc, #292]	; (8004070 <HAL_GPIO_Init+0x2f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1e8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_GPIO_Init+0x2fc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1e4>
 8003f58:	2305      	movs	r3, #5
 8003f5a:	e00a      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	e008      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e006      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f64:	2303      	movs	r3, #3
 8003f66:	e004      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e002      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f70:	2300      	movs	r3, #0
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	f002 0203 	and.w	r2, r2, #3
 8003f78:	0092      	lsls	r2, r2, #2
 8003f7a:	4093      	lsls	r3, r2
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f82:	4937      	ldr	r1, [pc, #220]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fe4:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004008:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_GPIO_Init+0x300>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_GPIO_Init+0x300>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004032:	4a11      	ldr	r2, [pc, #68]	; (8004078 <HAL_GPIO_Init+0x300>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f47f ae9d 	bne.w	8003d88 <HAL_GPIO_Init+0x10>
  }
}
 800404e:	bf00      	nop
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40021000 	.word	0x40021000
 8004060:	40010000 	.word	0x40010000
 8004064:	48000400 	.word	0x48000400
 8004068:	48000800 	.word	0x48000800
 800406c:	48000c00 	.word	0x48000c00
 8004070:	48001000 	.word	0x48001000
 8004074:	48001400 	.word	0x48001400
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
 8004088:	4613      	mov	r3, r2
 800408a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d141      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ba:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d131      	bne.n	800412c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ce:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e0:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040e8:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2232      	movs	r2, #50	; 0x32
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	0c9b      	lsrs	r3, r3, #18
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fe:	e002      	b.n	8004106 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d102      	bne.n	800411a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f2      	bne.n	8004100 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004126:	d158      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e057      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800413c:	e04d      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d141      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004152:	d131      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416c:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2232      	movs	r2, #50	; 0x32
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	e002      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419e:	d102      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f2      	bne.n	800418c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d112      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e011      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041c8:	e007      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40007000 	.word	0x40007000
 80041ec:	20000000 	.word	0x20000000
 80041f0:	431bde83 	.word	0x431bde83

080041f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004202:	6093      	str	r3, [r2, #8]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e306      	b.n	8004834 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d075      	beq.n	800431e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	4b97      	ldr	r3, [pc, #604]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	4b94      	ldr	r3, [pc, #592]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x3e>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d002      	beq.n	8004258 <HAL_RCC_OscConfig+0x44>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d10b      	bne.n	8004270 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	4b8d      	ldr	r3, [pc, #564]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05b      	beq.n	800431c <HAL_RCC_OscConfig+0x108>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d157      	bne.n	800431c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e2e1      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d106      	bne.n	8004288 <HAL_RCC_OscConfig+0x74>
 800427a:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a84      	ldr	r2, [pc, #528]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e01d      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7f      	ldr	r3, [pc, #508]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7e      	ldr	r2, [pc, #504]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b7c      	ldr	r3, [pc, #496]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7b      	ldr	r2, [pc, #492]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 80042ac:	4b78      	ldr	r3, [pc, #480]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a77      	ldr	r2, [pc, #476]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	4b75      	ldr	r3, [pc, #468]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a74      	ldr	r2, [pc, #464]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fd38 	bl	8001d40 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd fd34 	bl	8001d40 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e2a6      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0xc0>
 80042f2:	e014      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fd24 	bl	8001d40 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fd20 	bl	8001d40 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e292      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430e:	4b60      	ldr	r3, [pc, #384]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0xe8>
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d075      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4b56      	ldr	r3, [pc, #344]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d102      	bne.n	800434a <HAL_RCC_OscConfig+0x136>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d002      	beq.n	8004350 <HAL_RCC_OscConfig+0x13c>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11f      	bne.n	8004390 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_OscConfig+0x154>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e265      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	4946      	ldr	r1, [pc, #280]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800437c:	4b45      	ldr	r3, [pc, #276]	; (8004494 <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd fc91 	bl	8001ca8 <HAL_InitTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d043      	beq.n	8004414 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e251      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fccc 	bl	8001d40 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fd fcc8 	bl	8001d40 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e23a      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	492d      	ldr	r1, [pc, #180]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 80043de:	e01a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fca8 	bl	8001d40 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fd fca4 	bl	8001d40 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e216      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1e0>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d041      	beq.n	80044a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01c      	beq.n	8004464 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fc81 	bl	8001d40 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fd fc7d 	bl	8001d40 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1ef      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ef      	beq.n	8004442 <HAL_RCC_OscConfig+0x22e>
 8004462:	e020      	b.n	80044a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <HAL_RCC_OscConfig+0x27c>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd fc64 	bl	8001d40 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800447a:	e00d      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fd fc60 	bl	8001d40 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d906      	bls.n	8004498 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1d2      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004498:	4b8c      	ldr	r3, [pc, #560]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ea      	bne.n	800447c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a6 	beq.w	8004600 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044b8:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2b4>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x2b6>
 80044c8:	2300      	movs	r3, #0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b7f      	ldr	r3, [pc, #508]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	4a7e      	ldr	r2, [pc, #504]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
 80044da:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fd fc1d 	bl	8001d40 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd fc19 	bl	8001d40 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e18b      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451c:	4b6c      	ldr	r3, [pc, #432]	; (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <HAL_RCC_OscConfig+0x32e>
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a65      	ldr	r2, [pc, #404]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004540:	e024      	b.n	800458c <HAL_RCC_OscConfig+0x378>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d110      	bne.n	800456c <HAL_RCC_OscConfig+0x358>
 800454a:	4b60      	ldr	r3, [pc, #384]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	4a5e      	ldr	r2, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f043 0304 	orr.w	r3, r3, #4
 8004556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455a:	4b5c      	ldr	r3, [pc, #368]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800456a:	e00f      	b.n	800458c <HAL_RCC_OscConfig+0x378>
 800456c:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	4a52      	ldr	r2, [pc, #328]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d016      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fbd4 	bl	8001d40 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fd fbd0 	bl	8001d40 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e140      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ed      	beq.n	800459c <HAL_RCC_OscConfig+0x388>
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fd fbbd 	bl	8001d40 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fd fbb9 	bl	8001d40 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e129      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ed      	bne.n	80045ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b35      	ldr	r3, [pc, #212]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	4a34      	ldr	r2, [pc, #208]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d03c      	beq.n	8004686 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01c      	beq.n	800464e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fb8c 	bl	8001d40 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800462c:	f7fd fb88 	bl	8001d40 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0fa      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <HAL_RCC_OscConfig+0x418>
 800464c:	e01b      	b.n	8004686 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004654:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fd fb6f 	bl	8001d40 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004666:	f7fd fb6b 	bl	8001d40 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0dd      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ef      	bne.n	8004666 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80d1 	beq.w	8004832 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b0c      	cmp	r3, #12
 800469a:	f000 808b 	beq.w	80047b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d15e      	bne.n	8004764 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd fb45 	bl	8001d40 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b8:	e00c      	b.n	80046d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd fb41 	bl	8001d40 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d905      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0b3      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_OscConfig+0x628>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ec      	bne.n	80046ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e0:	4b56      	ldr	r3, [pc, #344]	; (800483c <HAL_RCC_OscConfig+0x628>)
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_RCC_OscConfig+0x62c>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6a11      	ldr	r1, [r2, #32]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046f0:	3a01      	subs	r2, #1
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	4311      	orrs	r1, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046fa:	0212      	lsls	r2, r2, #8
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004702:	0852      	lsrs	r2, r2, #1
 8004704:	3a01      	subs	r2, #1
 8004706:	0552      	lsls	r2, r2, #21
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0652      	lsls	r2, r2, #25
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800471a:	06d2      	lsls	r2, r2, #27
 800471c:	430a      	orrs	r2, r1
 800471e:	4947      	ldr	r1, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004720:	4313      	orrs	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004724:	4b45      	ldr	r3, [pc, #276]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a44      	ldr	r2, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x628>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004730:	4b42      	ldr	r3, [pc, #264]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a41      	ldr	r2, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd fb00 	bl	8001d40 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd fafc 	bl	8001d40 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e06e      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x530>
 8004762:	e066      	b.n	8004832 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a34      	ldr	r2, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x628>)
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCC_OscConfig+0x628>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a2e      	ldr	r2, [pc, #184]	; (800483c <HAL_RCC_OscConfig+0x628>)
 8004782:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd fad8 	bl	8001d40 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd fad4 	bl	8001d40 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e046      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <HAL_RCC_OscConfig+0x628>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x580>
 80047b2:	e03e      	b.n	8004832 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e039      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x628>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 0203 	and.w	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d12c      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	3b01      	subs	r3, #1
 80047e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d123      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d11b      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d113      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d109      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	019f800c 	.word	0x019f800c

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e11e      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b91      	ldr	r3, [pc, #580]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d910      	bls.n	800488c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 020f 	bic.w	r2, r3, #15
 8004872:	498c      	ldr	r1, [pc, #560]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b8a      	ldr	r3, [pc, #552]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e106      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d073      	beq.n	8004980 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d129      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a0:	4b81      	ldr	r3, [pc, #516]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0f4      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048b0:	f000 f99e 	bl	8004bf0 <RCC_GetSysClockFreqFromPLLSource>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4a7c      	ldr	r2, [pc, #496]	; (8004aac <HAL_RCC_ClockConfig+0x268>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d93f      	bls.n	800493e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048be:	4b7a      	ldr	r3, [pc, #488]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d033      	beq.n	800493e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d12f      	bne.n	800493e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048de:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e6:	4a70      	ldr	r2, [pc, #448]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e024      	b.n	800493e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d107      	bne.n	800490c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048fc:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0c6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0be      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800491c:	f000 f8ce 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a61      	ldr	r2, [pc, #388]	; (8004aac <HAL_RCC_ClockConfig+0x268>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d909      	bls.n	800493e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800492a:	4b5f      	ldr	r3, [pc, #380]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004932:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4957      	ldr	r1, [pc, #348]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004950:	f7fd f9f6 	bl	8001d40 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fd f9f2 	bl	8001d40 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e095      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d023      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004998:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800499e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049b0:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049b8:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4936      	ldr	r1, [pc, #216]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4a32      	ldr	r2, [pc, #200]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e6:	4b2f      	ldr	r3, [pc, #188]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d21d      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 020f 	bic.w	r2, r3, #15
 80049fc:	4929      	ldr	r1, [pc, #164]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a04:	f7fd f99c 	bl	8001d40 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fd f998 	bl	8001d40 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e03b      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1ed      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4917      	ldr	r1, [pc, #92]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	490f      	ldr	r1, [pc, #60]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6e:	f000 f825 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	490c      	ldr	r1, [pc, #48]	; (8004ab0 <HAL_RCC_ClockConfig+0x26c>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x270>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd f908 	bl	8001ca8 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	04c4b400 	.word	0x04c4b400
 8004ab0:	080089a0 	.word	0x080089a0
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e047      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e03e      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d136      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	3301      	adds	r3, #1
 8004b08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1a:	68d2      	ldr	r2, [r2, #12]
 8004b1c:	0a12      	lsrs	r2, r2, #8
 8004b1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	617b      	str	r3, [r7, #20]
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	0a12      	lsrs	r2, r2, #8
 8004b38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
      break;
 8004b42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0e5b      	lsrs	r3, r3, #25
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e001      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b64:	693b      	ldr	r3, [r7, #16]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	007a1200 	.word	0x007a1200

08004b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000000 	.word	0x20000000

08004b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b9c:	f7ff fff0 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4904      	ldr	r1, [pc, #16]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	080089b0 	.word	0x080089b0

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bc8:	f7ff ffda 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	080089b0 	.word	0x080089b0

08004bf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d10c      	bne.n	8004c2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1e:	68d2      	ldr	r2, [r2, #12]
 8004c20:	0a12      	lsrs	r2, r2, #8
 8004c22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	617b      	str	r3, [r7, #20]
    break;
 8004c2c:	e00c      	b.n	8004c48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2e:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	0a12      	lsrs	r2, r2, #8
 8004c3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    break;
 8004c46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	0e5b      	lsrs	r3, r3, #25
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c62:	687b      	ldr	r3, [r7, #4]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40021000 	.word	0x40021000
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c84:	2300      	movs	r3, #0
 8004c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8098 	beq.w	8004dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	4b40      	ldr	r3, [pc, #256]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	4a3f      	ldr	r2, [pc, #252]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cd2:	f7fd f835 	bl	8001d40 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cd8:	e009      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fd f831 	bl	8001d40 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d902      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	74fb      	strb	r3, [r7, #19]
        break;
 8004cec:	e005      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ef      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d159      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01e      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d019      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d38:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fff1 	bl	8001d40 <HAL_GetTick>
 8004d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d60:	e00b      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fc ffed 	bl	8001d40 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	74fb      	strb	r3, [r7, #19]
            break;
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ec      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004da4:	e008      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	74bb      	strb	r3, [r7, #18]
 8004daa:	e005      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db8:	7c7b      	ldrb	r3, [r7, #17]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4ba6      	ldr	r3, [pc, #664]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4aa5      	ldr	r2, [pc, #660]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd6:	4ba0      	ldr	r3, [pc, #640]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f023 0203 	bic.w	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	499c      	ldr	r1, [pc, #624]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df8:	4b97      	ldr	r3, [pc, #604]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f023 020c 	bic.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4994      	ldr	r1, [pc, #592]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e1a:	4b8f      	ldr	r3, [pc, #572]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	498b      	ldr	r1, [pc, #556]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e3c:	4b86      	ldr	r3, [pc, #536]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	4983      	ldr	r1, [pc, #524]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e5e:	4b7e      	ldr	r3, [pc, #504]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	497a      	ldr	r1, [pc, #488]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e80:	4b75      	ldr	r3, [pc, #468]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	4972      	ldr	r1, [pc, #456]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ea2:	4b6d      	ldr	r3, [pc, #436]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4969      	ldr	r1, [pc, #420]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ec4:	4b64      	ldr	r3, [pc, #400]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4961      	ldr	r1, [pc, #388]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4958      	ldr	r1, [pc, #352]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f08:	4b53      	ldr	r3, [pc, #332]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	4950      	ldr	r1, [pc, #320]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f28:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f40:	4b45      	ldr	r3, [pc, #276]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	4942      	ldr	r1, [pc, #264]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d105      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f60:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f78:	4b37      	ldr	r3, [pc, #220]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4934      	ldr	r1, [pc, #208]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f98:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb0:	4b29      	ldr	r3, [pc, #164]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbe:	4926      	ldr	r1, [pc, #152]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd0:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	4918      	ldr	r1, [pc, #96]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a12      	ldr	r2, [pc, #72]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800504c:	7cbb      	ldrb	r3, [r7, #18]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e049      	b.n	8005102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fbf2 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fc56 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e049      	b.n	80051b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f841 	bl	80051b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 fbff 	bl	800594c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0202 	mvn.w	r2, #2
 80051f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fb7e 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb70 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fb81 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0204 	mvn.w	r2, #4
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fb54 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fb46 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb57 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b08      	cmp	r3, #8
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b08      	cmp	r3, #8
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0208 	mvn.w	r2, #8
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2204      	movs	r2, #4
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fb2a 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb1c 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb2d 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fb00 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 faf2 	bl	80058fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb03 	bl	8005924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0201 	mvn.w	r2, #1
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 facc 	bl	80058e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d10e      	bne.n	800537c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d107      	bne.n	800537c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 f836 	bl	80063e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d10e      	bne.n	80053aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d107      	bne.n	80053aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f829 	bl	80063fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d10e      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fab1 	bl	8005938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0220 	mvn.w	r2, #32
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 ffe9 	bl	80063d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005410:	d10f      	bne.n	8005432 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800541c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005420:	d107      	bne.n	8005432 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ffef 	bl	8006410 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800543c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005440:	d10f      	bne.n	8005462 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800544c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005450:	d107      	bne.n	8005462 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ffe1 	bl	8006424 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005470:	d10f      	bne.n	8005492 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 ffd3 	bl	8006438 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800549c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a0:	d10f      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 ffc5 	bl	800644c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0ff      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b14      	cmp	r3, #20
 80054f6:	f200 80f0 	bhi.w	80056da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005555 	.word	0x08005555
 8005504:	080056db 	.word	0x080056db
 8005508:	080056db 	.word	0x080056db
 800550c:	080056db 	.word	0x080056db
 8005510:	08005595 	.word	0x08005595
 8005514:	080056db 	.word	0x080056db
 8005518:	080056db 	.word	0x080056db
 800551c:	080056db 	.word	0x080056db
 8005520:	080055d7 	.word	0x080055d7
 8005524:	080056db 	.word	0x080056db
 8005528:	080056db 	.word	0x080056db
 800552c:	080056db 	.word	0x080056db
 8005530:	08005617 	.word	0x08005617
 8005534:	080056db 	.word	0x080056db
 8005538:	080056db 	.word	0x080056db
 800553c:	080056db 	.word	0x080056db
 8005540:	08005659 	.word	0x08005659
 8005544:	080056db 	.word	0x080056db
 8005548:	080056db 	.word	0x080056db
 800554c:	080056db 	.word	0x080056db
 8005550:	08005699 	.word	0x08005699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa86 	bl	8005a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0208 	orr.w	r2, r2, #8
 800556e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	619a      	str	r2, [r3, #24]
      break;
 8005592:	e0a5      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 faf6 	bl	8005b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	619a      	str	r2, [r3, #24]
      break;
 80055d4:	e084      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb5f 	bl	8005ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0208 	orr.w	r2, r2, #8
 80055f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0204 	bic.w	r2, r2, #4
 8005600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	61da      	str	r2, [r3, #28]
      break;
 8005614:	e064      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fbc7 	bl	8005db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	61da      	str	r2, [r3, #28]
      break;
 8005656:	e043      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fc30 	bl	8005ec4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0208 	orr.w	r2, r2, #8
 8005672:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005696:	e023      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fc74 	bl	8005f8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	021a      	lsls	r2, r3, #8
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056d8:	e002      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop

080056f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIM_ConfigClockSource+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e0de      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x1da>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800572e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a63      	ldr	r2, [pc, #396]	; (80058d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	f000 80a9 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005750:	4a61      	ldr	r2, [pc, #388]	; (80058d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	f200 80ae 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005758:	4a60      	ldr	r2, [pc, #384]	; (80058dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	f000 80a1 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005760:	4a5e      	ldr	r2, [pc, #376]	; (80058dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	f200 80a6 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800576a:	4293      	cmp	r3, r2
 800576c:	f000 8099 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005770:	4a5b      	ldr	r2, [pc, #364]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	f200 809e 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005778:	4a5a      	ldr	r2, [pc, #360]	; (80058e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	f000 8091 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005780:	4a58      	ldr	r2, [pc, #352]	; (80058e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	f200 8096 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005788:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800578c:	f000 8089 	beq.w	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005794:	f200 808e 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d03e      	beq.n	800581c <HAL_TIM_ConfigClockSource+0x128>
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	f200 8087 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	f000 8086 	beq.w	80058ba <HAL_TIM_ConfigClockSource+0x1c6>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d87f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d01a      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0xfa>
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d87b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d050      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x16e>
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d877      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d03c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x14e>
 80057c8:	2b50      	cmp	r3, #80	; 0x50
 80057ca:	d873      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d058      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x18e>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d86f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d064      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d86b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d060      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d867      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d05a      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80057ec:	e062      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f000 fca7 	bl	8006150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	609a      	str	r2, [r3, #8]
      break;
 800581a:	e04f      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6899      	ldr	r1, [r3, #8]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f000 fc90 	bl	8006150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583e:	609a      	str	r2, [r3, #8]
      break;
 8005840:	e03c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 fc02 	bl	8006058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2150      	movs	r1, #80	; 0x50
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fc5b 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005860:	e02c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	f000 fc21 	bl	80060b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2160      	movs	r1, #96	; 0x60
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fc4b 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005880:	e01c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	f000 fbe2 	bl	8006058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2140      	movs	r1, #64	; 0x40
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fc3b 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 80058a0:	e00c      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f000 fc32 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 80058b2:	e003      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	e000      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80058ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	00100070 	.word	0x00100070
 80058dc:	00100040 	.word	0x00100040
 80058e0:	00100030 	.word	0x00100030
 80058e4:	00100020 	.word	0x00100020

080058e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <TIM_Base_SetConfig+0x108>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a38      	ldr	r2, [pc, #224]	; (8005a58 <TIM_Base_SetConfig+0x10c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x38>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a37      	ldr	r2, [pc, #220]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2d      	ldr	r2, [pc, #180]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <TIM_Base_SetConfig+0x108>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <TIM_Base_SetConfig+0x10c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <TIM_Base_SetConfig+0x104>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <TIM_Base_SetConfig+0x110>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0f      	ldr	r2, [pc, #60]	; (8005a64 <TIM_Base_SetConfig+0x118>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0xe8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <TIM_Base_SetConfig+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <TIM_OC1_SetConfig+0x10c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_OC1_SetConfig+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_OC1_SetConfig+0x110>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_OC1_SetConfig+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_OC1_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_OC1_SetConfig+0x80>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <TIM_OC1_SetConfig+0x118>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC1_SetConfig+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10c      	bne.n	8005b06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0308 	bic.w	r3, r3, #8
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 0304 	bic.w	r3, r3, #4
 8005b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <TIM_OC1_SetConfig+0x10c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00f      	beq.n	8005b2e <TIM_OC1_SetConfig+0xc2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <TIM_OC1_SetConfig+0x110>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <TIM_OC1_SetConfig+0xc2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <TIM_OC1_SetConfig+0x114>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <TIM_OC1_SetConfig+0xc2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <TIM_OC1_SetConfig+0x118>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_OC1_SetConfig+0xc2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d111      	bne.n	8005b52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0210 	bic.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0320 	bic.w	r3, r3, #32
 8005bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <TIM_OC2_SetConfig+0x100>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC2_SetConfig+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <TIM_OC2_SetConfig+0x104>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d10d      	bne.n	8005c14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <TIM_OC2_SetConfig+0x100>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC2_SetConfig+0xb0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <TIM_OC2_SetConfig+0x104>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC2_SetConfig+0xb0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <TIM_OC2_SetConfig+0x108>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC2_SetConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <TIM_OC2_SetConfig+0x10c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC2_SetConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <TIM_OC2_SetConfig+0x110>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d113      	bne.n	8005c64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40013400 	.word	0x40013400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a27      	ldr	r2, [pc, #156]	; (8005d9c <TIM_OC3_SetConfig+0xfc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC3_SetConfig+0x6a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <TIM_OC3_SetConfig+0x100>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10d      	bne.n	8005d26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <TIM_OC3_SetConfig+0xfc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00f      	beq.n	8005d4e <TIM_OC3_SetConfig+0xae>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <TIM_OC3_SetConfig+0x100>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <TIM_OC3_SetConfig+0xae>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1a      	ldr	r2, [pc, #104]	; (8005da4 <TIM_OC3_SetConfig+0x104>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_OC3_SetConfig+0xae>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <TIM_OC3_SetConfig+0x108>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0xae>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <TIM_OC3_SetConfig+0x10c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d113      	bne.n	8005d76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40014800 	.word	0x40014800

08005db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <TIM_OC4_SetConfig+0x100>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x6c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <TIM_OC4_SetConfig+0x104>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10d      	bne.n	8005e38 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <TIM_OC4_SetConfig+0x100>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00f      	beq.n	8005e60 <TIM_OC4_SetConfig+0xb0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <TIM_OC4_SetConfig+0x104>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <TIM_OC4_SetConfig+0xb0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <TIM_OC4_SetConfig+0x108>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <TIM_OC4_SetConfig+0xb0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <TIM_OC4_SetConfig+0x10c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC4_SetConfig+0xb0>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <TIM_OC4_SetConfig+0x110>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d113      	bne.n	8005e88 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	019b      	lsls	r3, r3, #6
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <TIM_OC5_SetConfig+0xb4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_OC5_SetConfig+0x7a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC5_SetConfig+0xb8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_OC5_SetConfig+0x7a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC5_SetConfig+0xbc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_OC5_SetConfig+0x7a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC5_SetConfig+0xc0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC5_SetConfig+0x7a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <TIM_OC5_SetConfig+0xc4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d109      	bne.n	8005f52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	051b      	lsls	r3, r3, #20
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	; (8006044 <TIM_OC6_SetConfig+0xb8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00f      	beq.n	8006008 <TIM_OC6_SetConfig+0x7c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <TIM_OC6_SetConfig+0xbc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_OC6_SetConfig+0x7c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <TIM_OC6_SetConfig+0xc0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_OC6_SetConfig+0x7c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <TIM_OC6_SetConfig+0xc4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC6_SetConfig+0x7c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a14      	ldr	r2, [pc, #80]	; (8006054 <TIM_OC6_SetConfig+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d109      	bne.n	800601c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40012c00 	.word	0x40012c00
 8006048:	40013400 	.word	0x40013400
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800

08006058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f023 030a 	bic.w	r3, r3, #10
 8006094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b087      	sub	sp, #28
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0210 	bic.w	r2, r3, #16
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	f043 0307 	orr.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e065      	b.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2c      	ldr	r2, [pc, #176]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d108      	bne.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d013      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a18      	ldr	r2, [pc, #96]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a17      	ldr	r2, [pc, #92]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a12      	ldr	r2, [pc, #72]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10c      	bne.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40014000 	.word	0x40014000

08006294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e087      	b.n	80063c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a27      	ldr	r2, [pc, #156]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d106      	bne.n	800634c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d126      	bne.n	80063ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	051b      	lsls	r3, r3, #20
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a0d      	ldr	r2, [pc, #52]	; (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d106      	bne.n	80063ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	40012c00 	.word	0x40012c00
 80063d0:	40013400 	.word	0x40013400

080063d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e042      	b.n	80064f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fb faff 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2224      	movs	r2, #36	; 0x24
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fc62 	bl	8006d6c <UART_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e022      	b.n	80064f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 ff22 	bl	8007304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 ffa9 	bl	8007448 <UART_CheckIdleState>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006500:	b480      	push	{r7}
 8006502:	b091      	sub	sp, #68	; 0x44
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006514:	2b20      	cmp	r3, #32
 8006516:	f040 808c 	bne.w	8006632 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit_IT+0x26>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e084      	b.n	8006634 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_UART_Transmit_IT+0x38>
 8006534:	2302      	movs	r3, #2
 8006536:	e07d      	b.n	8006634 <HAL_UART_Transmit_IT+0x134>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2221      	movs	r2, #33	; 0x21
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006574:	d12e      	bne.n	80065d4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d107      	bne.n	8006590 <HAL_UART_Transmit_IT+0x90>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a2d      	ldr	r2, [pc, #180]	; (8006640 <HAL_UART_Transmit_IT+0x140>)
 800658c:	675a      	str	r2, [r3, #116]	; 0x74
 800658e:	e002      	b.n	8006596 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <HAL_UART_Transmit_IT+0x144>)
 8006594:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065be:	637a      	str	r2, [r7, #52]	; 0x34
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <HAL_UART_Transmit_IT+0x9e>
 80065d2:	e02c      	b.n	800662e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d107      	bne.n	80065ee <HAL_UART_Transmit_IT+0xee>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_UART_Transmit_IT+0x148>)
 80065ea:	675a      	str	r2, [r3, #116]	; 0x74
 80065ec:	e002      	b.n	80065f4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a16      	ldr	r2, [pc, #88]	; (800664c <HAL_UART_Transmit_IT+0x14c>)
 80065f2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	61bb      	str	r3, [r7, #24]
   return(result);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e6      	bne.n	80065fc <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
  }
}
 8006634:	4618      	mov	r0, r3
 8006636:	3744      	adds	r7, #68	; 0x44
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	08007c17 	.word	0x08007c17
 8006644:	08007b37 	.word	0x08007b37
 8006648:	08007a75 	.word	0x08007a75
 800664c:	080079bd 	.word	0x080079bd

08006650 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	2b20      	cmp	r3, #32
 8006666:	d142      	bne.n	80066ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Receive_IT+0x24>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e03b      	b.n	80066f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_UART_Receive_IT+0x36>
 8006682:	2302      	movs	r3, #2
 8006684:	e034      	b.n	80066f0 <HAL_UART_Receive_IT+0xa0>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_UART_Receive_IT+0xa8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01f      	beq.n	80066de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d018      	beq.n	80066de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	69f9      	ldr	r1, [r7, #28]
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e6      	bne.n	80066ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	461a      	mov	r2, r3
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 ffc3 	bl	8007670 <UART_Start_Receive_IT>
 80066ea:	4603      	mov	r3, r0
 80066ec:	e000      	b.n	80066f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40008000 	.word	0x40008000

080066fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b0ba      	sub	sp, #232	; 0xe8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006726:	f640 030f 	movw	r3, #2063	; 0x80f
 800672a:	4013      	ands	r3, r2
 800672c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11b      	bne.n	8006770 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d105      	bne.n	800675c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 82d6 	beq.w	8006d12 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
      }
      return;
 800676e:	e2d0      	b.n	8006d12 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 811f 	beq.w	80069b8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800677a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <HAL_UART_IRQHandler+0x2b0>)
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800678a:	4b89      	ldr	r3, [pc, #548]	; (80069b0 <HAL_UART_IRQHandler+0x2b4>)
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8112 	beq.w	80069b8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d011      	beq.n	80067c4 <HAL_UART_IRQHandler+0xc8>
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d011      	beq.n	80067f4 <HAL_UART_IRQHandler+0xf8>
 80067d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2202      	movs	r2, #2
 80067e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d011      	beq.n	8006824 <HAL_UART_IRQHandler+0x128>
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2204      	movs	r2, #4
 8006812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800681a:	f043 0202 	orr.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d017      	beq.n	8006860 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800683c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006840:	4b5a      	ldr	r3, [pc, #360]	; (80069ac <HAL_UART_IRQHandler+0x2b0>)
 8006842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2208      	movs	r2, #8
 800684e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006856:	f043 0208 	orr.w	r2, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <HAL_UART_IRQHandler+0x196>
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 823c 	beq.w	8006d16 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d013      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d105      	bne.n	80068c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04f      	beq.n	8006996 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 ffe4 	bl	80078c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d141      	bne.n	800698e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800694e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d013      	beq.n	8006986 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006962:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <HAL_UART_IRQHandler+0x2b8>)
 8006964:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	4618      	mov	r0, r3
 800696c:	f7fc ffec 	bl	8003948 <HAL_DMA_Abort_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d017      	beq.n	80069a6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	e00f      	b.n	80069a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9da 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	e00b      	b.n	80069a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9d6 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e007      	b.n	80069a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9d2 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80069a4:	e1b7      	b.n	8006d16 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a6:	bf00      	nop
    return;
 80069a8:	e1b5      	b.n	8006d16 <HAL_UART_IRQHandler+0x61a>
 80069aa:	bf00      	nop
 80069ac:	10000001 	.word	0x10000001
 80069b0:	04000120 	.word	0x04000120
 80069b4:	08007991 	.word	0x08007991

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f040 814a 	bne.w	8006c56 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8143 	beq.w	8006c56 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 813c 	beq.w	8006c56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2210      	movs	r2, #16
 80069e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	f040 80b5 	bne.w	8006b60 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8187 	beq.w	8006d1a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a16:	429a      	cmp	r2, r3
 8006a18:	f080 817f 	bcs.w	8006d1a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 8086 	bne.w	8006b44 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1da      	bne.n	8006a38 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e1      	bne.n	8006a82 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ae2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ae4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b14:	f023 0310 	bic.w	r3, r3, #16
 8006b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b26:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e4      	bne.n	8006b04 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fc fea9 	bl	8003896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8fb 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5e:	e0dc      	b.n	8006d1a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80ce 	beq.w	8006d1e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80c9 	beq.w	8006d1e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e4      	bne.n	8006b8c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bea:	633a      	str	r2, [r7, #48]	; 0x30
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e1      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0310 	bic.w	r3, r3, #16
 8006c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	617b      	str	r3, [r7, #20]
   return(result);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f880 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c54:	e063      	b.n	8006d1e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00e      	beq.n	8006c80 <HAL_UART_IRQHandler+0x584>
 8006c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fcc9 	bl	8008610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c7e:	e051      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d014      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d03a      	beq.n	8006d22 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
    }
    return;
 8006cb4:	e035      	b.n	8006d22 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x5da>
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f816 	bl	8007d00 <UART_EndTransmit_IT>
    return;
 8006cd4:	e026      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x5fa>
 8006ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fca2 	bl	8008638 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cf4:	e016      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_UART_IRQHandler+0x628>
 8006d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da0c      	bge.n	8006d24 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fc8a 	bl	8008624 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d10:	e008      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
      return;
 8006d12:	bf00      	nop
 8006d14:	e006      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
    return;
 8006d16:	bf00      	nop
 8006d18:	e004      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
      return;
 8006d1a:	bf00      	nop
 8006d1c:	e002      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
      return;
 8006d1e:	bf00      	nop
 8006d20:	e000      	b.n	8006d24 <HAL_UART_IRQHandler+0x628>
    return;
 8006d22:	bf00      	nop
  }
}
 8006d24:	37e8      	adds	r7, #232	; 0xe8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop

08006d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d70:	b08c      	sub	sp, #48	; 0x30
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4bab      	ldr	r3, [pc, #684]	; (8007048 <UART_SetConfig+0x2dc>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4aa0      	ldr	r2, [pc, #640]	; (800704c <UART_SetConfig+0x2e0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006de2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	f023 010f 	bic.w	r1, r3, #15
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a91      	ldr	r2, [pc, #580]	; (8007050 <UART_SetConfig+0x2e4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d125      	bne.n	8006e5c <UART_SetConfig+0xf0>
 8006e10:	4b90      	ldr	r3, [pc, #576]	; (8007054 <UART_SetConfig+0x2e8>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d81a      	bhi.n	8006e54 <UART_SetConfig+0xe8>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0xb8>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e45 	.word	0x08006e45
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	e0d6      	b.n	8006fea <UART_SetConfig+0x27e>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e0d2      	b.n	8006fea <UART_SetConfig+0x27e>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e0ce      	b.n	8006fea <UART_SetConfig+0x27e>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e0ca      	b.n	8006fea <UART_SetConfig+0x27e>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e0c6      	b.n	8006fea <UART_SetConfig+0x27e>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a7d      	ldr	r2, [pc, #500]	; (8007058 <UART_SetConfig+0x2ec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d138      	bne.n	8006ed8 <UART_SetConfig+0x16c>
 8006e66:	4b7b      	ldr	r3, [pc, #492]	; (8007054 <UART_SetConfig+0x2e8>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f003 030c 	and.w	r3, r3, #12
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d82d      	bhi.n	8006ed0 <UART_SetConfig+0x164>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x110>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006eb9 	.word	0x08006eb9
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	e098      	b.n	8006fea <UART_SetConfig+0x27e>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ebe:	e094      	b.n	8006fea <UART_SetConfig+0x27e>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec6:	e090      	b.n	8006fea <UART_SetConfig+0x27e>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ece:	e08c      	b.n	8006fea <UART_SetConfig+0x27e>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e088      	b.n	8006fea <UART_SetConfig+0x27e>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5f      	ldr	r2, [pc, #380]	; (800705c <UART_SetConfig+0x2f0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d125      	bne.n	8006f2e <UART_SetConfig+0x1c2>
 8006ee2:	4b5c      	ldr	r3, [pc, #368]	; (8007054 <UART_SetConfig+0x2e8>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eec:	2b30      	cmp	r3, #48	; 0x30
 8006eee:	d016      	beq.n	8006f1e <UART_SetConfig+0x1b2>
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d818      	bhi.n	8006f26 <UART_SetConfig+0x1ba>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d00a      	beq.n	8006f0e <UART_SetConfig+0x1a2>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d814      	bhi.n	8006f26 <UART_SetConfig+0x1ba>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <UART_SetConfig+0x19a>
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d008      	beq.n	8006f16 <UART_SetConfig+0x1aa>
 8006f04:	e00f      	b.n	8006f26 <UART_SetConfig+0x1ba>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0c:	e06d      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f14:	e069      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f16:	2304      	movs	r3, #4
 8006f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1c:	e065      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f24:	e061      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f26:	2310      	movs	r3, #16
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2c:	e05d      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a4b      	ldr	r2, [pc, #300]	; (8007060 <UART_SetConfig+0x2f4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d125      	bne.n	8006f84 <UART_SetConfig+0x218>
 8006f38:	4b46      	ldr	r3, [pc, #280]	; (8007054 <UART_SetConfig+0x2e8>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f42:	2bc0      	cmp	r3, #192	; 0xc0
 8006f44:	d016      	beq.n	8006f74 <UART_SetConfig+0x208>
 8006f46:	2bc0      	cmp	r3, #192	; 0xc0
 8006f48:	d818      	bhi.n	8006f7c <UART_SetConfig+0x210>
 8006f4a:	2b80      	cmp	r3, #128	; 0x80
 8006f4c:	d00a      	beq.n	8006f64 <UART_SetConfig+0x1f8>
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d814      	bhi.n	8006f7c <UART_SetConfig+0x210>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <UART_SetConfig+0x1f0>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d008      	beq.n	8006f6c <UART_SetConfig+0x200>
 8006f5a:	e00f      	b.n	8006f7c <UART_SetConfig+0x210>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f62:	e042      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f64:	2302      	movs	r3, #2
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6a:	e03e      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f72:	e03a      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f74:	2308      	movs	r3, #8
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7a:	e036      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f82:	e032      	b.n	8006fea <UART_SetConfig+0x27e>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a30      	ldr	r2, [pc, #192]	; (800704c <UART_SetConfig+0x2e0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d12a      	bne.n	8006fe4 <UART_SetConfig+0x278>
 8006f8e:	4b31      	ldr	r3, [pc, #196]	; (8007054 <UART_SetConfig+0x2e8>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f9c:	d01a      	beq.n	8006fd4 <UART_SetConfig+0x268>
 8006f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa2:	d81b      	bhi.n	8006fdc <UART_SetConfig+0x270>
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d00c      	beq.n	8006fc4 <UART_SetConfig+0x258>
 8006faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fae:	d815      	bhi.n	8006fdc <UART_SetConfig+0x270>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <UART_SetConfig+0x250>
 8006fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb8:	d008      	beq.n	8006fcc <UART_SetConfig+0x260>
 8006fba:	e00f      	b.n	8006fdc <UART_SetConfig+0x270>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	e012      	b.n	8006fea <UART_SetConfig+0x27e>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e00e      	b.n	8006fea <UART_SetConfig+0x27e>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e00a      	b.n	8006fea <UART_SetConfig+0x27e>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fda:	e006      	b.n	8006fea <UART_SetConfig+0x27e>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe2:	e002      	b.n	8006fea <UART_SetConfig+0x27e>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <UART_SetConfig+0x2e0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	f040 80a8 	bne.w	8007146 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d834      	bhi.n	8007068 <UART_SetConfig+0x2fc>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x298>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007029 	.word	0x08007029
 8007008:	08007069 	.word	0x08007069
 800700c:	08007031 	.word	0x08007031
 8007010:	08007069 	.word	0x08007069
 8007014:	08007037 	.word	0x08007037
 8007018:	08007069 	.word	0x08007069
 800701c:	08007069 	.word	0x08007069
 8007020:	08007069 	.word	0x08007069
 8007024:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7fd fdb6 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 800702c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800702e:	e021      	b.n	8007074 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <UART_SetConfig+0x2f8>)
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007034:	e01e      	b.n	8007074 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd fd41 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800703a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800703c:	e01a      	b.n	8007074 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007044:	e016      	b.n	8007074 <UART_SetConfig+0x308>
 8007046:	bf00      	nop
 8007048:	cfff69f3 	.word	0xcfff69f3
 800704c:	40008000 	.word	0x40008000
 8007050:	40013800 	.word	0x40013800
 8007054:	40021000 	.word	0x40021000
 8007058:	40004400 	.word	0x40004400
 800705c:	40004800 	.word	0x40004800
 8007060:	40004c00 	.word	0x40004c00
 8007064:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007072:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 812a 	beq.w	80072d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	4a9e      	ldr	r2, [pc, #632]	; (80072fc <UART_SetConfig+0x590>)
 8007082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007086:	461a      	mov	r2, r3
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	fbb3 f3f2 	udiv	r3, r3, r2
 800708e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	429a      	cmp	r2, r3
 800709e:	d305      	bcc.n	80070ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d903      	bls.n	80070b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070b2:	e10d      	b.n	80072d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2200      	movs	r2, #0
 80070b8:	60bb      	str	r3, [r7, #8]
 80070ba:	60fa      	str	r2, [r7, #12]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	4a8e      	ldr	r2, [pc, #568]	; (80072fc <UART_SetConfig+0x590>)
 80070c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2200      	movs	r2, #0
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d6:	f7f9 f89f 	bl	8000218 <__aeabi_uldivmod>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	020b      	lsls	r3, r1, #8
 80070ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070f0:	0202      	lsls	r2, r0, #8
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	6849      	ldr	r1, [r1, #4]
 80070f6:	0849      	lsrs	r1, r1, #1
 80070f8:	2000      	movs	r0, #0
 80070fa:	460c      	mov	r4, r1
 80070fc:	4605      	mov	r5, r0
 80070fe:	eb12 0804 	adds.w	r8, r2, r4
 8007102:	eb43 0905 	adc.w	r9, r3, r5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	469a      	mov	sl, r3
 800710e:	4693      	mov	fp, r2
 8007110:	4652      	mov	r2, sl
 8007112:	465b      	mov	r3, fp
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f7f9 f87e 	bl	8000218 <__aeabi_uldivmod>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4613      	mov	r3, r2
 8007122:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800712a:	d308      	bcc.n	800713e <UART_SetConfig+0x3d2>
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007132:	d204      	bcs.n	800713e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	e0c8      	b.n	80072d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007144:	e0c4      	b.n	80072d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714e:	d167      	bne.n	8007220 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007154:	2b08      	cmp	r3, #8
 8007156:	d828      	bhi.n	80071aa <UART_SetConfig+0x43e>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x3f4>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	080071ab 	.word	0x080071ab
 8007170:	0800719b 	.word	0x0800719b
 8007174:	080071ab 	.word	0x080071ab
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071ab 	.word	0x080071ab
 8007180:	080071a3 	.word	0x080071a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7fd fd08 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8007188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800718a:	e014      	b.n	80071b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718c:	f7fd fd1a 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8007190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007192:	e010      	b.n	80071b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007194:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <UART_SetConfig+0x594>)
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007198:	e00d      	b.n	80071b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719a:	f7fd fc8f 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800719e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a0:	e009      	b.n	80071b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071a8:	e005      	b.n	80071b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8089 	beq.w	80072d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	4a4e      	ldr	r2, [pc, #312]	; (80072fc <UART_SetConfig+0x590>)
 80071c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d0:	005a      	lsls	r2, r3, #1
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	441a      	add	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d916      	bls.n	8007218 <UART_SetConfig+0x4ac>
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d212      	bcs.n	8007218 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f023 030f 	bic.w	r3, r3, #15
 80071fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	b29a      	uxth	r2, r3
 8007208:	8bfb      	ldrh	r3, [r7, #30]
 800720a:	4313      	orrs	r3, r2
 800720c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	8bfa      	ldrh	r2, [r7, #30]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e05b      	b.n	80072d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800721e:	e057      	b.n	80072d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007224:	2b08      	cmp	r3, #8
 8007226:	d828      	bhi.n	800727a <UART_SetConfig+0x50e>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x4c4>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007255 	.word	0x08007255
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007265 	.word	0x08007265
 800723c:	0800727b 	.word	0x0800727b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800727b 	.word	0x0800727b
 8007248:	0800727b 	.word	0x0800727b
 800724c:	0800727b 	.word	0x0800727b
 8007250:	08007273 	.word	0x08007273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fd fca0 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800725a:	e014      	b.n	8007286 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fd fcb2 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8007260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007262:	e010      	b.n	8007286 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007264:	4b26      	ldr	r3, [pc, #152]	; (8007300 <UART_SetConfig+0x594>)
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007268:	e00d      	b.n	8007286 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726a:	f7fd fc27 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800726e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007270:	e009      	b.n	8007286 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007278:	e005      	b.n	8007286 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007284:	bf00      	nop
    }

    if (pclk != 0U)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d021      	beq.n	80072d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <UART_SetConfig+0x590>)
 8007292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007296:	461a      	mov	r2, r3
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	fbb3 f2f2 	udiv	r2, r3, r2
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	441a      	add	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d909      	bls.n	80072ca <UART_SetConfig+0x55e>
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072bc:	d205      	bcs.n	80072ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	e002      	b.n	80072d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2200      	movs	r2, #0
 80072e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3730      	adds	r7, #48	; 0x30
 80072f4:	46bd      	mov	sp, r7
 80072f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fa:	bf00      	nop
 80072fc:	080089b8 	.word	0x080089b8
 8007300:	00f42400 	.word	0x00f42400

08007304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01a      	beq.n	800741a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007402:	d10a      	bne.n	800741a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007458:	f7fa fc72 	bl	8001d40 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b08      	cmp	r3, #8
 800746a:	d10e      	bne.n	800748a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f82f 	bl	80074de <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e025      	b.n	80074d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b04      	cmp	r3, #4
 8007496:	d10e      	bne.n	80074b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f819 	bl	80074de <UART_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e00f      	b.n	80074d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b09c      	sub	sp, #112	; 0x70
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	603b      	str	r3, [r7, #0]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ee:	e0a9      	b.n	8007644 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	f000 80a5 	beq.w	8007644 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fa:	f7fa fc21 	bl	8001d40 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007506:	429a      	cmp	r2, r3
 8007508:	d302      	bcc.n	8007510 <UART_WaitOnFlagUntilTimeout+0x32>
 800750a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800750c:	2b00      	cmp	r3, #0
 800750e:	d140      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007524:	667b      	str	r3, [r7, #100]	; 0x64
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800752e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007530:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800753c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	663b      	str	r3, [r7, #96]	; 0x60
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007562:	64ba      	str	r2, [r7, #72]	; 0x48
 8007564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e5      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e069      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d051      	beq.n	8007644 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ae:	d149      	bne.n	8007644 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
 80075da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e6      	bne.n	80075ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3308      	adds	r3, #8
 80075f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	613b      	str	r3, [r7, #16]
   return(result);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	66bb      	str	r3, [r7, #104]	; 0x68
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3308      	adds	r3, #8
 800760a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800760c:	623a      	str	r2, [r7, #32]
 800760e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	69f9      	ldr	r1, [r7, #28]
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	61bb      	str	r3, [r7, #24]
   return(result);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e010      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4013      	ands	r3, r2
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	429a      	cmp	r2, r3
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	429a      	cmp	r2, r3
 8007660:	f43f af46 	beq.w	80074f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3770      	adds	r7, #112	; 0x70
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007670:	b480      	push	{r7}
 8007672:	b0a3      	sub	sp, #140	; 0x8c
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a2:	d10e      	bne.n	80076c2 <UART_Start_Receive_IT+0x52>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <UART_Start_Receive_IT+0x48>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076b6:	e02d      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076c0:	e028      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10d      	bne.n	80076e6 <UART_Start_Receive_IT+0x76>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <UART_Start_Receive_IT+0x6c>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	22ff      	movs	r2, #255	; 0xff
 80076d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076da:	e01b      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	227f      	movs	r2, #127	; 0x7f
 80076e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076e4:	e016      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ee:	d10d      	bne.n	800770c <UART_Start_Receive_IT+0x9c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <UART_Start_Receive_IT+0x92>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	227f      	movs	r2, #127	; 0x7f
 80076fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007700:	e008      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	223f      	movs	r2, #63	; 0x3f
 8007706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800770a:	e003      	b.n	8007714 <UART_Start_Receive_IT+0xa4>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2222      	movs	r2, #34	; 0x22
 8007720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007748:	673a      	str	r2, [r7, #112]	; 0x70
 800774a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800774e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e3      	bne.n	8007724 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007764:	d153      	bne.n	800780e <UART_Start_Receive_IT+0x19e>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	429a      	cmp	r2, r3
 8007770:	d34d      	bcc.n	800780e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d107      	bne.n	800778c <UART_Start_Receive_IT+0x11c>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a4b      	ldr	r2, [pc, #300]	; (80078b4 <UART_Start_Receive_IT+0x244>)
 8007788:	671a      	str	r2, [r3, #112]	; 0x70
 800778a:	e002      	b.n	8007792 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a4a      	ldr	r2, [pc, #296]	; (80078b8 <UART_Start_Receive_IT+0x248>)
 8007790:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01a      	beq.n	80077d8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e4      	bne.n	80077a2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80077fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_Start_Receive_IT+0x168>
 800780c:	e04a      	b.n	80078a4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	d107      	bne.n	8007828 <UART_Start_Receive_IT+0x1b8>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a26      	ldr	r2, [pc, #152]	; (80078bc <UART_Start_Receive_IT+0x24c>)
 8007824:	671a      	str	r2, [r3, #112]	; 0x70
 8007826:	e002      	b.n	800782e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a25      	ldr	r2, [pc, #148]	; (80078c0 <UART_Start_Receive_IT+0x250>)
 800782c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d019      	beq.n	8007872 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007852:	677b      	str	r3, [r7, #116]	; 0x74
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
 800785e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_Start_Receive_IT+0x1ce>
 8007870:	e018      	b.n	80078a4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	613b      	str	r3, [r7, #16]
   return(result);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f043 0320 	orr.w	r3, r3, #32
 8007886:	67bb      	str	r3, [r7, #120]	; 0x78
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007890:	623b      	str	r3, [r7, #32]
 8007892:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	69f9      	ldr	r1, [r7, #28]
 8007896:	6a3a      	ldr	r2, [r7, #32]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	61bb      	str	r3, [r7, #24]
   return(result);
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	378c      	adds	r7, #140	; 0x8c
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	08008311 	.word	0x08008311
 80078b8:	08008019 	.word	0x08008019
 80078bc:	08007eb7 	.word	0x08007eb7
 80078c0:	08007d57 	.word	0x08007d57

080078c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b095      	sub	sp, #84	; 0x54
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ea:	643b      	str	r3, [r7, #64]	; 0x40
 80078ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e6      	bne.n	80078cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3308      	adds	r3, #8
 8007904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	61fb      	str	r3, [r7, #28]
   return(result);
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	64bb      	str	r3, [r7, #72]	; 0x48
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e3      	bne.n	80078fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793a:	2b01      	cmp	r3, #1
 800793c:	d118      	bne.n	8007970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	60bb      	str	r3, [r7, #8]
   return(result);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f023 0310 	bic.w	r3, r3, #16
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	613b      	str	r3, [r7, #16]
   return(result);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007984:	bf00      	nop
 8007986:	3754      	adds	r7, #84	; 0x54
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff f9c6 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079b4:	bf00      	nop
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b08f      	sub	sp, #60	; 0x3c
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ca:	2b21      	cmp	r3, #33	; 0x21
 80079cc:	d14c      	bne.n	8007a68 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d132      	bne.n	8007a40 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a3e:	e013      	b.n	8007a68 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	781a      	ldrb	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007a68:	bf00      	nop
 8007a6a:	373c      	adds	r7, #60	; 0x3c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b091      	sub	sp, #68	; 0x44
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a82:	2b21      	cmp	r3, #33	; 0x21
 8007a84:	d151      	bne.n	8007b2a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d132      	bne.n	8007af8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	69b9      	ldr	r1, [r7, #24]
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	617b      	str	r3, [r7, #20]
   return(result);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e6      	bne.n	8007ac4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007af6:	e018      	b.n	8007b2a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b12:	1c9a      	adds	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007b2a:	bf00      	nop
 8007b2c:	3744      	adds	r7, #68	; 0x44
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b091      	sub	sp, #68	; 0x44
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	2b21      	cmp	r3, #33	; 0x21
 8007b46:	d160      	bne.n	8007c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b50:	e057      	b.n	8007c02 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d133      	bne.n	8007bc6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e6      	bne.n	8007b92 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007bc4:	e021      	b.n	8007c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d013      	beq.n	8007bfc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007bfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1a4      	bne.n	8007b52 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007c08:	e7ff      	b.n	8007c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007c0a:	bf00      	nop
 8007c0c:	3744      	adds	r7, #68	; 0x44
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b091      	sub	sp, #68	; 0x44
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c24:	2b21      	cmp	r3, #33	; 0x21
 8007c26:	d165      	bne.n	8007cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c30:	e05c      	b.n	8007cec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d133      	bne.n	8007ca6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e5      	bne.n	8007c3e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6979      	ldr	r1, [r7, #20]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007ca4:	e026      	b.n	8007cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d018      	beq.n	8007ce6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cc8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cce:	1c9a      	adds	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007cec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d19f      	bne.n	8007c32 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007cf2:	e7ff      	b.n	8007cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007cf4:	bf00      	nop
 8007cf6:	3744      	adds	r7, #68	; 0x44
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6979      	ldr	r1, [r7, #20]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	613b      	str	r3, [r7, #16]
   return(result);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe ffef 	bl	8006d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b096      	sub	sp, #88	; 0x58
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6e:	2b22      	cmp	r3, #34	; 0x22
 8007d70:	f040 8095 	bne.w	8007e9e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007d82:	b2d9      	uxtb	r1, r3
 8007d84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8e:	400a      	ands	r2, r1
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d178      	bne.n	8007eae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	647b      	str	r3, [r7, #68]	; 0x44
 8007ddc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e6      	bne.n	8007dbc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d12e      	bne.n	8007e96 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0310 	bic.w	r3, r3, #16
 8007e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	69b9      	ldr	r1, [r7, #24]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e6      	bne.n	8007e3e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d103      	bne.n	8007e86 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2210      	movs	r2, #16
 8007e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe ff60 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e94:	e00b      	b.n	8007eae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7f8 fe9a 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8007e9c:	e007      	b.n	8007eae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0208 	orr.w	r2, r2, #8
 8007eac:	619a      	str	r2, [r3, #24]
}
 8007eae:	bf00      	nop
 8007eb0:	3758      	adds	r7, #88	; 0x58
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b096      	sub	sp, #88	; 0x58
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ece:	2b22      	cmp	r3, #34	; 0x22
 8007ed0:	f040 8095 	bne.w	8007ffe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ee4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007ee8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eec:	4013      	ands	r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	1c9a      	adds	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d178      	bne.n	800800e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e6      	bne.n	8007f1c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3308      	adds	r3, #8
 8007f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d12e      	bne.n	8007ff6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f023 0310 	bic.w	r3, r3, #16
 8007fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6979      	ldr	r1, [r7, #20]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d103      	bne.n	8007fe6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe feb0 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ff4:	e00b      	b.n	800800e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7f8 fdea 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 8007ffc:	e007      	b.n	800800e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699a      	ldr	r2, [r3, #24]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0208 	orr.w	r2, r2, #8
 800800c:	619a      	str	r2, [r3, #24]
}
 800800e:	bf00      	nop
 8008010:	3758      	adds	r7, #88	; 0x58
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b0a6      	sub	sp, #152	; 0x98
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008026:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804e:	2b22      	cmp	r3, #34	; 0x22
 8008050:	f040 814f 	bne.w	80082f2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800805a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800805e:	e0f6      	b.n	800824e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800806a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800806e:	b2d9      	uxtb	r1, r3
 8008070:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008074:	b2da      	uxtb	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807a:	400a      	ands	r2, r1
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d053      	beq.n	800815a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d011      	beq.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80080be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2201      	movs	r2, #1
 80080d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	f043 0201 	orr.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d011      	beq.n	8008112 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00b      	beq.n	8008112 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2202      	movs	r2, #2
 8008100:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008108:	f043 0204 	orr.w	r2, r3, #4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d011      	beq.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800811e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2204      	movs	r2, #4
 8008130:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008138:	f043 0202 	orr.w	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fe fdf7 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d173      	bne.n	800824e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008188:	66bb      	str	r3, [r7, #104]	; 0x68
 800818a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800818e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e4      	bne.n	8008166 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3308      	adds	r3, #8
 80081a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081c0:	657a      	str	r2, [r7, #84]	; 0x54
 80081c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e3      	bne.n	800819c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d12e      	bne.n	8008248 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	f023 0310 	bic.w	r3, r3, #16
 8008204:	67bb      	str	r3, [r7, #120]	; 0x78
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820e:	643b      	str	r3, [r7, #64]	; 0x40
 8008210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b10      	cmp	r3, #16
 800822e:	d103      	bne.n	8008238 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2210      	movs	r2, #16
 8008236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fe fd87 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
 8008246:	e002      	b.n	800824e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7f8 fcc1 	bl	8000bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800824e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008252:	2b00      	cmp	r3, #0
 8008254:	d006      	beq.n	8008264 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	f47f aefe 	bne.w	8008060 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800826a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800826e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008272:	2b00      	cmp	r3, #0
 8008274:	d045      	beq.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800827c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008280:	429a      	cmp	r2, r3
 8008282:	d23e      	bcs.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	61fb      	str	r3, [r7, #28]
   return(result);
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800829a:	673b      	str	r3, [r7, #112]	; 0x70
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3308      	adds	r3, #8
 80082a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a14      	ldr	r2, [pc, #80]	; (800830c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80082bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f043 0320 	orr.w	r3, r3, #32
 80082d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6979      	ldr	r1, [r7, #20]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f0:	e007      	b.n	8008302 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0208 	orr.w	r2, r2, #8
 8008300:	619a      	str	r2, [r3, #24]
}
 8008302:	bf00      	nop
 8008304:	3798      	adds	r7, #152	; 0x98
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	08007d57 	.word	0x08007d57

08008310 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b0a8      	sub	sp, #160	; 0xa0
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800831e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	2b22      	cmp	r3, #34	; 0x22
 8008348:	f040 8153 	bne.w	80085f2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008352:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008356:	e0fa      	b.n	800854e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800836a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800836e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008372:	4013      	ands	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800837a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008380:	1c9a      	adds	r2, r3, #2
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d053      	beq.n	8008456 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d011      	beq.n	80083de <UART_RxISR_16BIT_FIFOEN+0xce>
 80083ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2201      	movs	r2, #1
 80083cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d4:	f043 0201 	orr.w	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80083ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2202      	movs	r2, #2
 80083fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008404:	f043 0204 	orr.w	r2, r3, #4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800840e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d011      	beq.n	800843e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800841a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2204      	movs	r2, #4
 800842c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008434:	f043 0202 	orr.w	r2, r3, #2
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d006      	beq.n	8008456 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fe fc79 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d175      	bne.n	800854e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008486:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800848a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e4      	bne.n	8008462 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e1      	bne.n	8008498 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d12e      	bne.n	8008548 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	f023 0310 	bic.w	r3, r3, #16
 8008504:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800850e:	647b      	str	r3, [r7, #68]	; 0x44
 8008510:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e6      	bne.n	80084f0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b10      	cmp	r3, #16
 800852e:	d103      	bne.n	8008538 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2210      	movs	r2, #16
 8008536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fe fc07 	bl	8006d54 <HAL_UARTEx_RxEventCallback>
 8008546:	e002      	b.n	800854e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7f8 fb41 	bl	8000bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800854e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	f47f aefa 	bne.w	8008358 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800856a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800856e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008572:	2b00      	cmp	r3, #0
 8008574:	d045      	beq.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800857c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008580:	429a      	cmp	r2, r3
 8008582:	d23e      	bcs.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	623b      	str	r3, [r7, #32]
   return(result);
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800859a:	677b      	str	r3, [r7, #116]	; 0x74
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085a4:	633a      	str	r2, [r7, #48]	; 0x30
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a14      	ldr	r2, [pc, #80]	; (800860c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80085bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f043 0320 	orr.w	r3, r3, #32
 80085d2:	673b      	str	r3, [r7, #112]	; 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e6      	bne.n	80085be <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085f0:	e007      	b.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0208 	orr.w	r2, r2, #8
 8008600:	619a      	str	r2, [r3, #24]
}
 8008602:	bf00      	nop
 8008604:	37a0      	adds	r7, #160	; 0xa0
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	08007eb7 	.word	0x08007eb7

08008610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_UARTEx_DisableFifoMode+0x16>
 800865e:	2302      	movs	r3, #2
 8008660:	e027      	b.n	80086b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2224      	movs	r2, #36	; 0x24
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0201 	bic.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008690:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e02d      	b.n	8008732 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2224      	movs	r2, #36	; 0x24
 80086e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f850 	bl	80087b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800874e:	2302      	movs	r3, #2
 8008750:	e02d      	b.n	80087ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2224      	movs	r2, #36	; 0x24
 800875e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f812 	bl	80087b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d108      	bne.n	80087da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087d8:	e031      	b.n	800883e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087da:	2308      	movs	r3, #8
 80087dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087de:	2308      	movs	r3, #8
 80087e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	0e5b      	lsrs	r3, r3, #25
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	0f5b      	lsrs	r3, r3, #29
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	7b3a      	ldrb	r2, [r7, #12]
 8008806:	4911      	ldr	r1, [pc, #68]	; (800884c <UARTEx_SetNbDataToProcess+0x94>)
 8008808:	5c8a      	ldrb	r2, [r1, r2]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800880e:	7b3a      	ldrb	r2, [r7, #12]
 8008810:	490f      	ldr	r1, [pc, #60]	; (8008850 <UARTEx_SetNbDataToProcess+0x98>)
 8008812:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008814:	fb93 f3f2 	sdiv	r3, r3, r2
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	7b7a      	ldrb	r2, [r7, #13]
 8008824:	4909      	ldr	r1, [pc, #36]	; (800884c <UARTEx_SetNbDataToProcess+0x94>)
 8008826:	5c8a      	ldrb	r2, [r1, r2]
 8008828:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800882c:	7b7a      	ldrb	r2, [r7, #13]
 800882e:	4908      	ldr	r1, [pc, #32]	; (8008850 <UARTEx_SetNbDataToProcess+0x98>)
 8008830:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008832:	fb93 f3f2 	sdiv	r3, r3, r2
 8008836:	b29a      	uxth	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	080089d0 	.word	0x080089d0
 8008850:	080089d8 	.word	0x080089d8

08008854 <memset>:
 8008854:	4402      	add	r2, r0
 8008856:	4603      	mov	r3, r0
 8008858:	4293      	cmp	r3, r2
 800885a:	d100      	bne.n	800885e <memset+0xa>
 800885c:	4770      	bx	lr
 800885e:	f803 1b01 	strb.w	r1, [r3], #1
 8008862:	e7f9      	b.n	8008858 <memset+0x4>

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	; (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	; (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	; (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	; (80088a8 <__libc_init_array+0x44>)
 8008878:	f000 f818 	bl	80088ac <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	080089e8 	.word	0x080089e8
 80088a0:	080089e8 	.word	0x080089e8
 80088a4:	080089e8 	.word	0x080089e8
 80088a8:	080089ec 	.word	0x080089ec

080088ac <_init>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr

080088b8 <_fini>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr
